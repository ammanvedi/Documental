/**
 * Created by ammanvedi on 25/01/2016.
 */


( function( Plugins, Utils, State ) {

	Utils.determineFunctions = function ( file,  sourceString, acornInstance, walk ) {


		var methodCount = 0;
		var ast;
		var pluginNames = Object.keys( Plugins );

		State.currentFunctionBoundaries = 0;


		try {
			ast = acornInstance.parse( sourceString, {
				locations: true,
				ranges: true,
				directSourceFile: true,
				onComment: Utils.commentFunction
			} );

			walk( ast, function ( node ) {

				//get Plugins
				for( x = 0; x < pluginNames.length; x++ ) {
					var pluginResult = Plugins[ pluginNames[ x ] ]( node );

					if( pluginResult ) {
						var body = sourceString.substring( pluginResult.sourceStart, pluginResult.sourceStop );
						var par = Utils.paramsToStringRepresentation( Utils.getSimpleParameters( pluginResult.rightside ) );
						methodCount++;
						var doc = Utils.findComments( pluginResult.rightside.loc );
						if ( doc == -1 ) {
							//console.log( 'method : ', name, ' not documented'  );
							var newdocstring = Utils.autoGenerateDocStub( sourceString, pluginResult.rightside, pluginResult.name );
							doc = doctrine.parse( newdocstring, { unwrap: true } );
						}

						pluginResult.name = Utils.useRulesDetermineNamespace( pluginResult.name, doc, pluginResult.sourceStart, pluginResult.sourceStop );
						//console.log( pluginResult.name );

						Utils.addMemberToSourceMap( State.sourceMap, pluginResult.name, doc, body );
						State.autocomplete.push( { n: pluginResult.name, t: pluginResult.terminal } );
						break;
					}
				}

			} );

		}catch( e ) {
			Utils.logError( 'source parsing failed on file ' + file );
			Utils.logError( 'message -  ' + e.toString() );
		}


		State.total += methodCount;
		Utils.clearCommentCache();
		return sourceString;
	};

} )( documentalCore.plugins, documentalCore.utils, documentalCore.state );