{"xhr":{"onCreate":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"xhr.onCreate"},{"title":"param","description":null,"type":null,"name":"request"}]},"Source":"xhr.onCreate = function (request) {\n            requests.push(request);\n        }"}},"PULSE":{"CLIENT":{"RUGBY":{"ResultsWidget":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the fixtures widget"}]},"Source":"PULSE.CLIENT.RUGBY.ResultsWidget = function( container, config, tournament )\n{\n    this.$container = $( container );\n    this.config = config;\n    this.tournament = tournament;\n\n    this.config.templates = {\n        match: \"templates/results/result.html\",\n        tournament : \"templates/results/tournament-results.html\"\n    };\n\n    this.matchList = new PULSE.CLIENT.RUGBY.Matches( container, 'results', config, tournament );\n}","prototype":{"getData":{"Documentation":{"description":"Calls the metaschedule model to request data from api with a given set of parameters\n    - 2 Calls are required to ensure that we always receive both upcoming and\n      complete matches","tags":[]},"Source":"PULSE.CLIENT.RUGBY.ResultsWidget.prototype.getData = function()\n{\n    var today = ( new Date() ).format( 'yyyy-mm-dd' ),\n        // scheduleRequestOptions = {\n        //     startDate: today,\n        //     states: [ 'U', 'L' ]\n        //  };//,\n        resultsRequestOptions = {\n            endDate: today,\n            states: [ 'C' ]\n        };\n\n    // this.metaSchedule.requestMetaScheduleMatchesData( { start: true, params: scheduleRequestOptions } );\n    this.metaSchedule.requestMetaScheduleMatchesData( { start: true, params: resultsRequestOptions } );\n}"},"setSubscriptions":{"Documentation":{"description":"Subscribes to tournament schedule and match scoring data events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.ResultsWidget.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.METASCHEDULE_MATCHES, function(e, params)\n    {\n        that.displayResults();\n    } );\n}"},"getMatchLinks":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"match"}]},"Source":"PULSE.CLIENT.RUGBY.ResultsWidget.prototype.getMatchLinks = function(match)\n{\n    links = {};\n    links['report'] ='/report';\n    links['mc'] = '/mc';\n\n    return links;\n}"},"displayResults":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.ResultsWidget.prototype.displayResults = function()\n{\n    var resultsMap = this.metaSchedule.getMatchModelsMappingByMonth('complete'),\n        config;\n\n    console.log(resultsMap);\n\n    for (key in resultsMap)\n    {\n        for (var i = 0; i < resultsMap[key].length; i++)\n        {\n            if (i == 0)\n            {\n                config = {fixture : resultsMap[key][i], month : key, links : this.getMatchLinks(resultsMap[key][i])};\n            }\n            else\n            {\n                config = {fixture : resultsMap[key][i], links : this.getMatchLinks(resultsMap[key][i])};\n            }\n\n            PULSE.CLIENT.Template.append(\n            this.templates.fixture,\n            $( this.container ).find('#Results'),\n            config\n            );\n        }\n    }\n}"}}},"getUrlGenerator":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.getUrlGenerator"},{"title":"param","description":null,"type":null,"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.getUrlGenerator = function( config )\n{\n    if( config )\n    {\n        return new PULSE.CLIENT.RUGBY.UrlGenerator( config );\n    }\n    if( window.urlGenerator === undefined )\n    {\n        window.urlGenerator = new PULSE.CLIENT.RUGBY.UrlGenerator();\n    }\n\n    return window.urlGenerator;\n}"},"UrlGenerator":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator = function( config )\n{\n    this.config = config || {};\n    this.forceProduction = false; // force production data\n\n    if( window.location.origin == 'http://localhost:8080' || ( window.location.href && window.location.href.indexOf( 'file://' ) > -1 ) )\n    {\n        this.config.defaultAccount = PULSE.CLIENT.CMS_ACCOUNT;\n        this.config.prodPlatform = this.config.prodPlatform || \"localhost:8080/syndicationapi/\";\n        this.config.testPlatform = this.config.testPlatform || \"localhost:8080/syndicationapi/\";\n        this.config.crmPlatform = \"localhost:8080/crm-api/\";\n    }\n    else if( window.location.href && window.location.href.search( 'media-extranet' ) > -1 )\n    {\n        this.config.prodPlatform = 'www.rugbyworldcup.com/media-extranet/p_cms_api/';\n        this.config.testPlatform = 'test2.pulselive.com/media-extranet/p_cms_api/';\n\n        if ( PULSE.CLIENT.isTest() )\n        {\n            this.config.crmPlatform = 'test2.pulselive.com/media-extranet/p_crm_api/';\n            this.config.webAuthPlatform = 'test2.pulselive.com/media-extranet/p_security_web_auth/';\n        }\n        else\n        {\n            this.config.crmPlatform = 'www.rugbyworldcup.com/media-extranet/p_crm_api/';\n            this.config.webAuthPlatform = 'www.rugbyworldcup.com/media-extranet/p_security_web_auth/';\n        }\n    }\n    else if( window.location.href &&\n        ( window.location.href.search( 'media-extranet' ) > -1 ||\n            window.location.href.search( 'test2.pulselive' ) > -1 ||\n            window.location.href.search( 'rugbyworldcup' ) > -1 ) )\n    {\n        this.config.defaultAccount = PULSE.CLIENT.CMS_ACCOUNT;\n        this.config.prodPlatform = \"cmsapi.pulselive.com/\";\n        // this.config.testPlatform = \"cmsapitest.pulselive.com/\";\n        // this.config.testPlatform = \"54.208.164.61:8080/\";\n        this.config.testPlatform = \"cmsapitest.pulselive.com/\";\n        if ( PULSE.CLIENT.isTest() )\n        {\n            this.config.webAuthPlatform = 'test2.pulselive.com/media-extranet/p_security_web_auth/';\n        }\n        else\n        {\n            this.config.webAuthPlatform = 'www.rugbyworldcup.com/media-extranet/p_security_web_auth/';\n        }\n\n        if ( PULSE.CLIENT.isTest() )\n        {\n            this.config.crmPlatform = \"54.173.49.57:8080/\";\n        }\n        else\n        {\n            this.config.crmPlatform = \"crmapi.pulselive.com/\";\n        }\n    }\n    else\n    {\n        this.config.defaultAccount = PULSE.CLIENT.CMS_ACCOUNT;\n        this.config.prodPlatform = \"cmsapi.pulselive.com/\";\n        this.config.testPlatform = \"54.208.164.61:8080/\";\n        // this.config.testPlatform = \"cmsapitest.pulselive.com/\";\n\n        if ( PULSE.CLIENT.isTest() )\n        {\n            this.config.crmPlatform = \"54.173.49.57:8080/\";\n        }\n        else\n        {\n            this.config.crmPlatform = \"crmapi.pulselive.com/\";\n        }\n    }\n\n    this.config.canaryDataUrl = \"http://dynamic.pulselive.com/dynamic/data/canary/\";\n    this.config.playerImageUrl = \" http://irb-static-files.s3.amazonaws.com/rwc2015/person-images-site/\"\n    //this.config.playerImageUrl = \"http://dynamic.pulselive.com/dynamic/client/irb/static/i/players/\"\n    //this.config.crmPlatform = \"http://crmapi.pulselive.com/\"\n\n    this.statsURLs = {};\n\n    this.updateCoreDataUrl();\n}","prototype":{"setProduction":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"bool"}]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.setProduction = function( bool )\n{\n    this.forceProduction = bool;\n    this.updateCoreDataUrl();\n}"},"updateCoreDataUrl":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"protocol"}]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.updateCoreDataUrl = function( protocol )\n{\n    this.config.coreDataUrl = this.forceProduction || !PULSE.CLIENT.isTest() ? this.config.prodPlatform : this.config.testPlatform;\n    this.config.coreDataUrl = ( protocol ? protocol + '://' : '//' ) + this.config.coreDataUrl;\n}"},"getCRMUrl":{"Documentation":{"description":"Retrieve the core URL for building requests to the CRM Platform","tags":[{"title":"param","description":"optional protocol (http, https etc.), defaults to HTTP if not set","type":{"type":"NameExpression","name":"String"},"name":"protocol"},{"title":"return","description":"the URL","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.getCRMUrl = function( protocol )\n{\n    return ( protocol ? protocol + '://' : '//' ) + this.config.crmPlatform;\n}"},"getWebAuthUrl":{"Documentation":{"description":"Retrieve the core URL for building Web Authentication requests (only available as HTTPS)","tags":[{"title":"return","description":"the URL","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.getWebAuthUrl = function()\n{\n    return 'https://' + this.config.webAuthPlatform;\n}"},"makeContentUrl":{"Documentation":{"description":"Data urls","tags":[]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.makeContentUrl = function( account, type, language, id )\n{\n    return this.config.coreDataUrl + 'content/' + account + '/' + type + \"/\" + language + '/' + id;\n}"},"makeContentQueryUrl":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"account"},{"title":"param","description":null,"type":null,"name":"language"},{"title":"param","description":null,"type":null,"name":"pageSize"},{"title":"param","description":null,"type":null,"name":"page"},{"title":"param","description":null,"type":null,"name":"tagNames"}]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.makeContentQueryUrl = function( account, language, pageSize, page, tagNames )\n{\n    var url = this.config.coreDataUrl + 'content/' + account + '/' + this.config.type + \"/\" + language + '/',\n        paramsString = this.prepareParams( { \"pageSize\": pageSize, \"page\": page, \"tagNames\": tagNames } );\n\n    return url + paramsString;\n}"},"makeContentQuery":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"account"},{"title":"param","description":null,"type":null,"name":"language"},{"title":"param","description":null,"type":null,"name":"params"}]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.makeContentQuery = function( account, language, params )\n{\n    var url = this.config.coreDataUrl + 'content/' + account + '/' + this.config.type + \"/\" + language + '/',\n        paramsString = this.prepareParams( params );\n\n    return url + paramsString;\n}"},"makeSearchQuery":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"account"},{"title":"param","description":null,"type":null,"name":"terms"},{"title":"param","description":null,"type":null,"name":"language"},{"title":"param","description":null,"type":null,"name":"type"},{"title":"param","description":null,"type":null,"name":"sort"},{"title":"param","description":null,"type":null,"name":"pageSize"},{"title":"param","description":null,"type":null,"name":"page"},{"title":"param","description":null,"type":null,"name":"tagNames"},{"title":"param","description":null,"type":null,"name":"eventGroup"}]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.makeSearchQuery = function( account, terms, language, type, sort, pageSize, page, tagNames, eventGroup )\n{\n    var url = this.config.coreDataUrl + 'search/' + account + '/';\n    params = this.prepareParams( { 'terms': terms, 'lang': language, 'type': type,'sort': sort,\n        'size': pageSize, 'start': page, 'tags': tagNames, 'eventGroup': eventGroup } );\n\n    return url + params;\n}"},"makeMixedContentUrl":{"Documentation":{"description":"Create a mixed data content URL","tags":[]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.makeMixedContentUrl = function( account, language, params )\n{\n    return this.config.coreDataUrl + 'content/' + account + '/' + language + '/' + this.prepareParams( params );\n}"},"makeDataUrl":{"Documentation":{"description":"Constructs an api request for a given rugby data endpoint\n    - If 'this' url constructor instance is tournament scoped (created with a\n      tournamentName in config) then this is included after endpoint","tags":[{"title":"param","description":"Array of path directories to be joined by '/' ( e.g. [ match, matchId, summary ] )","type":{"type":"NameExpression","name":"Array"},"name":"pathArray"},{"title":"param","description":"Params object containing various parameters to be added to the request url","type":{"type":"NameExpression","name":"Object"},"name":"params"},{"title":"return","description":"API url","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.makeDataUrl = function( pathArray, params )\n{\n    var pathString = '',\n        paramsString = '',\n        checkedPathArray = [],\n        url, i;\n\n    for( i = 0; i < pathArray.length; i++ )\n    {\n        if( pathArray[ i ] )\n        {\n            checkedPathArray.push( pathArray[ i ] );\n        }\n    }\n\n    pathString = checkedPathArray.join( '/' );\n    paramsString = params ? this.prepareParams( params ) : '';\n    url = this.config.coreDataUrl + 'rugby/' + pathString + paramsString;\n\n    return url;\n}"},"createUrl":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"type"},{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.createUrl = function( type, id )\n{\n    // if ( type.indexOf( 'gallery' ) > -1 )\n    // {\n    //     type = 'photo-gallery';\n    // }\n\n    return '/' + type + '/' + id;\n}"},"getPlayerImg":{"Documentation":{"description":"Creates a player image URl given a playerId, size and extension","tags":[{"title":"param","description":"Id of the player","type":{"type":"NameExpression","name":"Int"},"name":"playerId"},{"title":"param","description":"Size of the image","type":{"type":"NameExpression","name":"String"},"name":"size"},{"title":"param","description":"Optional file extension","type":{"type":"NameExpression","name":"String"},"name":"extension"},{"title":"return","description":"Returns the url for a player image","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.getPlayerImg = function ( playerId, size, extension )\n{\n    return this.config.playerImageUrl + size + \"/\" + playerId + ( \".\" + ( extension || \"png\" ) );\n}"},"getShadowPlayerImg":{"Documentation":{"description":"Creates a shadow player image given a size dimension","tags":[{"title":"param","description":"Size of the image","type":{"type":"NameExpression","name":"String"},"name":"imgSize"},{"title":"return","description":"Player image url","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.getShadowPlayerImg = function( imgSize )\n{\n    return this.getPlayerImg( 'Photo-Missing', imgSize );\n}"},"setPlayerImageLoader":{"Documentation":{"description":"Load a player image","tags":[{"title":"param","description":"Id of the player","type":{"type":"NameExpression","name":"Int"},"name":"playerId"},{"title":"param","description":"Size of the image","type":{"type":"NameExpression","name":"String"},"name":"imgSize"},{"title":"param","description":"Container for the image","type":{"type":"NameExpression","name":"Object"},"name":"imageWrapper"},{"title":"param","description":"Optional file extension","type":{"type":"NameExpression","name":"String"},"name":"imgExtension"}]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.setPlayerImageLoader = function( playerId, imgSize, imageWrapper, imgExtension )\n{\n    var main = this.getPlayerImg( playerId, imgSize, imgExtension ),\n        missing = this.getPlayerImg( 'Photo-Missing', imgSize );\n\n    var loadAttempted = false;\n    $( imageWrapper )\n        .each( function() {\n            if ( !this.complete )\n            {\n                $(this).data( 'loadAttempted', true );\n            }\n        } )\n        .error(function() {\n            if ( ! $( imageWrapper ).data( 'error' ) )\n            {\n                $( imageWrapper ).attr( 'data-error', true );\n                $( imageWrapper ).attr( 'src', missing );\n            }\n        })\n        .attr( 'src', main )\n}"},"makeTeamUrl":{"Documentation":{"description":"Rugby page URLs","tags":[{"title":"param","description":"Team object to construct URL from","type":{"type":"NameExpression","name":"Team"},"name":"params"}]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.makeTeamUrl = function( team, player )\n{\n    var teamMap = {\n        '33': 'wales',\n        '34': 'england',\n        '35': 'scotland',\n        '36': 'ireland',\n        '37': 'new-zealand',\n        '38': 'australia',\n        '39': 'south-africa',\n        '40': 'argentina',\n        '41': 'italy',\n        '42': 'france',\n        '45': 'samoa',\n        '46' : 'fiji',\n        '47': 'tonga',\n        '49': 'japan',\n        '50': 'canada',\n        '51': 'usa',\n        '52': 'romania',\n        '58': 'namibia',\n        '68': 'uruguay',\n        '720': 'georgia'\n    }, url = '/' + teamMap[ team.id ];\n\n    // Append player URL if necessary\n    if (player) {\n        url += '/player/' + player.id;\n    }\n\n    return url;\n}"},"makeStatsUrl":{"Documentation":{"description":"Rugby stats URLs","tags":[]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.makeStatsUrl = function( type, scope, metric, teamId )\n{\n    var url = '/stats/' + ( scope.toLowerCase() === 'event' ? '2015' : 'alltime' ) + '/' + type + '/' + metric.toLowerCase();\n    if (teamId) {\n        url += '/' + teamId;\n    }\n    return url;\n}"},"makeNewerThanLiveBlogUrl":{"Documentation":{"description":"LIVE BLOG URL GENERATORS","tags":[]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.makeNewerThanLiveBlogUrl = function( id, newerThan, maxItems, params )\n{\n    var url = this.makeLiveBlogUrl( id, maxItems );\n\n    url += \"newerThan/\" + newerThan + \"/\";\n\n    if( params )\n    {\n        $.extend( params, { \"size\": maxItems } );\n    }\n    else\n    {\n        params = { \"size\": maxItems };\n    }\n\n    return url + this.prepareParams( params );\n}"},"makeBelowPositionBlogUrl":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"id"},{"title":"param","description":null,"type":null,"name":"position"},{"title":"param","description":null,"type":null,"name":"maxItems"},{"title":"param","description":null,"type":null,"name":"params"}]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.makeBelowPositionBlogUrl = function( id, position, maxItems, params )\n{\n    var url = this.makeLiveBlogUrl( id, maxItems );\n\n    url += \"below/\" + position + \"/\";\n\n    if( params )\n    {\n        $.extend( params, { \"size\": maxItems } );\n    }\n    else\n    {\n        params = { \"size\": maxItems };\n    }\n\n    return url + this.prepareParams( params );\n}"},"makeAbovePositionBlogUrl":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"id"},{"title":"param","description":null,"type":null,"name":"position"},{"title":"param","description":null,"type":null,"name":"maxItems"},{"title":"param","description":null,"type":null,"name":"params"}]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.makeAbovePositionBlogUrl = function( id, position, maxItems, params )\n{\n    var url = this.makeLiveBlogUrl( id, maxItems );\n\n    url += \"above/\" + position + \"/\";\n\n    if( params )\n    {\n        $.extend( params, { \"size\": maxItems } );\n    }\n    else\n    {\n        params = { \"size\": maxItems };\n    }\n\n    return url + this.prepareParams( params );\n}"},"makeLiveBlogUrl":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"id"},{"title":"param","description":null,"type":null,"name":"maxItems"},{"title":"param","description":null,"type":null,"name":"params"}]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.makeLiveBlogUrl = function( id, maxItems, params )\n{\n    var url = this.config.coreDataUrl + \"liveblog/\" + this.config.defaultAccount + \"/\" + id + \"/\" + PULSE.CLIENT.LANGUAGE + \"/\";\n    if( params )\n    {\n        $.extend( params, { \"size\": maxItems } );\n    }\n    else\n    {\n        params = { \"size\": maxItems };\n    }\n\n    return url + this.prepareParams( params );\n}"},"makeLiveBlogsQueryUrl":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"params"}]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.makeLiveBlogsQueryUrl = function( params )\n{\n    var url = this.config.coreDataUrl + \"liveblog/\" + this.config.defaultAccount + \"/\" + PULSE.CLIENT.LANGUAGE + \"/\";\n\n    return url + ( params ? this.prepareParams( params ) : '' );\n}"},"makePollDataUrl":{"Documentation":{"description":"CANARY URL GENERATORS","tags":[]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.makePollDataUrl = function( customer )\n{\n    if( this.config.customerDataUrl )\n    {\n        return this.config.customerDataUrl + 'poll.js';\n    }\n    else\n    {\n        var year = this.config.year || new Date().getFullYear();\n        return 'http://dynamic.pulselive.com/dynamic/data/' + ( customer || 'irb' ) + '/' + year + '/' + this.config.tournamentName + '/poll.js';\n    }\n}"},"makeTwitterDataUrl":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"fileName"}]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.makeTwitterDataUrl = function( fileName )\n{\n    return this.config.canaryDataUrl + fileName + \".js\";\n}"},"makeEventGroupUrl":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"account"},{"title":"param","description":null,"type":null,"name":"eventGroup"},{"title":"param","description":null,"type":null,"name":"type"},{"title":"param","description":null,"type":null,"name":"language"},{"title":"param","description":null,"type":null,"name":"params"}]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.makeEventGroupUrl = function( account, eventGroup, type, language, params )\n{\n    var url = this.getCRMUrl() + account + '/eventgroup/' + ( language ? language + '/' : '' ) + eventGroup;\n\n    if ( type )\n    {\n        url = url + '/' + type;\n    }\n\n    if ( params )\n    {\n        url = url + this.prepareParams( params )\n    }\n    return url;\n}"},"makeEventUrl":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"account"},{"title":"param","description":null,"type":null,"name":"eventId"},{"title":"param","description":null,"type":null,"name":"language"}]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.makeEventUrl = function( account, eventId, language )\n{\n    var url = this.getCRMUrl() + account + '/event/' + language + '/' + eventId;\n\n    return url;\n}"},"makeWebLoginUrl":{"Documentation":{"description":"User login URL","tags":[{"title":"return","description":"the user login URL","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.makeWebLoginUrl = function()\n{\n    return this.getWebAuthUrl() + 'login';\n}"},"makeWebLogoutUrl":{"Documentation":{"description":"User logout URL","tags":[{"title":"return","description":"the user logout URL","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.makeWebLogoutUrl = function()\n{\n    return this.getWebAuthUrl() + 'logout';\n}"},"makeWebChangePasswordUrl":{"Documentation":{"description":"Change Password request URL","tags":[{"title":"return","description":"the change password request URL","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.makeWebChangePasswordUrl = function()\n{\n    return this.getWebAuthUrl() + 'changePassword';\n}"},"makeWebResetPasswordUrl":{"Documentation":{"description":"Reset Password request URL","tags":[{"title":"return","description":"the reset password request URL","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.makeWebResetPasswordUrl = function()\n{\n    return this.getWebAuthUrl() + 'resetPassword';\n}"},"makeWebForgotPasswordUrl":{"Documentation":{"description":"Forgot Password request URL","tags":[{"title":"return","description":"forgot password request URL","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.makeWebForgotPasswordUrl = function()\n{\n    return this.getWebAuthUrl() + 'forgotPassword';\n}"},"makeContactListSubscriptionUrl":{"Documentation":{"description":"URL for subscribing to a list of Contact Lists","tags":[{"title":"return","description":"the url for subscribing to contact lists","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.makeContactListSubscriptionUrl = function()\n{\n    return this.getCRMUrl() + 'subscribe/list';\n}"},"makeContactListUnsubscriptionUrl":{"Documentation":{"description":"URL for unsubscribing to a list of Contact Lists","tags":[{"title":"return","description":"the url for unsubscribing to contact lists","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.makeContactListUnsubscriptionUrl = function()\n{\n    return this.getCRMUrl() + 'unsubscribe/list';\n}"},"makeContactSubscriptionListUrl":{"Documentation":{"description":"Contact Subscription List URL, for reqeusting the list of Contact Lists a user is subscribed to","tags":[{"title":"return","description":"the request URL for requesting the user's subscriptions","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.makeContactSubscriptionListUrl = function()\n{\n    return this.getCRMUrl() + 'contact/getMemberships';\n}"},"makeUpdateContactMobileUrl":{"Documentation":{"description":"Update Contact Mobile Number URL, for updating the phone number of a contact","tags":[{"title":"return","description":"the request URL for updating a phone number","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.makeUpdateContactMobileUrl = function()\n{\n    return this.getCRMUrl() + 'contact/update/mobile';\n}"},"prepareParams":{"Documentation":{"description":"Takes an array of url parameters and generates a string ready to append to a url\n    - Worth noting that this functionality exists in PULSE.CLIENT.Utils.prepareParams\n      and does not require the user to create an instance of the url generator","tags":[{"title":"param","description":"Collection of url param keys and values","type":{"type":"NameExpression","name":"Object"},"name":"params"},{"title":"return","description":"Url param string","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.UrlGenerator.prototype.prepareParams = function( params )\n{\n    var paramsArray = [],\n        paramsString;\n\n    $.each( params, function( key, value )\n    {\n        if( value )\n        {\n            value = [].concat( value ).join( \",\" );\n            var keyValuePair = [ key, value ];\n            paramsArray.push( keyValuePair.join( \"=\" ) );\n        }\n    } );\n\n    paramsString = paramsArray.length ? \"?\" + paramsArray.join( \"&\" ) : \"\";\n\n    return paramsString;\n}"}}},"CountdownText":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.CountdownText"},{"title":"param","description":null,"type":null,"name":"$container"},{"title":"param","description":null,"type":null,"name":"endTime"}]},"Source":"PULSE.CLIENT.RUGBY.CountdownText = function( $container, endTime )\n{\n    var that = this;\n\n    this.$container = $container\n    this.endTime = endTime;\n\n    this.$days = this.$container.find( '.daysSpan' );\n    this.$hours = this.$container.find( '.hoursSpan' );\n    this.$mins = this.$container.find( '.minsSpan' );\n    this.$secs = this.$container.find( '.secsSpan' );\n\n    if ( this.endTime )\n    {\n        this.liveRefresh = setInterval( function()\n        {\n            that.refreshTime();\n        }, 1000 );\n    }\n}","prototype":{"stopCountdown":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.CountdownText.prototype.stopCountdown = function()\n{\n    clearInterval( this.liveRefresh );\n}"},"refreshTime":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.CountdownText.prototype.refreshTime = function()\n{\n    var now = new Date().getTime();\n    var start = this.endTime; //Date( this.start_date )\n\n    var timeGap = start - now;\n\n    // console.log(time_lasting);\n\n    if( timeGap <= 0)\n    {\n        this.$days.html( '00' );\n        this.$hours.html( '00' );\n        this.$mins.html( '00' );\n        this.$secs.html( '00' );\n        this.stopCountdown();\n    }\n    else\n    {\n        this.$days.html( '30' );\n        this.$hours.html( '30' );\n        this.$mins.html( '30' );\n        this.$secs.html( '30' );\n        var days = Math.floor( ( timeGap  / 1000 ) / ( 60 * 60 * 24 ) );\n\n        if ( days < 10 )\n        {\n            this.$days.html( '0' + days );\n        }\n        else\n        {\n            this.$days.html( days );\n        }\n\n        var daySecs = parseInt( days, 10 ) * 24 * 60 * 60;\n        var hours = Math.floor( ( timeGap / 1000 - daySecs ) / ( 60 * 60 ) );\n        if( hours < 10)\n        {\n            this.$hours.html( '0' + hours );\n        }\n        else\n        {\n            this.$hours.html( hours );\n        }\n        var hourSecs = parseInt( hours, 10 ) * ( 60 * 60 );\n        var minutes = Math.floor( ( timeGap / 1000 - daySecs - hourSecs ) / 60 );\n        if( minutes < 10)\n        {\n            this.$mins.html( '0' + minutes );\n        }\n        else\n        {\n            this.$mins.html( minutes );\n        }\n        var minSecs = parseInt( minutes, 10 ) * 60;\n        var seconds = Math.floor( timeGap / 1000 - daySecs - minSecs - hourSecs );\n        if( seconds < 10)\n        {\n            this.$secs.html( '0' + seconds );\n        }\n        else\n        {\n            this.$secs.html( seconds );\n        }\n    }\n}"}}},"Matches":{"Documentation":{"description":"For matches - referenced by fixtures and results widgets","tags":[{"title":"constructor","description":null,"type":null,"name":null}]},"Source":"PULSE.CLIENT.RUGBY.Matches = function( container, matchListType, config, tournament )\n{\n    this.$container = $( container );\n    this.config = config;\n    this.tournament = tournament;\n\n    this.$filtersContainer = this.$container.find( '.filters' );\n    this.$matchesContainer = this.$container.find( '#Matches' );\n    this.$filterDropdowns = this.$container.find( '.filterDropDown' );\n    this.$pagination = this.$container.find( '.pagination' );\n\n    this.$calendarButton = this.$container.find( '#allCalendar' );\n\n    this.matchListType = matchListType;\n    this.pageNum = 0;\n    this.timeUpper = 3;\n\n    this.matches = [];\n\n    this.init = true;\n    this.setSubscriptions();\n\n    if ( this.config && this.config.rankings )\n    {\n        this.rankings = new PULSE.CLIENT.RUGBY.Rankings( 'mru' );\n    }\n    // this.rankings.getRankingsData( {\n    //     start: true\n    // } );\n    this.rankingTeams = [];\n    //this.rankingTeams = that.ranking.getTeams();\n\n    this.viewYear = false;\n\n    this.setDropdowns = true;\n    this.dropdowns = [];\n\n    this.templates = {\n        match: config.templates.match,\n        tournament: config.templates.tournament,\n        filterContainer: \"templates/filters/filter-container.html\",\n        filterDropdown: \"templates/filters/filter-dropdown.html\",\n        filterCountry: \"templates/filters/filter-country.html\",\n        filterReset: \"templates/filters/filter-reset.html\"\n    };\n\n    this.allTemplates = [];\n    this.allTemplates.push( \"templates/filters/filter-all-time.html\" );\n    this.allTemplates.push( \"templates/filters/filter-all-country.html\" );\n    this.allTemplates.push( \"templates/filters/filter-all-event.html\" );\n\n    // this.tournament = new PULSE.CLIENT.RUGBY.Tournament( { tournamentName: '1023' } );\n\n    // Execution is different for tournament scoped matches and all matches\n    if ( this.tournament )\n    {\n        this.filters = [\n            {\n                text: PULSE.I18N.lookup( 'action.select.team' ),\n                active: true\n            },\n            {\n                text: PULSE.I18N.lookup( 'action.select.venue' ),\n                active: true\n            },\n            {\n                text: PULSE.I18N.lookup( 'action.select.stage' ),\n                active: true\n            }\n        ];\n        this.getFilters( this.filters );\n        this.template = this.templates.tournament;\n\n        if ( !this.tournament.schedule.scheduleLoaded )\n        {\n            this.tournament.schedule.getScheduleData(\n            {\n                start: true\n            } );;\n        }\n    }\n    else\n    {\n        if ( this.matchListType === 'fixtures' )\n        {\n            this.filters = [\n            {\n                text: 'NEXT 3 MONTHS',\n                active: true\n            },\n            {\n                text: 'COUNTRY',\n                active: true\n            },\n            {\n                text: 'EVENT',\n                active: false\n            } ];\n        }\n        else\n        {\n            this.filters = [\n            {\n                text: 'PAST 3 MONTHS',\n                active: true\n            },\n            {\n                text: 'COUNTRY',\n                active: true\n            },\n            {\n                text: 'EVENT',\n                active: false\n            } ];\n        }\n        this.getFilters( this.filters );\n\n        this.continents = [ 'Africa', 'Europe', 'Asia', 'Americas', 'Oceania' ];\n\n        var params = PULSE.CLIENT.Util.parseUrlParameters();\n\n        if ( 'union' in params )\n        {\n            var startUnion = params.union;\n            if ( startUnion in PULSE.CLIENT.RUGBY.UNION_LOOK_UP )\n            {\n                this.startCountry = PULSE.CLIENT.RUGBY.UNION_LOOK_UP[ startUnion ];\n                this.startContinent = PULSE.CLIENT.getContinentFromCountry( this.startCountry );\n                //console.log( this.startContinent );\n            }\n        }\n\n        if ( 'country' in params )\n        {\n            var isInteger = /^\\+?(0|[1-9]\\d*)$/.test( params.country );\n            if ( isInteger )\n            {\n                this.startContinent = PULSE.CLIENT.getContinentFromCountry( parseInt( params.country ) );\n                if ( this.startContinent )\n                {\n                    this.startCountry = parseInt( params.country );\n                }\n            }\n        }\n\n        this.template = this.templates.match;\n        //this.populateGeneralFilters();\n        //this.setListeners();\n        this.metaSchedule = new PULSE.CLIENT.RUGBY.Schedule();\n        this.populateGeneralFilters();\n        this.$datePicker = this.$filterDropdowns.find( '#datePicker' );\n        this.setListeners();\n        this.setGeneralListeners();\n        if ( this.matchListType === 'results' )\n        {\n            this.setResultListeners();\n        }\n\n        if ( !this.startCountry )\n        {\n            this.getData();\n        }\n    }\n}","prototype":{"getFilters":{"Documentation":{"description":"Publishes the filter headings for the schedule.","tags":[{"title":"param","description":"Array of objects in the form:\n   - text : Text in the filter header e.g. TEAM\n   - active : A Boolean to determine whether the dropdown is active from the start","type":{"type":"NameExpression","name":"Array"},"name":"filters"}]},"Source":"PULSE.CLIENT.RUGBY.Matches.prototype.getFilters = function( filters )\n{\n    var i, filteredClass, filterId;\n\n    for ( i = 0; i < filters.length; i++ )\n    {\n        filterClass = \"button filter op\" + i;\n        filterId = \"dropdown\" + i;\n\n        if ( filters[ i ].active )\n        {\n            filterClass = filterClass + ' selected';\n        }\n\n        PULSE.CLIENT.Template.append(\n            this.templates.filterContainer,\n            this.$filtersContainer,\n            {\n                text: filters[ i ].text,\n                filterClass: filterClass,\n                filterId: filterId\n            }\n        );\n    }\n\n    PULSE.CLIENT.Template.append(\n        this.templates.filterReset,\n        this.$filtersContainer\n    );\n\n}"},"populateGeneralFilters":{"Documentation":{"description":"Populates the dropdown filters for all fixtures/results","tags":[{"title":"return","description":"[description]","type":{"type":"ArrayType","elements":[{"type":"NameExpression","name":"type"}]}}]},"Source":"PULSE.CLIENT.RUGBY.Matches.prototype.populateGeneralFilters = function()\n{\n    var data = [],\n        i, j, last, dropdownOptions;\n\n    if ( this.matchListType === 'fixtures' )\n    {\n        data.push(\n        {\n            main: [ 'Next 3 months', 'Next 6 months', 'Next 12 months', 'All' ],\n            mainTitle: 'Period'\n        } );\n    }\n    else\n    {\n        data.push(\n        {\n            main: [ 'Past 3 months', 'Past 6 months', 'Past 12 months', 'All' ],\n            mainTitle: 'Period'\n        } );\n    }\n    data.push(\n    {\n        main: this.continents.concat( [ 'All' ] ),\n        mainTitle: 'Region'\n    } );\n    data.push( undefined );\n\n    // Loops through the data, creates a dropdown menu for each and populates their dropdown list\n    for ( i = 0; i < data.length; i++ )\n    {\n        if ( this.init || i > 1 )\n        {\n\n            $( this.$filterDropdowns[ i ] ).html( '' );\n\n            // for( j = 0; j < data[ i ].length; j++ )\n            // {\n            //     last = false;\n            //     if( j == data[ i ].length - 1 )\n            //     {\n            //         last = true;\n            //     }\n\n            //     PULSE.CLIENT.Template.append(\n            //         this.templates.filterDropdown,\n            //         this.$filterDropdowns[ i ],\n            //         { option : data[ i ][ j ], last : last }\n            //     );\n            // }\n\n            PULSE.CLIENT.Template.append(\n                this.allTemplates[ i ],\n                this.$filterDropdowns[ i ],\n                {\n                    dropdown: data[ i ]\n                }\n            );\n        }\n\n        // Dropdowns are initialised at the start and refreshed when the matches are filtered\n        if ( this.setDropdowns )\n        {\n            dropdownOptions = {\n                'dropdownId': 'Filter-' + i,\n                'itemsContainer': this.$filterDropdowns[ i ],\n                'currentContainer': '#dropdown' + i,\n                'dropdownContainer': this.$filterDropdowns[ i ],\n                'addClass': 'selected',\n                'closeSpan': '.drop-down'\n                    //'addCurrent' : '<span class=\"icon drop-down\"></span>'\n            };\n\n            if ( i == data.length - 1 )\n            {\n                dropdownOptions.notUsable = true;\n            }\n\n            if ( i === 0 )\n            {\n                dropdownOptions.itemContainer = '.times';\n            }\n            else\n            {\n                dropdownOptions.itemContainer = '.option';\n            }\n\n            this.dropdowns.push( new PULSE.CLIENT.UI.DropdownMenu( this.$container,\n                dropdownOptions ) );\n\n            // if( i == 0 && this.matchListType === 'results' )\n            // {\n            //     secondaryDropdownOptions = {\n            //         'dropdownId' : 'Secondary-' + i,\n            //         'currentContainer' : $( this.dropdowns[ i ].$itemList[ this.dropdowns[ i ].$itemList.length - 1 ] ),\n            //         'addClass' : 'selected',\n            //         'itemContainer' : '.decade',\n            //         'dropdownContainer' : $( this.$filterDropdowns[ i ] ).find('#secondaryDropdown'),\n            //         'itemsContainer' : $( this.$filterDropdowns[ i ] ).find('#secondaryDropdown')\n            //     }\n            //     this.secondaryDropdown = new PULSE.CLIENT.UI.DropdownMenu( this.$container, secondaryDropdownOptions );\n            // }\n\n            if ( i == data.length - 1 )\n            {\n                this.$countryDivider = this.dropdowns[ 1 ].$dropdownContainer.find(\n                    '#countryHeader' );\n                this.setDropdowns = false;\n            }\n        }\n        else\n        {\n            this.dropdowns[ i ].refreshItems();\n\n            if ( this.dropdowns[ 2 ].isUsable() && ( !this.newEvent ) )\n            {\n                this.getEvents( true );\n            }\n            this.newEvent = false;\n\n        }\n    }\n\n    var currentText = this.dropdowns[ 0 ].$currentContainer.text().toLowerCase();\n\n    // For the time dropdown, the 3 months button is selected by default ( when no other time has\n    // been chosen )\n    if ( currentText.indexOf( '3 months' ) > -1 )\n    {\n        $( this.dropdowns[ 0 ].$itemList[ 0 ] ).addClass( 'selected' );\n    }\n}"},"populateTournamentFilters":{"Documentation":{"description":"Populates the dropdown items for tournaments and initialises the dropdown menus on the first pass","tags":[{"title":"return","description":"[description]","type":{"type":"ArrayType","elements":[{"type":"NameExpression","name":"type"}]}}]},"Source":"PULSE.CLIENT.RUGBY.Matches.prototype.populateTournamentFilters = function( index )\n{\n    var data = [],\n        cascading = [ true, true, true ],\n        i, j, last, dropdownOptions, dataClasses;\n\n    // Finds teams, venues and phases from the schedule\n    data.push( this.schedule.getTeamListFromSchedule( false, cascading[ 0 ] ) );\n    data.push( this.schedule.getVenueListFromSchedule( false, cascading[ 1 ] ) );\n    data.push( this.schedule.getPhaseListFromSchedule( false, cascading[ 2 ] ) );\n\n    dataClasses = [ 'optionContianer', 'optionContianer venue', 'optionContianer' ];\n\n    // Adds an 'All' button for filters which have been altered\n    if ( index )\n    {\n        for ( i = 0; i < index.length; i++ )\n        {\n            if ( index[ i ] )\n            {\n                data[ i ].push( 'All' );\n            }\n        }\n    }\n\n    // Loops through the data, creates a dropdown menu for each and populates their dropdown list\n    for ( i = 0; i < data.length; i++ )\n    {\n        $( this.$filterDropdowns[ i ] ).html( '' );\n\n        for ( j = 0; j < data[ i ].length; j++ )\n        {\n            last = false;\n            if ( j == data[ i ].length - 1 )\n            {\n                last = true;\n            }\n\n            PULSE.CLIENT.Template.append(\n                this.templates.filterDropdown,\n                this.$filterDropdowns[ i ],\n                {\n                    option: data[ i ][ j ],\n                    last: last,\n                    dataClass: dataClasses[ i ]\n                }\n            );\n        }\n\n        // Dropdowns are initialised at the start and refreshed when the matches are filtered\n        if ( this.setDropdowns )\n        {\n            dropdownOptions = {\n                'dropdownId': 'Filter-' + i,\n                'itemsContainer': this.$filterDropdowns[ i ],\n                'itemContainer': '.option',\n                'currentContainer': '#dropdown' + i,\n                'dropdownContainer': this.$filterDropdowns[ i ],\n                'addClass': 'selected',\n                'closeSpan': '.drop-down'\n                    //'addCurrent' : '<span class=\"icon drop-down\"></span>'\n            };\n\n            this.dropdowns.push( new PULSE.CLIENT.UI.DropdownMenu( this.$container,\n                dropdownOptions ) );\n\n            if ( i == data.length - 1 )\n            {\n                this.setDropdowns = false;\n            }\n        }\n        else\n        {\n            this.dropdowns[ i ].refreshItems();\n        }\n    }\n}"},"getData":{"Documentation":{"description":"Calls the metaschedule model to request data from api with a given set of parameters\n    - 2 Calls are required to ensure that we always receive both upcoming and\n      complete matches","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Matches.prototype.getData = function( eventFilter )\n{\n    var today = ( new Date() ).format( 'yyyy-mm-dd' ),\n        toDate = ( new Date() ),\n        todayString = '',\n        toDateMonth = toDate.getMonth();\n\n    if ( !eventFilter )\n    {\n        // Sets the loading page while data is retrieved\n        this.loading();\n    }\n\n    // Makes sure the page number is not a negative value\n    if ( this.pageNum < 0 )\n    {\n        this.pageNum = 0;\n    }\n\n    // Calcualtes the time span to check matches from. This span is either an amount of months from\n    // today or scoped by a certain year\n    if ( !this.viewYear )\n    {\n        if ( this.timeUpper > 0 )\n        {\n            if ( this.matchListType === 'fixtures' )\n            {\n                toDateMonth = toDateMonth + this.timeUpper;\n            }\n            else\n            {\n                toDateMonth = toDateMonth - this.timeUpper;\n            }\n            toDate.setMonth( toDateMonth );\n            todayString = toDate.format( 'yyyy-mm-dd' );\n        }\n        else\n        {\n            todayString = undefined;\n        }\n    }\n    else\n    {\n        if ( this.showYear && this.showYear.indexOf( 's' ) < 0 && this.showYear.indexOf(\n                'All Time' ) < 0 )\n        {\n            today = this.showYear + '-12-' + '31';\n            todayString = this.showYear + '-01-01';\n        }\n        else if ( this.showYear.indexOf( 's' ) > -1 )\n        {\n            var checkDecade = this.showYear.substring( 0, 3 );\n            today = checkDecade + '9-12-31';\n            todayString = checkDecade + '0-01-01';\n        }\n        else\n        {\n            today = undefined;\n            todayString = undefined;\n        }\n    }\n\n    // Different requests to the metaschedule are called based on whether the fixtures or results\n    // are required\n    if ( this.matchListType === 'fixtures' )\n    {\n        var scheduleRequestOptions = {\n            startDate: today,\n            endDate : todayString,\n            states: [ 'U', 'L' ],\n            page : this.pageNum,\n            teams : this.teamIds,\n            events : this.eventId,\n            pageSize : 10\n         };\n\n        if ( eventFilter )\n        {\n            scheduleRequestOptions.pageSize = 100;\n            this.eventFilterSchedule.getScheduleData(\n            {\n                start: true,\n                params: scheduleRequestOptions,\n                feedName: 'eventFilter',\n                language: PULSE.CLIENT.LANGUAGE\n            } );\n        }\n        else\n        {\n            this.metaSchedule.getScheduleData(\n            {\n                start: true,\n                params: scheduleRequestOptions,\n                feedName: 'metaSchedule',\n                language: PULSE.CLIENT.LANGUAGE\n            } );\n        }\n    }\n    else if ( this.matchListType === 'results' )\n    {\n        var resultsRequestOptions = {\n            endDate: new Date( new Date( today ).setDate( new Date( today ).getDate() + 1 ) )\n                .format( 'yyyy-mm-dd' ),\n            startDate: todayString,\n            sort: 'desc',\n            states: [ 'C' ],\n            page: this.pageNum,\n            teams: this.teamIds,\n            events: this.eventId,\n            pageSize: 10\n        };\n        if ( eventFilter )\n        {\n            resultsRequestOptions.pageSize = 100;\n            this.eventFilterSchedule.getScheduleData(\n            {\n                start: true,\n                params: resultsRequestOptions,\n                feedName: 'eventFilter',\n                language: PULSE.CLIENT.LANGUAGE\n            } );\n        }\n        else\n        {\n            this.metaSchedule.getScheduleData(\n            {\n                start: true,\n                params: resultsRequestOptions,\n                feedName: 'metaSchedule'\n            } );\n        }\n    }\n}"},"setSubscriptions":{"Documentation":{"description":"Subscribes to tournament, metaschedule and rankings data events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Matches.prototype.setSubscriptions = function()\n{\n    var that = this,\n        scheduleUpdate = false,\n        metascheduleUpdate = false,\n        rankingsUpdate = false,\n        eventFilter = false,\n        countriesData = false;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCHEDULE_UPDATE, function( e, params )\n    {\n        // Checks to see whether data can be found, otherwise returns no matches\n        if ( params.success )\n        {\n            if ( that.tournament && params.id === that.tournament.tournamentName )\n            {\n                scheduleUpdate = true;\n            }\n            else if ( params.id === 'metaSchedule' )\n            {\n                metascheduleUpdate = true;\n            }\n            else\n            {\n                eventFilter = true;\n            }\n\n            // The data is filtered differently depending on whether the schedule or metaschedule\n            // data has been retrieved\n\n            if ( eventFilter )\n            {\n                eventFilter = false;\n                that.updateEvents();\n            }\n            else\n            {\n                if ( scheduleUpdate && ( rankingsUpdate || !that.rankings ) )\n                {\n                    that.schedule = that.tournament.schedule;\n                    if ( that.rankings )\n                    {\n                        that.doRankingsTasks();\n                    }\n                    that.doScheduleTasks();\n                }\n                else if ( metascheduleUpdate && ( rankingsUpdate || !that.rankings ) )\n                {\n                    that.schedule = that.metaSchedule;\n                    if ( that.rankings )\n                    {\n                        that.doRankingsTasks();\n                    }\n                    that.doMetaScheduleTasks();\n                }\n            }\n\n        }\n        else\n        {\n            that.showNoMatches();\n        }\n    } );\n\n    // PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.COUNTRIES_UPDATE, function()\n    // {\n    //     console.log( that.countries );\n    // });\n\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.RANKINGS_UPDATE, function()\n    {\n        rankingsUpdate = true;\n        if ( scheduleUpdate && rankingsUpdate )\n        {\n            that.schedule = that.tournament.schedule;\n            that.doRankingsTasks();\n            that.doScheduleTasks();\n        }\n        else if ( metascheduleUpdate && rankingsUpdate )\n        {\n            that.schedule = that.metaSchedule;\n            that.doRankingsTasks();\n            that.doMetaScheduleTasks();\n        }\n    } );\n\n    PULSE.CLIENT.subscribe( 'content/get', function()\n    {\n        // The next page of data is found for the current request\n        that.pageNum = that.pagination.getPageNum();\n        that.metaSchedule = new PULSE.CLIENT.RUGBY.Schedule();\n        that.getData();\n    } );\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.COUNTRIES_UPDATE, function()\n    {\n        if ( that.startCountry )\n        {\n            that.setStartCountry();\n        }\n    } );\n}"},"setStartCountry":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Matches.prototype.setStartCountry = function()\n{\n    if ( this.continentContainers )\n    {\n        for ( i = 0; i < this.continentContainers.length; i++ )\n        {\n            if ( $( this.continentContainers[ i ] ).text().indexOf( this.startContinent ) > -1 )\n            {\n                $( this.continentContainers[ i ] ).addClass( 'selected' );\n            }\n        }\n        this.changeCountries();\n\n        var countryContainers = this.$countryContainer.find( '.country' );\n\n        for ( var i = 0; i < countryContainers.length; i++ )\n        {\n            var teamId = $( countryContainers[ i ] ).data( 'id' );\n            if ( teamId === this.startCountry )\n            {\n                $( countryContainers[ i ] ).click();\n            }\n        }\n    }\n}"},"showNoMatches":{"Documentation":{"description":"Describes what should occur when no matches are found for a query","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Matches.prototype.showNoMatches = function()\n{\n    $( this.$container.find( '#Matches' ) ).html( '<div class=\"empty\">' + PULSE.I18N.lookup(\n        'widget.matchlist.nomatchesfound' ) + '</div>' );\n\n    if ( this.pagination )\n    {\n        this.pagination.numEntries = 0;\n        this.pagination.resetPaginationUi();\n    }\n}"},"loading":{"Documentation":{"description":"Describes what should occur while the matches are loaded","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Matches.prototype.loading = function()\n{\n    $( this.$container.find( '#Matches' ) ).html(\n        '<div class=\"spinner\"><div style=\"height : 25px; width : 25px\"></div></div>' );\n    // if( this.$pagination )\n    // {\n    //     this.$pagination.hide();\n    // }\n}"},"doScheduleTasks":{"Documentation":{"description":"Defines the tasks for schedule once the schedule has been updated","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Matches.prototype.doScheduleTasks = function()\n{\n    if ( this.matchListType === 'fixtures' )\n    {\n        this.schedule.filterUpcomingMatches();\n    }\n    else if ( this.matchListType === 'results' )\n    {\n        this.schedule.filterCompletedMatches();\n    }\n    else\n    {\n        this.schedule.resetFilter();\n    }\n\n    if ( this.schedule.matches.length > 0 )\n    {\n        this.displayMatches();\n    }\n    else\n    {\n        this.showNoMatches();\n    }\n    this.populateTournamentFilters();\n    this.setListeners();\n}"},"doMetaScheduleTasks":{"Documentation":{"description":"Defines the tasks for metaschedule once the metaschedule has been updated","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Matches.prototype.doMetaScheduleTasks = function()\n{\n    if ( this.schedule.matches.length > 0 )\n    {\n        this.displayMatches();\n        this.doPagination();\n    }\n    else\n    {\n        this.showNoMatches();\n    }\n}"},"doPagination":{"Documentation":{"description":"Sorts out the pagination for the incoming data","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Matches.prototype.doPagination = function()\n{\n    if ( !this.pagination )\n    {\n        this.$pagination.show();\n        var pageOptions = {\n            'container': this.$container,\n            'currentNumberContainer': '.paginationValue',\n            'maxNumberContainer': '.maxPages',\n            'displayMoreContainer': this.$matchesContainer,\n            'template': this.template,\n            'pageSize': this.schedule.pageInfo.pageSize,\n            'numEntries': this.schedule.pageInfo.numEntries,\n            'maxEntries': this.schedule.pageInfo.maxEntries,\n            'forwardContainer': '.next',\n            'backwardContainer': '.prev'\n        };\n\n        this.pagination = new PULSE.CLIENT.UI.Pagination( pageOptions );\n    }\n    else\n    {\n\n        if ( this.pagination.getPageNum() != this.pageNum )\n        {\n            this.pagination.pageNum = this.pageNum;\n        }\n\n        this.pagination.setNumEntries( this.schedule.pageInfo.numEntries );\n\n        // if( this.schedule.pageInfo.numEntries != this.pagination.numEntries )\n        // {\n        //     this.pagination.setNumEntries( this.schedule.pageInfo.numEntries );\n        //     if( this.pagination.getPageNum() < this.pageNum )\n        //     {\n        //         this.pageNum = this.pagination.getPageNum();\n        //         this.metaSchedule = new PULSE.CLIENT.RUGBY.Schedule();\n        //         this.getData();\n        //     }\n        // }\n    }\n\n}"},"doRankingsTasks":{"Documentation":{"description":"Defines the tasks for rankings once the rankings have been updated","tags":[{"title":"return","description":"[description]","type":{"type":"ArrayType","elements":[{"type":"NameExpression","name":"type"}]}}]},"Source":"PULSE.CLIENT.RUGBY.Matches.prototype.doRankingsTasks = function()\n{\n    this.rankingTeams = this.rankings.getTeamIds();\n}"},"setListeners":{"Documentation":{"description":"Sets listeners for all the filter dropdown menus","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Matches.prototype.setListeners = function()\n{\n    var that = this,\n        i, dropdownIndex;\n\n    // Loops through the filter dropdown menus and assigns listeners to check\n    // when a user chooses an item. The current item is then updated and the matches\n    // and filters are updated\n    for ( i = 0; i < this.dropdowns.length; i++ )\n    {\n        this.dropdowns[ i ].$dropdownContainer.bind( 'itemSelected', function( e, data )\n        {\n            dropdownIndex = data.id.split( '-' )[ 1 ];\n            if ( that.tournament && that.tournament.tournamentName )\n            {\n                that.manageCurrentTournament( dropdownIndex, data.text, data.index );\n                that.filterTournamentMatches();\n            }\n            else\n            {\n                //console.log( data.text );\n                that.manageCurrentGeneral( dropdownIndex, data.text, data.index );\n                that.filterGeneralMatches( dropdownIndex );\n            }\n        } );\n    }\n\n    // Listener for a user clicking the reset button and resets all the filters back to their\n    // defaults. The matches are then queried with the default filters.\n    this.$filtersContainer.on( 'click', '#filterReset', function( e )\n    {\n        e.preventDefault();\n\n        for ( i = 0; i < that.dropdowns.length; i++ )\n        {\n            that.dropdowns[ i ].refreshItems();\n            that.dropdowns[ i ].$currentContainer.text( that.filters[ i ].text );\n        }\n\n        if ( ( !that.tournament ) || ( !that.tournament.tournamentName ) )\n        {\n            that.timeUpper = 3;\n            that.teamIds = undefined;\n            that.eventId = undefined;\n            that.viewYear = false;\n            that.pageNum = 0;\n            that.dropdowns[ 2 ].setNotUsable();\n            that.$filtersContainer.find( '#dropdown2' ).removeClass( 'selected' );\n\n            for ( i = 0; i < that.continentContainers.length; i++ )\n            {\n                if ( $( that.continentContainers[ i ] ).hasClass( 'selected' ) )\n                {\n                    $( that.continentContainers[ i ] ).removeClass( 'selected' );\n                }\n            }\n            that.$countryDivider.hide();\n            that.$countryContainer.html( '' );\n\n            that.metaSchedule = new PULSE.CLIENT.RUGBY.Schedule();\n            that.getData();\n        }\n        else\n        {\n            that.filterTournamentMatches();\n        }\n\n    } );\n\n    // Listener for the mobile dropdown button for matches\n    this.$matchesContainer.on( 'click', '.more', function( e )\n    {\n        var mobileButtons = $( this ).find( '.fixturesResults' );\n        if ( mobileButtons )\n        {\n            if ( $( mobileButtons ).css( 'display' ) == 'none' )\n            {\n                $( mobileButtons ).show();\n            }\n            else\n            {\n                $( mobileButtons ).hide();\n            }\n        }\n    } );\n\n    // Listener for each mobile dropdown item, redirecting the given link\n    this.$matchesContainer.on( 'click', '.more li', function( e )\n    {\n        var link = $( this ).data( 'link' );\n        if ( link )\n        {\n            window.location.href = link;\n        }\n    } );\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.COUNTRIES_UPDATE, function( a, b, c,\n        d, e, f )\n    {\n        that.populateCountryContainer();\n    } );\n\n}"},"findYear":{"Documentation":{"description":"Finds the year scope using the decade and year chosen by the user","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Matches.prototype.findYear = function()\n{\n    var decadeText, yearText, showYear, i;\n\n    // Finds the selected decade\n    for ( i = 0; i < this.decades.length; i++ )\n    {\n        if ( $( this.decades[ i ] ).hasClass( 'selected' ) )\n        {\n            decadeText = $( this.decades[ i ] ).text();\n        }\n    }\n\n    // Finds the selected year\n    for ( i = 0; i < this.years.length; i++ )\n    {\n        if ( $( this.years[ i ] ).hasClass( 'selected' ) )\n        {\n            yearText = $( this.years[ i ] ).text();\n        }\n    }\n\n    // Decides the span of time to show based on the year and decade selected:\n    //  - Checks to see if the year and decade are not 'All' and combines the first 3 numbers of the\n    //    decade, with the last number of the year. E.g. - 1980s & 06 -> 1986.\n    //  - If the decade has been selected as 'All' then the span of the time is selected as\n    //    'All Time'. The year is then automatically selected as 'All'\n    //  - If only the year has been selected as 'All' then the decade is chosen\n    if ( ( decadeText.indexOf( 'All' ) < 0 ) && ( yearText.indexOf( 'All' ) < 0 ) )\n    {\n        showYear = decadeText.substring( 0, 3 ) + yearText.charAt( 1 );\n    }\n    else if ( decadeText.indexOf( 'All' ) > -1 )\n    {\n        showYear = 'All Time';\n        for ( i = 0; i < this.years.length; i++ )\n        {\n            if ( $( this.years[ i ] ).hasClass( 'selected' ) )\n            {\n                $( this.years[ i ] ).removeClass( 'selected' );\n            }\n            if ( $( this.years[ i ] ).text().indexOf( 'All' ) > -1 )\n            {\n                $( this.years[ i ] ).addClass( 'selected' );\n            }\n        }\n    }\n    else\n    {\n        showYear = decadeText;\n    }\n    this.showYear = showYear;\n    this.dropdowns[ 0 ].$currentContainer.text( showYear );\n    this.viewYear = true;\n    this.pageNum = 0;\n    this.eventId = undefined;\n    this.dropdowns[ 2 ].$currentContainer.text( this.filters[ 2 ].text );\n    this.metaSchedule = new PULSE.CLIENT.RUGBY.Schedule();\n    this.getData();\n}"},"setGeneralListeners":{"Documentation":{"description":"Sets general listers for metaschedule fixtures and results","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Matches.prototype.setGeneralListeners = function()\n{\n    var that = this;\n\n    this.continentContainers = this.dropdowns[ 1 ].$dropdownContainer.find( '.continent' );\n    this.$countryContainer = this.dropdowns[ 1 ].$dropdownContainer.find( '#countryContainer' );\n\n    this.dropdowns[ 1 ].$dropdownContainer.bind( 'itemSelected', function( e, data )\n    {\n        if ( that.dropdowns[ 1 ].$currentContainer.text() == that.filters[ 1 ].text )\n        {\n            that.dropdowns[ 1 ].$dropdownContainer.show();\n        }\n    } );\n}"},"setResultListeners":{"Documentation":{"description":"Sets listeners only needed for metaschedule results","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Matches.prototype.setResultListeners = function()\n{\n    var that = this;\n\n    this.decades = this.dropdowns[ 0 ].$dropdownContainer.find( '.decade' );\n    this.years = this.dropdowns[ 0 ].$dropdownContainer.find( '.year' );\n\n    this.dropdowns[ 0 ].$dropdownContainer.bind( 'itemSelected', function( e, data )\n    {\n\n        // Checks to see whether the 'All' button has been clicked. If it has then either displays\n        // the date picker ( decade/year ), if it's not open already, or closes it, if it is already\n        // open. If something other than 'All' has been clicked then the date picker also closes\n        if ( data.text.indexOf( 'All' ) > -1 )\n        {\n            that.dropdowns[ 0 ].$dropdownContainer.show();\n\n            if ( that.$datePicker.css( 'display' ) == 'none' )\n            {\n                that.$datePicker.show();\n                that.findYear();\n            }\n            else\n            {\n                that.$datePicker.hide();\n                $( that.dropdowns[ 0 ].$itemList[ 0 ] ).addClass( 'selected' );\n                $( that.dropdowns[ 0 ].$itemList[ 3 ] ).removeClass( 'selected' );\n                that.dropdowns[ 0 ].$currentContainer.text( that.filters[ 0 ].text );\n                that.viewYear = false;\n                that.pageNum = 0;\n                that.eventId = undefined;\n                that.metaSchedule = new PULSE.CLIENT.RUGBY.Schedule();\n                that.getData();\n            }\n        }\n        else\n        {\n            that.$datePicker.hide();\n            that.viewYear = false;\n            that.pageNum = 0;\n        }\n    } );\n\n    // Adds click listeners for the date section of the date picker\n    this.decades.each( function( index )\n    {\n        $( this ).click( function( e )\n        {\n            for ( var i = 0; i < that.decades.length; i++ )\n            {\n                $( that.decades[ i ] ).removeClass( 'selected' );\n            }\n            $( that.decades[ index ] ).addClass( 'selected' );\n\n            that.findYear();\n        } );\n    } );\n\n    // Adds click listeners for the year section of the date picker\n    this.years.each( function( index )\n    {\n        $( this ).click( function( e )\n        {\n            for ( var i = 0; i < that.years.length; i++ )\n            {\n                $( that.years[ i ] ).removeClass( 'selected' );\n            }\n            $( that.years[ index ] ).addClass( 'selected' );\n\n            that.findYear();\n        } );\n    } );\n\n}"},"manageCurrentTournament":{"Documentation":{"description":"Manages the currently selected item in a given dropdown menu","tags":[{"title":"param","description":"The id of the dropdown menu","type":{"type":"NameExpression","name":"Int"},"name":"id"},{"title":"param","description":"The selected item for the dropdown","type":{"type":"NameExpression","name":"String"},"name":"text"},{"title":"param","description":"The index of the selected item from the dropdown's item list","type":{"type":"NameExpression","name":"Int"},"name":"index"}]},"Source":"PULSE.CLIENT.RUGBY.Matches.prototype.manageCurrentTournament = function( id, text, index )\n{\n    // Checks to see if the user choses the same item twice and resets the current item\n    // to the filter name\n    if ( this.dropdowns[ id ].$currentContainer.text() == text || text == 'All' )\n    {\n        $( this.dropdowns[ id ].$itemList[ index ] ).removeClass( 'selected' );\n        this.dropdowns[ id ].$currentContainer.text( this.filters[ id ].text );\n    }\n    else\n    {\n        this.dropdowns[ id ].$currentContainer.text( text );\n    }\n}"},"changeCountries":{"Documentation":{"description":"Describes the behaviour when the countries dropdown needs to display new countries","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Matches.prototype.changeCountries = function()\n{\n    var continent,\n        selected = false,\n        abbrA, i;\n\n    // Finds the selected continent\n    for ( i = 0; i < this.continentContainers.length; i++ )\n    {\n        if ( $( this.continentContainers[ i ] ).hasClass( 'selected' ) )\n        {\n            this.$continent = $( this.continentContainers[ i ] );\n            selected = true;\n        }\n    }\n\n    if ( !selected )\n    {\n        this.$continent = undefined;\n    }\n\n    if ( this.$continent )\n    {\n        continent = this.$continent.text();\n    }\n\n    this.$countryContainer.html( '' );\n\n    // Finds all the countries from the given continent\n    if ( continent && ( continent.indexOf( 'All' ) < 0 ) )\n    {\n        this.$countryDivider.show();\n\n        if ( !this.countries )\n        {\n            this.countries = new PULSE.CLIENT.RUGBY.Countries( [ 5, 6, 9, 10, 11, 12, 13, 14 ] );\n        }\n        else\n        {\n            this.populateCountryContainer();\n        }\n    }\n    else\n    {\n        this.$countryDivider.hide();\n    }\n\n}"},"populateCountryContainer":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Matches.prototype.populateCountryContainer = function()\n{\n    var countries = this.countries.getCountriesByIds( PULSE.CLIENT.RUGBY.COUNTRY_LOOK_UP[ this.$continent\n        .text() ] );\n\n    if ( !countries )\n    {\n        return;\n    }\n\n    countries.sort( function( a, b )\n    {\n        if ( a.name < b.name )\n        {\n            return -1;\n        }\n        if ( b.name > a.name )\n        {\n            return 1;\n        }\n        return 0;\n    } );\n\n    for ( var i = 0; i < countries.length; i++ )\n    {\n        PULSE.CLIENT.Template.append(\n            this.templates.filterCountry,\n            this.$countryContainer,\n            {\n                option: countries[ i ].name,\n                teams: countries[ i ].teams,\n                id: countries[ i ].id\n            }\n        );\n    }\n    this.dropdowns[ 1 ].refreshItems();\n}"},"manageCurrentGeneral":{"Documentation":{"description":"Manages the currently selected item in a given dropdown menu","tags":[{"title":"param","description":"The id of the dropdown menu","type":{"type":"NameExpression","name":"Int"},"name":"id"},{"title":"param","description":"The selected item for the dropdown","type":{"type":"NameExpression","name":"String"},"name":"text"},{"title":"param","description":"The index of the selected item from the dropdown's item list","type":{"type":"NameExpression","name":"Int"},"name":"index"}]},"Source":"PULSE.CLIENT.RUGBY.Matches.prototype.manageCurrentGeneral = function( id, text, index )\n{\n\n    // Checks to see if a continent has been selected and updates the dropdown based on this\n    if ( ( id == 1 ) && ( ( $.inArray( text, this.continents ) > -1 ) || text == 'All' ) )\n    {\n        this.teamIds = undefined;\n        this.dropdowns[ id ].$currentContainer.text( this.filters[ id ].text );\n        if ( this.$continent )\n        {\n            if ( this.$continent.text() == text )\n            {\n                $( this.dropdowns[ id ].$itemList[ index ] ).removeClass( 'selected' );\n            }\n        }\n        this.changeCountries();\n    }\n    else\n    {\n        // Checks to see if the user choses the same item twice and resets the current item\n        // to the filter name\n        if ( this.dropdowns[ id ].$currentContainer.text() == text )\n        {\n            $( this.dropdowns[ id ].$itemList[ index ] ).removeClass( 'selected' );\n            this.dropdowns[ id ].$currentContainer.text( this.filters[ id ].text );\n        }\n        else\n        {\n            this.dropdowns[ id ].$currentContainer.text( text );\n        }\n\n        // Adds a selected state onto a continent if it has been clicked\n        if ( ( id == 1 ) && ( ( this.continents.indexOf( text ) < 0 ) ) )\n        {\n            this.$continent.addClass( 'selected' );\n        }\n\n    }\n}"},"filterGeneralMatches":{"Documentation":{"description":"Filters the matches and filter dropdown menu items after an item has been selected.","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Matches.prototype.filterGeneralMatches = function( index )\n{\n    var currents = [],\n        i, splitNext, timeBefore;\n\n    // Finds the current text for each filter\n    for ( i = 0; i < this.dropdowns.length; i++ )\n    {\n        currents.push( this.dropdowns[ i ].$currentContainer.text() );\n    }\n\n    // Checks if the duration filter has been changed and sets an upper time\n    // limit to query based on it\n    if ( index === '0' )\n    {\n        splitNext = currents[ 0 ].split( ' ' );\n        timeBefore = this.timeUpper;\n\n        if ( splitNext.length > 1 )\n        {\n            this.timeUpper = parseInt( splitNext[ 1 ] );\n            this.viewYear = false;\n        }\n        else\n        {\n            this.timeUpper = -1;\n        }\n\n        if ( timeBefore != this.timeUpper && ( !this.viewYear ) )\n        {\n            this.pageNum = 0;\n            this.metaSchedule = new PULSE.CLIENT.RUGBY.Schedule();\n            this.eventId = undefined;\n            this.getData();\n            //console.log( 'GET DATA' );\n        }\n        //this.metaSchedule = new PULSE.CLIENT.RUGBY.Schedule();\n        //this.getData();\n    }\n\n    //this.schedule.resetFilter();\n\n    // if( currents[ 0 ] != this.filters[ 0 ].text )\n    // {\n    //     console.log( 'Different time!' );\n    // }\n\n    // Populates and shows the events filter if a country is selected. Hides the filter if a country\n    // is unselected or the continent is changed\n    if ( index !== '2' )\n    {\n        if ( currents[ 1 ] != this.filters[ 1 ].text )\n        {\n            //console.log( 'Find teamIDs from countries & set events!' );\n            this.findTeamIds();\n            //this.updateEvents( currents[ 1 ] );\n            this.dropdowns[ 2 ].setUsable();\n            this.eventId = undefined;\n            this.dropdowns[ 2 ].$currentContainer.text( this.filters[ 2 ].text );\n            this.$filtersContainer.find( '#dropdown2' ).addClass( 'selected' );\n        }\n        else\n        {\n            this.dropdowns[ 2 ].setNotUsable();\n            this.teamIds = undefined;\n            this.dropdowns[ 2 ].$currentContainer.text( this.filters[ 2 ].text );\n            this.$filtersContainer.find( '#dropdown2' ).removeClass( 'selected' );\n            var previous = this.dropdowns[ 1 ].getPrevious();\n            // Only generate schedule again if the country filter has changed\n            if ( index == 1 && ( previous != this.filters[ 1 ].text ) )\n            {\n                this.pageNum = 0;\n                this.metaSchedule = new PULSE.CLIENT.RUGBY.Schedule();\n                this.eventId = undefined;\n                this.getData();\n            }\n        }\n    }\n\n    // Checks to see if an event has been changed and queries the data based on this\n    if ( this.dropdowns[ 2 ].$currentContainer.text() != this.filters[ 2 ].text && currents[ 1 ] !=\n        this.filters[ 1 ].text )\n    {\n        //console.log( 'Not the same Events!' );\n        var eventText, eventSplit;\n\n        for ( i = 0; i < this.dropdowns[ 2 ].$itemList.length; i++ )\n        {\n            if ( $( this.dropdowns[ 2 ].$itemList[ i ] ).hasClass( 'selected' ) )\n            {\n                eventText = $( this.dropdowns[ 2 ].$itemList[ i ] ).attr( 'id' );\n                // Events ids in the form 'event-[ event.id ]'\n                if ( eventText )\n                {\n                    eventSplit = eventText.split( '-' );\n                    if ( eventSplit.length > 1 )\n                    {\n                        this.pageNum = 0;\n                        this.eventId = eventSplit[ 1 ];\n                    }\n                }\n            }\n        }\n\n        //console.log( this.eventId );\n        this.newEvent = true;\n        this.metaSchedule = new PULSE.CLIENT.RUGBY.Schedule();\n        this.getData();\n    }\n    else\n    {\n        if ( index === '2' && ( this.dropdowns[ 2 ].getPrevious() != this.filters[ 2 ].text ) )\n        {\n            this.eventId = undefined;\n            this.metaSchedule = new PULSE.CLIENT.RUGBY.Schedule();\n            this.getData();\n        }\n        else\n        {\n            this.eventId = undefined;\n        }\n\n    }\n\n    // this.populateTournamentFilters();\n    // this.displayMatches();\n}"},"findTeamIds":{"Documentation":{"description":"Finds the team Ids for a given country and the filters the matches based on this","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Matches.prototype.findTeamIds = function()\n{\n\n    var countryContainers = this.$countryContainer.find( '.country' ),\n        country, i;\n\n    for ( i = 0; i < countryContainers.length; i++ )\n    {\n        if ( $( countryContainers[ i ] ).hasClass( 'selected' ) )\n        {\n            country = $( countryContainers[ i ] );\n        }\n    }\n\n    this.pageNum = 0;\n    this.teamIds = country.data( 'teams' );\n    this.getEvents();\n}"},"getEvents":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"onlyfilter"}]},"Source":"PULSE.CLIENT.RUGBY.Matches.prototype.getEvents = function( onlyfilter )\n{\n    this.eventFilterSchedule = new PULSE.CLIENT.RUGBY.Schedule();\n    this.eventId = undefined;\n    this.getData( true );\n\n    if ( !onlyfilter )\n    {\n        this.metaSchedule = new PULSE.CLIENT.RUGBY.Schedule();\n        this.getData();\n    }\n}"},"makeEventMappingByType":{"Documentation":{"description":"Transforms the type of sports into a user readable format. Adds these to a mapping with events","tags":[{"title":"param","description":"Mapping of abbreviated types to events","type":{"type":"NameExpression","name":"Object"},"name":"events"},{"title":"return","description":"mapping Mapping of user readable types to events","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Matches.prototype.makeEventMappingByType = function( events )\n{\n    var mapping = {},\n        key, sport;\n\n    for ( key in events )\n    {\n        switch ( events[ key ].sport )\n        {\n            case 'wru':\n                sport = 'Womens';\n                break;\n            case 'mru':\n                sport = 'Mens';\n                break;\n            case 'mrs':\n                sport = 'Mens Sevens';\n                break;\n            case 'wrs':\n                sport = 'Womens Sevens';\n                break;\n            case 'jw':\n                sport = 'Womens U20s';\n                break;\n            case 'jm':\n                sport = 'Mens U20s';\n                break;\n            case 'mjs':\n                sport = 'Mens U20s Sevens';\n                break;\n            case 'wjs':\n                sport = 'Womens U20s Sevens';\n                break;\n        }\n\n        if ( sport in mapping )\n        {\n            mapping[ sport ].push( events[ key ] );\n        }\n        else\n        {\n            mapping[ sport ] = [ events[ key ] ];\n        }\n    }\n\n    return mapping;\n\n}"},"updateEvents":{"Documentation":{"description":"Updates the events filter","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Matches.prototype.updateEvents = function()\n{\n    if ( this.eventFilterSchedule )\n    {\n        var eventObjects = this.eventFilterSchedule.getEventMappingsFromSchedule(), //,\n            eventMap = this.makeEventMappingByType( eventObjects ),\n            model = {\n                dropdown: eventMap\n            };\n\n        // console.log( eventMapping );\n\n        // var eventMap =\n        // {\n        //     'Mens' : [ 'Man Event 1', 'Man Event 2', 'Man Event 3' ],\n        //     'Womens' : [ 'Womens Event 1', 'Womens Event 2', 'Woments Event 3' ],\n        //     'Mens Sevens' : [ 'Seven Event Man', 'Another Man Seven Event' ],\n        //     'Woments Sevens' : [ 'Seven Event Woman', 'Sevens Event Woman 2' ],\n        //     'Mens U20s' : [ 'U20s tourney mans' ],\n        //     'Womens U20s' : [ 'Another tournament' ]\n        // };\n\n        // console.log( eventMap );\n\n        PULSE.CLIENT.Template.publish(\n            this.allTemplates[ 2 ],\n            this.$filterDropdowns[ 2 ],\n            model\n        );\n\n        this.dropdowns[ 2 ].refreshItems();\n    }\n}"},"filterTournamentMatches":{"Documentation":{"description":"Filters the matches and filter dropdown menu items after an item has been selected under a\ntournament scope.","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Matches.prototype.filterTournamentMatches = function()\n{\n    var currents = [],\n        i, same = [ false, false, false ];\n\n    for ( i = 0; i < this.dropdowns.length; i++ )\n    {\n        currents.push( this.dropdowns[ i ].$currentContainer.text() );\n    }\n\n    this.schedule.resetFilter();\n    if ( this.matchListType === 'fixtures' )\n    {\n        this.schedule.filterUpcomingMatches();\n    }\n    else if ( this.matchListType === 'results' )\n    {\n        this.schedule.filterCompletedMatches();\n    }\n    else\n    {\n        this.schedule.resetFilter();\n    }\n\n    if ( currents[ 0 ] != this.filters[ 0 ].text )\n    {\n        this.schedule.getMatchModelsByTeam( currents[ 0 ], false, true );\n        same[ 0 ] = true;\n    }\n\n    if ( currents[ 1 ] != this.filters[ 1 ].text )\n    {\n        this.schedule.getMatchModelsByVenue( currents[ 1 ], false, true );\n        same[ 1 ] = true;\n    }\n\n    if ( currents[ 2 ] != this.filters[ 2 ].text )\n    {\n        this.schedule.getMatchModelsByPhase( currents[ 2 ], false, true );\n        same[ 2 ] = true;\n    }\n\n    this.populateTournamentFilters( same );\n    this.displayMatches();\n}"},"generateAllCalendar":{"Documentation":{"description":"Generates calendar data for every match visible on the fixtures","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Matches.prototype.generateAllCalendar = function()\n{\n    var allMatchContent = '',\n        downloadName = '',\n        nameSet = false,\n        i, iscContent, link;\n\n    for ( i = 0; i < this.matches.length; i++ )\n    {\n        allMatchContent = allMatchContent + this.matches[ i ].generateCalendarEvent();\n    }\n\n    iscContent = escape(\n        'BEGIN:VCALENDAR\\nVERSION:2.0\\nPRODID:-//hacksw/handcal//NONSGML v1.0//EN\\nCALSCALE:GREGORIAN\\n' +\n        allMatchContent + 'END:VCALENDAR' );\n    link = 'data:text/calendar;charset=utf8,' + iscContent;\n\n    this.$calendarButton.attr( 'href', link );\n\n    if ( this.tournament )\n    {\n        if ( this.matches.length > 0 )\n        {\n            if ( ( this.matches[ 0 ].events ) && ( this.matches[ 0 ].events.length > 0 ) )\n            {\n                if ( this.matches[ 0 ].events[ 0 ].label )\n                {\n                    downloadName = this.matches[ 0 ].events[ 0 ].label;\n                    nameSet = true;\n                }\n            }\n        }\n\n        if ( !nameSet )\n        {\n            if ( this.schedule && this.schedule.tournament && this.schedule.tournament.label )\n            {\n                downloadName = this.schedule.tournament.label;\n                nameSet = true;\n            }\n        }\n\n        if ( !nameSet )\n        {\n            downloadName = this.tournament.tournamentName;\n        }\n\n\n        if ( this.dropdowns && this.dropdowns.length > 2 )\n        {\n            if ( this.dropdowns[ 0 ].$currentContainer.text() != this.filters[ 0 ].text )\n            {\n                downloadName = downloadName + '_' + this.dropdowns[ 0 ].$currentContainer.text();\n            }\n\n            if ( this.dropdowns[ 1 ].$currentContainer.text() != this.filters[ 1 ].text )\n            {\n                downloadName = downloadName + '_' + this.dropdowns[ 1 ].$currentContainer.text();\n            }\n\n            if ( this.dropdowns[ 2 ].$currentContainer.text() != this.filters[ 2 ].text )\n            {\n                downloadName = downloadName + '_' + this.dropdowns[ 2 ].$currentContainer.text();\n            }\n        }\n\n        downloadName = downloadName + '.ics';\n\n\n    }\n    else\n    {\n        downloadName = 'RugbyFixtures';\n\n        if ( this.dropdowns && this.dropdowns.length > 2 )\n        {\n            downloadName = downloadName + '_' + this.dropdowns[ 0 ].$currentContainer.text();\n\n            if ( this.dropdowns[ 1 ].$currentContainer.text() != this.filters[ 1 ].text )\n            {\n                downloadName = downloadName + '_' + this.dropdowns[ 1 ].$currentContainer.text();\n            }\n\n            if ( this.dropdowns[ 2 ].$currentContainer.text() != this.filters[ 2 ].text )\n            {\n                downloadName = downloadName + '_' + this.dropdowns[ 2 ].$currentContainer.text();\n            }\n        }\n        else\n        {\n            if ( this.filters && this.filters.length > 0 && this.filters[ 0 ].text )\n            {\n                downloadName = downloadName + '_' + this.filters[ 0 ].text;\n            }\n        }\n\n        downloadName = downloadName + '_' + ( this.pageNum + 1 ) + '.ics';\n    }\n\n    this.$calendarButton.attr( 'download', downloadName );\n}"},"getMatchLinks":{"Documentation":{"description":"Finds the links for each match","tags":[{"title":"param","description":"Passes the match object to find the urls","type":{"type":"NameExpression","name":"Object"},"name":"match"},{"title":"return","description":"Returns the objects with the match link urls","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Matches.prototype.getMatchLinks = function( match )\n{\n    var rankingsPredictUrl = '../../rankingspredictor/target/index.html';\n\n    var links = {};\n\n    if ( match.getMatchStatus() === 'U' )\n    {\n        if ( this.rankings )\n        {\n            // /console.log( match );\n            if ( ( $.inArray( match.teams[ 0 ].id, this.rankingTeams ) > -1 ) && ( $.inArray(\n                    match.teams[ 1 ].id, this.rankingTeams ) > -1 ) )\n            {\n                links.rankingsPredict = rankingsPredictUrl + '?mid=' + match.matchId;\n            }\n        }\n\n        links.rankingsPredict = undefined;\n        if ( this.tournament && this.schedule && this.schedule.tournament && this.schedule.tournament\n            .label )\n        {\n            links.calendar = match.getCalendarLink( this.schedule.tournament.label );\n        }\n        else\n        {\n            links.calendar = match.getCalendarLink();\n        }\n        links.tickets = undefined;\n    }\n    else\n    {\n        links.report = undefined;\n        links.mc = PULSE.CLIENT.generateUrl( 'match', match.matchId ); //'/match/' + match.matchId;\n    }\n    this.matches.push( match );\n\n    return links;\n}"},"displayMatches":{"Documentation":{"description":"Displays the matches on the page","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Matches.prototype.displayMatches = function()\n{\n    var matchesMap = this.schedule.getMatchModelsMappingByDate( false, true ),\n        config, key, keys, i, j;\n\n    if ( ( this.$pagination ) && ( !this.tournament ) )\n    {\n        this.$pagination.show();\n    }\n\n    if ( this.matchListType === 'results' )\n    {\n        for ( key in matchesMap )\n        {\n            matchesMap[ key ].reverse();\n        }\n    }\n\n    keys = _.keys( matchesMap );\n    if ( this.matchListType === 'results' )\n    {\n        keys.reverse();\n    }\n\n    $( this.$container.find( '#Matches' ) ).html( '' );\n    this.matches = [];\n\n    for ( j = 0; j < keys.length; j++ )\n    {\n        key = keys[ j ];\n        for ( i = 0; i < matchesMap[ key ].length; i++ )\n        {\n            if ( i === 0 )\n            {\n                config = {\n                    event: this.schedule.tournament,\n                    fixture: matchesMap[ key ][ i ],\n                    date: key,\n                    links: this.getMatchLinks( matchesMap[ key ][ i ] )\n                };\n            }\n            else\n            {\n                config = {\n                    event: this.schedule.tournament,\n                    fixture: matchesMap[ key ][ i ],\n                    links: this.getMatchLinks( matchesMap[ key ][ i ] )\n                };\n            }\n\n            config.getClassForEventPhase = function( eventPhase )\n            {\n                switch ( eventPhase )\n                {\n                    case \"Pool A\":\n                        return \"pool-a\";\n                        break;\n                    case \"Pool B\":\n                        return \"pool-b\";\n                        break;\n                    case \"Pool C\":\n                        return \"pool-c\";\n                        break;\n                    case \"Pool D\":\n                        return \"pool-d\";\n                        break;\n                    case \"Quarter Finals\":\n                        return \"semi-qtr\";\n                        break;\n                    case \"Semi Finals\":\n                        return \"bronze\";\n                        break;\n                    case \"Final\":\n                        return \"final\";\n                        break;\n                    default:\n                        return \"pool-a\"\n                }\n            }\n\n            PULSE.CLIENT.Template.append(\n                this.template,\n                this.$matchesContainer,\n                config\n            );\n        }\n    }\n\n    if ( this.matchListType !== 'results' && this.$calendarButton )\n    {\n        this.$calendarButton.show();\n        this.generateAllCalendar();\n    }\n}"}}},"RenderMatches":{"Documentation":{"description":"For matches - referenced by fixtures and results widgets","tags":[{"title":"constructor","description":null,"type":null,"name":null}]},"Source":"PULSE.CLIENT.RUGBY.RenderMatches = function( container, matchListType, config, tournament )\n{\n    this.$container = $( container );\n    this.config = config;\n\n    this.$matchesContainer = this.$container.find( '#Matches' );\n\n    this.matchListType = matchListType;\n\n    this.init = true;\n\n    this.pageSize = 3;\n\n    this.setSubscriptions();\n\n    if ( this.config && this.config.rankings )\n    {\n        this.rankings = new PULSE.CLIENT.RUGBY.Rankings( 'mru' );\n        this.rankings.getRankingsData( {\n        start: true\n    } );\n    }\n\n    this.rankingTeams = [];\n    //this.rankingTeams = that.ranking.getTeams();\n\n    this.templates = {\n        match: config.match,\n        tournament : config.tournament\n    };\n\n    this.tournament = tournament;\n\n    this.venues = this.$container.data( 'venue' );\n    this.teams = this.$container.data( 'team' );\n    this.sports = this.$container.data( 'sports' );\n    this.eventId = this.$container.data( 'season' );\n\n    var pageSize = this.$container.data( 'pagesize' );\n\n    // this.tournament = new PULSE.CLIENT.RUGBY.Tournament( { tournamentName: '1023' } );\n\n    if ( pageSize )\n    {\n        pageSize = parseInt( pageSize );\n        if ( pageSize > 0 )\n        {\n            this.pageSize = pageSize;\n        }\n    }\n\n    // Execution is different for tournament scoped matches and all matches\n    // if( this.tournament )\n    // {\n    //     this.template = this.templates.tournament;\n    //     // this.tournament = new PULSE.CLIENT.RUGBY.Tournament( { tournamentName: this.tournamentID } );\n    //     this.tournament.getSchedule( { start: true } );\n    // }\n    // else\n    // {\n        this.setListeners();\n        this.template = this.templates.match;\n        this.metaSchedule = new PULSE.CLIENT.RUGBY.Schedule();\n        this.getData();\n    // }\n}","prototype":{"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.RenderMatches.prototype.setListeners = function()\n{\n    var that = this;\n\n    // Listener for the mobile dropdown button for matches\n    this.$matchesContainer.on( 'click', '.more', function( e )\n    {\n        var mobileButtons = $( this ).find( '.fixturesResults' );\n        if( mobileButtons )\n        {\n            if( $( mobileButtons ).css('display') == 'none' )\n            {\n                $( mobileButtons ).show();\n            }\n            else\n            {\n                $( mobileButtons ).hide();\n            }\n        }\n    } );\n\n    // Listener for each mobile dropdown item, redirecting the given link\n    this.$matchesContainer.on( 'click', '.more li', function( e )\n    {\n        var link = $( this ).data( 'link' );\n        if( link )\n        {\n            window.location.href = link;\n        }\n    });\n}"},"getData":{"Documentation":{"description":"Calls the metaschedule model to request data from api with a given set of parameters\n    - 2 Calls are required to ensure that we always receive both upcoming and\n      complete matches","tags":[]},"Source":"PULSE.CLIENT.RUGBY.RenderMatches.prototype.getData = function( eventFilter )\n{\n    var today = ( new Date() ).format( 'yyyy-mm-dd' );\n\n    // Different requests to the metaschedule are called based on whether the fixtures or results\n    // are required\n    if( this.matchListType === 'fixtures' )\n    {\n        var requestOptions = {\n            startDate: today,\n            states: [ 'U', 'L' ],\n            pageSize : this.pageSize,\n            venues : this.venues,\n            teams : this.teams,\n            sports : this.sports,\n            events : this.eventId,\n            language: PULSE.CLIENT.LANGUAGE\n         };\n        this.feedId = 'fixtures';\n        this.metaSchedule.getScheduleData(\n        {\n            start: true,\n            params: requestOptions,\n            feedName : 'fixtures'\n        } );\n    }\n    else if( this.matchListType === 'results' )\n    {\n        var requestOptions = {\n            endDate: today,\n            sort : 'desc',\n            states: [ 'C' ],\n            pageSize : this.pageSize,\n            venues : this.venues,\n            teams : this.teams,\n            sports : this.sports,\n            events : this.eventId,\n            language: PULSE.CLIENT.LANGUAGE\n        };\n        this.feedId = 'results';\n        this.metaSchedule.getScheduleData(\n        {\n            start: true,\n            params: requestOptions,\n            feedName : 'results'\n        } );\n    }\n    else if( this.matchListType === 'all' )\n    {\n        var requestOptions = {\n            states: [ 'C', 'U', 'L' ],\n            pageSize : this.pageSize,\n            venues : this.venues,\n            teams : this.teams,\n            sports : this.sports,\n            events : this.eventId,\n            language: PULSE.CLIENT.LANGUAGE\n         };\n        this.feedId = 'all-matches';\n        this.metaSchedule.getScheduleData(\n        {\n            start: true,\n            params: requestOptions,\n            feedName : 'all-matches'\n        } );\n    }\n}"},"setSubscriptions":{"Documentation":{"description":"Subscribes to tournament, metaschedule and rankings data events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.RenderMatches.prototype.setSubscriptions = function()\n{\n    var that = this,\n        scheduleUpdate = false,\n        metascheduleUpdate = false,\n        rankingsUpdate = false;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCHEDULE_UPDATE, function( e, params )\n    {\n        // Checks to see whether data can be found, otherwise returns no matches\n        if ( params.success )\n        {\n            if( params.id === that.feedId )\n            {\n                metascheduleUpdate = true;\n            }\n\n            // The data is filtered differently depending on whether the schedule or metaschedule\n            // data has been retrieved\n\n\n            if( metascheduleUpdate && ( rankingsUpdate || ! that.rankings ) )\n            {\n                that.schedule = that.metaSchedule;\n                if ( that.rankings )\n                {\n                    that.doRankingsTasks();\n                }\n                that.displayMatches();\n                metascheduleUpdate = false;\n            }\n        }\n\n    });\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.RANKINGS_UPDATE, function()\n    {\n        rankingsUpdate = true;\n        if( metascheduleUpdate && rankingsUpdate )\n        {\n            that.schedule = that.metaSchedule;\n            that.doRankingsTasks();\n            that.displayMatches();\n            metascheduleUpdate = false;\n        }\n    });\n}"},"doRankingsTasks":{"Documentation":{"description":"Defines the tasks for rankings once the rankings have been updated","tags":[{"title":"return","description":"[description]","type":{"type":"ArrayType","elements":[{"type":"NameExpression","name":"type"}]}}]},"Source":"PULSE.CLIENT.RUGBY.RenderMatches.prototype.doRankingsTasks = function()\n{\n    this.rankingTeams = this.rankings.getTeamIds();\n}"},"getMatchLinks":{"Documentation":{"description":"Finds the links for each match","tags":[{"title":"param","description":"Passes the match object to find the urls","type":{"type":"NameExpression","name":"Object"},"name":"match"},{"title":"return","description":"Returns the objects with the match link urls","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.RenderMatches.prototype.getMatchLinks = function( match )\n{\n    var rankingsPredictUrl = '../../rankingspredictor/target/index.html';\n\n    var links = {};\n\n    if ( match.getMatchStatus() !== 'C' )\n    {\n        // /console.log( match );\n        if ( this.rankings )\n        {\n            if ( ( $.inArray( match.teams[ 0 ].id, this.rankingTeams ) > -1 )  && ( $.inArray( match.teams[ 1 ].id, this.rankingTeams ) > -1 ) )\n            {\n                links[ 'rankingsPredict' ] = rankingsPredictUrl + '?mid=' + match.matchId;\n            }\n        }\n\n        links[ 'rankingsPredict' ] = undefined;\n        links[ 'calendar' ] = match.getCalendarLink();\n        links[ 'tickets' ] = undefined;\n    }\n    else\n    {\n        links[ 'report' ] = undefined;\n        links[ 'mc' ] = PULSE.CLIENT.generateUrl( 'match', match.matchId ); //'/match/' + match.matchId;\n    }\n\n    return links;\n}"},"showNoMatches":{"Documentation":{"description":"Describes what should occur when no matches are found for a query","tags":[]},"Source":"PULSE.CLIENT.RUGBY.RenderMatches.prototype.showNoMatches = function()\n{\n    $( this.$container.find( '#Matches' ) ).html( '<div class=\"empty\">' + PULSE.I18N.lookup( 'widget.matchlist.nomatchesfound' ) + '</div>' );\n}"},"displayMatches":{"Documentation":{"description":"Displays the matches on the page","tags":[]},"Source":"PULSE.CLIENT.RUGBY.RenderMatches.prototype.displayMatches = function()\n{\n\n    // if ( this.tournament )\n    // {\n    //     if ( this.matchListType !== 'results' )\n    //     {\n    //         this.schedule.filterUpcomingMatches();\n    //     }\n    //     else\n    //     {\n    //         this.schedule.filterCompletedMatches();\n    //     }\n    // }\n\n    if ( this.schedule.matches.length > 0 )\n    {\n        this.$container.show();\n        var matchesMap = this.schedule.getMatchModelsMappingByDate( false, true ),\n            config, key, i, count = 0;\n\n        //console.log( matchesMap );\n\n        if ( this.matchListType === 'results' )\n        {\n            for ( key in matchesMap )\n            {\n                matchesMap[ key ].reverse();\n            }\n        }\n\n        var keys =  _.keys(matchesMap);\n        if ( this.matchListType === 'results' )\n        {\n            keys.reverse();\n        }\n\n        $( this.$container.find( '#Matches' ) ).empty();\n\n\n        // PULSE.CLIENT.Template.append(\n        //             this.template,\n        //             this.$matchesContainer,\n        //             { matchesMap: matchesMap },\n        //             function( ){}\n\n        //         );\n\n        // return;\n\n        for( var j = 0; j < keys.length; j++ )\n        {\n            var key = keys[ j ];\n            for( i = 0; i < matchesMap[ key ].length; i++ )\n            {\n                if( i == 0 )\n                {\n                    config = { event : this.schedule.tournament, fixture : matchesMap[ key ][ i ], date : key, links : this.getMatchLinks( matchesMap[ key ][ i ] ) };\n                }\n                else\n                {\n                    config = { event : this.schedule.tournament, fixture : matchesMap[ key ][ i ], links : this.getMatchLinks( matchesMap[ key ][ i ] ) };\n                }\n\n                PULSE.CLIENT.Template.append(\n                    this.template,\n                    this.$matchesContainer,\n                    config\n                );\n\n                count = count + 1;\n\n                if ( count > this.pageSize - 1 )\n                {\n                    i = matchesMap[ key.length ] + 1;\n                    j = keys.length + 1;\n                }\n\n            }\n        }\n    }\n    else\n    {\n        this.showNoMatches();\n    }\n}"}}},"WidgetController":{"Documentation":{"description":"Widget Controller, stores a page worth of widgets and passes instances of the tournament, if\nthey exist; otherwise, it will create a new tournament give an ID.","tags":[{"title":"constructor","description":null,"type":null,"name":null}]},"Source":"PULSE.CLIENT.RUGBY.WidgetController = function()\n{\n    that = this;\n\n    var req_language = $.cookie( 'req_language' );\n    PULSE.CLIENT.LANGUAGE = req_language || PULSE.CLIENT.DEFAULT_LANGUAGE;\n    var Translator = new PULSE.CLIENT.I18N.Translator( PULSE.I18N );\n\n    if (!PULSE.I18N) { PULSE.I18N = {}; }\n    PULSE.I18N.lookup = function()\n    {\n        return Translator.lookup.apply( Translator, arguments );\n    };\n    if( typeof window.moment !== 'undefined' )\n    {\n        PULSE.CLIENT.I18N.EnOverride();\n        moment.locale( PULSE.CLIENT.LANGUAGE );\n    }\n\n    // Get tournament specifics, like data feeds, naming conventions etc.\n    this.metadata = {}; // PULSE.CLIENT.RUGBY.Metadata;\n    this.urlGenerator = PULSE.CLIENT.RUGBY.getUrlGenerator();\n    this.tournaments = {};\n    this.widgets = [];\n\n    // Singleton access\n    if( PULSE.CLIENT.RUGBY.WidgetController.prototype._singletonInstance )\n    {\n        return PULSE.CLIENT.RUGBY.WidgetController.prototype._singletonInstance;\n    }\n    PULSE.CLIENT.RUGBY.WidgetController.prototype._singletonInstance = this;\n}","prototype":{"initialise":{"Documentation":{"description":"Initialises a given widget constructor with params based on data attributes of\nthe given container","tags":[{"title":"param","description":"jQuery/Dom Object/Selector string for widget container","type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"Object"},{"type":"NameExpression","name":"String"}]},"name":"widget"},{"title":"param","description":"Constructor function for the given widget","type":{"type":"NameExpression","name":"Function"},"name":"constructor"}]},"Source":"PULSE.CLIENT.RUGBY.WidgetController.prototype.initialise = function( widget, constructor )\n{\n    var that = this,\n        $widget = $( widget );\n\n    try\n    {\n        var config = {};\n        $.each( $widget.get(0).attributes, function( i, attr )\n        {\n            var name = attr.name;\n            var value = attr.value;\n\n            config[ name ] = value;\n        } );\n\n        var tournament = that.getTournamentByName( config[ 'data-season' ] );\n        that.widgets.push( new constructor( $widget, config, tournament ) );\n    }\n    catch( err )\n    {\n        // if any widget fails\n        console.log( err );\n    }\n}"},"getTournamentByName":{"Documentation":{"description":"Return a tournament object with the given name\n    - Return the existing if possible otherwise create a new one","tags":[{"title":"param","description":"Tournament name string","type":{"type":"NameExpression","name":"String"},"name":"tournamentName"},{"title":"return","description":"Tournament object","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.WidgetController.prototype.getTournamentByName = function( tournamentName )\n{\n    if ( !tournamentName )\n    {\n        return;\n    }\n    else if ( !this.tournaments[ tournamentName ] )\n    {\n        var meta = {\n            tournamentName: tournamentName\n        };\n        this.tournaments[ tournamentName ] = new PULSE.CLIENT.RUGBY.Tournament( meta );\n    }\n    return this.tournaments[ tournamentName ];\n}"}}},"ArchivePoolsWidget":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the tournament pools widget"}]},"Source":"PULSE.CLIENT.RUGBY.ArchivePoolsWidget = function( container, config, tournament )\n{\n    this.config = config;\n    this.tournament = tournament;\n    this.$container = $( container );\n\n    this.$poolsContainer = this.$container.find( '#archivePools' );\n\n    this.template = 'templates/archive/pools.html'\n\n    this.standings = undefined;\n\n    this.header = this.$container.data( 'title' );\n    this.fullTableUrl = this.tournament.tournamentName + '/standings';\n\n    this.setSubscriptions();\n\n    //this.tournament.getSchedule( { start: true } );\n    this.tournament.getStandings( { start: true } );\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"Subscribes to standings and displays the pools when the data comes","tags":[]},"Source":"PULSE.CLIENT.RUGBY.ArchivePoolsWidget.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.STANDINGS_UPDATE, function( e, params )\n    {\n          that.standings = that.tournament.standings;\n          that.displayPools();\n    });\n}"},"displayPools":{"Documentation":{"description":"Displays the pool/group information fir the given tournament","tags":[]},"Source":"PULSE.CLIENT.RUGBY.ArchivePoolsWidget.prototype.displayPools = function()\n{\n    var mapping = this.standings.getTeamMapByGroup(),\n        model = this.standings.getStandingsModel(),\n        poolClass = {},\n        size = Math.ceil( 12 / model.standings.length );\n\n    if ( model.standings.length > 0 )\n    {\n        this.$container.show();\n        for ( var i = 0; i < model.standings.length; i++ )\n        {\n            PULSE.CLIENT.Template.append(\n            this.template,\n            this.$poolsContainer,\n            {\n                pool : model.standings[ i ].standings,\n                poolTitle : model.standings[ i ].label,\n                size : size\n            }\n            );\n\n        }\n    }\n}"}}},"AudioList":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for Audio List widget"},{"title":"param","description":"Jquery object or selector string","type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"Object"},{"type":"NameExpression","name":"String"}]},"name":"container"}]},"Source":"PULSE.CLIENT.RUGBY.AudioList = function( container )\n{\n    this.urlGen = new PULSE.CLIENT.RUGBY.getUrlGenerator( { 'type' : 'audio' } );\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n\n    this.$container = $( container );\n\n    this.paginationId = 'audioList' + Math.random();\n\n    var pageOptions = {\n        'container' : container,\n        'forwardContainer' : '.next',\n        'backwardContainer' : '.prev',\n        'currentNumberContainer' : '.paginationValue',\n        'maxNumberContainer' : '.maxPages',\n        'template' : 'templates/content/audio-list.html',\n        'displayMoreContainer' : '.audio',\n        'paginationId' : this.paginationId\n    };\n\n     var mediaOptions =\n    {\n        container: container,\n        type: \"list\",//\"player\"\n        link: '.audioThumb', //LIST (data-mediaid is on this link always)\n        link_click : '.audioThumbTest',\n        player_scope: \"primary\", //whatever name\n        link_time: '.duration', //inside link container\n        link_title: '.title', //inside link container\n        link_date: '.datePosted', //inside link container\n        external_link_click : '.externalLink',\n        external_player_url : '/worldrugbytv/audio'\n    };\n\n    var mediaList = new PULSE.CLIENT.MediaList( mediaOptions );\n\n    var showOptions = {\n        'container' : container,\n        'showMoreContainer' : '#showMore',\n        'template' : 'templates/content/news-list.html',\n        'displayMoreContainer' : '.newsList'\n    };\n\n    this.setListeners();\n\n    var paginationContainer = this.$container.find( '.paginationValue' );\n\n    if( paginationContainer.length > 0 )\n    {\n        this.moreContent = new PULSE.CLIENT.UI.Pagination( pageOptions );\n    }\n    else\n    {\n        this.moreContent = new PULSE.CLIENT.UI.ShowMore( showOptions );\n    }\n}","prototype":{"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.AudioList.prototype.setListeners = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( 'content/get', function( e, params )\n    {\n        if ( params.id === that.paginationId )\n        {\n            that.getMoreContent();\n        }\n    });\n}"},"getMoreContent":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.AudioList.prototype.getMoreContent = function()\n{\n    this.feeds = {};\n\n    // if ( this.moreContent.contentTags.length > 0 )\n    // {\n    //     this.feeds.contentUrl = this.urlGen.makeContentQueryUrl( 'System', PULSE.CLIENT.LANGUAGE, this.moreContent.pageSize, this.moreContent.pageNum, this.moreContent.contentTags );\n    // }\n    // else\n    // {\n    //     this.feeds.contentUrl = this.urlGen.makeContentQueryUrl( 'System', PULSE.CLIENT.LANGUAGE, this.moreContent.pageSize, this.moreContent.pageNum );\n    // }\n\n    this.feeds.contentUrl = this.urlGen.makeContentQuery( PULSE.CLIENT.CMS_ACCOUNT, PULSE.CLIENT.LANGUAGE, { \"pageSize\" : this.moreContent.pageSize, \"page\" : this.moreContent.pageNum, \"tagNames\" : this.moreContent.contentTags, \"references\" : this.moreContent.references } );\n\n    this.feeds.feedContent = 'audioList';\n    this.feeds.contentInterval = 360;\n    this.feeds.contentCallback = 'on' + this.moreContent.contentType;\n\n    this.dm.addFeed( this.feeds.feedContent, this.feeds.contentUrl,\n        this.feeds.contentInterval, this.feeds.conentCallback, [ this ] );\n\n    this.dm.start( this.feeds.contentUrl );\n}"},"onData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.AudioList.prototype.onData = function( data )\n{\n    this.moreContent.setData( data );\n}"}}},"AudioExternal":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.AudioExternal"},{"title":"param","description":null,"type":null,"name":"container"}]},"Source":"PULSE.CLIENT.RUGBY.AudioExternal = function( container )\n{\n    this.$container = $( container );\n    this.first = true;\n    this.$relatedMedia = this.$container.find( '.relatedMedia' );\n    this.$relatedAudio = this.$container.find( '.relatedAudio' );\n\n    this.urlGen = new PULSE.CLIENT.RUGBY.getUrlGenerator( { 'type' : 'audio' } );\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n\n    var pageOptions = {\n        'container' : container,\n        'forwardContainer' : '.next',\n        'backwardContainer' : '.prev',\n        'currentNumberContainer' : '.paginationValue',\n        'maxNumberContainer' : '.maxPages',\n        'template' : 'templates/content/external-audio-list.html',\n        'displayMoreContainer' : '.latestAudio'\n    };\n\n     this.mediaOptions =\n    {\n        container: container,\n        type: \"list\",//\"player\"\n        link: '.audioThumb', //LIST (data-mediaid is on this link always)\n        link_click : '.audioThumb a',\n        player_scope: \"primary\", //whatever name\n        link_time: '.duration', //inside link container\n        link_title: '.title', //inside link container\n        link_date: '.datePosted', //inside link container\n        external_link_click : '.externalLink',\n        external_player_url : '../../audio-external/target/external-audio.html',\n        setRelease : true\n    };\n    this.pagination = new PULSE.CLIENT.UI.Pagination(pageOptions);\n\n    this.mediaList = new PULSE.CLIENT.MediaList( this.mediaOptions );\n\n    this.params = PULSE.CLIENT.Util.parseUrlParameters();\n\n    if ( this.params.mid )\n    {\n        this.newAudio = new PULSE.CLIENT.RUGBY.Content( PULSE.CLIENT.CMS_ACCOUNT, 'audio', PULSE.CLIENT.LANGUAGE, this.params.mid );\n    }\n\n    this.pagination.total = 0;\n\n    this.setContent = true;\n\n    this.setListeners();\n    this.getMoreContent();\n}","prototype":{"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.AudioExternal.prototype.setListeners = function()\n{\n    var that = this,\n        pdkReady = false,\n        audioReady = false;\n\n   $pdk.ready(function(e) {\n        //var params = PULSE.CLIENT.Util.parseUrlParameters();\n        pdkReady = true;\n\n        window.PULSE.CLIENT.PDK.addPlayer(false, '#video-prova');\n\n        if ( pdkReady && audioReady )\n        {\n            window.PULSE.CLIENT.PDK.setVideo(window.PULSE.CLIENT.PDK.players[ 0 ].scope, that.newAudio.mediaId, that.parseDuration(that.newAudio.duration), that.newAudio.title, that.newAudio.date);\n            $pdk.controller.setReleaseURL(that.newAudio.mediaId, true);\n            that.mediaList.getDurations();\n            pdkReady = false;\n            audioReady = false;\n        }\n        console.log( 'pdk' );\n   });\n\n   PULSE.CLIENT.subscribe( 'content/get', function()\n    {\n        that.getMoreContent();\n    });\n\n   if ( this.params.mid )\n   {\n       PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.CONTENT_EVENTS.CONTENT_UPDATE, function()\n       {\n            audioReady = true;\n            if ( pdkReady && audioReady )\n            {\n                window.PULSE.CLIENT.PDK.setVideo(window.PULSE.CLIENT.PDK.players[ 0 ].scope, that.newAudio.mediaId, that.parseDuration(that.newAudio.duration), that.newAudio.title, that.newAudio.date);\n                $pdk.controller.setReleaseURL(that.newAudio.mediaId, true);\n                pdkReady = false;\n                audioReady = false;\n            }\n       });\n    }\n\n   this.$container.on( 'click', this.mediaOptions.link_click, function( e, params )\n    {\n        e.preventDefault();\n        var $closestParent = $( this ).closest( that.mediaOptions.link );\n        var id = $closestParent.data( 'media-url' );\n        $pdk.controller.setReleaseURL(id, true);\n    } );\n\n}"},"getMoreContent":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.AudioExternal.prototype.getMoreContent = function()\n{\n    this.feeds = {};\n\n    this.feeds.contentUrl = this.pagination.urlGen.makeContentQueryUrl( PULSE.CLIENT.CMS_ACCOUNT, PULSE.CLIENT.LANGUAGE, this.pagination.pageSize, this.pagination.pageNum );\n\n    this.feeds.feedContent = 'audio-en';\n    this.feeds.contentInterval = 360;\n    this.feeds.contentCallback = 'onaudio';\n\n    this.pagination.dm.addFeed( this.feeds.feedContent, this.feeds.contentUrl,\n        this.feeds.contentInterval, this.feeds.conentCallback, [ this ] );\n\n    this.pagination.dm.start( this.feeds.contentUrl );\n}"},"onData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.AudioExternal.prototype.onData = function( data )\n{\n\n    if ( this.setContent )\n    {\n\n        this.pagination.numEntries = data.pageInfo.numEntries;\n        this.pagination.maxEntries = data.pageInfo.numEntries;\n\n        this.pagination.maxPages = Math.ceil( this.pagination.numEntries / this.pagination.pageSize );\n        this.pagination.$maxNumberContainer.html( this.pagination.maxPages );\n\n        if ( this.pagination.pageNum == this.pagination.maxPages - 1 )\n        {\n            this.pagination.$forwardContainer.addClass( 'inactive' );\n        }\n        else\n        {\n            this.pagination.$forwardContainer.removeClass( 'inactive' );\n        }\n\n    }\n\n    this.pagination.setData( data );\n}"},"parseDuration":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"duration"}]},"Source":"PULSE.CLIENT.RUGBY.AudioExternal.prototype.parseDuration = function( duration )\n{\n    duration = String(duration);\n    var commaSplit = duration.split( ',' );\n    var intDuration = parseInt( commaSplit.join( '' ) );\n\n    if ( intDuration < 60 )\n    {\n        stringDuration = intDuration  + 'sec';\n    }\n    else\n    {\n        var mins = Math.floor( intDuration / 60 );\n        var secs = intDuration % 60;\n        stringDuration = mins + 'min ' + secs + 'sec';\n    }\n    return stringDuration;\n}"}}},"AudioFeatured":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.AudioFeatured"},{"title":"param","description":null,"type":null,"name":"container"}]},"Source":"PULSE.CLIENT.RUGBY.AudioFeatured = function( container )\n{\n\n    this.urlGen = new PULSE.CLIENT.RUGBY.getUrlGenerator( { 'type' : 'audio' } );\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n\n    var pageOptions = {\n        'container' : container,\n        'forwardContainer' : '.next',\n        'backwardContainer' : '.prev',\n        'template' : 'templates/content/audio-list.html',\n        'displayMoreContainer' : '.featuredList'\n    };\n\n    var mediaOptions =\n    {\n        container: container,\n        type: \"list\",//\"player\"\n        link: '.audioThumb', //LIST (data-mediaid is on this link always)\n        link_click : '.audioThumb a',\n        player_scope: \"primary\", //whatever name\n        link_time: '.duration', //inside link container\n        link_title: '.title', //inside link container\n        link_date: '.datePosted', //inside link container\n        external_link_click : '.externalLink',\n        external_player_url : '/worldrugbytv/audio'\n    };\n    this.playlistSlider = new PULSE.CLIENT.UI.PlaylistSlider(pageOptions);\n\n    var mediaList = new PULSE.CLIENT.MediaList( mediaOptions );\n\n    this.setListeners();\n}","prototype":{"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.AudioFeatured.prototype.setListeners = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( 'playlist/get', function( e, params )\n    {\n        that.getMoreContent( params );\n    });\n}"},"getMoreContent":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.AudioFeatured.prototype.getMoreContent = function( data )\n{\n    this.feeds = {};\n\n    this.feeds.contentUrl = this.urlGen.makeContentUrl( PULSE.CLIENT.CMS_ACCOUNT, data.type, PULSE.CLIENT.LANGUAGE, data.id);//seperate[ 0 ] );\n\n    this.feeds.feedContent = data.type + '-' + PULSE.CLIENT.LANGUAGE + '/'+ data.id;\n    this.feeds.contentInterval = 360;\n    this.feeds.contentCallback = 'on' + data.type;\n\n    this.dm.addFeed( this.feeds.feedContent, this.feeds.contentUrl,\n        this.feeds.contentInterval, this.feeds.conentCallback, [ this ] );\n\n    this.dm.start( this.feeds.contentUrl );\n}"},"onData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.AudioFeatured.prototype.onData = function( data )\n{\n    this.playlistSlider.setData( data );\n}"},"onError":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.AudioFeatured.prototype.onError = function( data )\n{\n    var error = { 'error' : true };\n    this.playlistSlider.setData( error );\n}"}}},"ChangePasswordWidget":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the signup widget"}]},"Source":"PULSE.CLIENT.RUGBY.ChangePasswordWidget = function( container, config )\n{\n    this.$container = $( container );\n    this.config = config;\n    this.bindEvents();\n    this.logs = true\n    this.userProfile = PULSE.CLIENT.RUGBY.UserProfileWidget;\n    this.errors = {};\n}","prototype":{"bindEvents":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.ChangePasswordWidget.prototype.bindEvents = function()\n{\n    var that = this;\n\n    this.$button = this.$container.find( '.button' );\n    this.$inputSummary = that.$container.find( '.inputSummary' );\n    this.$username = that.$container.find('#username');\n\n    this.$button.on( 'click', function()\n    {\n        $( this ).parent().submit();\n    } );\n\n    this.$container.submit( function( e )\n    {\n        e.preventDefault();\n\n        var isValid = that.validateForm( $( this ).serializeArray() );\n\n        if ( isValid )\n        {\n            var successCallback = function( data, textStatus, jqXHR )\n                {\n                    that.userProfile.log( \"AJAX SUCCESS DATA\", data );\n                    that.$inputSummary.empty().append(\n                        '<h2\">' + PULSE.I18N.lookup( 'mediazone.widget.changepassword.alert.passwordupdate.success' ) + '</h2>' );\n                },\n                errorCallback = function( jqXHR, textStatus, errorThrown )\n                {\n                    that.userProfile.log( \"AJAX ERROR DATA\", jqXHR );\n                    var textResponse = $.parseJSON( jqXHR.responseText );\n                    that.$inputSummary.empty().append(\n                        '<h2\">' + PULSE.I18N.lookup( 'mediazone.widget.changepassword.alert.passwordupdate.error' ) + '</h2>' );\n                },\n                requestUrl = \"username=\"+that.$username.val()+\"&\"+$( this ).serialize();\n\n            that.userProfile.request( 'changePassword', requestUrl, successCallback,\n                errorCallback, \"POST\" );\n            that.$container[ 0 ].reset();\n        }\n        else\n        {\n            $.each( that.errors, function( k, v )\n            {\n                that.$inputSummary.empty().append( '<h2\">' + v + '</h2>' );\n                return false;\n            } );\n        }\n    } );\n}","successCallback":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"textStatus"},{"title":"param","description":null,"type":null,"name":"jqXHR"}]},"Source":"var successCallback = function( data, textStatus, jqXHR )\n                {\n                    that.userProfile.log( \"AJAX SUCCESS DATA\", data );\n                    that.$inputSummary.empty().append(\n                        '<h2\">' + PULSE.I18N.lookup( 'mediazone.widget.changepassword.alert.passwordupdate.success' ) + '</h2>' );\n                }"},"errorCallback":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"jqXHR"},{"title":"param","description":null,"type":null,"name":"textStatus"},{"title":"param","description":null,"type":null,"name":"errorThrown"}]},"Source":"var successCallback = function( data, textStatus, jqXHR )\n                {\n                    that.userProfile.log( \"AJAX SUCCESS DATA\", data );\n                    that.$inputSummary.empty().append(\n                        '<h2\">' + PULSE.I18N.lookup( 'mediazone.widget.changepassword.alert.passwordupdate.success' ) + '</h2>' );\n                },\n                errorCallback = function( jqXHR, textStatus, errorThrown )\n                {\n                    that.userProfile.log( \"AJAX ERROR DATA\", jqXHR );\n                    var textResponse = $.parseJSON( jqXHR.responseText );\n                    that.$inputSummary.empty().append(\n                        '<h2\">' + PULSE.I18N.lookup( 'mediazone.widget.changepassword.alert.passwordupdate.error' ) + '</h2>' );\n                }"}},"validateForm":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.ChangePasswordWidget.prototype.validateForm = function( data )\n{\n    var isValid = true;\n    var confirmPassword;\n    that = this;\n\n    $.each( data, function( key, v )\n    {\n        var fieldSelector = $( '[name=\"' + v.name + '\"]' );\n\n        if ( v.value == \"\" )\n        {\n            fieldSelector.css( \"border\", \"1px solid red\" );\n            isValid = false;\n        }\n        else\n        {\n            fieldSelector.css( \"border\", \"\" );\n        }\n\n        if ( v.name == \"newPassword\" )\n        {\n            confirmPassword = fieldSelector.val();\n            if(fieldSelector.val().length<6){\n                isValid = false;\n                that.errors = {\n                    \"newPassword\": PULSE.I18N.lookup( 'mediazone.widget.changepassword.alert.lengthwarning' )\n                };\n            }\n        }\n        else if ( v.name == \"confirmNewPassword\" )\n        {\n            if ( fieldSelector.val() != confirmPassword )\n            {\n                isValid = false;\n                that.errors = {\n                    \"confirmPassword\": PULSE.I18N.lookup( 'mediazone.widget.changepassword.alert.nonmatchingpasswords' )\n                };\n            }\n        }\n    } );\n\n    return isValid;\n}"}}},"DHL":{"AllVideos":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the Previous weeks of the DHL widget"},{"title":"param","description":null,"type":{"type":"NameExpression","name":"Object"},"name":"container"},{"title":"param","description":"Configuration for this widget from container attrs","type":{"type":"NameExpression","name":"Object"},"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.DHL.AllVideos = function( container, config, parent )\n{\n    // vars\n    this.$container = $( container );\n    this.config = config;\n    this.parent = parent;\n    this.templates = {\n        allVideos: 'templates/dhl/allVideos.html'\n    };\n\n    this.setListeners();\n}","prototype":{"setListeners":{"Documentation":{"description":"Subscribes to user input events for loading old questions","tags":[]},"Source":"PULSE.CLIENT.RUGBY.DHL.AllVideos.prototype.setListeners = function()\n{\n    var that = this;\n\n    // Load a question in the main view\n    this.$container.on( 'click', '.videoThumb', function( e )\n    {\n        e.preventDefault();\n        var questionId = $(this).attr('data-question-id');\n        that.parent.setQuestion( questionId, true );\n    } );\n}"},"refreshAllVideos":{"Documentation":{"description":"Refreshes the list of closed questions on the DOM","tags":[]},"Source":"PULSE.CLIENT.RUGBY.DHL.AllVideos.prototype.refreshAllVideos = function()\n{\n    var model = { data: [].concat( this.parent.components.pollModel.data ) };\n\n    for( i = 0; i < model.data.length; i++ )\n    {\n        // Return if there are missing photos or videos\n        if( !this.parent.mediaStore[ model.data[ i ].id ].photo ||\n            !this.parent.mediaStore[ model.data[ i ].id ].video )\n        {\n            return;\n        }\n\n        // Lookup photo and video for this question\n        model.data[ i ].photo = this.parent.mediaStore[ model.data[ i ].id ].photo;\n        model.data[ i ].video = this.parent.mediaStore[ model.data[ i ].id ].video;\n    }\n\n    PULSE.CLIENT.Template.publish(\n            this.templates.allVideos,\n            this.$container,\n            model,\n            function(){}\n        );\n}"}}},"Introduction":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the DHL 'Great is in the detail' Sponsorship activation widget"},{"title":"param","description":null,"type":{"type":"NameExpression","name":"Object"},"name":"container"},{"title":"param","description":"Configuration for this widget from container attrs","type":{"type":"NameExpression","name":"Object"},"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.DHL.Introduction = function( container, config )\n{\n    this.$container = $( container );\n    this.config = config;\n    this.COOKIE_NAME = 'DHL_INTRO';\n    this.firstTime = $.cookie( this.COOKIE_NAME ) ? false : true;\n\n    this.init();\n    this.setListeners();\n}","prototype":{"init":{"Documentation":{"description":"Show / Hide component depending on whether user has previously closed the intro","tags":[]},"Source":"PULSE.CLIENT.RUGBY.DHL.Introduction.prototype.init = function()\n{\n    if( this.firstTime )\n    {\n        this.activate();\n    }\n    else\n    {\n        this.deactivate();\n        return;\n    }\n}"},"setListeners":{"Documentation":{"description":"Subscribe to user input events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.DHL.Introduction.prototype.setListeners = function()\n{\n    var that = this;\n\n    this.$container.find( 'a.button').on( 'click', function( e )\n    {\n        e.preventDefault();\n        that.deactivate();\n        that.setCookie();\n    } );\n\n    this.$container.find( '.dotPagination' ).on( 'click', 'li', function( e )\n    {\n        var index = $( this ).index(),\n            $pagination = $( this ).parent(),\n            $pages = that.$container.find( '.instructions' );\n\n        if( index === 0 )\n        {\n            $pages.css( 'left', '0' );\n        }\n        else if( index === 1 )\n        {\n            $pages.css( 'left', '-100%' );\n        }\n        else if( index === 2 )\n        {\n            $pages.css( 'left', '-200%' );\n        }\n\n        $pagination.children().removeClass( 'active' );\n        $pagination.children().eq( index ).addClass( 'active' );\n    } );\n}"},"setCookie":{"Documentation":{"description":"Sets a cookie to prevent showing again","tags":[]},"Source":"PULSE.CLIENT.RUGBY.DHL.Introduction.prototype.setCookie = function()\n{\n    $.cookie( this.COOKIE_NAME, 1, { path: '/' } );\n}"},"activate":{"Documentation":{"description":"Show component","tags":[]},"Source":"PULSE.CLIENT.RUGBY.DHL.Introduction.prototype.activate = function()\n{\n    this.$container.show();\n}"},"deactivate":{"Documentation":{"description":"Hide component","tags":[]},"Source":"PULSE.CLIENT.RUGBY.DHL.Introduction.prototype.deactivate = function()\n{\n    this.$container.hide();\n}"}}},"getDHLPhotoVariant":{"Documentation":{"description":"Returns the variant from a set that has the correct DHL tag associated with it","tags":[]},"Source":"PULSE.CLIENT.RUGBY.DHL.getDHLPhotoVariant = function( variants )\n{\n    var i, j;\n\n    for( i = 0; i < variants.length; i++ )\n    {\n        variant = variants[ i ];\n        if( variant.tag.label === 'DHL GIITD' )\n        {\n            return variant;\n        }\n    }\n}"},"Main":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the DHL 'Great is in the detail' Sponsorship activation widget"},{"title":"param","description":null,"type":{"type":"NameExpression","name":"Object"},"name":"container"},{"title":"param","description":"Configuration for this widget from container attrs","type":{"type":"NameExpression","name":"Object"},"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.DHL.Main = function( container, config )\n{\n    // vars\n    var that = this;\n\n    // Singleton access\n    if( PULSE.CLIENT.RUGBY.DHL.Main.prototype._singletonInstance )\n    {\n        return PULSE.CLIENT.RUGBY.DHL.Main.prototype._singletonInstance;\n    }\n    PULSE.CLIENT.RUGBY.DHL.Main.prototype._singletonInstance = this;\n\n    this.$container = $( container );\n    this.config = config;\n    this.templates = {};\n    this.mediaStore = {};\n    this.urlGenerator = new PULSE.CLIENT.RUGBY.UrlGenerator();\n    this.dm = new PULSE.CLIENT.getJqueryDataManager();\n\n    this.client = PULSE.CLIENT.CMS_ACCOUNT || 'worldrugby';\n    this.event = document.URL.indexOf('rugbyworldcup') > -1 ?  'dhl-delivers----great-is-in-the-detail' : 'test';\n\n    this.components = {};\n    this.components.introduction = new PULSE.CLIENT.RUGBY.DHL.Introduction( this.$container.find( '.dhlIntro' ), this.config, this );\n    this.components.pollModel = new PULSE.CLIENT.CANARY2.Poll( this.client, this.event );\n    this.components.poll = new PULSE.CLIENT.RUGBY.DHL.PollView( this.$container.find( '.dhlHeroContent' ), this.config, this );\n    this.components.allVideos = new PULSE.CLIENT.RUGBY.DHL.AllVideos( this.$container.find( '.dhlPreviousVideos' ), this.config, this );\n    this.components.twitter = new PULSE.CLIENT.RUGBY.DHL.Twitter( this.$container.find( '.twitterList' ), this.config, this );\n\n    // Wait for the video player to load before initialising...\n    $pdk.ready( function( e )\n    {\n        that.pdkHasLoaded = true;\n        that.initialise();\n    } );\n\n    $( function( e )\n    {\n        that.pageHasLoaded = true;\n        that.initialise();\n    } );\n}","prototype":{"initialise":{"Documentation":{"description":"Request initial data, only called once the video player is ready on the page","tags":[]},"Source":"PULSE.CLIENT.RUGBY.DHL.Main.prototype.initialise = function()\n{\n    var that = this;\n\n    if( !this.pdkHasLoaded || !this.pageHasLoaded )\n    {\n        return;\n    }\n    else\n    {\n        // This arbritary timeout seems to fix an issue with pdk not loading...\n        setTimeout( function()\n        {\n            window.PULSE.CLIENT.PDK.addPlayer( 'dhl', '#dhlPlayer', {} );\n            that.setSubscriptions();\n            that.setListeners();\n            that.components.pollModel.getData( true );\n\n            // Remove sharing for mobile webview\n            if( PULSE.CLIENT.ResponsiveUtils.detectMobile() )\n            {\n                that.$container.find( '.socialBox' ).remove();\n            }\n        }, 2000 );\n    }\n}"},"setSubscriptions":{"Documentation":{"description":"Subscribe to data events for poll data","tags":[]},"Source":"PULSE.CLIENT.RUGBY.DHL.Main.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.POLL_EVENTS.DATA, function( e, params )\n    {\n        console.log( that.components.pollModel.data );\n        that.getMediaForQuestions();\n        that.setQuestion();\n    } );\n}"},"setListeners":{"Documentation":{"description":"Subscribes to user input events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.DHL.Main.prototype.setListeners = function()\n{\n    var that = this;\n\n    // Show social drop down\n    this.$container.find('.socialBox').on( 'hover', function( e )\n    {\n        if( e.type === 'mouseenter' )\n        {\n            $( this ).find( '.shareOptions' ).fadeIn( 'fast' );\n        }\n        else\n        {\n            $( this ).find( '.shareOptions' ).fadeOut( 'fast' );\n        }\n    } );\n\n    // Share on click\n    this.$container.find( '.shareOptions li' ).on( 'click', function( e )\n    {\n        var url = window.location.href;\n        if( $( this ).hasClass( 'facebook' ) )\n        {\n            PULSE.CLIENT.FacebookController.publishEvent( url );\n            if( typeof ga !== 'undefined' )\n            {\n                ga( 'send', 'event', 'button', 'click', 'share-facebook' );\n            }\n        }\n        else if( $( this ).hasClass( 'twitter' ) )\n        {\n            PULSE.CLIENT.TwitterController.tweetEvent( 'tweet', { url: url, text: 'Play the DHL Great Is In The Detail Quiz for the chance to win great rugby prizes' } );\n            if( typeof ga !== 'undefined' )\n            {\n                ga( 'send', 'event', 'button', 'click', 'share-twitter' );\n            }\n        }\n        else if( $( this ).hasClass( 'google' ) )\n        {\n            PULSE.CLIENT.GooglePlusController.publishEvent( url );\n            if( typeof ga !== 'undefined' )\n            {\n                ga( 'send', 'event', 'button', 'click', 'share-googleplus' );\n            }\n        }\n    } );\n\n    // Follow DHL\n    this.$container.find( '.tackleManContainer .tweet' ).on( 'click', function( e )\n    {\n        PULSE.CLIENT.TwitterController.tweetEvent( 'follow', { 'screen_name': 'DHLRugby' } );\n        if( typeof ga !== 'undefined' )\n        {\n            ga( 'send', 'event', 'button', 'click', 'follow-tackleman' );\n        }\n    } );\n\n    this.$container.find( '.dhlWidgetHeader .tweet' ).on( 'click', function( e )\n    {\n        PULSE.CLIENT.TwitterController.tweetEvent( 'follow', { 'screen_name': 'DHLRugby' } );\n        if( typeof ga !== 'undefined' )\n        {\n            ga( 'send', 'event', 'button', 'click', 'follow-tackleman' );\n        }\n    } );\n\n    // Show T&Cs\n    this.$container.on( 'click', '.terms', function( e )\n    {\n        e.preventDefault();\n        that.$container.find( '.modalOverlay' ).attr('style', 'display:block;');\n    } );\n\n    // Hide T&Cs\n    this.$container.find( '.dhlTerms' ).on( 'click', '.closeBtn, .closeModal', function( e )\n    {\n        e.preventDefault();\n        that.$container.find( '.modalOverlay' ).hide();\n    } );\n}"},"setQuestion":{"Documentation":{"description":"Sets a new question and calls to update view\n    - Picks the latest question if no id is passed as a parameter\n    - Otherwise used to load questions from previous weeks","tags":[{"title":"param","description":"[description]","type":{"type":"ArrayType","elements":[{"type":"NameExpression","name":"type"}]},"name":"questionId"}]},"Source":"PULSE.CLIENT.RUGBY.DHL.Main.prototype.setQuestion = function( questionId, autoplay )\n{\n    questionId = questionId ? questionId : this.components.pollModel.getLatestQuestion().id;\n\n    if( this.components.pollModel.data )\n    {\n        this.question = this.components.pollModel.getQuestionById( parseInt( questionId, undefined ) );\n        this.question.index = this.components.pollModel.getIndexOfQuestionWithId( parseInt( questionId, undefined ) );\n    }\n\n    this.components.poll.userHasVoted = false;\n    this.components.poll.userIsCorrect = undefined;\n    this.components.poll.refreshPollView( this.question, autoplay );\n    this.components.allVideos.refreshAllVideos();\n}"},"getMediaForQuestions":{"Documentation":{"description":"Requests data manager for photo and video content associated with the question","tags":[]},"Source":"PULSE.CLIENT.RUGBY.DHL.Main.prototype.getMediaForQuestions = function()\n{\n    var i, question, photoUrl, videoUrl;\n\n    for( i = 0; i < this.components.pollModel.data.length; i++ )\n    {\n        question = this.components.pollModel.data[ i ];\n\n        if( !this.mediaStore[ question.id ] )\n        {\n            this.mediaStore[ question.id ] = {};\n        }\n\n        photoUrl = this.urlGenerator.makeContentUrl( 'System', 'photo', PULSE.CLIENT.LANGUAGE, question.userText1 );\n        videoUrl = this.urlGenerator.makeContentUrl( 'System', 'video', PULSE.CLIENT.LANGUAGE, question.userText2 );\n        photoId = 'photo-' + question.id;\n        videoId = 'video-' + question.id;\n\n        this.dm.addFeed( photoId, photoUrl, 0, undefined, [ this ] );\n        this.dm.addFeed( videoId, videoUrl, 0, undefined, [ this ] );\n        this.dm.startAll();\n    }\n}"},"hideTackleMan":{"Documentation":{"description":"Functions for hiding and showing TackleMan depending on the state of the current\nquestion","tags":[]},"Source":"PULSE.CLIENT.RUGBY.DHL.Main.prototype.hideTackleMan = function()\n{\n    this.$container.find('.tackleManContainer').last().slideUp();\n}"},"showTackleMan":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.DHL.Main.prototype.showTackleMan = function()\n{\n    this.$container.find('.tackleManContainer').last().slideDown();\n}"},"onData":{"Documentation":{"description":"Called upon receiving photo/video content data","tags":[]},"Source":"PULSE.CLIENT.RUGBY.DHL.Main.prototype.onData = function( data, id )\n{\n    console.log( 'Received ' + id );\n\n    if( this.mediaStore[ id.substring( 6 ) ] )\n    {\n        this.mediaStore[ id.substring( 6 ) ][ id.substring( 0, 5 ) ] = data;\n    }\n\n    this.components.poll.refreshPollView( this.question );\n    this.components.allVideos.refreshAllVideos();\n}"}}},"PollView":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the Poll view controller component of the DHL widget\n    - Requires the canary2 poll model found in common/models/poll/\n    - Send view refresh instructions to the accompanying PollView component"},{"title":"param","description":null,"type":{"type":"NameExpression","name":"Object"},"name":"container"},{"title":"param","description":"Configuration for this widget from container attrs","type":{"type":"NameExpression","name":"Object"},"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.DHL.PollView = function( container, config, parent )\n{\n    // vars\n    this.$container = $( container );\n    this.config = config;\n    this.parent = parent;\n    this.$questionContainer = this.$container.find( '.questionContent' );\n    this.$answerContainer = this.$container.find( '.answerContent' );\n    this.templates = {\n        'closed': 'templates/dhl/closed.html',\n        'voted': 'templates/dhl/voted.html',\n        'open': 'templates/dhl/open.html',\n        'empty': 'templates/dhl/empty.html'\n    };\n    this.pollModel = this.parent.components.pollModel;\n\n    this.setListeners();\n}","prototype":{"setListeners":{"Documentation":{"description":"Subscribe to user input events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.DHL.PollView.prototype.setListeners = function()\n{\n    var that = this;\n\n    // Answer question\n    this.$container.on( 'click', '.answer', function( e )\n    {\n        e.preventDefault();\n\n        var index = $.inArray( $(this).parent()[0], that.$container.find( 'ul.answerList' ).children() );\n        if( typeof ga !== 'undefined' )\n        {\n            ga( 'send', 'event', 'button', 'click', 'Answer ' + ( index + 1 ) );\n        }\n\n        that.userIsCorrect = $( this ).hasClass( 'correct' );\n        that.userHasVoted = true;\n        that.refreshPollView( that.parent.question );\n\n        // Scroll to top on mobile devices\n        if( $( window ).width() < 800 && scrollTo )\n        {\n            scrollTo( 0, 800, easing.easeInOutCubic );\n        }\n    } );\n\n    // Tweet to tackleman\n    this.$container.on( 'click', '.tackleManMobile .button', function( e )\n    {\n        PULSE.CLIENT.TwitterController.tweetEvent( 'tweet', { text: 'Tweet Tackleman your thoughts @DHLRugby #TACKLEMAN' } );\n        if( typeof ga !== 'undefined' )\n        {\n            ga( 'send', 'event', 'button', 'click', 'tweet-tackleman' );\n        }\n    } );\n\n    $( 'body' ).on( PULSE.CLIENT.PDK_EVENTS.VIDEO_PLAYING, function( e, params )\n    {\n        if( params.scope === 'dhl' )\n        {\n            that.trackVideoPlaying();\n        }\n    } );\n\n    $( 'body' ).on( PULSE.CLIENT.PDK_EVENTS.VIDEO_END, function( e, params )\n    {\n        if( params.scope === 'dhl' )\n        {\n            that.canTrackVideoPlaying = true;\n        }\n    } );\n\n    that.$container.find( '.mediaControls .play' ).click( function( e )\n    {\n        if( that.$container.find( '#dhlPlayer' ).hasClass( 'playing' ) )\n        {\n            that.canTrackVideoPlaying = true;\n        }\n        e.preventDefault();\n    } );\n}"},"setVideo":{"Documentation":{"description":"Loads the current questions video into the player and set preview image","tags":[]},"Source":"PULSE.CLIENT.RUGBY.DHL.PollView.prototype.setVideo = function( question, autoplay )\n{\n    var that = this,\n        scope = 'dhl',\n        video = question.video ? question.video : this.parent.mediaStore[ question.id ].video,\n        photo = question.photo ? question.photo : this.parent.mediaStore[ question.id ].photo,\n        photoUrl = PULSE.CLIENT.RUGBY.DHL.getDHLPhotoVariant( photo.variants ).url;\n\n    this.canTrackVideoPlaying = true;\n\n    // Set new video\n    window.PULSE.CLIENT.PDK.setVideo(\n            scope, // player scope\n            video.mediaId, // media id\n            video.duration, // duration\n            video.title, // title\n            undefined, // daysAgo\n            autoplay || false // autoplay\n        );\n\n    // Set the video preview as the photo image for this question\n    // setTimeout( function() {\n    //     that.$container.find('img.preview').attr( 'src', photoUrl );\n    //     that.$container.find('img.preview').show();\n    //\n    // }, 300 );\n    $('.cover').hide();\n}"},"trackVideoPlaying":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.DHL.PollView.prototype.trackVideoPlaying = function()\n{\n    if( this.canTrackVideoPlaying )\n    {\n        if( typeof ga !== 'undefined' )\n        {\n            ga( 'send', 'event', 'button', 'click', 'Answer video' );\n        }\n        this.canTrackVideoPlaying = false;\n    }\n}"},"refreshPollView":{"Documentation":{"description":"Refreshes the poll view based on the current widget state","tags":[]},"Source":"PULSE.CLIENT.RUGBY.DHL.PollView.prototype.refreshPollView = function( question, autoplay )\n{\n    var that = this,\n        model = question,\n        view = this.getView( model ),\n        $container = view === 'open' ? this.$questionContainer : this.$answerContainer.find('.correctInfo');\n\n    model.photo = this.parent.mediaStore[ model.id ].photo;\n    model.video = this.parent.mediaStore[ model.id ].video;\n    model.userIsCorrect = this.userIsCorrect;\n\n    // Only refresh the view once all media content has been received...\n    if( !question.photo || !question.video )\n    {\n        return;\n    }\n\n    console.log( 'Publishing \\'' + view + '\\' view' );\n\n    PULSE.CLIENT.Template.publish(\n            this.templates[ view ],\n            $container,\n            model,\n            function()\n            {\n                that.setVideo( question, autoplay );\n                if( view === 'open' )\n                {\n                    that.$answerContainer.hide();\n                    that.$questionContainer.show();\n                }\n                else\n                {\n                    that.$answerContainer.show();\n                    that.$questionContainer.hide();\n                }\n\n                $( '.dhlHeroContent .tackleMan' ).removeClass( 'correct' );\n                $( '.dhlHeroContent .tackleMan' ).removeClass( 'incorrect' );\n\n                var tackleManClass = that.userIsCorrect ? 'correct' : 'incorrect';\n                $( '.dhlHeroContent .tackleMan' ).addClass( tackleManClass );\n            }\n        );\n}"},"getView":{"Documentation":{"description":"Refreshes the poll view based on the current widget state","tags":[]},"Source":"PULSE.CLIENT.RUGBY.DHL.PollView.prototype.getView = function( question )\n{\n    if( !question.open )\n    {\n        // If question is closed and question from a previous week, show complete view\n        this.parent.hideTackleMan();\n        return 'closed';\n    }\n    else if( question.open && this.userHasVoted )\n    {\n        // The right and wrong answer can be displayed in the view itself\n        this.parent.hideTackleMan();\n        return 'voted';\n    }\n    // If question is open and no votes have been made show the open view\n    else\n    {\n        this.parent.showTackleMan();\n        return 'open';\n    }\n}"}}},"Twitter":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the Twitter list component of DHL widget"},{"title":"param","description":"Component container","type":{"type":"NameExpression","name":"Object"},"name":"container"},{"title":"param","description":"Configuration for this widget from container attrs","type":{"type":"NameExpression","name":"Object"},"name":"config"},{"title":"param","description":"Parent widget constructor","type":{"type":"NameExpression","name":"Object"},"name":"parent"}]},"Source":"PULSE.CLIENT.RUGBY.DHL.Twitter = function( container, config, parent )\n{\n    // vars\n    this.$container = $( container );\n    this.config = config;\n    this.parent = parent;\n    this.twitter = PULSE.CLIENT.getTwitterInstance();\n    this.templates = {\n        tweets: 'templates/dhl/tweets.html'\n    };\n    this.twitterList = 'irbdhl_list';\n\n    // init\n    this.setSubscriptions();\n    this.twitter.getList( this.twitterList, { fileName: this.twitterList } );\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"Subscribe to tweet list events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.DHL.Twitter.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.TWITTER_EVENTS.LIST, function( e, params )\n    {\n        that.refreshTweetList();\n    } );\n}"},"refreshTweetList":{"Documentation":{"description":"Refreshes the tweet list on the DOM","tags":[]},"Source":"PULSE.CLIENT.RUGBY.DHL.Twitter.prototype.refreshTweetList = function()\n{\n    var that = this,\n        model = this.twitter.getTweetsListModel( this.twitterList );\n\n    PULSE.CLIENT.Template.publish(\n            this.templates.tweets,\n            this.$container,\n            model,\n            function(){}\n        );\n}"}}}},"ContentFilter":{"Documentation":{"description":"Content filter UI component","tags":[{"title":"param","description":null,"type":{"type":"NameExpression","name":"DOMElement"},"name":"container"},{"title":"param","description":"{Object} filtering options","type":null,"name":"config"},{"title":"constructor","description":null,"type":null,"name":null}]},"Source":"PULSE.CLIENT.RUGBY.ContentFilter = function ( container )\n{\n    this.$container = $( container );\n    this.template = 'templates/common/content-filter.html';\n    this.render();\n    this.addFilters();\n}","prototype":{"render":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.ContentFilter.prototype.render = function ()\n{\n    var html = JST[ 'templates/content/content-filter.html' ]();\n    this.$container.html( html );\n}"},"addFilters":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.ContentFilter.prototype.addFilters = function ()\n{\n    if( PULSE.CLIENT.RUGBY.EventTeams &&\n        PULSE.CLIENT.RUGBY.EventTeams[ '1238' ] )\n    {\n        var teamHash = PULSE.CLIENT.RUGBY.EventTeams[ '1238' ];\n        var teams = [];\n\n        for( var teamId in teamHash )\n        {\n            teams.push( teamHash[ teamId ] );\n        }\n\n        teams.sort( function( a, b )\n        {\n            if( a.name > b.name )\n            {\n                return 1;\n            }\n            else if( b.name > a.name )\n            {\n                return -1;\n            }\n            else\n            {\n                return 0;\n            }\n        } );\n\n        var teamsFilter = new PULSE.CLIENT.RUGBY.FilterDropDown(\n        {\n            container: this.$container.find( '.filterDropdown' ),\n            eventNamespace: 'team-filter-1',\n            type: 'RUGBY_TEAM',\n            label: PULSE.I18N.lookup( 'action.select.team' ),\n            items: teams\n        } );\n    }\n}"}}},"FilterDropDown":{"Documentation":{"description":"Drop down UI component","tags":[{"title":"param","description":"{Object} filtering options","type":null,"name":"options"},{"title":"constructor","description":null,"type":null,"name":null}]},"Source":"PULSE.CLIENT.RUGBY.FilterDropDown = function ( options )\n{\n    this.eventNamespace = options.eventNamespace || 'filter-drop-down';\n    this.type = options.type || '';\n    this.label = options.label || '';\n    this.itemsTemplate = options.itemsTemplate || 'templates/content/filter-drop-down.html';\n    this.labelTemplate = options.itemsTemplate || 'templates/content/filter-drop-down-label.html'\n    this.items = options.items || {};\n    this.$container = $( options.container );\n\n    this.$label = null;\n    this.$items = null;\n\n    this.render();\n    this.setEventListeners();\n}","prototype":{"render":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.FilterDropDown.prototype.render = function ()\n{\n\n    var itemsHtml = JST[ this.itemsTemplate ]( { items : this.items } );\n    var $items = $( itemsHtml );\n    var labelHtml = JST[ this.labelTemplate ]( { label : this.label } );\n    var $label = $( labelHtml );\n\n    this.$container.find( '.filterBy' ).append( $items );\n    this.$items = $items;\n\n    this.$container.find( '.filters' ).append( $label );\n    this.$label = $label;\n}"},"publishEvent":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.FilterDropDown.prototype.publishEvent = function ( data )\n{\n    var data = data || {};\n\n    data.type = this.type;\n\n    console.log( 'publish -> ' + 'filter-drop-down' + '.' + this.eventNamespace, [ data ] );\n    $( 'body' ).trigger( 'filter-drop-down' + '.' + this.eventNamespace, [ data ] );\n}"},"publishItems":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"items"}]},"Source":"PULSE.CLIENT.RUGBY.FilterDropDown.prototype.publishItems = function ( items )\n{\n    this.publishEvent( {items:items} );\n}"},"setEventListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.FilterDropDown.prototype.setEventListeners = function ()\n{\n    var $label = this.$label;\n    var $items = this.$items;\n    var $apply = this.$container.find( '.apply' );\n    var $selectAll = this.$container.find( '.selectAll' );\n    var $icon = $label.find( '.icon' );\n\n    var that = this;\n\n    $label.on( 'click', function ()\n    {\n        $items.toggleClass( 'active' );\n    } );\n\n    $items.on( 'click', '.optionContianer', function ()\n    {\n        var $option = $( this ).find( '.option' );\n        var id = $option.data( 'id' );\n\n        if ( $option.hasClass( 'active' ) ) {\n            $option.removeClass( 'active' );\n        }\n        else {\n            $option.addClass( 'active' );\n        }\n    } );\n\n    $apply.on( 'click', function ()\n    {\n        var items = [];\n\n        $items.find( '.option' ).each( function ( idx, el )\n        {\n            var $this = $( this );\n            var id = $this.data( 'id' );\n\n            if ( $this.hasClass( 'active' ) ) {\n                items.push( id );\n            }\n        } );\n\n        $icon.removeClass( 'drop-down' );\n        $icon.addClass( 'close' );\n        $items.toggleClass( 'active' );\n        that.publishItems( items );\n    } );\n\n    $icon.on( 'click', function ( e )\n    {\n        var $this = $( this );\n\n        if ( !$icon.hasClass( 'close' ) ) {\n            return;\n        }\n        e.stopPropagation();\n\n        $icon.addClass( 'drop-down' );\n        $icon.removeClass( 'close' );\n        $items.find( '.option' ).removeClass( 'active' );\n        that.publishItems( [] );\n    } );\n\n    $selectAll.on( 'click', function ()\n    {\n\n        var $this = $( this );\n        var selected = !!$this.data( 'selected' );\n\n        $items.find( '.option' ).each( function ( idx, el )\n        {\n            var $el = $( el );\n\n            if ( selected ) {\n                $el.removeClass( 'active' );\n                $this.data( 'selected', false )\n                $this.text( $this.data( 'label-select' ) );\n            }\n            else {\n                $el.addClass( 'active' );\n                $this.data( 'selected', true );\n                $this.text( $this.data( 'label-clear' ) );\n            }\n        } );\n    } );\n}"}}},"DocumentList":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for Audio List widget"},{"title":"param","description":"Jquery object or selector string","type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"Object"},{"type":"NameExpression","name":"String"}]},"name":"container"}]},"Source":"PULSE.CLIENT.RUGBY.DocumentList = function( container )\n{\n\n    this.urlGen = new PULSE.CLIENT.RUGBY.getUrlGenerator( { 'type' : 'document' } );\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n\n    this.paginationId = 'documentList' + Math.random();\n\n    var pageOptions = {\n        'container' : container,\n        'forwardContainer' : '.next',\n        'backwardContainer' : '.prev',\n        'currentNumberContainer' : '.paginationValue',\n        'maxNumberContainer' : '.maxPages',\n        'template' : 'templates/content/document-list.html',\n        'displayMoreContainer' : '.listItemsDoc',\n        'paginationId' : this.paginationId\n    };\n\n    this.dateContainer = '.documentDate';\n    this.$container = $( container );\n    this.$documentContainer = this.$container.find( '.listItemsDoc' );\n    this.$pagination = this.$container.find( '.pagination' );\n\n    this.pagination = new PULSE.CLIENT.UI.Pagination(pageOptions);\n\n    this.setListeners();\n    //this.formatDate();\n}","prototype":{"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.DocumentList.prototype.setListeners = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( 'content/get', function( e, params )\n    {\n        if ( params.id === that.paginationId )\n        {\n            that.getMoreContent();\n        }\n    });\n\n    // PULSE.CLIENT.subscribe('content/update', function()\n    // {\n    //     that.formatDate();\n    // });\n\n}"},"getMoreContent":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.DocumentList.prototype.getMoreContent = function()\n{\n    this.feeds = {};\n\n    this.loading();\n\n    // if ( this.pagination.contentTags.length > 0 )\n    // {\n    //     this.feeds.contentUrl = this.urlGen.makeContentQueryUrl( 'System', PULSE.CLIENT.LANGUAGE, this.pagination.pageSize, this.pagination.pageNum, this.pagination.contentTags );\n    // }\n    // else\n    // {\n    //     this.feeds.contentUrl = this.urlGen.makeContentQueryUrl( 'System', PULSE.CLIENT.LANGUAGE, this.pagination.pageSize, this.pagination.pageNum );\n    // }\n    this.feeds.contentUrl = this.urlGen.makeContentQuery( PULSE.CLIENT.CMS_ACCOUNT, PULSE.CLIENT.LANGUAGE, { \"pageSize\" : this.pagination.pageSize, \"page\" : this.pagination.pageNum, \"tagNames\" : this.pagination.contentTags, \"references\" : this.pagination.references } );\n\n\n    this.feeds.feedContent = 'document';\n    this.feeds.contentInterval = 360;\n    this.feeds.contentCallback = 'onDocument';\n\n    this.dm.addFeed( this.feeds.feedContent, this.feeds.contentUrl,\n        this.feeds.contentInterval, this.feeds.conentCallback, [ this ] );\n\n    this.dm.start( this.feeds.contentUrl );\n}"},"onData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.DocumentList.prototype.onData = function( data )\n{\n    this.pagination.setData( data );\n}"},"loading":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.DocumentList.prototype.loading = function()\n{\n    this.$documentContainer.html( '<div class=\"spinner\"><div style=\"height : 25px; width : 25px\"></div></div>' );\n\n}"},"formatDate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.DocumentList.prototype.formatDate = function()\n{\n    var dates = this.$container.find( this.dateContainer );\n\n    for ( var i = 0; i < dates.length; i++ )\n    {\n        var dateText = $( dates[ i ] ).text();\n\n        if ( dateText.indexOf( '/' ) > 0 )\n        {\n            var dateSplit = dateText.split( '/' );\n            if ( dateSplit.length > 1 )\n            {\n                var temp = dateSplit[ 0 ];\n                dateSplit[ 0 ] = dateSplit[ 1 ];\n                dateSplit[ 1 ] = temp;\n                dateText = dateSplit.join( '/' );\n            }\n        }\n\n        var date = PULSE.CLIENT.DateUtil.parseDateTime( dateText );\n        var returnString = PULSE.CLIENT.DateUtil.getDate( date, true ) + ' ' + PULSE.CLIENT.DateUtil.getMonth( date ) + ', ' + date.getFullYear();\n\n        $(dates[ i ]).text( returnString );\n    }\n}"}}},"ContactListSubscriptions":{"Documentation":{"description":"Contact List Subscriptions UI component\nManages user phone number and contact list SMS settings","tags":[{"title":"param","description":"{Object|String} A DOM element or element selector","type":null,"name":"options"},{"title":"constructor","description":null,"type":null,"name":null}]},"Source":"PULSE.CLIENT.RUGBY.ContactListSubscriptions = function( container )\n{\n    this.$container = $( container );\n    this.urlFactory = new PULSE.CLIENT.RUGBY.UrlGenerator();\n    this.dataService = this.createDataService();\n\n    this.subscribedChannels = [];\n\n    this.strings = {\n        selectAll: PULSE.I18N.lookup( 'mediazone.action.filter.selectall' ),\n        deselectAll: PULSE.I18N.lookup( 'mediazone.action.filter.deselectall' )\n    };\n\n    this.$languages = this.$container.find( '#sms-language-dropdown' );\n    this.$channelsWrapper = this.$container.find( '#sms-teams-dropdown' );\n    this.$channels = this.$channelsWrapper.find( '.sub-wrap .option' );\n    this.$editMobileNumberWrapper = this.$container.find( '.numberChange' );\n    this.$editMobileNumberField = this.$container.find( '.editIcon input' );\n\n    this.$saveBtn = this.$container.find( '.save' );\n    this.$updateBtn = this.$container.find( '.update' );\n    this.$editBtn = this.$container.find( '.edit' );\n    this.$cancelBtn = this.$container.find( '.cancel' );\n    this.$selectAllBtn = this.$container.find( '.selectAll' );\n    this.$messageBox = this.$container.find( '.updateNumber' );\n\n\n    this.setEventListeners();\n    this.showChannels( PULSE.CLIENT.LANGUAGE );\n}","prototype":{"showChannels":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"language"}]},"Source":"PULSE.CLIENT.RUGBY.ContactListSubscriptions.prototype.showChannels = function( language )\n{\n    this.selectedLanguage = language;\n\n    var $language = this.$languages.find( '.option[data-id=\"' + language + '\"]' ).addClass( 'active' );\n    this.$languages.find( '.option' ).removeClass( 'active' );\n    $language.addClass( 'active' );\n\n    var $channels = this.$container.find( '.language-wrapper[data-language=\"' + language + '\"]' );\n    $channels.siblings().hide();\n    $channels.show();\n}"},"createDataService":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.ContactListSubscriptions.prototype.createDataService = function()\n{\n    var resources = {\n        subscribe: this.urlFactory.makeContactListSubscriptionUrl(),\n        unsubscribe: this.urlFactory.makeContactListUnsubscriptionUrl(),\n        getUserContactList: this.urlFactory.makeContactSubscriptionListUrl(),\n        updateMobile: this.urlFactory.makeUpdateContactMobileUrl()\n    };\n\n    function subscribe( data )\n    {\n        return $.ajax(\n        {\n            type: 'post',\n            url: resources.subscribe,\n            data: data\n        } );\n    }\n\n    function unsubscribe( data )\n    {\n        return $.ajax(\n        {\n            type: 'post',\n            url: resources.unsubscribe,\n            data: data\n        } );\n    }\n\n    function updateMobile( data )\n    {\n        return $.ajax(\n        {\n            type: 'post',\n            url: resources.updateMobile,\n            data: data\n        } );\n    }\n\n    function getChannels( callback )\n    {\n        var that = this;\n        return $.ajax(\n        {\n            type: 'get',\n            url: resources.getUserContactList\n        } );\n    }\n\n    return {\n        subscribe: subscribe,\n        unsubscribe: unsubscribe,\n        updateMobile: updateMobile,\n        getChannels: getChannels\n    };\n}"},"setEventListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"container"}]},"Source":"PULSE.CLIENT.RUGBY.ContactListSubscriptions.prototype.setEventListeners = function( container )\n{\n    var that = this;\n    var dataService = this.dataService;\n    var $container = this.$container;\n    var $panel = $container.find( '.manageSMS' );\n\n    $container.find( '.settingsButton' ).on( 'click', function()\n    {\n        if( $panel.hasClass( 'active' ) === false && !that.gotUsersMemberships )\n        {\n            that.dataService.getChannels().then( function( channelIds )\n            {\n                that.subscribedChannels = channelIds;\n                for ( var i = 0, iLimit = channelIds.length; i < iLimit; i++ )\n                {\n                    var id = channelIds[ i ];\n                    $panel.find( '.option[data-id=\"' + id + '\"]' ).addClass( 'active' );\n                }\n            } );\n            that.gotUsersMemberships = true;\n        }\n        else\n        {\n            that.$channels.each( function()\n            {\n                var $channel = $( this );\n                if( _.indexOf( that.subscribedChannels, +$channel.data( 'id' ) ) > -1 )\n                {\n                    $channel.addClass( 'active' );\n                }\n                else\n                {\n                    $channel.removeClass( 'active' );\n                }\n            } );\n        }\n\n        that.$saveBtn.removeClass( 'active' );\n        $panel.toggleClass( 'active' );\n    } );\n\n    this.$cancelBtn.on( 'click', function()\n    {\n        $panel.toggleClass( 'active' );\n        that.$messageBox.empty();\n    } );\n\n    this.$editMobileNumberField.on( 'focus', function()\n    {\n        that.$editMobileNumberWrapper.addClass( 'active' );\n        that.$messageBox.empty();\n    } );\n\n    this.$updateBtn.on( 'click', function( e )\n    {\n        var phoneNumber = that.$editMobileNumberField.val().toString();\n        dataService.updateMobile(\n        {\n            phoneNumber: phoneNumber\n        } ).then( function( response )\n        {\n            that.$editMobileNumberWrapper.removeClass( 'active' );\n            if(response == phoneNumber)\n            {\n                that.$messageBox.empty().append(PULSE.I18N.lookup( 'mediazone.widget.smsalerts.mobilenumber.updatesuccess' ));\n            }\n            else\n            {\n                that.$messageBox.empty().append(PULSE.I18N.lookup( 'mediazone.widget.smsalerts.mobilenumber.updatefail' ));\n            }\n\n        } );\n    } );\n\n    this.$languages.on( 'click', '.option', function()\n    {\n        var languageId = $( this ).data( 'id' );\n        that.showChannels( languageId );\n    } );\n\n    this.$channels.on( 'click', function()\n    {\n        $( this ).toggleClass( 'active' );\n        that.$saveBtn.toggleClass( 'active', that.checkSaveActiveState() );\n    } );\n\n    this.$selectAllBtn.on( 'click', function()\n    {\n        var $selectAllBtn = $( this );\n        var $channels = that.$channelsWrapper.find( '.language-wrapper[data-language=\"' +\n            that.selectedLanguage + '\"] .option' );\n\n        if( $selectAllBtn.hasClass( 'active' ) )\n        {\n            $selectAllBtn.text( that.strings.selectAll );\n            $channels.removeClass( 'active' );\n        }\n        else\n        {\n            $selectAllBtn.text( that.strings.deselectAll );\n            $channels.addClass( 'active' );\n        }\n\n        var saveBtnActive = that.checkSaveActiveState();\n        that.$saveBtn.toggleClass( 'active', saveBtnActive );\n        $selectAllBtn.toggleClass( 'active' );\n    } );\n\n    this.$saveBtn.on( 'click', function()\n    {\n        var $saveBtn = $( this );\n        if ( $saveBtn.hasClass( 'active' ) === false )\n        {\n            return;\n        }\n\n        var ids = that.getActiveListsIds();\n        var addedChannels = _.difference( ids, that.subscribedChannels );\n        if( addedChannels.length )\n        {\n            dataService.subscribe(\n            {\n                contactListIds: addedChannels\n            } ).then( function( response )\n            {\n                $panel.removeClass( 'active' );\n                that.subscribedChannels = ids;\n                console.log( response );\n            } );\n        }\n\n        var removedChannels = _.difference( that.subscribedChannels, ids );\n        if( removedChannels.length )\n        {\n            dataService.unsubscribe(\n            {\n                contactListIds: removedChannels\n            } ).then( function( response )\n            {\n                $panel.removeClass( 'active' );\n                that.subscribedChannels = ids;\n                console.log( response );\n            } );\n        }\n    } )\n}"},"checkSaveActiveState":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.ContactListSubscriptions.prototype.checkSaveActiveState = function()\n{\n    var ids = this.getActiveListsIds();\n    var added = _.difference( ids, this.subscribedChannels );\n    var removed = _.difference( this.subscribedChannels, ids );\n\n    return added.length > 0 || removed.length > 0;\n}"},"getActiveListsIds":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.ContactListSubscriptions.prototype.getActiveListsIds = function()\n{\n    var ids = [];\n    this.$channels.each( function()\n    {\n        var $channel = $( this );\n        if ( $channel.hasClass( 'active' ) )\n        {\n            ids.push( parseInt( $channel.data( 'id' ), 10 ) );\n        }\n    } );\n\n    return ids;\n}"}}},"EmbeddedFixturesWidget":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the fixtures widget"}]},"Source":"PULSE.CLIENT.RUGBY.EmbeddedFixturesWidget = function( container, config, tournament )\n{\n    this.config = config;\n    this.$container = $( container );\n\n    config = {\n        match: \"templates/fixtures/fixture.html\",\n        tournament : \"templates/fixtures/tournament-fixtures.html\"\n    };\n\n    var match = new PULSE.CLIENT.RUGBY.RenderMatches( container, 'fixtures', config, tournament );\n}"},"FixturesWidget":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the fixtures widget"}]},"Source":"PULSE.CLIENT.RUGBY.FixturesWidget = function( container, config, tournament )\n{\n    this.$container = $( container );\n    this.config = config;\n    this.tournament = tournament;\n\n    this.config.templates = {\n        match: \"templates/fixtures/fixture.html\",\n        tournament : \"templates/fixtures/tournament-fixtures.html\"\n    };\n\n    this.matchList = new PULSE.CLIENT.RUGBY.Matches( container, 'fixtures', config, tournament );\n}"},"EmbeddedResultsWidget":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the fixtures widget"}]},"Source":"PULSE.CLIENT.RUGBY.EmbeddedResultsWidget = function( container, config, tournament )\n{\n    this.config = config;\n    this.$container = $( container );\n\n    config = {\n        match: \"templates/results/result.html\",\n        tournament : \"templates/results/tournament-results.html\"\n    };\n\n    var match = new PULSE.CLIENT.RUGBY.RenderMatches( container, 'results', config, tournament );\n}"},"FixturesRWCWidget":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the fixtures widget"}]},"Source":"PULSE.CLIENT.RUGBY.FixturesRWCWidget = function( container, config, tournament )\n{\n    this.$container = $( container );\n    this.config = config;\n    this.tournament = tournament;\n\n    this.config.templates = {\n        match: \"templates/fixtures/fixture.html\",\n        tournament : \"templates/fixtures/rwc-fixtures.html\"\n    };\n\n    this.topMatches = new PULSE.CLIENT.RUGBY.TournamentMatchesSummary( this.$container.find( '.latest-next-widget' ), config, tournament );\n    this.matchList = new PULSE.CLIENT.RUGBY.Matches( container, 'all', config, tournament );\n\n    $( '.matchBtns' ).hide();\n\n    this.getCalendarUrl();\n\n}","prototype":{"getCalendarUrl":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.FixturesRWCWidget.prototype.getCalendarUrl = function()\n{\n    var $tvListings = this.$container.find( '.tvListings' );\n    if ( $tvListings )\n    {\n        var lang;\n        var shortName\n        switch( PULSE.CLIENT.LANGUAGE )\n        {\n            case 'fr':\n                lang = 'france';\n                shortName = 'FR';\n                break;\n            case 'ja':\n                lang = 'japan';\n                shortName = 'JP';\n                break;\n            case 'es':\n                lang = 'spain';\n                shortName = 'ES';\n                break;\n            default:\n                lang = 'unitedkingdom';\n                shortName = 'GB';\n                break;\n        }\n        var url = 'http://calendar.rugbyworldcup.com/' + lang +'?global=schedule&country=' + shortName + '&utm_source=website_button';\n        $tvListings.attr( 'href', url );\n    }\n}"}}},"SignupWidget":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the signup widget"}]},"Source":"PULSE.CLIENT.RUGBY.SignupWidget = function( container, config )\n{\n\tthis.$container = $( container );\n    this.config = config;\n\n    this.setListeners();\n}","prototype":{"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.SignupWidget.prototype.setListeners = function()\n{\n\tvar that = this;\n\n\tthis.$button = this.$container.find('#signup_sendform');\n\tthis.$button.on('click', function(){\n\n\t\t//clean\n\t\tthat.$container.find('#signup_name').removeClass(\"error\");\n\t\tthat.$container.find('#signup_surname').removeClass(\"error\");\n\t\tthat.$container.find('#signup_email').removeClass(\"error\");\n\t\tthat.$container.find('#signup_postcode').removeClass(\"error\");\n\t\t$('#signup_name_error').remove();\n\t\t$('#signup_surname_error').remove();\n\t\t$('#signup_email_error').remove();\n\t\t$('#signup_postcode_error').remove();\n\n\t\tthat.grabDataAndValidate();\n\t});\n\n\t//clean errors\n\tthis.$container.find('#signup_name').keypress(function(){\n\t\t$( this ).removeClass(\"error\");\n\t\t$('#signup_name_error').remove();\n\t});\n\n\tthis.$container.find('#signup_surname').keypress(function(){\n\t\t$( this ).removeClass(\"error\");\n\t\t$('#signup_surname_error').remove();\n\t});\n\n\tthis.$container.find('#signup_email').keypress(function(){\n\t\t$( this ).removeClass(\"error\");\n\t\t$('#signup_email_error').remove();\n\t});\n\n\tthis.$container.find('#signup_postcode').keypress(function(){\n\t\t$( this ).removeClass(\"error\");\n\t\t$('#signup_postcode_error').remove();\n\t});\n}"},"grabDataAndValidate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.SignupWidget.prototype.grabDataAndValidate = function()\n{\n\tvar check = true;\n\n\t//grabdata\n\tthis.dataFromUser = {\n\t\t\"forename\": '',\n\t\t\"surname\": '',\n\t\t\"email\": '',\n\t\tcontactListIds: '',\n\t\t\"postcode\": '',\n\t};\n\n\tthis.dataFromUser.forename = this.$container.find('#signup_name').val();\n\tthis.dataFromUser.surname = this.$container.find('#signup_surname').val();\n\tthis.dataFromUser.email = this.$container.find('#signup_email').val();\n\tthis.dataFromUser.postcode = this.$container.find('#signup_postcode').val().toUpperCase();\n\n\t//needs to be text\n\tvar lists = \"\";\n\tif( this.$container.find('#signup_hear').is(\":checked\") && this.$container.find('#signup_organize').is(\":checked\") )\n\t{\n\t\t// this.dataFromUser.listIDs.push(1);\n\t\tlists += \"1,2\";\n\t}\n\telse if( this.$container.find('#signup_organize').is(\":checked\") )\n\t{\n\t\t// this.dataFromUser.listIDs.push(2);\n\t\tlists += \"2\";\n\t}\n\telse if( this.$container.find('#signup_hear').is(\":checked\") )\n\t{\n\t\tlists += \"1\";\n\t}\n\telse\n\t{\n\t\tcheck = false;\n\t\tthis.$container.find('#signup_sendform').before('<p id=\"signup_checkbox_error\" class=\"error\">You need to sign up at least to one list</p>');\n\t}\n\tthis.dataFromUser.contactListIds = lists;\n\n\t//check\n\tif( this.dataFromUser.forename === '' )\n\t{\n\t\tcheck = false;\n\t\tthis.$container.find('#signup_name').before('<p id=\"signup_name_error\" class=\"error\">Mandatory</p>');\n\t\tthis.$container.find('#signup_name').addClass(\"error\");\n\t}\n\tif( this.dataFromUser.surname === '' )\n\t{\n\t\tcheck = false;\n\t\tthis.$container.find('#signup_surname').before('<p id=\"signup_surname_error\" class=\"error\">Mandatory</p>');\n\t\tthis.$container.find('#signup_surname').addClass(\"error\");\n\t}\n\tif( this.dataFromUser.email === '' || this.dataFromUser.email.indexOf('@') === -1 )\n\t{\n\t\tcheck = false;\n\t\tthis.$container.find('#signup_email').before('<p id=\"signup_email_error\" class=\"error\">Please enter a valid email address</p>');\n\t\tthis.$container.find('#signup_email').addClass(\"error\");\n\t}\n\n\tvar regex =  /^([A-Z]{1,2}[0-9][0-9A-Z]? ?[0-9][A-Z]{2})$/;\n\tif( !(regex.test( this.dataFromUser.postcode )) )\n\t{\n\t\tcheck = false;\n\t\tthis.$container.find('#signup_postcode').before('<p id=\"signup_postcode_error\" class=\"error\">Please enter a valid postcode</p>');\n\t\tthis.$container.find('#signup_postcode').addClass(\"error\");\n\t}\n\n\t//check is ok?\n\tif( check )\n\t{\n\t\tthis.sendRequest();\n\t}\n}"},"sendRequest":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.SignupWidget.prototype.sendRequest = function()\n{\n\tvar that = this;\n\t//createurl\n\tvar baseUrl = \"http://crmapi.pulselive.com/worldrugby/subscribe/list/\"\n\n\t// var dataValuePair = \"forename=\" + this.dataFromUser.forename +\"&surname=\" + this.dataFromUser.surname + \"&email=\" + this.dataFromUser.email + \"&contactListIds=\";  //Name value Pair\n\t// for (var i = 0; i < this.dataFromUser.listIDs.length; i++) {\n\t// \tif( i != this.dataFromUser.listIDs.length-1 )\n\t// \t{\n\t// \t\tdataValuePair += this.dataFromUser.listIDs[i];\n\t// \t\tdataValuePair += \",\";\n\t// \t}\n\t// \telse\n\t// \t{\n\t// \t\tdataValuePair += this.dataFromUser.listIDs[i];\n\t// \t}\n\t// };\n\n\t// var fullUrl = baseUrl + dataValuePair;\n\t//sendrequest\n\t$.ajax({\n\t    url : baseUrl,\n\t    type: \"POST\",\n\t    data : that.dataFromUser,\n\t    success: function(data, textStatus, jqXHR)\n\t    {\n\t        //data - response from server\n\t        that.$container.find('.message_container').empty().append('<h3 class=\"thankYou\">Thank you for registering your interest in Festival of Rugby 2015. You will receive an email from us shortly confirming this.</h3>');\n\t    },\n\t    error: function (jqXHR, textStatus, errorThrown)\n\t    {\n\t \t\tconsole.log( errorThrown );\n\t    }\n\t});\n}"}}},"ClickingHeaderWidget":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the signup widget"}]},"Source":"PULSE.CLIENT.RUGBY.ClickingHeaderWidget = function( container, config )\n{\n\tthis.$container = $( container );\n    this.config = config;\n\n    this.setListeners();\n\n    this.$container.find('.headerPhoto .imgContainer img');\n}"},"RotatingHeaderWidget":{"prototype":{"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.RotatingHeaderWidget.prototype.setListeners = function()\n{\n\tvar that = this;\n\n\t//design stuff\n\tthis.$container.find(\".matchTitle\").click(function() {\n        $('html,body').animate({\n            scrollTop: $(\"#location\").offset().top},\n            'slow');\n    })\n}"},"playCarousel":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.RotatingHeaderWidget.prototype.playCarousel = function()\n{\n\t\n\tif( this.photoIndex < this.photos.length-1)\n\t{\n\t\tthis.photoIndex++;\n\t}\n\telse\n\t{\n\t\tthis.photoIndex = 0;\n\t}\n\tthis.$container.find(\".show_photo\").removeClass(\"show_photo\");\n\tthis.$container.find( \"#photo_rotate_\" + this.photoIndex ).addClass(\"show_photo\");\n\n}"}},"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the signup widget"}]},"Source":"PULSE.CLIENT.RUGBY.RotatingHeaderWidget = function( container, config )\n{\n\tthis.$container = $( container );\n    this.config = config;\n    this.photos = this.$container.find('.photo_rotate');\n\n    this.setListeners();\n    \n    this.photoIndex = 0;\n\n    var that = this;\n    setTimeout(function() {\n\t\tthat.playCarousel();\n      // Do something after 5 seconds\n\t}, 5000);\n}"},"EventMap":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the signup widget"}]},"Source":"PULSE.CLIENT.RUGBY.EventMap = function( container, config )\n{\n\tthis.$container = $( container );\n\tthis.$mapCanvas = this.$container.find('#map-canvas');\n\tthis.$eventThumbs = this.$container.find( '.eventTitles' );\n    this.config = config;\n\n    this.setSubscriptions();\n\n    $( '.mainFooter' ).hide();\n\n    this.first = true;\n\n    this.$paginationContainer = this.$container.find( '.paginationContainer' );\n\n    this.config.mapId = 'eventMap' + Math.random();\n\n    this.eventGroupId = config[ 'data-event-group' ];\n\n    if ( !this.eventGroupId )\n    {\n    \tthis.eventGroupId = '1';\n    }\n\n    this.pinIcons =\n    {\n    \trugbyEvent : new google.maps.MarkerImage(\n\t      \"http://dynamic.pulselive.com/test/client/irb/static/i/for-pins/public-pin.png\",\n\t      null, /* size is determined at runtime */\n\t      null, /* origin is 0,0 */\n\t      null, /* anchor is bottom center of the scaled image */\n\t      new google.maps.Size(45, 54)\n   \t    ),\n    \tsearchHome : new google.maps.MarkerImage(\n\t      \"http://dynamic.pulselive.com/test/client/irb/static/i/for-pins/other-pin.png\",\n\t      null, /* size is determined at runtime */\n\t      null, /* origin is 0,0 */\n\t      null, /* anchor is bottom center of the scaled image */\n\t      new google.maps.Size(5, 5)\n   \t    ),\n        privateEvent : new google.maps.MarkerImage(\n            \"http://dynamic.pulselive.com/test/client/irb/static/i/for-pins/private-pin.png\",\n            null, /* size is determined at runtime */\n            null, /* origin is 0,0 */\n            null, /* anchor is bottom center of the scaled image */\n            new google.maps.Size(45, 54)\n         )\n\t};\n\n    this.templates = {\n    \teventThumb : 'templates/rwc-events/event-thumb.html',\n    \teventInfoWindow : 'templates/rwc-events/event-info-window.html',\n        categoryFilter : 'templates/rwc-events/event-category-filter.html',\n        eventInfoSearch : 'templates/rwc-events/event-info-search.html'\n    }\n\n    this.config.pinIcon = this.pinIcons.rugbyEvent;\n\n    this.pageSize = 100;\n    this.pageNum = 0;\n\n    this.filters = {\n    \tlongitude: undefined,\n    \tlat : undefined,\n    \tradius : undefined,\n    \tdate : undefined,\n    \tcategories : undefined,\n        city : undefined\n    }\n\n    this.paginationId = 'eventMap' + Math.random();\n\n    this.cache = {};\n\n    this.termSearch = false;\n\n    // Sets shared paginations details for all the toggles\n    this.pageOptions = {\n        'container' : this.$paginationContainer,\n        'currentNumberContainer' : '.paginationValue',\n        'maxNumberContainer' : '.maxPages',\n        'forwardContainer' : '.next',\n        'backwardContainer' : '.prev',\n        'pageSize' : this.pageSize,\n        'paginationId' : this.paginationId\n    };\n\n    this.pagination = new PULSE.CLIENT.UI.Pagination(this.pageOptions);\n\n    this.$submitDisanceForm = this.$container.find('.submitDisanceForm');\n    this.$postCodeForm = this.$container.find( '.postcode' );\n    this.$rangeSlider = this.$container.find( '.range' );\n    this.$rangeValue = this.$container.find( '.rangeValue' );\n\n    this.$typeFilter = this.$container.find( '.typeFilter' );\n\n    this.removeFilters = { 'all' : this.$container.find( '.removeAll' ),\n    'location' : this.$container.find( '.removeLocation' ),\n    'categories' : this.$container.find( '.removeCategories' ),\n    'date' : this.$container.find( '.removeDate' ) };\n\n    this.$eventThumbContainer = this.$container.find( '.eventThumbContainer' );\n    this.$eventsMap = this.$container.find( '.eventsMap' );\n    this.$gridOnly = this.$container.find( '.gridOnly' );\n    this.$showMap = this.$container.find( '.showMap' );\n\n    this.$searchButton = this.$container.find( '.searchButton' );\n    this.$searchInput = this.$container.find( '.searchInput' );\n\n    this.$calendarClick = this.$container.find( '.calendarClick' );\n\n    this.$typeFilter = this.$container.find( '.typeFilter' );\n\n    this.$filtersContainer = this.$container.find( '.filtersContainer' );\n\n    this.geocoder = new google.maps.Geocoder();\n\n    var that = this;\n    this.$calendarClick.datetimepicker({\n        onSelectDate: function( d )\n        {\n            d.setHours( 0 );\n            d.setMinutes( 0 );\n            d.setSeconds( 0 );\n            var timestamp = d.getTime();\n            that.filters.date = timestamp;\n            that.newSearch();\n            $( this ).hide();\n\n        },\n        timepicker:false,\n        format:'d/m/Y',\n        formatDate:'Y/m/d'\n    });\n\n    this.setListeners();\n\n    this.eventGroup = new PULSE.CLIENT.RUGBY.EventGroup( this.eventGroupId, { pageSize : this.pageSize, pastEvents : true } );\n    this.eventGroup.searchEvents( { pageNum : this.pageNum } );\n    this.eventGroup.getEventGroup();\n}","prototype":{"getCacheName":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.EventMap.prototype.getCacheName = function()\n{\n    var name = 'default';\n    for ( key in this.filters )\n    {\n        if ( this.filters[ key ] )\n        {\n            name = name + this.filters[ key ];\n        }\n    }\n\n    if ( this.termSearch )\n    {\n        name = this.termSearch;\n    }\n\n    return name;\n}"},"setSubscriptions":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.EventMap.prototype.setSubscriptions = function()\n{\n\tvar that = this;\n\n\tPULSE.CLIENT.subscribe( 'googleMarker/click', function( e, params )\n    {\n        if ( params && params.success )\n        {\n        \tif ( params.mapId == that.config.mapId )\n        \t{\n\t\t\t    var markerId = params.markerId;\n\t\t\t    if ( markerId && that.eventGroup )\n\t\t\t    {\n                    if ( markerId.indexOf( 'searchHome') > -1 )\n                    {\n                        var $markerElement = that.$mapCanvas.find( params.windowName );\n                        PULSE.CLIENT.Template.publish(\n                            that.templates.eventInfoSearch,\n                            $markerElement,\n                            { search : that.$postCodeForm.val() }\n                        );\n                    }\n                    else\n                    {\n    \t\t\t    \tvar split = markerId.split( '-' );\n    \t\t\t    \tif ( split.length > 0 )\n    \t\t\t    \t{\n    \t\t\t    \t\tvar thisEvent = that.eventGroup.getEvent( split[ 1 ] );\n    \t\t\t    \t\tvar $markerElement = that.$mapCanvas.find( params.windowName );\n    \t\t        \t\tPULSE.CLIENT.Template.publish(\n    \t\t\t\t\t\t    that.templates.eventInfoWindow,\n    \t\t\t\t\t\t    $markerElement,\n    \t\t\t\t\t\t    { event : thisEvent }\n    \t\t\t\t\t    );\n    \t\t\t    \t}\n                    }\n\t\t\t    }\n        \t}\n        }\n    });\n\n\tPULSE.CLIENT.subscribe( 'eventGroup/events', function( e, params )\n    {\n        if ( params && params.success )\n        {\n        \tif ( params.eventGroup == that.eventGroupId )\n        \t{\n        \t\tif ( that.eventGroup.events )\n        \t\t{\n                    if ( that.termSearch )\n                    {\n                        if ( that.eventGroup.events.length > 0 )\n                        {\n                            that.renderTermSearch( that.eventGroup.events[ 0 ] );\n                        }\n                    }\n                    else\n                    {\n                        var cacheName = that.getCacheName();\n                        if ( !that.cache[ cacheName ] )\n                        {\n                            that.cache[ cacheName ] = {};\n                        }\n                        that.cache[ cacheName ][ that.pagination.getPageNum() ] = that.eventGroup.events;\n                        that.renderMap( that.eventGroup.events );\n                        if ( params.pageInfo )\n                        {\n                            that.cache[ cacheName ].numEntries = params.pageInfo.numEntries;\n                            that.pagination.setNumEntries( params.pageInfo.numEntries );\n                            that.$paginationContainer.show();\n                        }\n                    }\n        \t\t}\n        \t}\n        }\n    });\n\n    // PULSE.CLIENT.subscribe( 'googleMarker/mouseover', function( e, params )\n    // {\n    //     if ( params && params.success )\n    //     {\n    //     \tif ( params.mapId == that.config.mapId )\n    //     \t{\n    //     \t\tconsole.log( params.markerId );\n    //     \t}\n    //     }\n    // });\n\n    PULSE.CLIENT.subscribe( 'content/get', function( e, params )\n    {\n        that.termSearch = false;\n        if ( params.id === that.paginationId )\n        {\n            var cacheName = that.getCacheName();\n            if ( that.cache[ cacheName ] && that.cache[ cacheName ][ that.pagination.getPageNum() ] )\n            {\n                that.renderMap( that.cache[ cacheName ][ that.pagination.getPageNum() ] );\n            }\n            else\n            {\n                var searchParams = that.filters;\n                searchParams.pageNum = that.pagination.getPageNum();\n                that.eventGroup.searchEvents( searchParams );\n            }\n        }\n    });\n\n    PULSE.CLIENT.subscribe( 'eventGroup/group', function( e, params )\n    {\n        if ( params && params.success )\n        {\n            if ( ( params.eventGroup == that.eventGroupId ) )\n            {\n                if ( ! that.categoryBoxesRender )\n                {\n                    that.renderCategoryFilter();\n                }\n            }\n        }\n    });\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.SEARCH_EVENTS.SEARCH_UPDATE, function( e, params )\n    {\n        that.termSearch = params.terms;\n        $(\".eventTopBar .left .filter\").removeClass( 'active' );\n        $( that.removeFilters.all ).show();\n        if ( that.eventSearch.results && that.eventSearch.results.length > 0 )\n        {\n            that.renderSearch( that.eventSearch.results, params.terms );\n        }\n        else\n        {\n            that.$eventThumbs.html( '' );\n        }\n    });\n}"},"loading":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.EventMap.prototype.loading = function()\n{\n    this.$eventThumbs.html( '<div class=\"spinner\"><div style=\"height : 50px; width : 50px; background: #e5322b;\"></div></div>' );\n}"},"renderSearch":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"results"}]},"Source":"PULSE.CLIENT.RUGBY.EventMap.prototype.renderSearch = function( results )\n{\n    var foundEvents = [];\n\n    this.$eventThumbs.html( '' );\n    this.pagination.setNumEntries( 1 );\n\n    this.cache[ this.getCacheName() ] = { 0 : [] }\n\n    if ( this.googleMap )\n    {\n        this.googleMap.removeAllMarkers();\n    }\n\n    for ( var i = 0; i < results.length; i++ )\n    {\n        var id = results[ i ][ 'object_id' ];\n        var thisEvent = this.eventGroup.getEvent( id );\n        if ( !thisEvent )\n        {\n            this.eventGroup.getSingleEvent( id );\n        }\n        else\n        {\n            this.renderTermSearch( thisEvent );\n        }\n    }\n}"},"renderTermSearch":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"thisEvent"}]},"Source":"PULSE.CLIENT.RUGBY.EventMap.prototype.renderTermSearch = function( thisEvent )\n{\n    this.cache[ this.getCacheName() ][ 0 ].push( thisEvent );\n\n    PULSE.CLIENT.Template.append(\n                this.templates.eventThumb,\n                this.$eventThumbs,\n                { events : [ thisEvent ] }\n            );\n\n     if ( this.googleMap )\n    {\n        var pinIcon = undefined;\n        if ( thisEvent.categories && thisEvent.categories.length > 1 && thisEvent.categories[ 0 ].iconUrl )\n        {\n            pinIcon = new google.maps.MarkerImage(\n              thisEvent.categories[ 0 ].iconUrl,\n              null, /* size is determined at runtime */\n              null, /* origin is 0,0 */\n              null, /* anchor is bottom center of the scaled image */\n              new google.maps.Size(45, 54)\n            );\n        }\n\n        if ( thisEvent.privateEvent )\n        {\n            pinIcon = this.pinIcons.privateEvent;\n        }\n\n        this.googleMap.renderMarker( { longitude: thisEvent.coordinates.longitude, lat: thisEvent.coordinates.lat, id : 'event-' +thisEvent.id, pinIcon : pinIcon } );\n        this.googleMap.boundMarkers();\n    }\n}"},"renderCategoryFilter":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.EventMap.prototype.renderCategoryFilter = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.Template.publish(\n        this.templates.categoryFilter,\n        this.$typeFilter,\n        { eventGroup : this.eventGroup }\n    );\n\n    this.categoryBoxesRender = true;\n\n    this.$typeFilterClick = this.$container.find( '.typeFilterClick' );\n    this.$eventCategoryClear = this.$container.find( '.eventCategoryClear' );\n    this.$eventCategorySubmit = this.$container.find( '.eventCategorySubmit' );\n    this.categoryBoxes = this.$container.find( '.eventCategoryBox' );\n\n    // this.$typeFilterClick.on( 'click', function( e, params )\n    // {\n    //     if ( that.$typeFilter.is(\":visible\") )\n    //     {\n    //         that.$typeFilter.hide();\n    //     }\n    //     else\n    //     {\n    //         that.$typeFilter.show();\n    //     }\n    // } );\n    //\n\n    this.$eventCategoryClear.on( 'click', function( e, params )\n    {\n        for ( var i = 0; i < that.categoryBoxes.length; i++ )\n        {\n            if ( that.categoryBoxes[ i ].checked )\n            {\n                $( that.categoryBoxes[ i ] ).click();\n            }\n        }\n    } );\n\n    this.$eventCategorySubmit.on( 'click', function( e, params )\n    {\n        var cats = []\n        for ( var i = 0; i < that.categoryBoxes.length; i++ )\n        {\n            if ( that.categoryBoxes[ i ].checked )\n            {\n                cats.push( $( that.categoryBoxes[ i ] ).data( 'id' ) );\n            }\n        }\n\n        if ( cats.length > 0 )\n        {\n            var catFilter = cats.join( ',' );\n            that.filters.categories = catFilter;\n            that.newSearch();\n        }\n        //that.$typeFilter.hide();\n        $(\".eventTopBar .filter.type .items\").toggle();\n    } );\n\n}"},"renderMap":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"events"}]},"Source":"PULSE.CLIENT.RUGBY.EventMap.prototype.renderMap = function( events )\n{\n    if ( this.googleMap )\n    {\n        this.googleMap.removeAllMarkers();\n        this.googleMap.removeCircles();\n        if ( this.filters.longitude && this.filters.lat )\n        {\n            this.googleMap.renderMarker( { longitude: this.filters.longitude, lat: this.filters.lat, id : 'searchHome', pinIcon : this.pinIcons.searchHome } );\n            this.googleMap.makeRenderRadius( 'searchHome', this.filters.radius );\n        }\n        for ( var i = 0; i < events.length; i++ )\n        {\n            var pinIcon = undefined;\n            if ( events[ i ].categories && events[ i ].categories.length > 0 && events[ i ].categories[ 0 ].iconUrl )\n            {\n                pinIcon = new google.maps.MarkerImage(\n                      events[ i ].categories[ 0 ].iconUrl,\n                      null, /* size is determined at runtime */\n                      null, /* origin is 0,0 */\n                      null, /* anchor is bottom center of the scaled image */\n                      new google.maps.Size(45, 54)\n                );\n            }\n\n            if ( events[ i ].privateEvent )\n            {\n                pinIcon = this.pinIcons.privateEvent;\n            }\n\n            this.googleMap.renderMarker( { longitude: events[ i ].coordinates.longitude, lat: events[ i ].coordinates.lat, id : 'event-' + events[ i ].id, pinIcon : pinIcon } );\n        }\n        this.googleMap.boundMarkers();\n    }\n\n    this.renderThumbs( events );\n}"},"renderThumbs":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"events"}]},"Source":"PULSE.CLIENT.RUGBY.EventMap.prototype.renderThumbs = function( events )\n{\n\tPULSE.CLIENT.Template.publish(\n\t    this.templates.eventThumb,\n\t    this.$eventThumbs,\n\t    { events : events }\n    );\n\n    if ( this.first && $( window ).width() > 861 )\n    {\n        this.first = false;\n        this.$showMap.click();\n    }\n\n}"},"newSearch":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.EventMap.prototype.newSearch = function()\n{\n    this.loading();\n    this.termSearch = false;\n    this.pagination.pageNum = 0;\n\tvar searchParams = this.filters;\n    searchParams.pageNum = this.pagination.getPageNum();\n    this.showFilters();\n    this.eventGroup.searchEvents( searchParams );\n}"},"showFilters":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.EventMap.prototype.showFilters = function()\n{\n    $( this.removeFilters.all ).show();\n    if ( this.filters.date )\n    {\n        //$( this.removeFilters.date ).show();\n        $(\".eventTopBar .filter.date\").addClass( 'active' );\n    }\n\n    if ( this.filters.categories )\n    {\n        //$( this.removeFilters.categories ).show();\n        $(\".eventTopBar .filter.type\").addClass( 'active' );\n    }\n\n    if ( this.filters.radius )\n    {\n        //$( this.removeFilters.location ).show();\n        $(\".eventTopBar .filter.distance\").addClass( 'active' );\n    }\n\n    var windowWidth = $( window ).width();\n\n    if( windowWidth < 631 )\n    {\n        this.$filtersContainer.hide();\n    }\n}"},"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.EventMap.prototype.setListeners = function()\n{\n\tvar that = this;\n\n    this.$gridOnly.on( 'click', function( e, params )\n    {\n        that.$showMap.removeClass( 'active' );\n        $( this ).addClass( 'active' );\n        that.$eventThumbContainer.removeClass( 'half' );\n        that.$eventsMap.hide();\n    } );\n\n    this.$showMap.on( 'click', function( e, params )\n    {\n        if ( ! that.googleMap )\n        {\n            that.googleMap = new PULSE.CLIENT.GoogleMaps( that.$mapCanvas, that.config );\n        }\n        that.$gridOnly.removeClass( 'active' );\n        $( this ).addClass( 'active' );\n        that.$eventThumbContainer.addClass( 'half' );\n        that.$eventsMap.show();\n        var cacheName = that.getCacheName();\n        if ( that.cache[ cacheName ] && that.cache[ cacheName ][ that.pagination.getPageNum() ] )\n        {\n            that.renderMap( that.cache[ cacheName ][ that.pagination.getPageNum() ] );\n        }\n    } );\n\n    this.$container.on( 'click', '.eventCardThumbContainer', function( e, params )\n    {\n        e.preventDefault();\n\n        var $eventLink = $( this ).find( '.eventLink' );\n        var privateEvent = $( this ).data( 'private' );\n        if ( ( $eventLink.is( e.target ) || $eventLink.has( e.target ).length > 0 ) && ( !privateEvent ) )\n        {\n            window.location.href = \"/trophy-tour/events/\" + $( this ).data( 'event-id' );\n        }\n        else\n        {\n            if ( that.eventGroup && that.eventGroup.events && that.googleMap )\n            {\n                that.googleMap.recenterMap( { id : 'event-' + $( this ).data( 'event-id' ) } );\n                that.googleMap.animateMarker( { id : 'event-' + $( this ).data( 'event-id' ) } );\n            }\n            else\n            {\n                if ( !privateEvent )\n                {\n                    window.location.href = \"/trophy-tour/events/\" + $( this ).data( 'event-id' );\n                }\n            }\n        }\n    } );\n\n    this.$container.on( 'click', '.removeFilters', function( e, params )\n    {\n        var remove = $ ( this ).data( 'remove' );\n\n        that.termSearch = false;\n\n        that.$searchInput.val( '' );\n\n        $(\".eventTopBar .left .filter\").removeClass( 'active' );\n\n        $( this ).hide();\n\n        if ( that.filters[ remove ] )\n        {\n            that.filters[ remove ] = undefined;\n        }\n\n        if ( remove.indexOf( 'All' ) )\n        {\n            for ( var key in that.filters)\n            {\n                that.filters[ key ] = undefined;\n            }\n            for ( var key in that.removeFilters )\n            {\n                $( that.removeFilters[ key ] ).hide();\n            }\n        }\n        else if ( remove.indexOf( 'location' ) )\n        {\n            that.filters[ 'long' ] = undefined;\n            that.filters[ 'lat' ] = undefined;\n            that.filters[ 'radius' ] = undefined;\n            that.filters[ 'city' ] = undefined;\n        }\n\n        $( that.removeFilters.all ).hide();\n        for ( var key in that.filters )\n        {\n            if ( that.filters[ key ] )\n            {\n                $( that.removeFilters.all ).show();\n            }\n            else\n            {\n                if ( key.indexOf( 'long' ) > -1 ||\n                     key.indexOf( 'lat' ) > -1 ||\n                     key.indexOf( 'radius' ) > -1 ||\n                     key.indexOf( 'city' ) > -1 )\n                {\n                    that.$postCodeForm.val( '' );\n                }\n                else if ( key.indexOf( 'categories' ) > -1 )\n                {\n                    that.$eventCategoryClear.click();\n                }\n            }\n        }\n\n        var cacheName = that.getCacheName();\n        that.pagination.pageNum = 0;\n        if ( that.cache[ cacheName ] && that.cache[ cacheName ][ that.pagination.getPageNum() ] )\n        {\n            that.renderMap( that.cache[ cacheName ][ that.pagination.getPageNum() ] );\n            that.pagination.setNumEntries( that.cache[ cacheName ].numEntries );\n        }\n        else\n        {\n            var searchParams = that.filters;\n            searchParams.pageNum = that.pagination.getPageNum();\n            that.eventGroup.searchEvents( searchParams );\n        }\n\n    } );\n\n    this.$searchButton.on( 'click', function( e, params )\n    {\n        if ( that.$searchInput.val() && that.$searchInput.val().length > 2 )\n        {\n            that.eventSearch = new PULSE.CLIENT.RUGBY.Search( that.$searchInput.val(),\n                PULSE.CLIENT.LANGUAGE, 'event', PULSE.CLIENT.CMS_ACCOUNT, undefined, that.pageSize,\n                undefined, undefined, that.eventGroupId );\n            that.loading();\n        }\n    } );\n\n    this.$searchInput.on( 'keydown', function( e, params )\n    {\n        if ( e.keyCode == 13) {\n            that.eventSearch = new PULSE.CLIENT.RUGBY.Search( that.$searchInput.val(),\n                PULSE.CLIENT.LANGUAGE, 'event', PULSE.CLIENT.CMS_ACCOUNT, undefined, that.pageSize,\n                undefined, undefined, that.eventGroupId );\n            that.loading();\n        }\n    });\n\n    // this.$container.on( 'mouseleave', '.eventCard', function( e, params )\n    // {\n    //     if ( that.eventGroup && that.eventGroup.events )\n    //     {\n    //         that.googleMap.animateMarker( { id : 'event-' + $( this ).data( 'event-id' ) } );\n    //     }\n    // } );\n\n\tthis.$submitDisanceForm.on( 'click', function( e, params ) {\n        var postCode = that.$postCodeForm.val();\n\n        var regex =  /^([A-Za-z]{1,2}[0-9][0-9A-Za-z]? ?[0-9][A-Za-z]{2})$/;\n        if(regex.test( postCode ) )\n        {\n            that.geocoder.geocode( { 'address': postCode }, function(results, status)\n            {\n                if (status == google.maps.GeocoderStatus.OK) {\n                    var thisLong = results[0].geometry.location.lng(),\n                    thisLat = results[0].geometry.location.lat();\n                    //that.googleMap.recenterMap( { longitude: params.longitude, lat : params.lat } );\n                    that.filters.longitude = thisLong;\n                    that.filters.lat = thisLat;\n                    that.filters.radius = parseInt( that.$rangeSlider.val() ) * 1.609344;\n                    that.newSearch();\n                    $(\".eventTopBar .filter.distance .items\").hide();\n                }\n                else\n                {\n                    that.$postCodeForm.val('Location could not be found');\n                }\n            });\n        }\n        else\n        {\n            that.filters.city = that.$postCodeForm.val();\n            that.filters.radius = parseInt( that.$rangeSlider.val() ) * 1.609344;\n            that.newSearch();\n            $(\".eventTopBar .filter.distance .items\").hide();\n        }\n    } );\n\n    this.$rangeSlider.on( 'change', function( e, params )\n    {\n    \tvar rangeValue = $( this ).val();\n    \tthat.$rangeValue.html( rangeValue );\n    } );\n\n  //   this.$postCodeForm.on( 'keyup', function( e, params ) {\n  //       var newPostcode = $( this ).val();\n\n  //       var regex =  /^([A-Za-z]{1,2}[0-9][0-9A-Za-z]? ?[0-9][A-Za-z]{2})$/;\n\t\t// if( !(regex.test( newPostcode )) )\n\t\t// {\n\t\t// \tthat.$submitDisanceForm.hide();\n\t\t// }\n\t\t// else\n\t\t// {\n\t\t// \tthat.$submitDisanceForm.show();\n\t\t// }\n  //   } );\n\n    $(\".eventTopBar .filter.distance .toggle\").click(function(){\n    $(\".eventTopBar .filter.distance .items\").toggle();\n    $(\".eventTopBar .filter.type .items\").hide();\n    });\n\n    // $(\".eventTopBar .filter.distance .submit\").click(function(){\n    //     $(\".eventTopBar .filter.distance .items\").hide();\n    // });\n\n    // $(\".eventTopBar .filter.distance .close\").click(function(){\n    //     $(\".eventTopBar .filter.distance .items\").hide();\n    // });\n\n\n    $(\".eventTopBar .filter.type .toggle\").click(function(){\n        $(\".eventTopBar .filter.type .items\").toggle();\n        $(\".eventTopBar .filter.distance .items\").hide();\n    });\n\n    $(\".eventTopBar .filter.type .submit\").click(function(){\n        $(\".eventTopBar .filter.type .items\").toggle();\n    });\n\n    // Event search page - top bar filter toggle MOBILE //\n    // $(\".eventTopBar .mobileFilterBtn\").click(function(){\n    //     $(\".eventTopBar .column.large-12\").toggle();\n    // });\n    $(\".eventTopBar .filter.search input\").focus(function(){\n        $(\".eventTopBar ul.right .filter.search a \").addClass('shift-right');\n    });\n\n    $(\".eventTopBar .filter.search input\").focusout(function(){\n        $(\".eventTopBar ul.right .filter.search a \").removeClass('shift-right');\n    });\n\n    this.$container.on( 'click', function( e, params )\n    {\n        var $filterTypeItems = $(\".eventTopBar .filter.type\");\n        if ( ! $filterTypeItems.is( e.target ) && $filterTypeItems.has( e.target ).length === 0 )\n        {\n            $(\".eventTopBar .filter.type .items\").hide();\n        };\n        var $filterDistance = $(\".eventTopBar .filter.distance\")\n        if ( ! $filterDistance.is( e.target ) && $filterDistance.has( e.target ).length === 0 )\n        {\n            $(\".eventTopBar .filter.distance .items\").hide();\n        };\n    });\n\n}"}}},"SubmitEvent":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the signup widget"}]},"Source":"PULSE.CLIENT.RUGBY.SubmitEvent = function( container, config )\n{\n\tthis.$container = $( container );\n\n\tthis.eventGroupId = config[ 'data-event-group' ];\n\n\tthis.setSubscriptions();\n\n\tthis.templates = {\n\t\tsubmitForm : 'templates/for/form/submit-event.html',\n\t\tnewDay : 'templates/for/form/new-day.html',\n\t\tnewContact : 'templates/for/form/new-contact.html',\n\t\tfinishTime : 'templates/for/form/finish-time.html',\n\t\timageUpload : 'templates/for/form/image-upload.html',\n\t\tthankYou : 'templates/for/form/thank-you-message.html'\n\t};\n\n\tthis.uploadCounter = 0;\n\n\tthis.newContactCounter = [ 0 ];\n\tthis.newDayCounter = [ 0 ];\n\tthis.newImageCounter = [];\n\n\tthis.validPostcode = false;\n\tthis.geoCoder = new google.maps.Geocoder();\n\n    this.config = config;\n\n    this.freeEntry = true;\n    this.multipleDates = true;\n\n    this.valid = true;\n\n\tthis.$formLocation = this.$container.find( '.formLocation' );\n\tthis.$entireForm = this.$container.find( '.entireForm' );\n\tthis.$formSubmitted = this.$container.find( '.formSubmitted' );\n\tthis.$IEFormSubmitted = this.$container.find( '.formIESubmitted' );\n\n\tthis.eventGroup = new PULSE.CLIENT.RUGBY.EventGroup( this.eventGroupId );\n    this.eventGroup.getEventGroup();\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.SubmitEvent.prototype.setSubscriptions = function()\n{\n\tvar that = this;\n\n\tPULSE.CLIENT.subscribe( 'eventGroup/group', function( e, params )\n    {\n        if ( params && params.success )\n        {\n        \tif ( ( params.eventGroup == that.eventGroupId ) )\n        \t{\n        \t\tthat.renderPage();\n        \t}\n        }\n    });\n}"},"renderPage":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.SubmitEvent.prototype.renderPage = function()\n{\n\tconsole.log( this.eventGroup );\n\tPULSE.CLIENT.Template.publish(\n\t    this.templates.submitForm,\n\t    this.$formLocation,\n\t    { eventGroup : this.eventGroup }\n    );\n\n\tif ( ( 'XDomainRequest' in window ) && window.XDomainRequest !== null )\n\t{\n\t\t// IE9 placeholder hack\n\t\t$('[placeholder]').focus(function() {\n\t\t  var input = $(this);\n\t\t  if (input.val() == input.attr('placeholder')) {\n\t\t    input.val('');\n\t\t    input.removeClass('placeholder');\n\t\t  }\n\t\t}).blur(function() {\n\t\t  var input = $(this);\n\t\t  if (input.val() == '' || input.val() == input.attr('placeholder')) {\n\t\t    input.addClass('placeholder');\n\t\t    input.val(input.attr('placeholder'));\n\t\t  }\n\t\t}).blur();\n\t}\n\n\tthis.$submitButton = this.$container.find( '.submitButton' );\n\n\tthis.trueCheckboxes = [ 'termsAndConditions' ];\n\n\tthis.falseCheckboxes = [];\n\n\tthis.customCosts = this.$container.find( '.customCost' );\n\n\tthis.$imageUploader = this.$container.find( '.imageUploader' );\n\tthis.$imagesContainer = this.$container.find( '.imagesContainer' );\n\n\tthis.$addAnotherDayButton = this.$container.find( '.addAnotherDate' );\n\tthis.$singleDateContainer = this.$container.find( '.multipleDateContainer' );\n\n\tthis.$eventContactButton = this.$container.find( '.newContactButton' );\n\tthis.$eventContactContainer = this.$container.find( '.eventContactsContainer' );\n\n\tthis.$addressAutoFill = this.$container.find( '.addressAutoFill' );\n\tthis.$eventPostcode = this.$container.find( '.postcode' );\n\n\tthis.$eventLong = this.$container.find( '.eventLong' );\n\tthis.$eventLat = this.$container.find( '.eventLat' );\n\n\tthis.autoFillInputs = this.$container.find( '.autofillInput' );\n\n\tthis.$formErrors = this.$container.find( '.formErrors' );\n\tthis.$formErrorsContainer = this.$container.find( '.formErrorsContainer' );\n\n\tthis.$photoUploadSection = this.$container.find( '.photoUploadSection' );\n\tthis.$photoUploadErrorMessage  = this.$container.find( '.photoUploadErrorMessage' );\n\n\tthis.eventSelects = this.$container.find( '.eventSelect' );\n\tthis.$primaryEventDropdown = this.$container.find( '.primaryEventDropdown' );\n\tthis.categoryIds = [];\n\n\tthis.datePickers = this.$container.find( '.datePickerContainer' );\n\tif ( this.datePickers )\n\t{\n\t\tfor ( var i = 0; i < this.datePickers.length; i++ )\n\t\t{\n\t\t\t$( this.datePickers[ i ] ).datetimepicker({\n\t\t\ttimepicker:false,\n\t\t\tformat:'d/m/Y',\n\t\t\tformatDate:'Y/m/d',\n\t\t\t});\n\t\t}\n\t}\n\n    this.setListeners();\n}"},"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.SubmitEvent.prototype.setListeners = function()\n{\n\tvar that = this;\n\n\tthis.$button = this.$container.find('#signup_sendform');\n\tthis.$button.on('click', function(){\n\n\t\t//clean\n\t\tthat.$container.find('#signup_name').removeClass(\"error\");\n\t\tthat.$container.find('#signup_surname').removeClass(\"error\");\n\t\tthat.$container.find('#signup_email').removeClass(\"error\");\n\t\tthat.$container.find('#signup_postcode').removeClass(\"error\");\n\t\t$('#signup_name_error').remove();\n\t\t$('#signup_surname_error').remove();\n\t\t$('#signup_email_error').remove();\n\t\t$('#signup_postcode_error').remove();\n\n\t\tthat.grabDataAndValidate();\n\t});\n\n\t//clean errors\n\tthis.$container.find('#signup_name').keypress(function(){\n\t\t$( this ).removeClass(\"error\");\n\t\t$('#signup_name_error').remove();\n\t});\n\n\tthis.$container.find('#signup_surname').keypress(function(){\n\t\t$( this ).removeClass(\"error\");\n\t\t$('#signup_surname_error').remove();\n\t});\n\n\tthis.$container.find('#signup_email').keypress(function(){\n\t\t$( this ).removeClass(\"error\");\n\t\t$('#signup_email_error').remove();\n\t});\n\n\tthis.$container.find('#signup_postcode').keypress(function(){\n\t\t$( this ).removeClass(\"error\");\n\t\t$('#signup_postcode_error').remove();\n\t});\n\n\n\t\t// Event Submit Page - Fee Selector //\n\n\t$('.chooseFeeSelector').on('click',function(){\n\t\t$('.chooseFeeSelector').removeClass('active');\n\t\t$(this).addClass('active');\n\t});\n\n\t$('.chooseFeeSelector.free').on('click',function(){\n\t\tthat.freeEntry = true;\n\t\t$('.feeSelector.paid').hide();\n\t\tif ( that.customCosts )\n\t\t{\n\t\t\tfor ( var i = 0; i < that.customCosts.length; i++ )\n\t\t\t{\n\t\t\t\t$( that.customCosts[ i ] ).val( '' );\n\t\t\t}\n\t\t}\n\t});\n\n\t$('.chooseFeeSelector.paid').on('click',function(){\n\t\t$('.feeSelector.paid').show();\n\t\tthat.freeEntry = false;\n\t});\n\n\n\t// Event Submit Page - Date Selector //\n\n\t$('.addDay .remove').on('click',function(){\n\t\t$('.addDay').hide();\n\t});\n\n\t$('.button.eventDate').on('click',function(){\n\t\t$('.addDay').show();\n\t});\n\n\t$('.chooseDateSelector').on('click',function(){\n\t\t$('.chooseDateSelector').removeClass('active');\n\t\t$(this).addClass('active');\n\t});\n\n\t$('.chooseDateSelector.single').on('click',function(){\n\t\t$('.dateSelector.single').show();\n\t\t$('.button.eventDate').show();\n\t\t$('.dateSelector.multiple').hide();\n\t\tthat.multipleDates = true;\n\t});\n\n\t$('.chooseDateSelector.multiple').on('click',function(){\n\t\t$('.dateSelector.single').hide();\n\t\t$('.button.eventDate').hide();\n\t\t$('.dateSelector.multiple').show();\n\t\tthat.multipleDates = false;\n\t});\n\n\t// Event Submit Page - Optional field //\n\n\t$('.optionalFieldButton.description').on('click',function(){\n\t\t$('.optionalField.description').toggle();\n\t\t$('.optionalFieldButton.description').hide();\n\t});\n\n\t$('.optionalField .remove').on('click',function(){\n\t\t$('.optionalField.description').toggle();\n\t\t$('.optionalFieldButton.description').show();\n\t});\n\n\n\t// Event Submit Page - Event Type Selector //\n\n\t$('.eventType label').on('click', function () {\n\t\t$('.eventType label').removeClass(\"active\");\n\t    $(this).addClass(\"active\");\n\t});\n\n\n\tthis.$eventPostcode.on( 'keyup', function( e, params ) {\n        var newPostcode = $( this ).val();\n\n        var regex =  /^([A-Za-z]{1,2}[0-9][0-9A-Za-z]? ?[0-9][A-Za-z]{2})$/;\n\t\tif( !(regex.test( newPostcode )) )\n\t\t{\n\t\t\tthat.$addressAutoFill.hide();\n\t\t\tthat.validPostcode = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthat.$addressAutoFill.show();\n\t\t\tthat.validPostcode = true;\n\t\t}\n    } );\n\n\tthis.$addressAutoFill.on( 'click', function( e, params )\n\t{\n\t\tif ( that.autoFillInputs && that.autoFillInputs.length > 0 )\n\t\t{\n\t\t\tthat.geoCoder.geocode( { 'address': that.$eventPostcode.val() }, function(results, status)\n\t\t\t{\n\t\t    \tif (status == google.maps.GeocoderStatus.OK) {\n\t\t\t        var thisLong = results[0].geometry.location.lng();\n\t        \t\tvar thisLat = results[0].geometry.location.lat();\n\t        \t\tthat.$eventLong.val( thisLong );\n\t        \t\tthat.$eventLat.val( thisLat );\n\t        \t\tvar latlng = new google.maps.LatLng( thisLat, thisLong );\n\t\t        \tthat.geoCoder.geocode( {'latLng': latlng }, function(results, status)\n\t\t\t\t    {\n\t\t\t\t    \tif (status == google.maps.GeocoderStatus.OK) {\n\t\t\t\t        \tconsole.log( results[ 0 ].geometry );\n\t\t\t\t        \tvar addressComponents = results[ 0 ].address_components;\n\t\t\t\t        \tif ( addressComponents && addressComponents.length > 0)\n\t\t\t\t        \t{\n\t\t\t\t        \t\tvar addressLength = addressComponents.length;\n\t\t\t\t        \t\tvar autofillLength = that.autoFillInputs.length;\n\t\t\t\t        \t\tvar limit = Math.min( addressLength, autofillLength );\n\t\t\t\t        \t\tfor ( var i = 1; i < limit; i++ )\n\t\t\t\t        \t\t{\n\t\t\t\t        \t\t\t$( that.autoFillInputs[ i ] ).val( addressComponents[ i ].long_name );\n\t\t\t\t        \t\t}\n\t\t\t\t        \t}\n\t\t\t\t    \t}\n\t\t\t\t  \t});\n\t\t    \t}\n\t\t  \t});\n\t\t}\n\n\t\t$( this ).hide();\n\t} )\n\n\n\tthis.$addAnotherDayButton.on( 'click', function( e, params )\n\t{\n\t\tvar nextValue = that.newDayCounter[ that.newDayCounter.length - 1 ] + 1;\n\t\tthat.newDayCounter.push( nextValue );\n\t\tPULSE.CLIENT.Template.append(\n\t\t    that.templates.newDay,\n\t\t    that.$singleDateContainer,\n\t\t    { num : nextValue }\n\t    );\n\t\tvar $newDateContainer = that.$singleDateContainer.find( '.day-' + nextValue + '-container' );\n\t\tif ( $newDateContainer )\n\t\t{\n\t\t\tvar $datePickerContain = $newDateContainer.find( '.datePickerContainer' );\n\t\t\tif ( $datePickerContain )\n\t\t\t{\n\t\t\t\t$datePickerContain.datetimepicker({\n\t\t\t\t\ttimepicker:false,\n\t\t\t\t\tformat:'d/m/Y',\n\t\t\t\t\tformatDate:'Y/m/d',\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tthis.$eventContactButton.on( 'click', function( e, params )\n\t{\n\t\tvar nextValue = that.newContactCounter[ that.newContactCounter.length - 1 ] + 1;\n\t\tthat.newContactCounter.push( nextValue );\n\t\tPULSE.CLIENT.Template.append(\n\t\t    that.templates.newContact,\n    \t\tthat.$eventContactContainer,\n\t\t    { num : nextValue }\n\t    );\n\t} )\n\n\tthis.$container.on( 'click', '.contactRemove', function( e, params )\n\t{\n\t\tvar contactNum = $( this ).data( 'contact-num' );\n\t\tvar $removeContainer = that.$eventContactContainer.find( '.contact-' + contactNum + '-container' );\n\t\t$removeContainer.remove();\n\t\tvar index = $.inArray( parseInt( contactNum ), that.newContactCounter );\n\t\tif ( index > -1 )\n\t\t{\n\t\t\tthat.newContactCounter.splice( index, 1 );\n\t\t}\n\t} );\n\n\tthis.$container.on( 'click', '.dayRemove', function( e, params )\n\t{\n\t\tvar dayNum = $( this ).data( 'day-num' );\n\t\tvar $removeContainer = that.$singleDateContainer.find( '.day-' + dayNum + '-container' );\n\t\t$removeContainer.remove();\n\t\tvar index = $.inArray( parseInt( dayNum ), that.newDayCounter );\n\t\tif ( index > -1 )\n\t\t{\n\t\t\tthat.newDayCounter.splice( index, 1 );\n\t\t}\n\t} );\n\n\tthis.$container.on( 'click', '.addFinishTime', function( e, params )\n\t{\n\t\tvar timeClass = $( this ).data( 'time-class' );\n\t\tvar timeNum = $( this ).data( 'day-num' );\n\t\tvar $timeContainer = $( this ).parent();\n\t\tPULSE.CLIENT.Template.append(\n\t\t    that.templates.finishTime,\n    \t\t$timeContainer,\n\t\t    { timeClass : timeClass,\n\t\t    \ttimeNum : timeNum }\n\t    );\n\t    $( this ).hide();\n\t} );\n\n\tthis.$container.on( 'click', '.removeFinishTime', function( e, params )\n\t{\n\t\tvar $finishContainer = $( this ).parent();\n\t\tvar $timeContainer = $finishContainer.parent();\n\t\tvar $addTimeContainer = $timeContainer.find( '.addFinishTime' );\n\t\t$addTimeContainer.show();\n\t    $finishContainer.remove();\n\t} );\n\n\tthis.$container.on( 'change', '.imageUploader', function( e, params )\n\t{\n\t\tvar containerNum = $( this ).data( 'upload-num' );\n\t\tvar image = this;\n\n\t\tif ( image.files && image.files[ 0 ] )\n\t\t{\n\t\t\tvar name = $( image ).val(),\n\t\t\t\tsplitName = name.split( '\\\\' ),\n\t\t\t\tdotSplit = name.split( '.' ),\n\t\t\t\tsize = image.files[ 0 ].size,\n\t\t\t\tsizeOut = '',\n\t\t\t\tform = that;\n\n\t\t\tname = splitName[ splitName.length - 1 ];\n\n\t\t\tif ( dotSplit && dotSplit.length > 1  )\n\t\t\t{\n\t\t\t\tvar fileExtension = dotSplit[ dotSplit.length - 1 ];\n\n\t\t\t\tif ( ( ( fileExtension.indexOf( 'png' ) > -1 ) || ( fileExtension.indexOf( 'jpeg' ) > -1 ) || ( fileExtension.indexOf( 'jpg' ) > -1 )  ) && ( size < 2*1024*1024 ) )\n\t\t\t\t{\n\t\t\t\t\tthat.$photoUploadSection.removeClass( 'error' );\n\t\t\t\t\tthat.$photoUploadErrorMessage.hide();\n\t\t   \t\t\tif ( size == 0 )\n\t\t   \t\t\t{\n\t\t   \t\t\t\tsizeOut = '0 Bytes';\n\t\t   \t\t\t}\n\t\t   \t\t\telse\n\t\t   \t\t\t{\n\t\t   \t\t\t\tvar sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n\t\t   \t\t\t\tvar i = parseInt( Math.floor( Math.log( size ) / Math.log( 1024 ) ) );\n\t\t   \t\t\t\tsizeOut = Math.round( size / Math.pow( 1024, i ), 2 ) + ' ' + sizes[i];\n\t\t   \t\t\t}\n\n\t\t   \t\t\tvar nextValue = 0;\n\n\t\t   \t\t\t$( image ).hide();\n\t\t\t\t\tthat.newImageCounter.push( containerNum );\n\n\t\t\t\t\tthat.uploadCounter = that.uploadCounter + 1;\n\n\t\t\t\t\tvar reader = new FileReader();\n\t\t\t\t\treader.onload = function( e )\n\t\t\t\t\t{\n\t\t\t\t\t\tPULSE.CLIENT.Template.append(\n\t\t\t\t\t\t    that.templates.imageUpload,\n\t\t\t\t    \t\tthat.$imagesContainer,\n\t\t\t\t\t\t    { src : e.target.result,\n\t\t\t\t\t\t    \tnum : containerNum,\n\t\t\t\t\t\t    \tuploadNum : that.uploadCounter,\n\t\t\t\t\t\t    \tname : name,\n\t\t\t\t\t\t    \tsize : sizeOut }\n\t\t\t\t\t    );\n\t\t\t\t\t    form.$imageUploader = form.$imagesContainer.find( '.imageUploader' + that.uploadCounter );\n\t\t\t\t\t    if ( form.newImageCounter.length > 4 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tform.$imageUploader.hide();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treader.readAsDataURL( image.files[0] );\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthat.$photoUploadSection.addClass( 'error' );\n\t\t\t\t\tthat.$photoUploadErrorMessage.show();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} );\n\n\tthis.$container.on( 'click', '.removeImageContainer', function( e, params )\n\t{\n\t\tvar imageNum = $( this ).data( 'image-num' );\n\t\tvar $removeContainer = that.$imagesContainer.find( '.image-' + imageNum + '-container' );\n\t\t$removeContainer.remove();\n\t\tvar index = $.inArray( parseInt( imageNum ), that.newImageCounter );\n\t\tif ( index > -1 )\n\t\t{\n\t\t\tthat.newImageCounter.splice( index, 1 );\n\t\t\tvar $lastUploader = that.$imagesContainer.find( '.imageUploader' + imageNum );\n\t\t\tif ( $lastUploader )\n\t\t\t{\n\t\t\t\t$lastUploader.attr( 'data-invalid', true );\n\t\t\t}\n\t\t\tif ( that.newImageCounter.length < 5 )\n\t\t\t{\n\t\t\t\tthat.$imageUploader.show();\n\t\t\t}\n\t\t}\n\t} );\n\n\tthis.$container.on( 'click', '.dateCalendarIcon', function( e, params )\n\t{\n\t\tvar $parent = $( this ).parent();\n\t\tif ( $parent )\n\t\t{\n\t\t\tvar $datePickerContain = $parent.find( '.datePickerContainer' );\n\t\t\tif ( $datePickerContain )\n\t\t\t{\n\t\t\t\t$datePickerContain.datetimepicker( 'show' );\n\t\t\t}\n\t\t}\n\t} );\n\n\t// this.$termsAndConditions.on( 'change', function( e, params )\n\t// {\n\t// \tif ( this.checked )\n\t// \t{\n\t// \t\tthat.$submitButton.show();\n\t// \t}\n\t// \telse\n\t// \t{\n\t// \t\tthat.$submitButton.hide();\n\t// \t}\n\t// } );\n\n\tthis.$submitButton.on( 'click', function( e, params )\n\t{\n\t\te.preventDefault();\n\t\tthat.errorMessage = '';\n\t\tthat.valid = true;\n\t\tthat.$formErrors.html( '' );\n\t\tthat.$formErrorsContainer.hide();\n\t\tvar errorSections = that.$container.find( '.errorSection' );\n\t\tif ( errorSections )\n\t\t{\n\t\t\tfor ( var i = 0; i < errorSections.length; i++ )\n\t\t\t{\n\t\t\t\t$( errorSections[ i ] ).removeClass( 'error' );\n\t\t\t}\n\t\t}\n\n\t\tif ( that.checkAgreements() )\n\t\t{\n\t\t\tthat.grabDataAndValidate();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthat.errorMessage = '<span class=\"error\">An Event can only be submitted after the agreements have been read and signed</span>';\n\t\t\tthat.displayErrors();\n\t\t}\n\t} );\n\n\tthis.$primaryEventDropdown.on( 'change', function( e, params )\n\t{\n\t\tvar newVal = $( this ).val(),\n\t\t\tnewArray = [],\n\t\t\totherArray = [];\n\n\t\tfor ( var i = 0; i < that.categoryIds.length > 0; i++ )\n\t\t{\n\t\t\tif ( that.categoryIds[ i ].val === $( this ).val() )\n\t\t\t{\n\t\t\t\tnewArray.push( that.categoryIds[ i ] );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\totherArray.push( that.categoryIds[ i ] );\n\t\t\t}\n\t\t}\n\n\t\tthat.categoryIds = newArray.concat( otherArray );\n\n\t\tconsole.log( that.categoryIds );\n\t} );\n\n\tfor ( var i = 0; i < this.eventSelects.length; i++ )\n\t{\n\t\t$( this.eventSelects[ i ] ).on( 'change', function( e, params )\n\t\t{\n\t\t\tvar title = $( this ).data( 'title' );\n\t\t\tif ( this.checked )\n\t\t\t{\n\t\t\t\tthat.categoryIds.push( { val : $( this ).val(), title : title } );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar index = -1;\n\t\t\t\tfor ( var i = 0; i < that.categoryIds.length; i++ )\n\t\t\t\t{\n\t\t\t\t\tif ( that.categoryIds[ i ].val === $( this ).val() )\n\t\t\t\t\t{\n\t\t\t\t\t\tindex = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif( index > -1 )\n\t\t\t\t{\n\t\t\t\t\tthat.categoryIds.splice(index, 1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthat.$primaryEventDropdown.html('');\n\t\t\tif ( that.categoryIds.length > 0 )\n\t\t\t{\n\t\t\t\tthat.$primaryEventDropdown.append( '<option class=\"primarySelect\" value=\"' + that.categoryIds[ 0 ].val + '\" selected=\"\">' + that.categoryIds[ 0 ].title + '</option>' );\n\t\t\t\tif ( that.categoryIds.length > 1 )\n\t\t\t\t{\n\t\t\t\t\tfor ( var i = 1; i < that.categoryIds.length; i++ )\n\t\t\t\t\t{\n\t\t\t\t\t\tthat.$primaryEventDropdown.append( '<option class=\"primarySelect\" value=\"' + that.categoryIds[ i ].val + '\">' + that.categoryIds[ i ].title + '</option>' );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t} );\n\t}\n}"},"checkAgreements":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.SubmitEvent.prototype.checkAgreements = function()\n{\n\tvar valid = true;\n\tfor ( var i = 0; i < this.trueCheckboxes.length; i++ )\n\t{\n\t\tvar $trueCheckbox = this.$container.find( '.' + this.trueCheckboxes[ i ] );\n\t\tif ( $trueCheckbox )\n\t\t{\n\t\t\tif ( ( ! $trueCheckbox.length > 0 ) || ( ! $trueCheckbox[ 0 ].checked ) )\n\t\t\t{\n\t\t\t\tvalid = false;\n\t\t\t\tvar $errorCheckbox = this.$container.find( '.' + this.trueCheckboxes[ i ] + 'Error' );\n\t\t\t\tif ( $errorCheckbox )\n\t\t\t\t{\n\t\t\t\t\t$errorCheckbox.addClass( 'error' );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfor ( var i = 0; i < this.falseCheckboxes.length; i++ )\n\t{\n\t\tvar $falseCheckbox = this.$container.find( '.' + this.falseCheckboxes[ i ] );\n\t\tif ( $falseCheckbox )\n\t\t{\n\t\t\tif ( ( ! $falseCheckbox.length > 0 ) || ( $falseCheckbox[ 0 ].checked ) )\n\t\t\t{\n\t\t\t\tvalid = false;\n\t\t\t\tvar $errorCheckbox = this.$container.find( '.' + this.falseCheckboxes[ i ] + 'Error' );\n\t\t\t\tif ( $errorCheckbox )\n\t\t\t\t{\n\t\t\t\t\t$errorCheckbox.addClass( 'error' );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn valid;\n}"},"getDates":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"newElement"}]},"Source":"PULSE.CLIENT.RUGBY.SubmitEvent.prototype.getDates = function( newElement )\n{\n    \tvar dates = { startDate : undefined,\n    \t\t\tendDate : undefined\n\t\t };\n\n\t\tvar times = { startHours : undefined,\n\t\tstartMinutes : undefined,\n\t\tendHours : undefined,\n\t\tendMinutes : undefined};\n\n\t\tvar total = {};\n\n\t\tvar num = $( newElement ).data( 'num' );\n\n    \tfor ( var key in dates )\n    \t{\n\t    \tvar $time = $( newElement ).find( '.' + key );\n\t    \tif ( $time )\n\t    \t{\n\t    \t\tdates[ key ] = $time.val();\n\t    \t\tif ( dates[ key ] )\n\t    \t\t{\n\t    \t\t\tvar splitDate = dates[ key ].split( '/' );\n\t    \t\t\tif ( splitDate.length > 0 )\n\t    \t\t\t{\n\t    \t\t\t\tvar newDate = splitDate.reverse().join( '-' );\n\t    \t\t\t\ttotal[ key ] = newDate;\n\t    \t\t\t}\n\t    \t\t\telse\n\t    \t\t\t{\n\t    \t\t\t\tthis.valid = false;\n\t    \t\t\t}\n\t    \t\t}\n\t    \t\telse\n\t    \t\t{\n\t    \t\t\tif ( dates[ key ] != undefined )\n\t    \t\t\t{\n\t    \t\t\t\tvar keyClass = '.' + key + 'Error';\n\t    \t\t\t\tif ( num > -1 )\n\t    \t\t\t\t{\n\t    \t\t\t\t\tkeyClass = keyClass + num;\n\t    \t\t\t\t}\n\t    \t\t\t\tvar $errorCheckbox = this.$container.find( keyClass );\n\t\t\t\t\t\tif ( $errorCheckbox )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$errorCheckbox.addClass( 'error' );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.errorMessage = this.errorMessage + '<span class=\"error\">' + this.getErrorName( key ) + ' must be a valid date</span>';\n\t\t\t\t\t\tthis.valid = false;\n\t    \t\t\t}\n\t    \t\t}\n\t    \t}\n\t    }\n\n\t    for ( var key in times )\n\t    {\n\t    \tvar $time = $( newElement ).find( '.' + key );\n\t    \tif ( $time && $time.length > 0 )\n\t    \t{\n\t    \t\ttimes[ key ] = $time.find(\":selected\").text();\n\t    \t\tif ( times[ key ] && times[ key ].indexOf( 'HH' ) < 0 && times[ key ].indexOf( 'MM' ) < 0 && times[ key ].indexOf( 'hh' ) < 0 && times[ key ].indexOf( 'mm' ) < 0 )\n\t    \t\t{\n\t    \t\t\ttotal[ key ] = times[ key ];\n\t    \t\t}\n\t    \t\telse\n\t    \t\t{\n\t    \t\t\tif ( times[ key ] && times[ key ].length > 0  )\n\t    \t\t\t{\n\t    \t\t\t\tvar keyClass = '.' + key + 'Error';\n\t    \t\t\t\tif ( num > -1 )\n\t    \t\t\t\t{\n\t    \t\t\t\t\tkeyClass = keyClass + num;\n\t    \t\t\t\t}\n\t    \t\t\t\tvar $errorCheckbox = this.$container.find( keyClass );\n\t\t\t\t\t\tif ( $errorCheckbox )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$errorCheckbox.addClass( 'error' );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.errorMessage = this.errorMessage + '<span class=\"error\">' + this.getErrorName( key ) + ' must be a valid time</span>';\n\t\t\t\t\t\tthis.valid = false;\n\t    \t\t\t}\n\t    \t\t}\n\t    \t}\n\t    }\n\n\t    var startDate = '';\n\t    var endDate = '';\n\n\t    if ( total.startDate )\n\t    {\n\t    \tstartDate = startDate + total.startDate\n\t    }\n\t    if ( total.startHours && total.startMinutes )\n\t    {\n\t    \tstartDate = startDate + 'T' + total.startHours + ':' + total.startMinutes + '+00:00';\n\t    }\n\n\t    if ( total.endDate )\n\t    {\n\t    \tendDate = endDate + total.endDate\n\t    }\n\t    else if ( total.endHours && total.endMinutes )\n\t    {\n\t    \tendDate = endDate + total.startDate;\n\t    }\n\t    if ( total.endHours && total.endMinutes )\n\t    {\n\t    \tendDate = endDate + 'T' + total.endHours + ':' + total.endMinutes + '+00:00';\n\t    }\n\n\t    var newStartDate = PULSE.CLIENT.DateUtil.parseDateTime( startDate );\n\t    var newEndDate = PULSE.CLIENT.DateUtil.parseDateTime( endDate );\n\n\t    var outStart,\n\t    \toutEnd;\n\n\t    if ( newStartDate )\n\t    {\n\t    \toutStart = newStartDate.getTime() + ( newStartDate.getTimezoneOffset() * 60000 );\n\t    }\n\n\t    if ( newEndDate )\n\t    {\n\t    \toutEnd = newEndDate.getTime() + ( newEndDate.getTimezoneOffset() * 60000 );\n\t    }\n\n\t    if ( !outEnd || isNaN( outEnd ) )\n\t    {\n\t    \toutEnd = outStart;\n\t    }\n\n    \tif ( this.eventGroup.eventDates )\n\t\t{\n\t\t\tif ( ( outStart &&  outStart < this.eventGroup.eventDates.startDate ) || ( outEnd && outEnd < this.eventGroup.eventDates.startDate ) )\n\t\t\t{\n\t\t\t\tvar keyClass = '.startDateError';\n\t\t\t\tif ( num > -1 )\n\t\t\t\t{\n\t\t\t\t\tkeyClass = keyClass + num;\n\t\t\t\t}\n\t\t\t\tvar $errorCheckbox = this.$container.find( keyClass );\n\t\t\t\tif ( $errorCheckbox )\n\t\t\t\t{\n\t\t\t\t\t$errorCheckbox.addClass( 'error' );\n\t\t\t\t}\n\n\t\t\t\tthis.errorMessage = this.errorMessage + '<span class=\"error\">The Event must take place after the ' + PULSE.CLIENT.DateUtil.getFormattedEventDate( this.eventGroup.eventDates.startDate, 'dd mmmm yyyy' ) + '</span>';\n\t\t\t\tthis.valid = false;\n\t\t\t}\n\n\t\t\tif ( ( outStart && outStart > this.eventGroup.eventDates.endDate ) || ( outEnd && outEnd > this.eventGroup.eventDates.endDate ) )\n\t\t\t{\n\t\t\t\tvar keyClass = '.endDateError';\n\t\t\t\tif ( num > -1 )\n\t\t\t\t{\n\t\t\t\t\tkeyClass = keyClass + num;\n\t\t\t\t}\n\t\t\t\tvar $errorCheckbox = this.$container.find( keyClass );\n\t\t\t\tif ( $errorCheckbox )\n\t\t\t\t{\n\t\t\t\t\t$errorCheckbox.addClass( 'error' );\n\t\t\t\t}\n\n\t\t\t\tthis.errorMessage = this.errorMessage + '<span class=\"error\">The Event must take place before the ' + PULSE.CLIENT.DateUtil.getFormattedEventDate( this.eventGroup.eventDates.endDate, 'dd mmmm yyyy' ) + '</span>';\n\t\t\t\tthis.valid = false;\n\t\t\t}\n\t\t\tif ( ( outEnd && outStart ) && outEnd < outStart )\n\t\t\t{\n\t\t\t\tvar keyClass = '.endDateError';\n\t\t\t\tif ( num > -1 )\n\t\t\t\t{\n\t\t\t\t\tkeyClass = keyClass + num;\n\t\t\t\t}\n\t\t\t\tvar $errorCheckbox = this.$container.find( keyClass );\n\t\t\t\tif ( $errorCheckbox )\n\t\t\t\t{\n\t\t\t\t\t$errorCheckbox.addClass( 'error' );\n\t\t\t\t}\n\n\t\t\t\tthis.errorMessage = this.errorMessage + '<span class=\"error\">The Event cannot end before it has started.</span>';\n\t\t\t\tthis.valid = false;\n\t\t\t}\n\t\t}\n\n\t    return { startDate : outStart, endDate : outEnd };\n}"},"getContacts":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"newElement"}]},"Source":"PULSE.CLIENT.RUGBY.SubmitEvent.prototype.getContacts = function( newElement )\n{\n    \tvar fields = { firstName : undefined,\n    \t\tsurname : undefined,\n\t\temailAddress : undefined,\n\t\tconfirmEmailAddress : undefined,\n\t\tphoneNumber1 : undefined,\n\t\tphoneNumber2 : undefined };\n\n\t\tvar total = {};\n\n\t\tvar num = $( newElement ).data( 'num' );\n\n\t\tvar $eventTitle = $( newElement ).find( '.title' );\n    \tif ( $eventTitle )\n    \t{\n    \t\ttotal.title = $eventTitle.find(\":selected\").text();\n    \t}\n\n\n    \tif (!Object.keys) {\n\t\t  Object.keys = function(obj) {\n\t\t    var keys = [];\n\n\t\t    for (var i in obj) {\n\t\t      if (obj.hasOwnProperty(i)) {\n\t\t        keys.push(i);\n\t\t      }\n\t\t    }\n\n\t\t    return keys;\n\t\t  };\n\t\t}\n\n    \tfor ( var key in fields )\n    \t{\n\t    \tvar $detail = $( newElement ).find( '.' + key );\n\t    \tif ( $detail )\n\t    \t{\n\t    \t\ttotal[ key ] = $detail.val();\n\t    \t}\n\t    }\n\n\t    var keys = [ 'emailAddress', 'confirmEmailAddress' ];\n\t    if ( ! ( total[ keys[ 0 ] ] === total[ keys[ 1 ] ] ) )\n\t    {\n\t    \tfor ( var i = 0; i < keys.length; i++ )\n\t    \t{\n\t\t    \tvar keyClass = '.' + keys[ i ] + 'Error';\n\t\t\t\tif ( num > -1 )\n\t\t\t\t{\n\t\t\t\t\tkeyClass = keyClass + num;\n\t\t\t\t}\n\t\t\t\tvar $errorCheckbox = this.$container.find( keyClass );\n\t\t\t\tif ( $errorCheckbox )\n\t\t\t\t{\n\t\t\t\t\t$errorCheckbox.addClass( 'error' );\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.errorMessage = this.errorMessage + '<span class=\"error\">Email Addresses for Contact ' + ( num + 1 ) +  ' must match</span>';\n\t\t\tthis.valid = false;\n\t    }\n\n\t    return total;\n}"},"getErrorName":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"string"}]},"Source":"PULSE.CLIENT.RUGBY.SubmitEvent.prototype.getErrorName = function( string )\n{\n\tvar capitalRegEx = /(?=[A-Z])/;\n\tif ( !string || string.length < 1 )\n\t{\n\t\treturn '';\n\t}\n\n\tvar newString = string.charAt(0).toUpperCase() + string.slice(1);\n\n\tvar capitalSplits = newString.split( capitalRegEx );\n\tvar captialString = capitalSplits.join( ' ' );\n\tvar numberRegEx = /(\\d+)/g;\n\tvar numberSplits = captialString.split( numberRegEx );\n\tvar numberString = numberSplits.join( ' ' );\n\n\treturn numberString;\n}"},"grabDataAndValidate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.SubmitEvent.prototype.grabDataAndValidate = function()\n{\n\tvar that = this;\n\tvar check = true;\n\n\n\tvar addressFields = [ 'line1', 'line2', 'city', 'county', 'postcode' ];\n\tvar mandatoryStatic = [ 'eventName',\n\t\t\t\t\t\t\t'shortDescription',\n\t\t\t\t\t\t\t'howToAttend',\n\t\t\t\t\t\t\t'eventContactName',\n\t\t\t\t\t\t\t'eventEmailAddress',\n\t\t\t\t\t\t\t'confirmEventEmailAddress',\n\t\t\t\t\t\t\t'numberOfGuests' ];\n\n\tvar optionalStatic = [  'adultCost',\n\t\t\t\t\t\t\t'childCost',\n\t\t\t\t\t\t\t'concessionCost',\n\t\t\t\t\t\t\t'longDescription',\n\t\t\t\t\t\t\t'eventPhoneNumber2',\n\t\t\t\t\t\t\t'eventWebsiteUrl',\n\t\t\t\t\t\t\t'eventTwitterHandle',\n\t\t\t\t\t\t\t'eventFacebookPage',\n\t\t\t\t\t\t\t'eventSponsors',\n\t\t\t\t\t\t\t'eventPhoneNumber1' ];\n\n\n\t//grabdata\n\tthis.dataFromUser = {\n\t};\n\n\t// IE9 placeholder back to normal\n\tif ( ( 'XDomainRequest' in window ) && window.XDomainRequest !== null )\n\t{\n\t  $('[placeholder]').each(function() {\n\t    var input = $(this);\n\t    if (input.val() == input.attr('placeholder')) {\n\t      input.val('');\n\t    }\n\t  });\n\t}\n\n\tfor ( var i = 0; i < mandatoryStatic.length; i++ )\n\t{\n\t\tvar $dataContain = this.$container.find( '.' + mandatoryStatic[ i ] );\n\t\tif ( $dataContain )\n\t\t{\n\t\t\tvar dataVal = $dataContain.val();\n\t\t\tif ( ( ! dataVal ) || dataVal.length < 1 )\n\t\t\t{\n\t\t\t\tvar $errorCheckbox = this.$container.find( '.' + mandatoryStatic[ i ] + 'Error' );\n\t\t\t\tif ( $errorCheckbox )\n\t\t\t\t{\n\t\t\t\t\t$errorCheckbox.addClass( 'error' );\n\t\t\t\t}\n\t\t\t\tthis.errorMessage = this.errorMessage + '<span class=\"error\">' + this.getErrorName( mandatoryStatic[ i ] ) + ' must not be blank</span>';\n\t\t\t\tthis.valid = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.dataFromUser[ mandatoryStatic[ i ] ] = dataVal;\n\t\t\t}\n\t\t}\n\t}\n\n\n\tvar keys = [ 'eventEmailAddress', 'confirmEventEmailAddress' ];\n    if ( ! ( this.dataFromUser[ keys[ 0 ] ] === this.dataFromUser[ keys[ 1 ] ] ) )\n    {\n    \tfor ( var i = 0; i < keys.length; i++ )\n    \t{\n\t    \tvar keyClass = '.' + keys[ i ] + 'Error';\n\t\t\tvar $errorCheckbox = this.$container.find( keyClass );\n\t\t\tif ( $errorCheckbox )\n\t\t\t{\n\t\t\t\t$errorCheckbox.addClass( 'error' );\n\t\t\t}\n\t\t}\n\t\tthis.errorMessage = this.errorMessage + '<span class=\"error\">Email Addresses for the event must match</span>';\n\t\tthis.valid = false;\n    }\n\n\tfor ( var i = 0; i < optionalStatic.length; i++ )\n\t{\n\t\tvar $dataContain = this.$container.find( '.' + optionalStatic[ i ] );\n\t\tif ( $dataContain )\n\t\t{\n\t\t\tthis.dataFromUser[ optionalStatic[ i ] ] = $dataContain.val();\n\t\t}\n\t}\n\n\t// Question is opposite of expected\n\tvar $eventPrivacy = this.$container.find( '.eventPrivacy' );\n\tif ( $eventPrivacy )\n\t{\n\t\tvar privacy = $eventPrivacy.find(\":selected\").val();\n\t\tif ( privacy.indexOf( 'false' ) > -1 )\n\t\t{\n\t\t\tthis.dataFromUser[ 'privateEvent' ] = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dataFromUser[ 'privateEvent' ] = false;\n\t\t}\n\t}\n\n\t//Get event location\n\tfor ( var i = 0; i < addressFields.length; i++ )\n\t{\n\t\tvar key = addressFields[ i ];\n\t\tvar $dataContain = this.$container.find( '.' + key );\n\t\tif ( $dataContain )\n\t\t{\n\t\t\tvar locationVal = $dataContain.val();\n\t\t\tif ( ( ! locationVal ) || locationVal.length < 1 )\n\t\t\t{\n\t\t\t\tvar $errorCheckbox = this.$container.find( '.' + key + 'Error' );\n\t\t\t\tif ( $errorCheckbox )\n\t\t\t\t{\n\t\t\t\t\t$errorCheckbox.addClass( 'error' );\n\t\t\t\t}\n\t\t\t\tthis.errorMessage = this.errorMessage + '<span class=\"error\">' + this.getErrorName( key ) + ' of the event address must not be blank</span>';\n\t\t\t\tthis.valid = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.dataFromUser[ 'eventLocation.' + key ] = locationVal;\n\t\t\t}\n\t\t}\n\t}\n\n\tvar $eventCountry = this.$container.find( '.country' );\n\tif ( $eventCountry )\n\t{\n\t\tvar country = $eventCountry.find(\":selected\").text();\n\t\tif ( ( ! country ) || country.length < 1 || country.indexOf( 'Please select a country' ) > -1 )\n\t\t{\n\t\t\tvar $errorCheckbox = this.$container.find( '.countryError' );\n\t\t\tif ( $errorCheckbox )\n\t\t\t{\n\t\t\t\t$errorCheckbox.addClass( 'error' );\n\t\t\t}\n\t\t\tthis.errorMessage = this.errorMessage + '<span class=\"error\">A country must be selected for the event address</span>';\n\t\t\tthis.valid = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dataFromUser[ 'eventLocation.country' ] = country;\n\t\t}\n\t}\n\n\tthis.dataFromUser.freeEntry = this.freeEntry;\n\n\tthis.dataFromUser.termsAccepted = true;\n\n\tvar imageUploaders = this.$container.find( '.imageUploader' );\n\tvar imageFiles = [];\n\n\tvar $newImages = this.$container.find( '.newImages' );\n\t$newImages.html( '' );\n\n\tif ( imageUploaders )\n\t{\n\t\tvar imageUploaderCount = 0;\n\t\tfor ( var i = 0; i < imageUploaders.length; i++ )\n\t\t{\n\t\t\tif ( imageUploaders[ i ].files && imageUploaders[ i ].files.length > 0 && ( ! $( imageUploaders[ i ] ).data( 'invalid' ) ) )\n\t\t\t{\n\t\t\t\tconsole.log( $( imageUploaders[ i ] ).val() );\n\t\t\t\t$( imageUploaders[ i ] ).attr( 'name', 'file' + imageUploaderCount );\n\t\t\t\t//$( imageUploaders[ i ] ).attr( 'name', 'file[' + imageUploaderCount + ']' );\n\t\t\t\t$newImages.append( imageUploaders[ i ] )\n\t\t\t\timageFiles.push( imageUploaders[ i ].files[ 0 ] );\n\t\t\t\timageUploaderCount = imageUploaderCount + 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tvar eventContactDetails = this.$container.find( '.eventOrganiserDetails' );\n\tvar eventDates = [];\n\tvar eventContacts = [];\n\n\tif ( this.multipleDates )\n\t{\n    \tvar multipleDateDetails = this.$container.find( '.multipleDateDetails' );\n    \tif ( multipleDateDetails )\n    \t{\n    \t\tfor ( var i = 0; i < multipleDateDetails.length; i++ )\n    \t\t{\n    \t\t\tvar eDate = this.getDates( multipleDateDetails[ i ] );\n\n\t\t\t\tthis.dataFromUser[ 'dates[' + i + '].startDate' ] = eDate.startDate;\n    \t\t\tthis.dataFromUser[ 'dates[' + i + '].endDate' ] = eDate.endDate;\n    \t\t}\n    \t}\n    }\n    else\n    {\n    \t$singleDateDetails = this.$container.find( '.singleDateContainer' );\n\n    \tvar eDate = this.getDates( $singleDateDetails );\n    \tthis.dataFromUser[ 'dates[0].startDate' ] = eDate.startDate;\n\t\tthis.dataFromUser[ 'dates[0].endDate' ] = eDate.endDate;\n    }\n\n    //this.dataFromUser.dates = eventDates;\n\n    if ( eventContactDetails )\n    {\n    \tfor ( var i = 0; i < eventContactDetails.length; i++ )\n    \t{\n    \t\tvar contacts = this.getContacts( eventContactDetails[ i ] );\n    \t\tfor ( var key in contacts )\n    \t\t{\n    \t\t\tif ( ( !contacts[ key ] || contacts[ key ].length < 1 ) && key.indexOf( 'phoneNumber2' ) < 0 )\n    \t\t\t{\n    \t\t\t\tvar $errorCheckbox = this.$container.find( '.' + key + 'Error' + i );\n\t\t\t\t\tif ( $errorCheckbox )\n\t\t\t\t\t{\n\t\t\t\t\t\t$errorCheckbox.addClass( 'error' );\n\t\t\t\t\t}\n\t\t\t\t\tthis.errorMessage = this.errorMessage + '<span class=\"error\">' + this.getErrorName( key ) + ' must not be blank for Contact ' + (i + 1 ) + '</span>';\n\t\t\t\t\tthis.valid = false;\n    \t\t\t}\n    \t\t\telse\n    \t\t\t{\n    \t\t\t\tthis.dataFromUser[ 'organisers[' + i + '].' + key ] = contacts[ key ];\n    \t\t\t}\n    \t\t}\n    \t}\n    }\n\n    //this.dataFromUser.contacts = eventContacts;\n\n    if( this.categoryIds.length > 0 )\n    {\n    \tfor ( var i = 0; i < this.categoryIds.length; i++ )\n    \t{\n\t\t\tvar eventId = this.categoryIds[ i ].val;\n\t\t\tthis.dataFromUser[ 'eventCategoryIds[' + i + ']' ] = eventId;\n    \t}\n    }\n    else\n    {\n    \tvar $errorCheckbox = this.$container.find( '.eventCategoriesError' );\n\t\tif ( $errorCheckbox )\n\t\t{\n\t\t\t$errorCheckbox.addClass( 'error' );\n\t\t}\n\t\tthis.errorMessage = this.errorMessage + '<span class=\"error\">Atleast one event category must be chosen for an event</span>';\n\t\tthis.valid = false;\n    }\n\n    if ( this.validPostcode )\n\t{\n\t\tif ( ! ( this.$eventLong.val().length > 0 && this.$eventLat.val().length > 0 ) )\n\t\t{\n\t\t\tthis.geoCoder.geocode( { 'address': this.$eventPostcode.val() }, function(results, status)\n\t\t\t{\n\t\t    \tif (status == google.maps.GeocoderStatus.OK) {\n\t\t\t        var thisLong = results[0].geometry.location.lng();\n\t        \t\tvar thisLat = results[0].geometry.location.lat();\n\t        \t\tthat.$eventLong.val( thisLong );\n\t        \t\tthat.$eventLat.val( thisLat );\n\t        \t\tthat.validateForm();\n\t        \t}\n\t        });\n       \t}\n       \telse\n       \t{\n       \t\tthat.validateForm();\n       \t}\n\t}\n\telse\n\t{\n\t\tvar $errorCheckbox = this.$container.find( '.postcodeError' );\n\t\tif ( $errorCheckbox )\n\t\t{\n\t\t\t$errorCheckbox.addClass( 'error' );\n\t\t}\n\t\tthis.errorMessage = this.errorMessage + '<span class=\"error\">A valid postcode must be provided</span>';\n\t\tthis.valid = false;\n\t\tthis.displayErrors();\n\t}\n}"},"displayErrors":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.SubmitEvent.prototype.displayErrors = function()\n{\n\tthis.$formErrors.html( this.errorMessage );\n\tthis.$formErrorsContainer.show();\n\n\t//Revert IE9 stuff back to placeholders\n\tif ( ( 'XDomainRequest' in window ) && window.XDomainRequest !== null )\n\t{\n  \t\t$('[placeholder]').each(function() {\n\t    \tvar input = $(this);\n\t\t    if ( input.val() == '' ) {\n\t\t      input.val( input.attr('placeholder') );\n\t\t    }\n\t\t});\n\t}\n}"},"validateForm":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.SubmitEvent.prototype.validateForm = function()\n{\n\tthis.dataFromUser[ 'eventGeoLocation.latitude' ] = this.$eventLat.val();\n\tthis.dataFromUser[ 'eventGeoLocation.longitude' ] = this.$eventLong.val();\n\n\tconsole.log( this.dataFromUser );\n\n\tif ( this.valid )\n\t{\n    \tthis.sendRequest();\n    }\n    else\n    {\n    \tthis.displayErrors();\n    }\n\n}"},"sendRequest":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.SubmitEvent.prototype.sendRequest = function()\n{\n\tvar that = this;\n\t//createurl\n\tvar baseUrl = this.eventGroup.urlGen.makeEventGroupUrl( PULSE.CLIENT.CMS_ACCOUNT, this.eventGroupId, 'submitEvent');\n\n\tthis.$entireForm.hide();\n\tif ( ( 'XDomainRequest' in window ) && window.XDomainRequest !== null )\n\t{\n\t\tthis.$IEFormSubmitted.show();\n\t}\n\telse\n\t{\n\t\tthis.$formSubmitted.show();\n\t}\n\n\tvar $addToList = this.$container.find( '.addToList' );\n\tif ( $addToList )\n\t{\n\t\tif ( ( $addToList.length > 0 ) && ( $addToList[ 0 ].checked ) )\n\t\t{\n\t\t\tvar baseListUrl = \"http://crmapi.pulselive.com/worldrugby/subscribe/list/\"\n\n\t\t\t var model = {\n\t\t\t \tforename : this.dataFromUser[ 'organisers[0].firstName' ],\n\t\t\t \tsurname : this.dataFromUser[ 'organisers[0].surname' ],\n\t\t\t \tpostcode : this.dataFromUser[ 'eventLocation.postcode' ],\n\t\t\t \temail : this.dataFromUser[ 'organisers[0].emailAddress' ],\n\t\t\t \tcontactListIds : '1'\n\t\t\t }\n\n\t\t\tconsole.log( baseListUrl );\n\t\t\t$.ajax({\n\t\t\t    url : baseListUrl,\n\t\t\t    type: \"POST\",\n\t\t\t    data : model,\n\t\t\t    success: function(data, textStatus, jqXHR)\n\t\t\t    {\n\t\t\t    \tconsole.log( 'yay' );\n\t\t\t    },\n\t\t\t    error: function (jqXHR, textStatus, errorThrown)\n\t\t\t    {\n\t\t\t \t\tconsole.log( 'no' );\n\t\t\t    }\n\t\t\t});\n\t\t}\n\t}\n\n\tthis.$sendFrom = this.$container.find( '.eventFormSend' );\n\n\tvar options = {\n        success: function(data, textStatus, jqXHR)\n\t    {\n\t    \tthat.$entireForm.show();\n\t    \tthat.$formSubmitted.hide();\n\t    \tPULSE.CLIENT.Template.publish(\n\t\t\t    that.templates.thankYou,\n\t\t\t    that.$entireForm\n\t\t    );\n\t    \t$( '#backToTop' ).click();\n\t    },\n\t    error: function (jqXHR, textStatus, errorThrown)\n\t    {\n\t \t\tthat.$entireForm.show();\n\t\t\tthat.$formErrorsContainer.show();\n\t\t\tthat.$formSubmitted.hide();\n\t\t\tthat.$formErrors.html( '<span class=\"error\">An unexpected error occured when trying to submit the event - ' + jqXHR.responseText + '</span>');\n\t    },\n        type: \"POST\",\n        dataType: 'JSON',\n        url: baseUrl,\n        data : this.dataFromUser\n\t};\n\n\tthis.$sendFrom.ajaxForm(options);\n\tthis.$sendFrom.submit();\n\n\t// $.ajax({\n\t//     url : baseUrl,\n\t//     type: \"POST\",\n\t//     data : this.dataFromUser,\n\t//     dataType: 'multipart/form-data',\n\t//     processData : false,\n\t//     success: function(data, textStatus, jqXHR)\n\t//     {\n\t//     \tconsole.log( 'yay?' )\n\t//         //data - response from server\n\t//         //that.$container.find('.message_container').empty().append('<h3 class=\"thankYou\">Thank you for registering your interest in Festival of Rugby 2015. You will receive an email from us shortly confirming this.</h3>');\n\t//     },\n\t//     error: function (jqXHR, textStatus, errorThrown)\n\t//     {\n\t//  \t\tconsole.log( errorThrown );\n\t//     }\n\t// });\n\n\n\t// var form_data = new FormData();\n\n\t// for ( var key in this.dataFromUser ) {\n\t//     form_data.append(key, this.dataFromUser[key]);\n\t// }\n\n\t// var dataValuePair = \"forename=\" + this.dataFromUser.forename +\"&surname=\" + this.dataFromUser.surname + \"&email=\" + this.dataFromUser.email + \"&contactListIds=\";  //Name value Pair\n\t// for (var i = 0; i < this.dataFromUser.listIDs.length; i++) {\n\t// \tif( i != this.dataFromUser.listIDs.length-1 )\n\t// \t{\n\t// \t\tdataValuePair += this.dataFromUser.listIDs[i];\n\t// \t\tdataValuePair += \",\";\n\t// \t}\n\t// \telse\n\t// \t{\n\t// \t\tdataValuePair += this.dataFromUser.listIDs[i];\n\t// \t}\n\t// };\n\n//\tconsole.log( form_data );\n\n\t// var fullUrl = baseUrl + dataValuePair;\n\t//sendrequest\n\t// $.ajax({\n\t//     url : baseUrl,\n\t//     type: \"POST\",\n\t//     data : form_data,\n\t//     dataType: 'multipart/form-data',\n\t//     processData : false,\n\t//     success: function(data, textStatus, jqXHR)\n\t//     {\n\t//     \tconsole.log( 'yay?' )\n\t//         //data - response from server\n\t//         //that.$container.find('.message_container').empty().append('<h3 class=\"thankYou\">Thank you for registering your interest in Festival of Rugby 2015. You will receive an email from us shortly confirming this.</h3>');\n\t//     },\n\t//     error: function (jqXHR, textStatus, errorThrown)\n\t//     {\n\t//  \t\tconsole.log( errorThrown );\n\t//     }\n\t// });\n}"}}},"GoogleMapWidget":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.GoogleMapWidget"},{"title":"param","description":null,"type":null,"name":"$container"},{"title":"param","description":null,"type":null,"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.GoogleMapWidget = function( $container, config )\n{\n    this.$container = $container;\n    this.config = config || {};\n    // this.setTabs();\n\n    this.$markers = this.$container.find( '.marker-item' );\n    this.coordinates = $.map( this.$markers, function( marker )\n    {\n        var $marker = $( marker );\n        var latitude = $marker.data( 'latitude' );\n        var longitude = $marker.data( 'longitude' );\n        var label = $marker.html();\n\n        if( latitude && longitude )\n        {\n            return { label: label, latitude: latitude, longitude: longitude };\n        }\n        else\n        {\n            return undefined;\n        }\n    } );\n\n    this.coordinates = _.compact( this.coordinates );\n\n    this.map = new PULSE.CLIENT.GoogleMap( this.$container.find( '.map-container' ), {\n        markers: this.coordinates\n    } );\n    this.map.initialise();\n}"},"ViewEvent":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the signup widget"}]},"Source":"PULSE.CLIENT.RUGBY.ViewEvent = function( container, config )\n{\n\tthis.$container = $( container );\n\tthis.config = config;\n\n\tthis.$pageRender = this.$container.find( '.newsArticle' );\n\n\tthis.eventModel;\n\tthis.eventId = config[ 'data-event' ];\n\n\tthis.templates = {\n\t\tpage : 'templates/rwc-events/event-page.html'\n\t}\n\n\tthis.setSubscriptions();\n\n\tthis.eventGroup = new PULSE.CLIENT.RUGBY.EventGroup();\n    this.eventGroup.getSingleEvent( this.eventId );\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.ViewEvent.prototype.setSubscriptions = function()\n{\n\tvar that = this;\n\n\tPULSE.CLIENT.subscribe( 'eventGroup/events', function( e, params )\n    {\n        if ( params && params.success )\n        {\n        \tif ( ( params.eventGroup == that.eventGroupId ) && ( $.inArray( parseInt( that.eventId ), params.events ) > -1 ) )\n        \t{\n        \t\tthat.eventModel = that.eventGroup.getEvent( that.eventId );\n        \t\tthat.renderPage();\n        \t}\n        }\n    });\n\n    PULSE.CLIENT.subscribe( 'googleMarker/click', function( e, params )\n    {\n      if ( that.googleMap && that.googleMap.infoWindow )\n      {\n        that.googleMap.infoWindow.close();\n      }\n    });\n}"},"renderPage":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.ViewEvent.prototype.renderPage = function()\n{\n\tconsole.log( this.eventModel );\n\tPULSE.CLIENT.Template.publish(\n\t    this.templates.page,\n\t    this.$pageRender,\n\t    { event : this.eventModel }\n    );\n\n    this.$mainPhotoHero = this.$container.find( '.mainPhotoHero' )\n    this.setListeners();\n\n    var pinIcon = new google.maps.MarkerImage(\n          \"http://dynamic.pulselive.com/test/client/irb/static/i/for-pins/public-pin.png\",\n          null, /* size is determined at runtime */\n          null, /* origin is 0,0 */\n          null, /* anchor is bottom center of the scaled image */\n          new google.maps.Size(45, 54)\n     );\n\n    if ( this.eventModel.categories && this.eventModel.categories.length > 0 && this.eventModel.categories[ 0 ].iconUrl )\n    {\n        pinIcon = new google.maps.MarkerImage(\n          this.eventModel.categories[ 0 ].iconUrl,\n          null, /* size is determined at runtime */\n          null, /* origin is 0,0 */\n          null, /* anchor is bottom center of the scaled image */\n          new google.maps.Size(45, 54)\n        );\n    }\n\n    this.config.pinIcon = pinIcon;\n\n    this.config.mapId = 'eventMap' + Math.random();\n    this.$mapCanvas = this.$container.find('#map-canvas');\n\n    this.googleMap = new PULSE.CLIENT.GoogleMaps( this.$mapCanvas, this.config );\n    this.googleMap.renderMarker( { longitude : this.eventModel.coordinates.longitude, lat: this.eventModel.coordinates.lat, id : 'eventIcon' } );\n    this.googleMap.boundMarkers();\n\n}"},"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.ViewEvent.prototype.setListeners = function()\n{\n    var that = this;\n\n    this.$container.on( 'click', '.miniPhoto', function( e, params )\n    {\n        var temp = $( this ).attr( 'src' );\n        $( this ).attr( 'src', that.$mainPhotoHero.attr( 'src' ) );\n        that.$mainPhotoHero.attr( 'src', temp );\n    } );\n\n}"}}},"HomePageTakeover":{"AlsoToday":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.HomePageTakeover.AlsoToday"},{"title":"param","description":null,"type":null,"name":"$container"},{"title":"param","description":null,"type":null,"name":"config"},{"title":"param","description":null,"type":null,"name":"otherMatches"}]},"Source":"PULSE.CLIENT.RUGBY.HomePageTakeover.AlsoToday = function( $container, config, otherMatches )\n{\n    this.$container = $container;\n    this.$config = config\n    this.otherMatches = otherMatches;\n\n    this.template = 'templates/hpto/also-today.html'\n\n    if ( this.otherMatches && this.otherMatches.length > 0 )\n    {\n        this.renderOtherMatches();\n    }\n    else\n    {\n        this.$container.hide();\n    }\n}","prototype":{"renderOtherMatches":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.HomePageTakeover.AlsoToday.prototype.renderOtherMatches = function()\n{\n    this.$container.addClass( 'multiple-' + this.otherMatches.length );\n    PULSE.CLIENT.Template.publish(\n            this.template,\n            this.$container,\n            { matches : this.otherMatches }\n    );\n    this.$container.show();\n}"}}},"Main":{"Documentation":{"description":"","tags":[{"title":"constructor","description":null,"type":null,"name":null}]},"Source":"PULSE.CLIENT.RUGBY.HomePageTakeover.Main = function( $container, config, tournament )\n{\n    this.$container = $container.hide();\n\n    // Matches scroller widget ( shouldn't show if this is also showing )\n    this.$matchesScroller = $( '[data-widget-type=matches-scroller_widget]' );\n    this.matchId = $container.data( 'match-id' );\n    this.showingMatchId = null;\n    if ( tournament )\n    {\n        this.tournament = tournament;\n        this.setSubscriptions();\n        if ( !tournament.schedule.scheduleLoaded )\n        {\n            tournament.schedule.getScheduleData(\n            {\n                start: true\n            } );\n        }\n    }\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"Listen for updated schedule information","tags":[]},"Source":"PULSE.CLIENT.RUGBY.HomePageTakeover.Main.prototype.setSubscriptions = function()\n{\n    var that = this;\n    var THIRTY_SECONDS = 30 * 3000;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCHEDULE_UPDATE, function( e, params )\n    {\n        // Checks to see whether data can be found, otherwise returns no matches\n        if ( params.success && that.tournament && params.id === that.tournament.tournamentName )\n        {\n            if( that.refreshInterval )\n            {\n                clearInterval( that.refreshInterval );\n            }\n\n            that.getDisplayMatches( that.matchId );\n            that.refreshInterval = setInterval( function()\n            {\n                that.getDisplayMatches( that.matchId );\n            }, THIRTY_SECONDS );\n        }\n    } );\n}"},"getDisplayMatches":{"Documentation":{"description":"Filter the match list to only show within an available time window\n Always show live matches, or matches 60 minutes before start and 2 hours after finish","tags":[{"title":"param","description":"Filter by a specific match id","type":null,"name":"matchId"}]},"Source":"PULSE.CLIENT.RUGBY.HomePageTakeover.Main.prototype.getDisplayMatches = function( matchId )\n{\n    this.matchId = matchId;\n    var newMatchId = this.getCurrentMatch();\n    //render only if match has changed\n    if( newMatchId && this.showingMatchId !== newMatchId)\n    {\n        //update view updates this.match\n        this.updateView();\n        //update  matchid if it has changed\n        this.showingMatchId = newMatchId;\n    }\n\n\n}"},"getCurrentMatch":{"Documentation":{"description":"Filter the match list to only show within an available time window\n Always show live matches, or matches 60 minutes before start and 2 hours after finish","tags":[]},"Source":"PULSE.CLIENT.RUGBY.HomePageTakeover.Main.prototype.getCurrentMatch = function()\n{\n    var match;\n    var currentMatch;\n    var ONE_HOUR = 60 * 60 * 1000;\n\n    // Set return variables\n    this.match = null;\n    this.matchList = null;\n\n    // If specific ID defined, check if match exists\n    if ( this.matchId )\n    {\n        currentMatch = this.tournament.schedule.getMatchById( this.matchId );\n    }\n    // If no explicit match requested, check if there are any live matches\n    else if ( this.tournament.schedule.liveMatches.length )\n    {\n        currentMatch = this.tournament.schedule.getMatchById( this.tournament.schedule.liveMatches[ 0 ] );\n    }\n    // If no live matches, look for one within specific timeframe\n    else\n    {\n        this.currentTime = new Date();\n        for ( var i = 0; i < this.tournament.schedule.matches.length; i++ )\n        {\n            // Calculate match display times\n            match = this.tournament.schedule.matches[ i ];\n            match.displayStart = new Date( match.time.millis - ONE_HOUR );\n            match.displayEnd = new Date( match.time.millis + 4 * ONE_HOUR );\n\n            // If no explicit match ID, return match within specific time window\n            if ( !this.matchId && this.currentTime >= match.displayStart && this.currentTime <= match.displayEnd )\n            {\n                // Select first match within timeframe\n                if ( !currentMatch )\n                {\n                    currentMatch = this.tournament.schedule.getMatchById( match.matchId );\n                }\n                // Prioritize matches with the start time closest to the current time\n                else if ( Math.abs( this.currentTime - match.time.millis ) < Math.abs( this.currentTime - currentMatch.time.millis ) )\n                {\n                    currentMatch = this.tournament.schedule.getMatchById( match.matchId );\n                }\n            }\n        }\n    }\n\n    // If no match found, then stop\n    if ( !currentMatch )\n    {\n        return;\n    }\n\n    if( !this.match || this.match.matchId !== currentMatch.matchId )\n    {\n        this.match = currentMatch;\n\n        // Get match time and list of matches\n        this.currentTime = new Date( this.match.time.millis );\n\n        var offset = this.match.time.gmtOffset;\n        var formattedDate = moment( this.currentTime ).utc().add( offset, 'hours' ).format( 'llll' );\n\n        this.matchList = this.tournament.schedule.getMatchModelsByDate( formattedDate );\n\n        // Return match index if explicit match id supplied\n        for ( var i = 0; i < this.matchList.length; i++ )\n        {\n            if ( this.match.matchId === this.matchList[ i ].matchId )\n            {\n                this.matchList.splice( i, 1 );\n                break;\n            }\n        }\n\n        return currentMatch.matchId;\n    }\n}"},"updateView":{"Documentation":{"description":"Logic to display ribbon / match info","tags":[]},"Source":"PULSE.CLIENT.RUGBY.HomePageTakeover.Main.prototype.updateView = function()\n{\n    if ( this.match )\n    {\n        if(this.match.matchId == 14191)\n        {\n            //TEST PURPOSES\n            this.match.status = \"L\";\n        }\n        this.render = new PULSE.CLIENT.RUGBY.HomePageTakeover.Render( this.$container, this.config, this.match, this.matchList );\n        this.$container.show();\n        // If the hpto is open, then stop rendering and hide the match scroller widget\n        if ( this.$matchesScroller )\n        {\n            this.$matchesScroller.hide();\n        }\n    }\n    else\n    {\n        this.$container.hide();\n        // If the hpto is closed, then render and show the match scroller widget\n        if ( this.$matchesScroller )\n        {\n            this.$matchesScroller.show();\n        }\n    }\n}"}}},"Render":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.HomePageTakeover.Render"},{"title":"param","description":null,"type":null,"name":"$container"},{"title":"param","description":null,"type":null,"name":"config"},{"title":"param","description":null,"type":null,"name":"match"},{"title":"param","description":null,"type":null,"name":"otherMatches"}]},"Source":"PULSE.CLIENT.RUGBY.HomePageTakeover.Render = function( $container, config, match, otherMatches )\n{\n    this.$container = $container;\n    this.config = config;\n\n    this.match = match;\n    this.otherMatches = otherMatches;\n\n    this.$takeover = this.$container.find( '.homePageTakeover' )\n    this.$stadiumContainer = this.$container.find( '.stadiumContainer' );\n    this.$scoreboxContainer = this.$container.find( '.scoreboardContainer' );\n    this.$teamInfo = this.$container.find( '.teamInfoContainer' );\n    this.$alsoTodayContainer = this.$container.find( '.alsoTodayContainer' );\n    this.$actionContainer = this.$container.find( '.actionContainer' );\n    this.$twitterButton = this.$actionContainer.find( '.hptoTwitter' );\n    this.$matchCentreLink = this.$actionContainer.find( '.mcLink' );\n\n    this.startStats = false;\n    this.startTimeline = false;\n\n    this.statsStarted = false;\n    this.timelineStarted = false;\n\n    this.scoreStarted = false;\n\n    this.templates = {\n        actions : 'templates/hpto/actions.html'\n    };\n\n    this.initialiseComponents();\n\n    this.setSubscriptions();\n\n    if ( !this.scoreStarted && !this.match.scoringLoaded )\n    {\n        this.scoreStarted = true;\n        this.match.prepareScoringData( { start: true, interval: 30 } );\n    }\n}","prototype":{"initialiseComponents":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.HomePageTakeover.Render.prototype.initialiseComponents = function()\n{\n    this.components = {\n        teamInfo: new PULSE.CLIENT.RUGBY.HomePageTakeover.TeamInfo( this.$teamInfo, this.config, this.match ),\n        scoreboard: new PULSE.CLIENT.RUGBY.HomePageTakeover.Scoreboard( this.$scoreboxContainer, this.config, this.match ),\n        otherMatches: new PULSE.CLIENT.RUGBY.HomePageTakeover.AlsoToday( this.$alsoTodayContainer, this.config, this.otherMatches )\n    };\n}"},"setSubscriptions":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.HomePageTakeover.Render.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCORING_UPDATE, function( e, params )\n    {\n        if( params.matchId === that.match.matchId )\n        {\n            that.refreshStadium();\n            that.refreshInfo();\n            that.renderActions();\n        }\n    });\n\n}"},"refreshInfo":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.HomePageTakeover.Render.prototype.refreshInfo = function()\n{\n    var status = this.match.getMatchStatus();\n\n    if ( this.match.venue )\n    {\n        var $hptoContainer = this.$container.find('.homePageTakeover');\n        if ( $hptoContainer )\n        {\n            $hptoContainer.removeClass();\n            $hptoContainer.addClass( 'homePageTakeover' );\n            $hptoContainer.addClass( 'venue' + this.match.venue.id );\n        }\n    }\n\n    switch( status )\n    {\n        case 'U':\n            this.$takeover.addClass( 'preMatch' );\n            this.components.teamInfo.deactivate();\n            this.startStats = false;\n            break;\n        case 'L':\n            this.$takeover.removeClass( 'preMatch' );\n            this.components.teamInfo.activate();\n            this.startStats = true;\n            this.startTimeline = true;\n            break;\n        default:\n            this.$takeover.removeClass( 'preMatch' );\n            this.components.teamInfo.activate();\n            this.startStats = true;\n            this.startTimeline = true;\n            break;\n    }\n\n    if ( this.startStats && ! this.statsStarted && !this.match.statsLoaded )\n    {\n        this.statsStarted = true;\n        this.match.prepareStatsData( { start: true, interval: 60 } );\n    }\n\n    if ( this.startTimeline && ! this.timelineStarted && !this.match.timelineLoaded && ( this.match.isSecondHalf() || status === 'C' ) )\n    {\n        this.timelineStarted = true;\n        this.match.prepareTimelineData( { start: true, interval: 60 } );\n    }\n\n}"},"renderActions":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.HomePageTakeover.Render.prototype.renderActions = function()\n{\n    if ( !this.actionRendered )\n    {\n        //dont render from template as only rendered once\n        var model = {};\n        model.hashtag = this.match.getHashTag();\n        model.link = PULSE.CLIENT.generateUrl( 'match', this.match.matchId );\n\n        this.$matchCentreLink.attr(\"href\", model.link);\n        this.$matchCentreLink.text(PULSE.I18N.lookup( 'label.matchcentre' ));\n        this.$twitterButton.attr(\"href\", model.link + \"#social\");\n        this.$twitterButton.attr(\"data-link\", model.link);\n        this.$twitterButton.attr(\"data-hashtag\", model.hashtag);\n        this.$twitterButton.text(model.hashtag);\n        /*\n        PULSE.CLIENT.Template.publish(\n            this.templates.actions,\n            this.$actionContainer,\n            model\n        );\n        */\n        actionRendered = true;\n    }\n}"},"refreshStadium":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.HomePageTakeover.Render.prototype.refreshStadium = function()\n{\n    this.$stadiumContainer.html( this.match.getTitle() + ', '+ this.match.getVenue() );\n}"}}},"Scoreboard":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.HomePageTakeover.Scoreboard"},{"title":"param","description":null,"type":null,"name":"$container"},{"title":"param","description":null,"type":null,"name":"config"},{"title":"param","description":null,"type":null,"name":"match"}]},"Source":"PULSE.CLIENT.RUGBY.HomePageTakeover.Scoreboard = function( $container, config, match )\n{\n    this.$container = $container;\n    this.config = config;\n    this.match = match;\n\n    this.setSubscriptions();\n\n    this.templates = {\n        time : 'templates/hpto/time.html',\n        score : 'templates/hpto/score.html',\n        additional : 'templates/hpto/additional-info.html',\n        combinedScoreTime : 'templates/hpto/time-score-combined.html'\n    }\n\n    this.$timeContainer = this.$container.find( '.timeContainer' );\n    this.$matchScoreContainer = this.$container.find( '.matchScoreContainer' );\n    this.$additionalContainer = this.$container.find( '.additionalContainer' );\n    this.$countdownContainer = this.$container.find( '.countdownContainer' );\n    this.$timeScoreContainer = this.$container.find( '.timeScoreContainer' );\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.HomePageTakeover.Scoreboard.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCORING_UPDATE, function( e, params )\n    {\n        if( params.matchId === that.match.matchId )\n        {\n            that.renderScoreboard();\n        }\n    });\n\n     PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.TIMELINE_UPDATE, function( e, params )\n    {\n        if( params.matchId === that.match.matchId )\n        {\n            that.renderAdditionalInfo();\n        }\n    });\n}"},"renderScoreboard":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.HomePageTakeover.Scoreboard.prototype.renderScoreboard = function()\n{\n    var status = this.match.getMatchStatus();\n    /*if(this.match.matchId == 14191)\n    {\n        var status = \"L\";\n        this.match.status = \"L\";\n    }else{\n        var status = this.match.getMatchStatus();\n    }*/\n\n    //this.renderTime( status );\n    //this.renderScore( status );\n\n    this.renderTimeAndScore( status );\n\n    switch( status )\n    {\n        case 'U':\n            this.$additionalContainer.hide();\n            this.renderCountdown();\n            break;\n        case 'L':\n            this.$countdownContainer.hide();\n            break;\n        default:\n            this.$countdownContainer.hide();\n            break;\n    }\n}"},"renderTimeAndScore":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"status"}]},"Source":"PULSE.CLIENT.RUGBY.HomePageTakeover.Scoreboard.prototype.renderTimeAndScore = function( status )\n{\n\n    PULSE.CLIENT.Template.publish(\n        this.templates.combinedScoreTime,\n        this.$timeScoreContainer,\n        { match : this.match, status : status }\n    );\n    this.$timeContainer = this.$container.find( '.timeContainer' );\n    this.$matchScoreContainer = this.$container.find( '.matchScoreContainer' );\n    this.$timeContainer.show();\n    this.$matchScoreContainer.show();\n\n    if (this.$timeContainer && this.match.clock && this.match.getMatchStatus() === 'L' && this.match.status != 'LHT' && this.match.status != 'LK' )\n    {\n        this.$timeContainer.addClass( 'rotate' );\n    }\n    else\n    {\n        this.$timeContainer.removeClass( 'rotate' );\n    }\n\n}"},"renderTime":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"status"}]},"Source":"PULSE.CLIENT.RUGBY.HomePageTakeover.Scoreboard.prototype.renderTime = function( status )\n{\n    if ( this.match.clock && this.match.getMatchStatus() === 'L' && this.match.status != 'LHT' && this.match.status != 'LK' )\n    {\n        this.$timeContainer.addClass( 'rotate' );\n    }\n    else\n    {\n        this.$timeContainer.removeClass( 'rotate' );\n    }\n\n    PULSE.CLIENT.Template.publish(\n            this.templates.time,\n            this.$timeContainer,\n            { match : this.match, status : status }\n        );\n    this.$timeContainer.show();\n}"},"renderAdditionalInfo":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.HomePageTakeover.Scoreboard.prototype.renderAdditionalInfo = function()\n{\n    var cards = [ this.match.getDisciplinaryCardsByTeamIndex( 0 ), this.match.getDisciplinaryCardsByTeamIndex( 1 ) ];\n\n    PULSE.CLIENT.Template.publish(\n            this.templates.additional,\n            this.$additionalContainer,\n            {   match : this.match,\n                cards : cards\n            }\n        );\n    this.$additionalContainer.show();\n}"},"renderScore":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"status"}]},"Source":"PULSE.CLIENT.RUGBY.HomePageTakeover.Scoreboard.prototype.renderScore = function( status )\n{\n    PULSE.CLIENT.Template.publish(\n            this.templates.score,\n            this.$matchScoreContainer,\n            { match : this.match, status : status }\n        );\n    this.$matchScoreContainer.show();\n}"},"renderCountdown":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.HomePageTakeover.Scoreboard.prototype.renderCountdown = function()\n{\n    if ( !this.countdown )\n    {\n        this.countdown = new PULSE.CLIENT.RUGBY.CountdownText( this.$countdownContainer, this.match.time.millis );\n    }\n    this.$countdownContainer.show();\n}"}}},"TeamInfo":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.HomePageTakeover.TeamInfo"},{"title":"param","description":null,"type":null,"name":"$container"},{"title":"param","description":null,"type":null,"name":"config"},{"title":"param","description":null,"type":null,"name":"match"}]},"Source":"PULSE.CLIENT.RUGBY.HomePageTakeover.TeamInfo = function( $container, config, match )\n{\n    this.$container = $container;\n    this.config = config;\n    this.match = match;\n\n    this.active = false;\n\n    this.templates = {  'info' : 'templates/hpto/team-info.html',\n                        'stats' :'templates/hpto/info-stats.html',\n                        'combined' : 'templates/hpto/stats-team-info-combined.html'}\n\n    this.renderStats = true;\n\n    if( $( window ).width() < 860 )\n    {\n        this.renderStats = false;\n    }\n\n    if ( this.match.scoringLoaded )\n    {\n        this.renderInfo();\n    }\n\n    this.setSubscriptions();\n    this.setListeners();\n}","prototype":{"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.HomePageTakeover.TeamInfo.prototype.setListeners = function()\n{\n    var that = this;\n\n    // Detect page resize for width only\n    $( window ).resize( function( e )\n    {\n        var wasState = that.renderStats;\n        if( $( window ).width() < 860 )\n        {\n            that.renderStats = false;\n        }\n        else\n        {\n            that.renderStats = true;\n            if ( !wasState )\n            {\n                that.renderInfo();\n            }\n        }\n    } );\n}"},"setSubscriptions":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.HomePageTakeover.TeamInfo.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCORING_UPDATE, function( e, params )\n    {\n        if( params.matchId === that.match.matchId )\n        {\n            that.renderInfo();\n        }\n    });\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.STATS_UPDATE, function( e, params )\n    {\n        if( params.matchId === that.match.matchId )\n        {\n            that.renderInfo();\n        }\n    });\n}"},"renderInfo":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.HomePageTakeover.TeamInfo.prototype.renderInfo = function()\n{\n    if ( this.active )\n    {\n\n        //in order to re render must have either not rendered info\n        //or must have stats to load\n        if(!this.infoRendered || this.match.statsLoaded)\n        {\n            PULSE.CLIENT.Template.publish(\n                this.templates.combined,\n                this.$container,\n                {\n                    match : this.match,\n                    shouldRenderStats : this.renderStats\n                }\n            );\n\n            this.infoRendered = true;\n        }\n\n        var that = this;\n\n        if ( !window.statsRefresh )\n        {\n            window.statsRefresh = setInterval( function()\n            {\n                that.toggleStatsBlock();\n            }, 10000 );\n        }\n\n        /*\n         if ( !this.infoRendered )\n         {\n         PULSE.CLIENT.Template.publish(\n         this.templates.info,\n         this.$container,\n         { match : this.match }\n         );\n         this.infoRendered = true;\n         }\n         // Hotfix for possession / territory disaappearing\n\n         if ( this.match.statsLoaded )\n         {\n         this.renderInfoStats();\n         }\n\n         */\n\n\n    }\n}"},"toggleStatsBlock":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.HomePageTakeover.TeamInfo.prototype.toggleStatsBlock = function()\n{\n    var statsBlocks = this.$container.find( '.statsBlock li' );\n    for ( var i = 0; i  < statsBlocks.length; i++ )\n    {\n        $( statsBlocks[ i ] ).toggle();\n    }\n}"},"activate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.HomePageTakeover.TeamInfo.prototype.activate = function()\n{\n    this.active = true;\n    this.$container.show();\n    this.renderInfo();\n}"},"deactivate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.HomePageTakeover.TeamInfo.prototype.deactivate = function()\n{\n    this.active = false;\n    this.$container.hide();\n}"}}}},"WIDGETS":{"BlogEntry":{"Documentation":{"description":"Live Blog Entry Data Handler","tags":[{"title":"constructor","description":null,"type":null,"name":null},{"title":"param","description":"instance of its parent","type":{"type":"NameExpression","name":"Object"},"name":"liveBlog"},{"title":"param","description":"API-given data representing a blog entry","type":{"type":"NameExpression","name":"Object"},"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.WIDGETS.BlogEntry = function( entry )\n{\n    this.templates = {\n        textEntry: 'templates/live-blog/entry-text.html',\n        photoEntry: 'templates/live-blog/entry-photo.html',\n        videoEntry: 'templates/live-blog/entry-video.html',\n        audioEntry: 'templates/live-blog/entry-audio.html',\n        tweetEntry: 'templates/live-blog/entnry-tweet.html',\n        scoreEntry: 'templates/live-blog/entry-score.html'\n    }\n\n    this.entry = entry;\n}","prototype":{"getTemplate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.WIDGETS.BlogEntry.prototype.getTemplate = function()\n{\n    var type = this.entry.getType();\n\n    switch( type )\n    {\n        case \"PHOTO\":\n            return this.templates.photoEntry;\n        case \"VIDEO\":\n            return this.templates.videoEntry;\n        case \"AUDIO\":\n            return this.templates.audioEntry;\n        case \"TWEET\":\n            return this.templates.tweetEntry;\n        case \"SCORE_UDPATE\":\n            return this.templates.scoreUpdateEntry;\n        default:\n            return this.templates.textEntry;\n    }\n}"}}}},"LiveBlogController":{"Documentation":{"description":"Live Blog widget","tags":[{"title":"constructor","description":null,"type":null,"name":null},{"title":"param","description":"either the jQuery container or the string selector","type":{"type":"NameExpression","name":"Object"},"name":"container"},{"title":"param","description":null,"type":{"type":"NameExpression","name":"Object"},"name":"config"},{"title":"param","description":"most entries to load at once","type":{"type":"NameExpression","name":"Object"},"name":"the"},{"title":"param","description":"ID of the blog to show","type":{"type":"NameExpression","name":"Object"},"name":"the"}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogController = function( $container, config )\n{\n    this.$container = $container;\n    this.config     = config || {};\n    this.maxEnties  = this.config[ 'data-max-entries' ] || $container.data( 'max-entries' ) || 10;\n    this.blogId     = this.config[ 'data-blog-id' ] || $container.data( 'blog-id' );\n    this.$context   = this.config.$context;\n\n    if( !this.blogId )\n    {\n        PULSE.CLIENT.Log( 'no blog ID; aborting live blog widget' );\n        return;\n    }\n\n    this.LIVE_STREAMING_SCOPE = 'hero';\n    this.LAST_SEEN_ENTRY = 'last-seen-entry-position';\n\n    this.ORDER = {\n        DESC: 'descending',\n        ASC: 'ascending'\n    };\n    this.entriesOrder = this.ORDER.DESC;\n\n    this.templates = {\n        header: 'templates/live-blog/header.html',\n        headlines: 'templates/live-blog/headlines.html',\n        keyEvents: 'templates/live-blog/key-events.html',\n        textEntry: 'templates/live-blog/entry-text.html',\n        photoEntry: 'templates/live-blog/entry-photo.html',\n        videoEntry: 'templates/live-blog/entry-video.html',\n        audioEntry: 'templates/live-blog/entry-audio.html',\n        tweetEntry: 'templates/live-blog/entry-tweet.html',\n        scoreEntry: 'templates/live-blog/entry-score.html',\n        liveStreamingTabs: 'templates/live-blog/live-streaming-tabs.html'\n    };\n\n    this.$header = this.$container.find( '.blogBar' );\n    this.$itemsList = this.$container.find( '.matchFeed' );\n    this.$headerEvents = this.$container.find( '.headlines' );\n    this.$keyEvents = this.$container.find( '.keyEvents' );\n    this.$lastUpdated = this.$container.find( '.lastUpdated' );\n    this.$loader = this.$container.find( '.spinner' );\n    this.$videoPlayer = $( '#video-hero' );\n\n    var blogConfig = {\n        maxEntries: this.maxEntries,\n        refreshInterval: 10,\n        order: this.entriesOrder\n    };\n\n    this.liveBlog = new PULSE.CLIENT.RUGBY.LiveBlog( this.blogId, this.$container, blogConfig );\n\n    this.setSubscriptions();\n    this.setEventListeners();\n}","prototype":{"activate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogController.prototype.activate = function()\n{\n    this.active = true;\n    if( this.liveBlog )\n    {\n        if( this.liveBlog.getHeader() )\n        {\n            this.liveBlog.activate();\n        }\n        else\n        {\n            this.liveBlog.getBlogData();\n        }\n    }\n}"},"deactivate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogController.prototype.deactivate = function()\n{\n    this.active = false;\n    if( this.liveBlog )\n    {\n        this.liveBlog.deactivate();\n    }\n}"},"setSubscriptions":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogController.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    this.$container.on( PULSE.CLIENT.RUGBY.LIVE_BLOG_EVENTS.HEADER_UPDATE, function( e, params )\n    {\n        if( params.id == that.blogId )\n        {\n            that.publishHeader();\n            that.setLiveStreaming();\n            that.updateBackToLatest();\n\n            that.setUpdateTimestamp();\n        }\n    } );\n\n    this.$container.on( PULSE.CLIENT.RUGBY.LIVE_BLOG_EVENTS.ENTRIES_UPDATE, function( e, params )\n    {\n        if( params.id == that.blogId )\n        {\n            for( var i = 0, iLimit = params.entries.length; i < iLimit; i++ )\n            {\n                entry = params.entries[ i ];\n                if( entry.isVisible() )\n                {\n                    that.updateEntry( entry );\n                }\n                else\n                {\n                    that.removeEntry( entry );\n                }\n            }\n\n            that.setUpdateTimestamp();\n\n            $.waypoints( 'refresh' );\n            PULSE.CLIENT.Log( 'refresh waypoints' );\n        }\n    } );\n\n    this.$container.on( PULSE.CLIENT.RUGBY.LIVE_BLOG_EVENTS.ENTRIES_ADD, function( e, params )\n    {\n        if( params.id == that.blogId )\n        {\n            that.$loader.hide();\n\n            that.updateBackToLatest( params.entries );\n\n            if( that.$itemsList.children().length === 0 )\n            {\n                that.publishEntries( that.entriesOrder );\n                that.initWaypoints();\n            }\n            else\n            {\n                PULSE.CLIENT.Log( 'adding individual entries:' );\n                PULSE.CLIENT.Log( $.map( params.entries, function( entry ) { return entry.id; } ) );\n                that.addEntries( params.entries );\n            }\n\n            that.$itemsList.waypoint( 'enable' );\n            PULSE.CLIENT.Log( 'enable match feed waypoint' );\n            $.waypoints( 'refresh' );\n            PULSE.CLIENT.Log( 'refresh waypoints' );\n\n            that.setUpdateTimestamp();\n            that.setLastSeenEntry();\n            that.checkAndLoadKeyEntry();\n        }\n    } );\n\n    this.$container.on( PULSE.CLIENT.RUGBY.LIVE_BLOG_EVENTS.NO_DATA, function( e, params )\n    {\n        if( params.id == that.blogId )\n        {\n            that.$loader.hide();\n\n            that.setUpdateTimestamp();\n        }\n    } );\n\n    this.$container.on( PULSE.CLIENT.RUGBY.LIVE_BLOG_EVENTS.ERROR, function( e, params )\n    {\n        if( params.id == that.blogId )\n        {\n            that.setUpdateTimestamp();\n\n            that.$itemsList.waypoint( 'enable' );\n            PULSE.CLIENT.Log( 'enable match feed waypoint' );\n        }\n    } );\n}"},"setUpdateTimestamp":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogController.prototype.setUpdateTimestamp = function()\n{\n    var now = new Date();\n    var timestampFormat = 'HH:MM (dd/mm/yy)';\n    var nowString = now.format( timestampFormat );\n    var timeMessage = PULSE.I18N.lookup( 'widget.blog.localtimemessage' );\n    var lastUpdated = PULSE.I18N.lookup( 'widget.blog.lastupdated' );\n\n    this.$lastUpdated.html( '<span>' + timeMessage + '</span>' + lastUpdated + ' ' + nowString );\n}"},"setVideo":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"video"}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogController.prototype.setVideo = function( video )\n{\n    if( video )\n    {\n        PULSE.CLIENT.PDK.setVideo(\n            this.LIVE_STREAMING_SCOPE,\n            video.mediaId,\n            video.duration,\n            video.title,\n            video.timestamp,\n            true\n        );\n\n        $( '.socialLinks a' ).each( function()\n        {\n            $( this ).attr( 'data-social', video.canonicalUrl );\n        } );\n    }\n}"},"setEventListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogController.prototype.setEventListeners = function()\n{\n    // change direction\n    var that = this;\n    this.$container.find( '.orderBy span' ).click( function( e )\n    {\n        if( $( this ).hasClass( 'desc' ) )\n        {\n            that.$keyEvents.find( '.back' ).css( 'opacity', 0 );\n            $( this ).removeClass( 'desc' ).addClass( 'asc' );\n            $( this ).text( PULSE.I18N.lookup( 'widget.blog.orderby.oldest' ) );\n\n            that.entriesOrder = that.ORDER.ASC;\n        }\n        else\n        {\n            that.$keyEvents.find( '.back' ).css( 'opacity', 1 );\n            $( this ).addClass( 'desc' ).removeClass( 'asc' );\n            $( this ).text( PULSE.I18N.lookup( 'widget.blog.orderby.latest' ) );\n\n            that.entriesOrder = that.ORDER.DESC;\n        }\n\n        that.liveBlog.setOrder( that.entriesOrder );\n        that.empty();\n\n        e.preventDefault();\n    } );\n\n    this.$keyEvents.on( 'click', '.back', function( e )\n    {\n        scrollTo( that.getCutoff() - 50, 800, easing.easeInOutCubic );\n        $( this ).hide();\n        e.preventDefault();\n    } );\n\n    var $events = [].concat( this.$keyEvents, this.$headerEvents );\n    this.$keyEvents.add( this.$headerEvents ).on( 'click', '.scroll-to', function( e )\n    {\n        var entryId = $( this ).attr( 'data-entry-id' );\n\n        that.entryToScrollTo = entryId;\n        that.checkAndLoadKeyEntry();\n\n        e.preventDefault();\n    } );\n\n    // clicking on a video or audio item loads a new video\n    this.$container.on( 'click', 'a[data-media-url]', function( e )\n    {\n        that.canShowStreamingButton = true;\n\n        var $video = $( this );\n        var id = $video.attr( 'data-media-url' );\n        var duration = $video.find( '.duration' ).text();\n        var title = $video.find( '.title' ).text();\n        var timestamp = $video.find( '.timestamp' ).text();\n\n        that.saveStreamingVideo();\n\n        that.setVideo( {\n            mediaId: id,\n            duration: duration,\n            title: title,\n            timestamp: timestamp\n        } );\n\n        that.hideShowStreamingButton();\n\n        e.preventDefault();\n    } );\n\n    // clicking on the streaming button reloads saved streaming video\n    $( 'body' ).on( 'click', '.streaming-button', function( e )\n    {\n        that.canShowStreamingButton = false;\n\n        if( that.streamingVideo )\n        {\n            that.setVideo( that.streamingVideo );\n            that.hideShowStreamingButton();\n        }\n\n        e.preventDefault();\n    } );\n\n    this.$container.find( '.matchSelector' ).on( 'click', 'a', function( e )\n    {\n        $( this ).siblings().removeClass( 'selected' );\n        $( this ).addClass( 'selected' );\n\n        var streamingMedia = that.liveBlog.getHeader().getStreamingMedia();\n\n        var index = $.inArray( this, that.$container.find( '.matchSelector a' ) );\n\n        that.setVideo( streamingMedia[ index ].reference );\n\n        e.preventDefault();\n    } );\n\n    window.onscroll = function()\n    {\n        var cutoff = that.getCutoff();\n        if( window.scrollY > cutoff )\n        {\n            $('.keyEventsRow').addClass( 'keyEvents_fixed' );\n        }\n\n        if( window.scrollY <= cutoff )\n        {\n            $('.keyEventsRow').removeClass( 'keyEvents_fixed' );\n        }\n    };\n\n    this.$container.find( '.items' ).waypoint(\n    {\n        handler: function( direction )\n        {\n            if( direction === 'up' )\n            {\n                that.$keyEvents.find( '.back' ).removeClass( 'notification' );\n                that.$keyEvents.find( '.back' ).hide();\n                that.$keyEvents.find( '.back span' ).empty();\n                that.setLastSeenEntry();\n            }\n            else\n            {\n                that.$keyEvents.find( '.back' ).show();\n            }\n        },\n        context: that.$context\n    } );\n}"},"scrollToEntry":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"$entry"}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogController.prototype.scrollToEntry = function( $entry )\n{\n    var offset = $entry.offset();\n    var viewHeight = $( window ).height();\n    scrollTo( offset.top - ( viewHeight / 2 ), 300, easing.easeOutQuart, function()\n    {\n        $entry.addClass( 'stand-out' );\n        setTimeout( function()\n        {\n            $entry.removeClass( 'stand-out' );\n        }, 500 );\n    } );\n}"},"checkAndLoadKeyEntry":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogController.prototype.checkAndLoadKeyEntry = function()\n{\n    if( this.entryToScrollTo )\n    {\n        var $entry = this.$itemsList.find( '.feedItem[data-entry-id=\"' + this.entryToScrollTo + '\"]' );\n        if( $entry.length )\n        {\n            this.scrollToEntry( $entry );\n            this.entryToScrollTo = undefined;\n        }\n        else\n        {\n            this.loadMore();\n        }\n    }\n}"},"updateBackToLatest":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"newEntries"}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogController.prototype.updateBackToLatest = function( newEntries )\n{\n    var $items = this.$container.find( '.items' );\n    var $back = this.$keyEvents.find( '.back' );\n\n    if( -1 === $.inArray( $items[0], $.waypoints( 'above' ) ) )\n    {\n        $back.hide();\n        return;\n    }\n\n    if( !this.latestStoredPosition )\n    {\n        this.latestStoredPosition = 0;\n    }\n\n    if( !newEntries )\n    {\n        newEntries = this.liveBlog.getEntriesAbove( this.latestStoredPosition );\n    }\n\n    var that = this;\n\n    // only use entries that are new AND above the latest recorded position\n    var entries = $.grep( newEntries, function( e )\n        {\n            return e.getPosition() > that.latestStoredPosition;\n        } );\n\n    if( entries.length )\n    {\n        $back.find( 'span' ).text( entries.length );\n        $back.addClass( 'notification' );\n    }\n}"},"getCutoff":{"Documentation":{"description":"Calculates where the blog actually starts, excluding the header","tags":[{"title":"return","description":"the cutoff point for the blog","type":{"type":"NameExpression","name":"Number"}}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogController.prototype.getCutoff = function()\n{\n    var $topOfBlog = this.$container.find( '.orderBy' ).closest( '.column.large-8' );\n    if( $topOfBlog.length )\n    {\n        return $topOfBlog.offset().top;\n    }\n    else\n    {\n        return 398;\n    }\n}"},"initWaypoints":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogController.prototype.initWaypoints = function()\n{\n    var that = this;\n\n    if( !this.waypointsInitialised )\n    {\n        /**\n         * Waypoint to detect when user reaches end of screen\n         */\n        this.$itemsList.waypoint(\n        {\n            handler: function( direction )\n            {\n                if( direction === 'down' )\n                {\n                    var $this = $( this );\n                    that.$itemsList.waypoint( 'disable' );\n                    PULSE.CLIENT.Log( 'disable match feed waypoint' );\n\n                    that.$loader.show();\n                    that.loadMore();\n                }\n            },\n            offset: 'bottom-in-view',\n            context: that.$context\n        } );\n\n        this.waypointsInitialised = true;\n    }\n}"},"loadMore":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogController.prototype.loadMore = function()\n{\n    PULSE.CLIENT.Log( 'load more' );\n    this.liveBlog.loadMore();\n}"},"empty":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogController.prototype.empty = function()\n{\n    PULSE.CLIENT.Log( 'empty' );\n\n    this.$itemsList.waypoint( 'disable' );\n    this.$itemsList.empty();\n\n    this.$loader.show();\n}"},"updateEntry":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"entry"}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogController.prototype.updateEntry = function( entry )\n{\n    var id = entry.getId();\n    var $entry = this.$itemsList.find( '.feedItem[data-entry-id=\"' + id + '\"]' );\n\n    if( $entry.attr( 'data-update-time' ) !== \"\" + entry.getUpdateTime() )\n    {\n        PULSE.CLIENT.Log( 'updating entry ' + id );\n        $entry.html( this.getEntryHtml( entry ) );\n        $entry.attr( 'data-update-time', entry.getUpdateTime() );\n    }\n\n    if( $entry.attr( 'data-position' ) !== \"\" + entry.getPosition() )\n    {\n        $entry.attr( 'data-position', entry.getPosition() );\n        this.positionEntry( entry );\n        // $entry.show();\n    }\n}"},"removeEntry":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"entry"}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogController.prototype.removeEntry = function( entry )\n{\n    var id = entry.getId();\n    var $entry = this.$itemsList.find( '.feedItem[data-entry-id=\"' + id + '\"]' );\n\n    $entry.hide();\n}"},"addEntries":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"entries"}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogController.prototype.addEntries = function( entries )\n{\n    for( var i = 0, iLimit = entries.length; i < iLimit; i++ )\n    {\n        this.positionEntry( entries[ i ] );\n    }\n}"},"$getEntry":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"entry"}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogController.prototype.$getEntry = function( entry )\n{\n    var id = entry.getId();\n    var $entry = this.$itemsList.find( '.feedItem[data-entry-id=\"' + id + '\"]' );\n\n    if( $entry.length === 0 )\n    {\n        $entry = $( '<div class=\"feedItem animateIn\" data-entry-id=\"' + id +\n                    '\" data-position=\"' + entry.getPosition() +\n                    '\" data-update-time=\"' + entry.getUpdateTime() + '\">' );\n\n        var template = this.getTemplateByType( entry.type );\n\n        PULSE.CLIENT.Template.publish( template, $entry, entry.getData() );\n    }\n\n    return $entry;\n}"},"positionEntry":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"entry"}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogController.prototype.positionEntry = function( entry )\n{\n    var neighbours = this.liveBlog.getEntryNeighbours( entry );\n    var $entry = this.$getEntry( entry );\n\n    if( neighbours.prev && this.$itemsList.find( '.feedItem[data-entry-id=\"' + neighbours.prev.getId() + '\"]' ).length )\n    {\n        var $prevEntry = this.$getEntry( neighbours.prev );\n        $entry.insertAfter( $prevEntry );\n    }\n    else if( neighbours.next && this.$itemsList.find( '.feedItem[data-entry-id=\"' + neighbours.next.getId() + '\"]' ).length )\n    {\n        var $nextEntry = this.$getEntry( neighbours.next );\n        $entry.insertBefore( $nextEntry );\n    }\n    else if( this.entriesOrder === this.ORDER.DESC )\n    {\n        this.$itemsList.prepend( $entry );\n    }\n    else\n    {\n        this.$itemsList.append( $entry );\n    }\n}"},"publishEntries":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogController.prototype.publishEntries = function()\n{\n    var entries = this.liveBlog.getEntries();\n    var listHTML = this.getEntriesHtml( entries );\n\n    this.$itemsList.html( listHTML );\n}"},"getEntriesHtml":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"entries"}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogController.prototype.getEntriesHtml = function( entries )\n{\n    var listHTML = \"\";\n    for( var i = 0, iLimit = entries.length; i < iLimit; i++ )\n    {\n        entryHTML = '<div class=\"feedItem\" data-entry-id=\"' + entries[ i ].getId() +\n                    '\" data-position=\"' + entries[ i ].getPosition() +\n                    '\" data-update-time=\"' + entries[ i ].getUpdateTime() + '\">' +\n                    this.getEntryHtml( entries[ i ] ) + '</div>';\n\n        listHTML += entryHTML;\n    }\n\n    return listHTML;\n}"},"getEntryHtml":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"entry"}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogController.prototype.getEntryHtml = function( entry )\n{\n    var template = this.getTemplateByType( entry.type );\n    return PULSE.CLIENT.Template.getHtml( template, entry.getData() );\n}"},"publishHeader":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogController.prototype.publishHeader = function()\n{\n    PULSE.CLIENT.Log( 'publishing header' );\n    var header = this.liveBlog.getHeader();\n    var variants = header.getData().leadMedia ? header.getData().leadMedia.variants : [];\n    var variant = PULSE.CLIENT.getBiggestPhotoVariant( variants );\n    var streamingMedia = header.getStreamingMedia();\n\n    if( variant )\n    {\n        this.$container.find( '.blogContainer' ).css( 'background', 'linear-gradient(rgba(29,29,30,0.9),rgba(29,29,30,0.9)),url(' + variant.url + ')' );\n    }\n\n    if( streamingMedia.length )\n    {\n        this.streaming = true;\n        this.$container.find( '.live-streaming' ).show();\n        this.$container.find( '.no-live-streaming' ).hide();\n    }\n    else\n    {\n        this.streaming = false;\n        this.$container.find( '.live-streaming' ).hide();\n        this.$container.find( '.no-live-streaming' ).show();\n    }\n\n    PULSE.CLIENT.Template.publish( this.templates.header, this.$header, header.getData() );\n    PULSE.CLIENT.Template.publish( this.templates.headlines, this.$headerEvents, header.getData() );\n    PULSE.CLIENT.Template.publish( this.templates.keyEvents, this.$keyEvents.find( '.keyEventsContainer' ), header.getData() );\n}"},"setLiveStreaming":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogController.prototype.setLiveStreaming = function()\n{\n    var header = this.liveBlog.getHeader();\n\n    if( header )\n    {\n        var streamingMedia = header.getStreamingMedia();\n\n        this.$container.find( '.liveStream' ).toggle( streamingMedia.length > 0 );\n        this.$container.find( '.matchSelector' ).toggle( streamingMedia.length > 1 );\n\n        for( var i = 0; i < streamingMedia.length; i++ )\n        {\n            this.$container.find( '.matchSelector a' ).eq( i ).html( streamingMedia.name );\n        }\n\n        if( streamingMedia.length > 0 && !this.liveStreamSet )\n        {\n            this.liveStreamSet = true;\n\n            PULSE.CLIENT.Log( 'live stream setup' );\n\n            var isMobile = PULSE.CLIENT.ResponsiveUtils.detectMobile();\n\n            var that = this;\n            setTimeout( function()\n            {\n                that.setVideo( _.first( streamingMedia ).reference );\n            }, isMobile ? 6000 : 3000 );\n\n            this.$container.find( '#live-video' ).waypoint( function( direction )\n            {\n                var $video = that.$container.find( '#live-video' );\n\n                if( direction === 'up' )\n                {\n                    $video.css( 'height', \"\" );\n                    $video.removeClass( 'video-scroll-reduced' );\n                }\n                else\n                {\n                    $video.css( {\n                        'height': $video.outerHeight()\n                    } );\n                    $video.addClass( 'video-scroll-reduced' );\n                }\n            } );\n\n            this.$container.find( '.matchSelector a' ).first().addClass( 'selected' );\n        }\n\n        PULSE.CLIENT.Template.publish(\n            this.templates.liveStreamingTabs,\n            this.$container.find( '.matchSelector' ),\n            { streamingMedia: streamingMedia }\n        );\n    }\n}"},"getTemplateByType":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"type"}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogController.prototype.getTemplateByType = function( type )\n{\n    switch( type )\n    {\n        case \"PHOTO\":\n            return this.templates.photoEntry;\n        case \"VIDEO\":\n            return this.templates.videoEntry;\n        case \"AUDIO\":\n            return this.templates.audioEntry;\n        case \"TWEET\":\n            return this.templates.tweetEntry;\n        case \"SCORE_UDPATE\":\n            return this.templates.scoreUpdateEntry;\n        default:\n            return this.templates.textEntry;\n    }\n}"},"saveStreamingVideo":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogController.prototype.saveStreamingVideo = function()\n{\n    if( !this.streamingVideo )\n    {\n        var $video = this.$videoPlayer;\n        var id = $video.attr( 'data-media-url' );\n        var duration = $video.find( '.length' ).text();\n        var title = $video.find( '.title' ).text();\n        var timestamp = $video.find( '.tag' ).text();\n        var canonicalUrl = $video.find( '[data-social]' ).eq( 0 ).attr( 'data-social' );\n\n        this.streamingVideo = {\n            mediaId: id,\n            duration: duration,\n            title: title,\n            timestamp: timestamp,\n            canonicalUrl: canonicalUrl\n        };\n    }\n}"},"hideShowStreamingButton":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogController.prototype.hideShowStreamingButton = function()\n{\n    if( this.canShowStreamingButton )\n    {\n        if( this.$videoPlayer.find( '.streaming-button' ).length === 0 )\n        {\n            this.$videoPlayer.find( '.video-to-move' ).append( '<div class=\"streaming-button-container\"><a href=\"#\"><div class=\"streaming-button\">Back to Live</div></a></div>' );\n            this.$videoPlayer.find( '.row' ).append( '<div class=\"column large-5\"><a href=\"#\"><div class=\"streaming-button\">Back to Live Streaming</div></a></div>' );\n        }\n        else\n        {\n            this.$videoPlayer.find( '.streaming-button' ).show();\n        }\n    }\n    else\n    {\n        this.$videoPlayer.find( '.streaming-button' ).hide();\n    }\n}"},"setLastSeenEntry":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogController.prototype.setLastSeenEntry = function()\n{\n    var $items = this.$container.find( '.items' );\n    if( -1 < $.inArray( $items[0], $.waypoints( 'above' ) ) )\n    {\n        this.$keyEvents.find( '.back' ).hide();\n        return;\n    }\n\n    this.$keyEvents.find( '.back' ).show();\n\n    var $latestItem = this.$itemsList.children().first();\n    var position = $latestItem.attr( 'data-position' );\n    if( position && !isNaN( parseFloat( position, 10 ) ) )\n    {\n        position = parseFloat( position, 10 );\n    }\n\n    if( this.latestStoredPosition !== position )\n    {\n        this.latestStoredPosition = position;\n    }\n}"}}},"LiveBlogVideo":{"Documentation":{"description":"Renderer, decides whether to render tP Player or just the video preview.\nThis widget may be given a player scope. If this is the case, it'll try to set the video itself.\nIf no scope is given, the widget will try to reach the player controller and ask it to play the\nvideo when the user clicks 'play'.","tags":[{"title":"param","description":"jQuery container object","type":{"type":"NameExpression","name":"Object"},"name":"$container"},{"title":"param","description":"configuration for the widget","type":{"type":"NameExpression","name":"Object"},"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogVideo = function( $container, config )\n{\n    this.$container = $container;\n    this.playerScope = config[ 'data-player-scope' ];\n    this.mediaId = config[ 'data-video-id' ].replace( 'video-', '' );\n    this.$player = $( '.sneaky-player .tpLayout' + this.playerScope );\n    this.video = {\n        id: this.mediaId,\n        title: config[ 'data-title' ],\n        durationString: config[ 'data-duration-label' ],\n        duration: parseInt( config[ 'data-duration' ] || 0, 10 )\n    };\n\n    this.subscribeToParent();\n    this.setListeners();\n}","prototype":{"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.LiveBlogVideo.prototype.setListeners"}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogVideo.prototype.setListeners = function()\n{\n    var that = this;\n\n    if( typeof window.$pdk !== 'undefined' && $pdk.ready )\n    {\n        $pdk.ready( function()\n        {\n            that.pdkReady = true;\n        } );\n    }\n\n    this.$container.on( 'click', function( e )\n    {\n        that.loadVideo();\n        e.preventDefault();\n    } );\n}"},"subscribeToParent":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogVideo.prototype.subscribeToParent = function()\n{\n    var that = this;\n\n    /**\n     * Subscribe for parent response event, to save the parent controller\n     */\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.LiveBlogVideo.PARENT_RESPONSE_EVENT, function( e, params )\n    {\n        if( params.controller )\n        {\n            that.controller = params.controller;\n        }\n    } );\n\n    /**\n     * Notify the parent controller that there's a new video that requires access\n     */\n    PULSE.CLIENT.notify( PULSE.CLIENT.RUGBY.LiveBlogVideo.POLL_FOR_PARENT_EVENT,\n    {\n        mediaId: this.mediaId\n    } );\n}"},"detachAndPlayInline":{"Documentation":{"description":"Detach the video player from where it is and play the video inline","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogVideo.prototype.detachAndPlayInline = function()\n{\n    if( PULSE.CLIENT.UI.isElementInViewport( this.$container ) &&\n        document.visibilityState && document.visibilityState === 'visible' &&\n        this.$container.is( ':visible' ) &&\n        this.pdkReady && this.playerScope )\n    {\n        this.$container.find( '.player' ).html( '' ).append( this.$player.detach() );\n        this.setVideo();\n    }\n}"},"loadVideo":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogVideo.prototype.loadVideo = function()\n{\n    if( this.controller )\n    {\n        this.controller.playVideo( this.video, true );\n    }\n    else\n    {\n        PULSE.CLIENT.Log( 'live blog video: no controller, aborting playing video' );\n    }\n}"},"setVideo":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogVideo.prototype.setVideo = function()\n{\n    if( this.playerScope )\n    {\n        PULSE.CLIENT.PDK.setVideo( this.playerScope, this.mediaId, this.video.title,\n            this.video.durationString, false );\n    }\n}"}}},"LiveBlogVideoModal":{"Documentation":{"description":"Controls the video replay on the page","tags":[{"title":"param","description":"jQuery container object","type":{"type":"NameExpression","name":"Object"},"name":"$container"},{"title":"param","description":"configuration for the widget","type":{"type":"NameExpression","name":"Object"},"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogVideoModal = function( $container, config )\n{\n    this.$container = $container;\n    this.playerScope = config[ 'data-player-scope' ];\n    this.setSubscriptions();\n    this.setListeners();\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.LiveBlogVideoModal.prototype.setSubscriptions"}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogVideoModal.prototype.setSubscriptions = function()\n{\n    var that = this;\n    /**\n     * Subscribe to polling for the existence of this controller and send it back in the response\n     */\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.LiveBlogVideo.POLL_FOR_PARENT_EVENT, function( e, params )\n    {\n        if( params.mediaId )\n        {\n            PULSE.CLIENT.notify( PULSE.CLIENT.RUGBY.LiveBlogVideo.PARENT_RESPONSE_EVENT,\n            {\n                controller: that\n            } );\n        }\n    } );\n}"},"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogVideoModal.prototype.setListeners = function()\n{\n    var that = this;\n\n    if( typeof window.$pdk !== 'undefined' && $pdk.ready )\n    {\n        $pdk.ready( function()\n        {\n            that.pdkReady = true;\n            PULSE.CLIENT.PDK.addPlayer( that.playerScope, '#blog-player', {} );\n        } );\n    }\n\n    /**\n     * Close the modal, pause the video and remove click listeners for closing the modal\n     */\n    this.$container.on( 'click', '.close', function( e )\n    {\n        that.closeModal();\n        e.preventDefault();\n    } );\n}"},"playVideo":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"video"},{"title":"param","description":null,"type":null,"name":"autoplay"}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogVideoModal.prototype.playVideo = function( video, autoplay )\n{\n    var canPlay = true;\n    if( this.playerScope && this.pdkReady )\n    {\n        PULSE.CLIENT.PDK.setVideo( this.playerScope, video.id, video.duration, video.title,\n            video.durationString, autoplay === true );\n        this.showModal();\n        PULSE.CLIENT.Tracking.event( 'video-modal', 'open', video.id );\n    }\n    else\n    {\n        canPlay = false;\n    }\n}"},"showModal":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogVideoModal.prototype.showModal = function()\n{\n    this.$container.show();\n    this.$container.addClass( 'open' );\n\n    if( !this.isOpen )\n    {\n        /**\n         * Add click listeners to close the modal if user clicks outside of the content wrapper\n         */\n        var that = this;\n        this.$container.on( 'click.modalInteraction', function( e )\n        {\n            that.closeModal();\n            e.preventDefault();\n        } );\n\n        this.$container.on( 'click', '.videoModalContent', function( e )\n        {\n            e.stopPropagation();\n            e.preventDefault();\n        } );\n\n        this.isOpen = true;\n    }\n}"},"closeModal":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogVideoModal.prototype.closeModal = function()\n{\n    this.$container.hide();\n    // PULSE.CLIENT.PDK.pause( this.playerScope );\n    PULSE.CLIENT.PDK.stop( this.playerScope );\n    this.$container.removeClass( 'open' );\n    this.$container.off( 'click.modalInteraction' );\n    this.$container.off( 'click', '.videoModalContent' );\n    this.isOpen = false;\n}"}}},"StandaloneLiveBlogWidget":{"Documentation":{"description":"Live Blog widget","tags":[{"title":"constructor","description":null,"type":null,"name":null},{"title":"param","description":"jQuery container","type":{"type":"NameExpression","name":"Object"},"name":"$container"},{"title":"param","description":null,"type":{"type":"NameExpression","name":"Object"},"name":"config"},{"title":"param","description":"most entries to load at once","type":{"type":"NameExpression","name":"Object"},"name":"the"},{"title":"param","description":"ID of the blog to show","type":{"type":"NameExpression","name":"Object"},"name":"the"}]},"Source":"PULSE.CLIENT.RUGBY.StandaloneLiveBlogWidget = function( $container, config )\n{\n    this.controller = new PULSE.CLIENT.RUGBY.LiveBlogController( $container, config );\n    this.modal = new PULSE.CLIENT.RUGBY.LiveBlogVideoModal( $( '.videoModal' ),\n    {\n        'data-player-scope': 'blogvideo'\n    } );\n    this.controller.activate();\n}"},"LoginWidget":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the signup widget"}]},"Source":"PULSE.CLIENT.RUGBY.LoginWidget = function( $container, config )\n{\n    this.$container = $container;\n    this.config = config;\n    this.bindEvents();\n    this.userProfile = PULSE.CLIENT.RUGBY.UserProfileWidget;\n    this.errors = {};\n    this.requiredFields = {};\n\n    // force redirect to HTTPS when widget is on an HTTP page\n    if( window.location.protocol !== 'https:' )\n    {\n        window.location.href = 'https://' + window.location.host + window.location.pathname;\n    }\n}","prototype":{"bindEvents":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LoginWidget.prototype.bindEvents = function()\n{\n    var that = this;\n\n    this.$loginButton = this.$container.find( '.login' );\n    this.$resetButton = this.$container.find( '.reset' );\n    this.$forgotButton = this.$container.find( '.forgot' );\n    this.$loginSection = this.$container.find( '.loginSection' );\n    this.$forgotSection = this.$container.find( '.forgotSection' );\n    this.$resetSection = this.$container.find( '.resetSection' );\n\n    this.$loginButton.on( 'click', function()\n    {\n        that.login();\n    } );\n\n    $( '.input' ).keypress( function( e )\n    {\n        if ( e.which == 13 )\n        {\n            that.login();\n        }\n    } );\n\n    this.$forgotButton.on( 'click', function()\n    {\n        that.$loginSection.toggleClass( \"active\" );\n        that.$forgotSection.toggleClass( \"active\" );\n    } );\n\n\n    this.$resetButton.on( 'click', function()\n    {\n\n        that.requiredFields = {};\n        that.requiredFields.resetEmail = [ \"required\" ];\n        var isValid = that.validateForm();\n        if ( isValid )\n        {\n            var successCallback = function( data, textStatus, jqXHR )\n                {\n                    that.$forgotSection.toggleClass( \"active\" );\n                    that.$resetSection.toggleClass( \"active\" );\n                },\n                errorCallback = function( jqXHR, textStatus, errorThrown )\n                {\n                    var textResponse = $.parseJSON( jqXHR.responseText );\n                    console.log( textResponse );\n                    that.resetFields();\n                },\n\n                email = $( '[name = \"resetEmail\"]' ).val();\n\n            var requestUrl = 'emailAddress=' + email;\n            that.userProfile.request( 'forgotPassword', requestUrl, successCallback,\n                errorCallback, 'POST' );\n\n        }\n        else\n        {\n            $.each( that.errors, function( k, v )\n            {\n                errorFields = that.$container.find( ( '[name=\"' + k + '\"]' ) ).siblings(\n                    \".alertMes\" ).css( 'display', 'block' );\n            } );\n        }\n    } );\n}","successCallback":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"textStatus"},{"title":"param","description":null,"type":null,"name":"jqXHR"}]},"Source":"var successCallback = function( data, textStatus, jqXHR )\n                {\n                    that.$forgotSection.toggleClass( \"active\" );\n                    that.$resetSection.toggleClass( \"active\" );\n                }"},"errorCallback":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"jqXHR"},{"title":"param","description":null,"type":null,"name":"textStatus"},{"title":"param","description":null,"type":null,"name":"errorThrown"}]},"Source":"var successCallback = function( data, textStatus, jqXHR )\n                {\n                    that.$forgotSection.toggleClass( \"active\" );\n                    that.$resetSection.toggleClass( \"active\" );\n                },\n                errorCallback = function( jqXHR, textStatus, errorThrown )\n                {\n                    var textResponse = $.parseJSON( jqXHR.responseText );\n                    console.log( textResponse );\n                    that.resetFields();\n                }"}},"login":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LoginWidget.prototype.login = function()\n{\n    var that = this;\n    // set fields and validation rules\n    that.requiredFields.email = [ \"required\" /*,\"email\"*/ ];\n    that.requiredFields.password = [ \"required\" ];\n    var isValid = that.validateForm();\n\n    if ( isValid )\n    {\n        var successCallback = function( data, textStatus, jqXHR )\n            {\n                if ( data.authenticated )\n                {\n                    window.location.href = 'https://' + window.location.host + \"/media-extranet\";\n                }\n                else\n                {\n                    that.resetFields();\n                    var passwordError = $( \".input.password .alertMes\" );\n                    passwordError.empty().append( PULSE.I18N.lookup(\n                        'widget.mediazonelogin.alert.error' ) );\n                    passwordError.css( \"display\", \"block\" );\n                }\n            },\n            errorCallback = function( jqXHR, textStatus, errorThrown )\n            {\n                var textResponse = $.parseJSON( jqXHR.responseText );\n                console.log( textResponse );\n                that.resetFields();\n            },\n            rememberMe = $( '[name=\"remember\"]' ).is( ':checked' ),\n            username = $( '[name = \"email\"]' ).val(),\n            password = $( '[name = \"password\"]' ).val();\n\n        var requestUrl = 'username=' + username + '&password=' + password + \"&rememberMe=\" +\n            rememberMe;\n        that.userProfile.request( 'login', requestUrl, successCallback, errorCallback, 'POST' );\n    }\n    else\n    {\n        // reset error messages\n        that.setErrorMessages();\n    }\n\n}","successCallback":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"textStatus"},{"title":"param","description":null,"type":null,"name":"jqXHR"}]},"Source":"var successCallback = function( data, textStatus, jqXHR )\n            {\n                if ( data.authenticated )\n                {\n                    window.location.href = 'https://' + window.location.host + \"/media-extranet\";\n                }\n                else\n                {\n                    that.resetFields();\n                    var passwordError = $( \".input.password .alertMes\" );\n                    passwordError.empty().append( PULSE.I18N.lookup(\n                        'widget.mediazonelogin.alert.error' ) );\n                    passwordError.css( \"display\", \"block\" );\n                }\n            }"},"errorCallback":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"jqXHR"},{"title":"param","description":null,"type":null,"name":"textStatus"},{"title":"param","description":null,"type":null,"name":"errorThrown"}]},"Source":"var successCallback = function( data, textStatus, jqXHR )\n            {\n                if ( data.authenticated )\n                {\n                    window.location.href = 'https://' + window.location.host + \"/media-extranet\";\n                }\n                else\n                {\n                    that.resetFields();\n                    var passwordError = $( \".input.password .alertMes\" );\n                    passwordError.empty().append( PULSE.I18N.lookup(\n                        'widget.mediazonelogin.alert.error' ) );\n                    passwordError.css( \"display\", \"block\" );\n                }\n            },\n            errorCallback = function( jqXHR, textStatus, errorThrown )\n            {\n                var textResponse = $.parseJSON( jqXHR.responseText );\n                console.log( textResponse );\n                that.resetFields();\n            }"}},"validateForm":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LoginWidget.prototype.validateForm = function()\n{\n    var isValid = true;\n    that = this;\n    this.errors = {};\n\n    $.each( this.requiredFields, function( key, value )\n    {\n        var fieldSelector = $( '[name=\"' + key + '\"]' );\n\n        $.each( value, function( k, v )\n        {\n\n            if ( v == \"required\" )\n            {\n                if ( fieldSelector.val() == \"\" && isValid )\n                {\n                    isValid = false;\n                    that.errors[ key ] = v;\n                }\n            }\n            else if ( v == \"email\" && isValid )\n            {\n                if ( that.isEmail( fieldSelector.val() ) == \"\" )\n                {\n                    isValid = false;\n                    that.errors[ key ] = v;\n                }\n            }\n        } );\n\n    } );\n\n    return isValid;\n}"},"resetFields":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LoginWidget.prototype.resetFields = function()\n{\n    $.each( that.requiredFields, function( key, value )\n    {\n        $( '[name = \"' + key + '\"]' ).val( \"\" );\n    } )\n}"},"isEmail":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"email"}]},"Source":"PULSE.CLIENT.RUGBY.LoginWidget.prototype.isEmail = function( email )\n{\n    var regex = /^([a-zA-Z0-9_.+-])+\\@(([a-zA-Z0-9-])+\\.)+([a-zA-Z0-9]{2,4})+$/;\n    return regex.test( email );\n}"},"setErrorMessages":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LoginWidget.prototype.setErrorMessages = function()\n{\n    $.each( that.requiredFields, function( k, v )\n    {\n        that.$container.find( ( '[name=\"' + k + '\"]' ) ).siblings( \".alertMes\" ).css(\n            'display', 'none' );\n    } );\n\n\n    $.each( that.errors, function( k, v )\n    {\n        errorFields = that.$container.find( ( '[name=\"' + k + '\"]' ) ).siblings(\n            \".alertMes\" ).css( 'display', 'block' );\n    } );\n\n}"}}},"MatchStats":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.MatchStats"},{"title":"param","description":null,"type":null,"name":"$container"},{"title":"param","description":null,"type":null,"name":"config"},{"title":"param","description":null,"type":null,"name":"tournament"},{"title":"param","description":null,"type":null,"name":"match"}]},"Source":"PULSE.CLIENT.RUGBY.MatchStats = function( $container, config, tournament, match  )\n{\n    this.stats = new PULSE.CLIENT.RUGBY.MC.Stats.Main( $container, config, tournament, match );\n    this.stats.activate();\n}"},"ManOfTheMatch":{"Documentation":{"description":"Man of the match widget displaying either votes or results, depending on the type given.","tags":[{"title":"constructor","description":null,"type":null,"name":null},{"title":"param","description":"jQuery container for the Man of the Match widget","type":{"type":"NameExpression","name":"Object"},"name":"$container"},{"title":"param","description":"additional configuration object based on data attrs of container","type":{"type":"NameExpression","name":"Object"},"name":"config"},{"title":"param","description":"instance of PULSE.CLIENT.RUGBY.Match","type":{"type":"NameExpression","name":"Object"},"name":"match"}]},"Source":"PULSE.CLIENT.RUGBY.ManOfTheMatch = function( $container, config, match )\n{\n    this.$container = $container;\n    this.config = config;\n    this.match = match;\n    this.autodetect = !config[ 'data-type' ];\n    this.type = config[ 'data-type' ];\n    this.voteUrl = config[ 'data-vote-url' ];\n    this.isInWebview = this.$container.closest( '.webview' ).length;\n    this.templates = {\n        votes: 'templates/match/man-of-the-match/votes.html',\n        result: 'templates/match/man-of-the-match/result.html'\n    };\n\n    if( !this.match && this.config[ 'data-match-id' ] )\n    {\n        var matchId = this.config[ 'data-match-id' ];\n        this.match = new PULSE.CLIENT.RUGBY.Match( this.tournament, matchId );\n    }\n    else\n    {\n        PULSE.CLIENT.Log( 'MotM: Can\\'t identify match. Aborting!' );\n        return;\n    }\n\n    this.setSubscriptions();\n    if( !this.match.scoringLoaded )\n    {\n        this.match.prepareScoringData( { start: true } );\n    }\n    else if( this.match.motm )\n    {\n        this.update();\n    }\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.ManOfTheMatch.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    // match scoring (and, more importantly, man of the match information)\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCORING_UPDATE, function( e, params )\n    {\n        if( params.success && params.matchId === that.match.matchId )\n        {\n            that.update();\n        }\n    } );\n}"},"update":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.ManOfTheMatch.prototype.update = function()\n{\n    if( this.autodetect )\n    {\n        this.detectWidgetType();\n    }\n\n    if( this.type === 'voting' )\n    {\n        this.renderVotes();\n    }\n    else if( this.type === 'result' )\n    {\n        this.renderResult();\n    }\n}"},"detectWidgetType":{"Documentation":{"description":"Based on the data received from the match summary, checks if it should show votes or the result.","tags":[]},"Source":"PULSE.CLIENT.RUGBY.ManOfTheMatch.prototype.detectWidgetType = function()\n{\n    if( this.match.motm && this.match.motm.motm )\n    {\n        this.type = 'result';\n    }\n    else if( this.match.motm && this.match.motm.nominees )\n    {\n        this.type = 'votes';\n    }\n}"},"renderVotes":{"Documentation":{"description":"Based on the motm.nominees array, renders the nominees.","tags":[]},"Source":"PULSE.CLIENT.RUGBY.ManOfTheMatch.prototype.renderVotes = function()\n{\n    if( this.match.motm && this.match.motm.nominees )\n    {\n        var webviewParams = this.isInWebview ? '&app=true' : '';\n        var voteUrl = this.voteUrl + '?lang=' + PULSE.CLIENT.LANGUAGE + webviewParams;\n        var model = $.extend( { voteUrl: voteUrl }, this.match.motm );\n\n        this.$container.find( 'a.button' ).attr( 'href', voteUrl );\n\n        for( var i = 0, iLimit = model.nominees.length; i < iLimit; i++ )\n        {\n            var nominee = model.nominees[ i ];\n            nominee.team = this.match.getTeamByPlayerId( nominee.id );\n        }\n\n        PULSE.CLIENT.Template.publish(\n            this.templates.votes,\n            this.$container.find( '.topPlayers' ),\n            model\n        );\n\n        var that = this;\n        this.$container.find( '[data-player-id]' ).each( function()\n        {\n            var playerId = $(this).attr( 'data-player-id' );\n            that.match.urlGenerator.setPlayerImageLoader( playerId, 140, this );\n        } );\n\n        this.$container.show();\n    }\n    else\n    {\n        this.$container.hide();\n    }\n}"},"renderResult":{"Documentation":{"description":"Based on the motm.motm object, renders the motm result.","tags":[]},"Source":"PULSE.CLIENT.RUGBY.ManOfTheMatch.prototype.renderResult = function()\n{\n    if( this.match.motm && this.match.motm.motm )\n    {\n        var model = $.extend( {}, this.match.motm );\n        model.team = this.match.getTeamByPlayerId( this.match.motm.motm.id );\n\n        PULSE.CLIENT.Template.publish(\n            this.templates.result,\n            this.$container.find( '.topPlayers' ),\n            model\n        );\n\n        var that = this;\n        this.$container.find( '[data-player-id]' ).each( function()\n        {\n            var playerId = $(this).attr( 'data-player-id' );\n            that.match.urlGenerator.setPlayerImageLoader( playerId, 140, this );\n        } );\n\n        this.$container.show();\n    }\n    else\n    {\n        this.$container.hide();\n    }\n}"}},"initialise":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.ManOfTheMatch.initialise = function()\n{\n    var WIDGET_NAME = 'motm_widget',\n        CONSTRUCTOR = PULSE.CLIENT.RUGBY.ManOfTheMatch;\n\n    $.each( $( '[data-widget-type=\"' + WIDGET_NAME + '\"]' ), function()\n    {\n        var $widget = $( this );\n        if( $widget.hasClass( 'initialised' ) === false )\n        {\n            window.WidgetController.initialise( $( this ), CONSTRUCTOR );\n            $widget.addClass( 'initialised' );\n        }\n    } );\n}"}},"MatchLineUps":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.MatchLineUps"},{"title":"param","description":null,"type":null,"name":"$container"},{"title":"param","description":null,"type":null,"name":"config"},{"title":"param","description":null,"type":null,"name":"tournament"},{"title":"param","description":null,"type":null,"name":"match"}]},"Source":"PULSE.CLIENT.RUGBY.MatchLineUps = function( $container, config, tournament, match  )\n{\n    this.lineup = new PULSE.CLIENT.RUGBY.MC.Lineups( $container, config, tournament, match );\n    this.lineup.activate();\n}"},"MatchCentrePillar":{"ExpandedViewController":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the match centre pillar widget vertical view component\n    - Used for all formats of this widget when 'expanded' view is chosen"},{"title":"param","description":"DOM container for this component","type":{"type":"NameExpression","name":"Object"},"name":"container"},{"title":"param","description":"Configuration inheretted from parent","type":{"type":"NameExpression","name":"Object"},"name":"config"},{"title":"param","description":"Optional tournament object","type":{"type":"NameExpression","name":"Object"},"name":"tournament"},{"title":"param","description":"Parent object","type":{"type":"NameExpression","name":"Object"},"name":"parent"}]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.ExpandedViewController = function( container, config, tournament, parent )\n{\n    this.$container = $( container );\n    this.config = config;\n    this.tournament = tournament;\n    this.parent = parent;\n    this.schedule = this.parent.schedule;\n\n    // Match containers\n    this.$containers = {\n        $tournamentFilters: this.$container.find('.tournamentSelect.filters'),\n        $liveMatchesContainer: this.$container.find( '.liveMatchesContainer' ),\n        $upcomingMatchesContainer: this.$container.find( '.upcomingMatchesContainer' ),\n        $completeMatchesContainer: this.$container.find( '.completeMatchesContainer' )\n    };\n\n    // templates\n    this.templates = {\n        tournamentFilters: 'templates/match-centre-pillar/expanded/tournamentSelect.html',\n        liveMatches: 'templates/match-centre-pillar/expanded/live.html',\n        completeMatches: 'templates/match-centre-pillar/expanded/complete.html',\n        upcomingMatches: 'templates/match-centre-pillar/expanded/upcoming.html'\n    };\n\n    this.setSubscriptions();\n    this.setListeners();\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"Subscribe to schedule and live scoring data events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.ExpandedViewController.prototype.setSubscriptions = function()\n{\n    var that = this;\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCHEDULE_UPDATE, function( e, params )\n    {\n        that.refreshMatches();\n    });\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCORING_UPDATE, function( e, params )\n    {\n        that.refreshMatches();\n    });\n}"},"setListeners":{"Documentation":{"description":"Subscribe to user input events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.ExpandedViewController.prototype.setListeners = function()\n{\n    var that = this;\n\n    // Close the expanded view component (this view)\n    this.$container.on('click', '.close', function( e )\n    {\n        that.deactivate();\n    });\n\n    this.$container.on('click', '.tournamentSelectBtn', function( e )\n    {\n        var tournament = $(this).attr('data-tournament');\n        if( tournament )\n        {\n            that.$container.find('.matchBox').hide();\n            that.$container.find('.matchBox[data-tournament=\"' + tournament + '\"]').show();\n        }\n        else\n        {\n            that.$container.find('.matchBox').show();\n        }\n\n        that.$container.find('.tournamentSelectBtn').removeClass('selected');\n        $(this).addClass('selected');\n    });\n}"},"refreshMatches":{"Documentation":{"description":"Refreshes the matches in this component","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.ExpandedViewController.prototype.refreshMatches = function()\n{\n    if( !this.active || !this.schedule.matches.length )\n    {\n        return;\n    }\n\n   this.refreshLiveMatches();\n   this.refreshCompleteMatches();\n   this.refreshUpcomingMatches();\n   this.populateTournamentFilters();\n}"},"refreshLiveMatches":{"Documentation":{"description":"Refresh the live matches container","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.ExpandedViewController.prototype.refreshLiveMatches = function()\n{\n    var that = this,\n        model = this.schedule.getLiveMatchesModel();\n\n    model.limit = 20;\n    model.liveTotal = model.matches.length;\n\n    if( model.matches && model.liveTotal )\n    {\n        PULSE.CLIENT.Template.publish(\n            this.templates.liveMatches,\n            this.$containers.$liveMatchesContainer,\n            model,\n            function()\n            {\n                that.$containers.$liveMatchesContainer.show();\n            }\n        );\n    }\n    else\n    {\n        this.$containers.$liveMatchesContainer.hide();\n    }\n}"},"refreshCompleteMatches":{"Documentation":{"description":"Refresh the complete matches container","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.ExpandedViewController.prototype.refreshCompleteMatches = function()\n{\n    var that = this,\n        model = this.schedule.getResultsModel();\n\n    model.limit = 20;\n\n    if( model.matches && model.matches.length  )\n    {\n        PULSE.CLIENT.Template.publish(\n            this.templates.completeMatches,\n            this.$containers.$completeMatchesContainer,\n            model\n        );\n    }\n    else\n    {\n        this.$containers.$completeMatchesContainer.hide();\n    }\n}"},"refreshUpcomingMatches":{"Documentation":{"description":"Refresh the upcoming matches container","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.ExpandedViewController.prototype.refreshUpcomingMatches = function()\n{\n    var that = this,\n        model = this.schedule.getUpcomingMatchesModel();\n\n    model.limit = 20;\n\n    if( model.matches && model.matches.length )\n    {\n        PULSE.CLIENT.Template.publish(\n            this.templates.upcomingMatches,\n            this.$containers.$upcomingMatchesContainer,\n            model\n        );\n    }\n    else\n    {\n        this.$containers.$upcomingMatchesContainer.hide();\n    }\n}"},"populateTournamentFilters":{"Documentation":{"description":"Populate the list of tournament filters at the top of the expanded view","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.ExpandedViewController.prototype.populateTournamentFilters = function()\n{\n    var that = this,\n        model = this.schedule.getMatchesSortedByTournamentModel();\n\n    PULSE.CLIENT.Template.publish(\n        this.templates.tournamentFilters,\n        this.$containers.$tournamentFilters,\n        model,\n        function()\n        {\n            // Ignore for tournament scoped match pillar as only one option is available\n            if( that.tournament )\n            {\n                that.$containers.$tournamentFilters.find( 'h1' ).hide();\n                that.$containers.$tournamentFilters.find( '.tournamentSelectBtn' ).hide();\n            }\n        }\n    );\n}"},"activate":{"Documentation":{"description":"Activates this widget component","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.ExpandedViewController.prototype.activate = function()\n{\n    this.active = true;\n    this.refreshMatches();\n    this.$container.show();\n}"},"deactivate":{"Documentation":{"description":"Deactivates this widget component","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.ExpandedViewController.prototype.deactivate = function()\n{\n    this.active = false;\n    this.$container.hide();\n}"}}},"HorizontalViewController":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the match centre pillar widget vertical view component\n    - Used for small desktop and tablet formats of the widget"},{"title":"param","description":"DOM container for this component","type":{"type":"NameExpression","name":"Object"},"name":"container"},{"title":"param","description":"Configuration inheretted from parent","type":{"type":"NameExpression","name":"Object"},"name":"config"},{"title":"param","description":"Optional tournament object","type":{"type":"NameExpression","name":"Object"},"name":"tournament"},{"title":"param","description":"Parent object","type":{"type":"NameExpression","name":"Object"},"name":"parent"}]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.HorizontalViewController = function( container, config, tournament, parent )\n{\n    this.$container = $( container );\n    this.config = config;\n    this.tournament = tournament;\n    this.parent = parent;\n    this.schedule = this.parent.schedule;\n\n    this.$matchesContainer = this.$container.find('.matchBoxContainer');\n    this.templates = {\n        row: 'templates/match-centre-pillar/horizontal/row.html'\n    };\n\n    //init\n    this.setSubscriptions();\n    this.setListeners();\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"Subscribe to data events for schedule and live match scoring","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.HorizontalViewController.prototype.setSubscriptions = function()\n{\n    var that = this;\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCHEDULE_UPDATE, function( e, params )\n    {\n        that.refreshMatches();\n    });\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCORING_UPDATE, function( e, params )\n    {\n        //that.refreshMatches();\n    });\n}"},"setListeners":{"Documentation":{"description":"Subscribe to user input events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.HorizontalViewController.prototype.setListeners = function()\n{\n    var that = this;\n    // Show expanded view\n    this.$container.find('.expandPanel').on('click', function( e )\n    {\n        that.parent.views.expanded.activate();\n    });\n\n    // Recentre live matches on window resize\n    $( window ).on('resize', function( e )\n    {\n        that.centreLiveMatches();\n    });\n\n    // Prevent loading of a match if the user is dragging the slider\n    var flag = 0;\n    this.$matchesContainer.on(\"mousedown\", function( e )\n    {\n        flag = 0;\n    });\n    this.$matchesContainer.on(\"mousemove\", function( e )\n    {\n        flag = 1;\n    });\n    this.$matchesContainer.on(\"mouseup\", function( e )\n    {\n        if( flag === 1 )\n        {\n            that.parent.preventMatchLoad = true;\n        }\n        flag = 0;\n    });\n}"},"refreshMatches":{"Documentation":{"description":"Refreshes the matches in this component","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.HorizontalViewController.prototype.refreshMatches = function()\n{\n    if( !this.active )\n    {\n        return;\n    }\n\n    var that = this,\n        model = this.schedule.getAllMatchesModel();\n\n    if( model.matches && model.matches.length )\n    {\n        PULSE.CLIENT.Template.publish(\n            this.templates.row,\n            this.$matchesContainer,\n            model,\n            function()\n            {\n                // Insert iscroll functionality for scrolling with pointer and webkit-touch\n                var options = {\n                    vScroll: false,\n                    hScrollbar: false,\n                    vScrollbar: false\n                };\n                that.scroller = new iScroll('scrollWrapper', options );\n                that.$container.find('.no-matches-message').hide();\n                that.$container.find('.expandPanel').show();\n                that.centreLiveMatches();\n            }\n        );\n    }\n    else\n    {\n        this.$container.find('.no-matches-message').show();\n        this.$container.find('.expandPanel').hide();\n    }\n\n}"},"centreLiveMatches":{"Documentation":{"description":"Centres the live match in the $matchContainer for this component\n    - If no live matches are present the centre point should be the end of the\n      last completed match","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.HorizontalViewController.prototype.centreLiveMatches = function()\n{\n    if( !this.schedule.completeMatches.length )\n    {\n        return;\n    }\n\n    var $matches = this.$matchesContainer.find('.matchBox'),\n        $liveMatches = this.$matchesContainer.find('.matchBox.L'),\n        $completeMatches = this.$matchesContainer.find('.matchBox.C'),\n        windowWidth = $( window ).width(),\n        singleWidth = 189,\n        liveWidth = $liveMatches.length * singleWidth,\n        completeWidth = $completeMatches.length * singleWidth,\n        left = ( windowWidth/2 ) - (( completeWidth ) + ( liveWidth * 1.25 )),\n        style = 'transition: -webkit-transform 0ms; -webkit-transform-origin:'+ left +'px .5px 0px; -webkit-transform: translate3d( ' + left + 'px, 0px, 0px) scale(1)';\n\n    this.$matchesContainer.attr( 'style', style );\n}"},"activate":{"Documentation":{"description":"Activates and shows this widget","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.HorizontalViewController.prototype.activate = function()\n{\n    this.active = true;\n    this.refreshMatches();\n    this.$container.show();\n}"},"deactivate":{"Documentation":{"description":"Deactivates","tags":[{"title":"return","description":"[description]","type":{"type":"ArrayType","elements":[{"type":"NameExpression","name":"type"}]}}]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.HorizontalViewController.prototype.deactivate = function()\n{\n    this.active = false;\n    this.$container.hide();\n}"}}},"Main":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the match centre pillar widget\n    - This is a singleton widget - only one instance of this can exist on the page.\n    - The widget is composed of three views that share the same data source but update themselves\n      independently.\n    - The code for this should include the mc widget so that new mc instances can be loaded from\n      within the pillar."},{"title":"param","description":"DOM container for this widget","type":{"type":"NameExpression","name":"Object"},"name":"container"},{"title":"param","description":"Configuration inheretted from the container attrs","type":{"type":"NameExpression","name":"Object"},"name":"config"},{"title":"param","description":"Optional tournament object","type":{"type":"NameExpression","name":"Object"},"name":"tournament"}]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.Main = function( container, config, tournament )\n{\n    // Singleton access\n    if( PULSE.CLIENT.RUGBY.MatchCentrePillar.Main.prototype._singletonInstance )\n    {\n        return PULSE.CLIENT.RUGBY.MatchCentrePillar.Main.prototype._singletonInstance;\n    }\n    PULSE.CLIENT.RUGBY.MatchCentrePillar.Main.prototype._singletonInstance = this;\n\n    var defaultCookieVal = 0;\n    if( $( window ).width() < 860 )\n    {\n        defaultCookieVal = 1;\n    }\n\n    // Vars\n    this.$container = $( container );\n    this.config = config;\n    this.tournament = tournament;\n    this.COOKIE_NAME = 'MATCH_PILLAR_CLOSED';\n    this.eventGroup = this.config[ 'data-event-group' ];\n    this.preventMatchLoad = false;\n    this.cookieVal = $.cookie( this.COOKIE_NAME ) || defaultCookieVal;\n    this.firstLoad = true;\n\n    /**\n     * The schedule constructor will store all recevied matches\n     *     - Either tournament scoped or globally scoped\n     */\n    if( this.tournament )\n    {\n        this.schedule = this.tournament.schedule;\n    }\n    else\n    {\n        this.schedule = new PULSE.CLIENT.RUGBY.Schedule();\n    }\n\n    /**\n     * Views:\n     *     - Each view will use the same data source but update independently\n     *     - Views should only refresh their data upon activation\n     *     - On activation a view should load the most recent data already stored in the model\n     */\n    this.views = {\n        vertical: new PULSE.CLIENT.RUGBY.MatchCentrePillar.VerticalViewController( this.$container.find('.matchCentrePillar'), this.config, this.tournament, this ),\n        horizontal: new PULSE.CLIENT.RUGBY.MatchCentrePillar.HorizontalViewController( this.$container.find('.matchCentrePillarTablet'), this.config, this.tournament, this ),\n        expanded: new PULSE.CLIENT.RUGBY.MatchCentrePillar.ExpandedViewController( this.$container.find('.matchCentrePillarExpand'), this.config, this.tournament, this )\n    };\n\n    // Remove the forced hiding of the mc pillar button\n    $('.matchCentrePillarIcon').attr( 'style', '');\n\n    this.setListeners();\n    this.getData();\n    this.setViews();\n}","prototype":{"getData":{"Documentation":{"description":"Calls the schedule model to request data from api with a given set of parameters\n    - Retrieves results from the last 7 days and next 7 days of upcoming fixtures\n    - 2 Calls are required to ensure that we always receive both upcoming and\n        complete matches\n    - Date params are based on the start(?) of the day in question, thus getting\n        results from before today will not return any results from today. Because\n        of this we request matches from before-tomorrow and after-yesterday","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.Main.prototype.getData = function()\n{\n    if( this.tournament )\n    {\n        this.schedule.getScheduleData( { start: true } );\n    }\n    else\n    {\n        var today = new Date().format( 'yyyy-mm-dd' ),\n            tomorrow = new Date( new Date().setDate( new Date().getDate() + 1 ) ).format( 'yyyy-mm-dd' ),\n            yesterday = new Date( new Date().setDate( new Date().getDate() - 1 ) ).format( 'yyyy-mm-dd' ),\n            nextWeek = new Date( new Date().setDate( new Date().getDate() + 7 ) ).format( 'yyyy-mm-dd' ),\n            lastWeek = new Date( new Date().setDate( new Date().getDate() - 7 ) ).format( 'yyyy-mm-dd' ),\n            scheduleRequestOptions = {\n                startDate: yesterday,\n                endDate: this.eventGroup ?  '' : nextWeek,\n                eventGroups: this.eventGroup,\n                states: [ 'U', 'L' ],\n                sort: 'asc',\n                pageSize: 25\n            },\n            resultsRequestOptions = {\n                startDate: this.eventGroup ? '' : lastWeek,\n                endDate: tomorrow,\n                eventGroups: this.eventGroup,\n                states: [ 'C' ],\n                sort: 'desc',\n                pageSize: 25\n            };\n\n        this.schedule.getScheduleData( { start: true, params: scheduleRequestOptions } );\n        this.schedule.getScheduleData( { start: true, params: resultsRequestOptions } );\n    }\n}"},"setListeners":{"Documentation":{"description":"Subscribe to window resize events that activate and deactivate relevant views\n    - Need to determine how responsive behaviour is to work on older browsers\n    - Old browsers will not support matchMedia but if css media queries are\n      considered void then this will not be a problem.\n    - In this case it will be important to consider what the default css looks\n      like before any kind of width calculation is applied","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.Main.prototype.setListeners = function()\n{\n    var that = this;\n\n    // Toggle match centre using global buttons\n    $('body').on( 'click', '.matchCentrePillarIcon', function( e )\n    {\n        e.preventDefault();\n\n        if( that.mobileActive || that.active )\n        {\n            that.setCookie( 1 );\n        }\n        else\n        {\n            this.mobileActive = true;\n            that.setCookie( 0 );\n        }\n\n        that.setViews();\n    } );\n\n    // Close mc using contained close button within widget\n    this.$container.find('.icon.close').on('click', function( e )\n    {\n        e.preventDefault();\n        _.each( that.views, function( view, name ) { view.deactivate(); } );\n        that.setCookie( 1 );\n        that.active = false;\n    } );\n\n    // Detect page resize for width only\n    $( window ).resize( function( e )\n    {\n        if( that.previousWindowWidth !== $( window ).width() &&\n            !that.mobileActive )\n        {\n            that.setViews();\n        }\n        that.previousWindowWidth = $( window ).width();\n    } );\n\n    // Load the selected match on click unless user is dragging horizontal view\n    this.$container.on('click', '.matchSelector', function( e )\n    {\n        var matchId = $(this).attr('data-match-id');\n\n        if( that.preventMatchLoad )\n        {\n            that.preventMatchLoad = false;\n            return;\n        }\n\n        var match = that.schedule.getMatchById( matchId );\n\n        if ( match && match.tournament && match.tournament.tournamentName + '' === '1238' )\n        {\n            window.location.href = 'http://www.rugbyworldcup.com/match/' + matchId;\n        }\n        else\n        {\n            that.views.expanded.deactivate();\n            that.loadMatch( matchId );\n        }\n    });\n}"},"setViews":{"Documentation":{"description":"Hide / show widget views based on the window width","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.Main.prototype.setViews = function()\n{\n    var windowWidth = $( window ).width();\n\n    if( this.cookieVal == 1 )\n    {\n        this.mobileActive = false;\n        this.active = false;\n        this.$container.hide();\n    }\n    else\n    {\n        // Ignore first load on mobile\n        if( windowWidth < 860 )\n        {\n            if( this.firstLoad )\n            {\n                this.firstLoad = false;\n                return;\n            }\n        }\n\n        this.$container.show();\n        this.active = true;\n\n        if( windowWidth < 860 )\n        {\n            this.views.vertical.activate();\n            this.views.horizontal.activate();\n            this.views.expanded.deactivate();\n        }\n        else if( windowWidth <= 1280 && windowWidth >= 860 )\n        {\n            this.mobileActive = false;\n            this.views.vertical.deactivate();\n            this.views.horizontal.activate();\n        }\n        else if( windowWidth > 1280 )\n        {\n            this.mobileActive = false;\n            this.views.vertical.activate();\n            this.views.horizontal.deactivate();\n        }\n    }\n\n    this.firstLoad = false;\n}"},"setCookie":{"Documentation":{"description":"Sets the cookie to determine whether to open the widget on a new page","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.Main.prototype.setCookie = function( value )\n{\n    this.cookieVal = value;\n    $.cookie( this.COOKIE_NAME, this.cookieVal, { path: '/' } );\n}"},"loadMatch":{"Documentation":{"description":"Create a new match centre instance with the selected match","tags":[{"title":"param","description":"Unique match identifier","type":{"type":"NameExpression","name":"String"},"name":"matchId"}]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.Main.prototype.loadMatch = function( matchId )\n{\n    var match = this.schedule.getMatchById( matchId ),\n        tournament = match.tournament || null,\n        $matchContainer = $( 'body' ).find( '.matchPillar' );\n\n    // Instantiate a new match centre instance if the constructor is present\n    if( PULSE.CLIENT.RUGBY.MC && match )\n    {\n        // Open the match in the sidebar if no embedded mc\n        if( $matchContainer.length === 1 )\n        {\n            this.matchCentreInstance = new PULSE.CLIENT.RUGBY.MC.Main( $matchContainer, this.config, tournament, match );\n        }\n        // Open the match page if already viewing a match page\n        else if( $matchContainer.length > 1 )\n        {\n            window.open( '/match/' + matchId, '_self' );\n        }\n    }\n\n    $matchContainer.show(); // show match\n}"}}},"StandingsViewController":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the tournament scoped match centre pillar widget vertical view\n    standings component."},{"title":"param","description":"DOM container for this component","type":{"type":"NameExpression","name":"Object"},"name":"container"},{"title":"param","description":"Configuration inheretted from parent","type":{"type":"NameExpression","name":"Object"},"name":"config"},{"title":"param","description":"Tournament object - optional for widget but mandatory\n                             for this component.","type":{"type":"NameExpression","name":"Object"},"name":"tournament"},{"title":"param","description":"Parent object","type":{"type":"NameExpression","name":"Object"},"name":"parent"}]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.StandingsViewController = function( container, config, tournament )\n{\n    this.$container = $( container );\n    this.config = config;\n    this.tournament = tournament;\n    this.parent = parent;\n\n    this.templates = {\n        standings: 'templates/match-centre-pillar/vertical/standings.html'\n    };\n\n    this.setSubscriptions();\n    if( this.tournament )\n    {\n        this.tournament.getStandings( true );\n    }\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"Subscribes to standings data events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.StandingsViewController.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.STANDINGS_UPDATE, function( e, params )\n    {\n        that.refreshStandings();\n    } );\n}"},"initialiseNavigation":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.StandingsViewController.prototype.initialiseNavigation = function()\n{\n    var that = this;\n    this.tabController = new PULSE.CLIENT.UI.ToggleNav(\n    {\n        activeTab: this.defaultTab,\n        navigationContainer: this.$container.find('.poolSelector'),\n        contentContainer: '.standingsTables',\n        navLinksSelector: 'a.button',\n        navActiveClass: 'selected',\n        defaultTab: 0,\n        animate: false,\n        callback: function(){}\n    } );\n}"},"refreshStandings":{"Documentation":{"description":"Refreshes the standings table on the DOM","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.StandingsViewController.prototype.refreshStandings = function()\n{\n    var that = this,\n        model = this.tournament.standings;\n\n    PULSE.CLIENT.Template.publish(\n            this.templates.standings,\n            this.$container,\n            model,\n            function()\n            {\n                if( that.tournament.standings.tables.length )\n                {\n                    that.$container.show();\n                    that.initialiseNavigation();\n                }\n\n                if( that.tournament.standings.tables.length == 1 )\n                {\n                    that.$container.find( '.poolSelector' ).hide();\n                }\n            }\n        );\n}"}}},"VerticalViewController":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the match centre pillar widget vertical view component\n    - Used for both mobile and wide desktop formats of the widget"},{"title":"param","description":"DOM container for this component","type":{"type":"NameExpression","name":"Object"},"name":"container"},{"title":"param","description":"Configuration inheretted from parent","type":{"type":"NameExpression","name":"Object"},"name":"config"},{"title":"param","description":"Optional tournament object","type":{"type":"NameExpression","name":"Object"},"name":"tournament"},{"title":"param","description":"Parent object","type":{"type":"NameExpression","name":"Object"},"name":"parent"}]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.VerticalViewController = function( container, config, tournament, parent )\n{\n    this.$container = $( container );\n    this.config = config;\n    this.tournament = tournament;\n    this.parent = parent;\n    this.schedule = this.parent.schedule;\n\n    // Match containers\n    this.$containers = {\n        $liveMatchesContainer: this.$container.find( '.liveMatchesContainer' ),\n        $upcomingMatchesContainer: this.$container.find( '.upcomingMatchesContainer' ),\n        $completeMatchesContainer: this.$container.find( '.completeMatchesContainer' ),\n        $headerIcon: $('.icon.matchCentre')\n    };\n\n    // templates\n    this.templates = {\n        liveMatches: 'templates/match-centre-pillar/vertical/live.html',\n        completeMatches: 'templates/match-centre-pillar/vertical/complete.html',\n        upcomingMatches: 'templates/match-centre-pillar/vertical/upcoming.html'\n    };\n\n    // init\n    this.init();\n    this.setSubscriptions();\n    this.setListeners();\n\n    // Initialise a tournament scoped standings table if a tournament is supplied\n    if( this.tournament )\n    {\n        this.standings = new PULSE.CLIENT.RUGBY.MatchCentrePillar.StandingsViewController( this.$container.find('.tournamentStandings'), this.config, this.tournament, this );\n    }\n}","prototype":{"init":{"Documentation":{"description":"Called on instantiation of constructor\n    - Initilises the toggle navigation\n    - Decides whether to activate this component based on the window width","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.VerticalViewController.prototype.init = function()\n{\n    var that = this;\n    this.tabController = new PULSE.CLIENT.UI.ToggleNav(\n    {\n        activeTab: this.defaultTab,\n        navigationContainer: this.$container.find('.menu'),\n        contentContainer: '.toggleTabs',\n        navLinksSelector: 'li.tab-link',\n        navActiveClass: 'selected',\n        animate: false,\n        callback: function( selectedTab, dontTrack ){}\n    } );\n}"},"setSubscriptions":{"Documentation":{"description":"Subscribe to schedule and live scoring data events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.VerticalViewController.prototype.setSubscriptions = function()\n{\n    var that = this;\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCHEDULE_UPDATE, function( e, params )\n    {\n        that.refreshMatches();\n    });\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCORING_UPDATE, function( e, params )\n    {\n        that.refreshMatches();\n    });\n}"},"setListeners":{"Documentation":{"description":"Subscribe to user events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.VerticalViewController.prototype.setListeners = function()\n{\n    var that = this;\n\n    // Expand the widget in desktop view\n    this.$container.find('.expandButton').on('click', function( e )\n    {\n        that.parent.views.expanded.activate();\n    });\n}"},"refreshMatches":{"Documentation":{"description":"Refreshes the matches in this component","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.VerticalViewController.prototype.refreshMatches = function()\n{\n    if( !this.active )\n    {\n        return;\n    }\n\n    // hide/show the expand icon depending on whether there are any matches to show\n    if( this.schedule.matches.length )\n    {\n        this.$container.find('.icon.expand').show();\n    }\n    else\n    {\n        this.$container.find('.icon.expand').hide();\n    }\n\n    // Refresh each match list\n    this.refreshLiveMatches();\n    this.refreshCompleteMatches();\n    this.refreshUpcomingMatches();\n}"},"refreshLiveMatches":{"Documentation":{"description":"Publish live matches","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.VerticalViewController.prototype.refreshLiveMatches = function()\n{\n    var that = this,\n        model = this.schedule.getMatchesSortedByTournamentModel();\n\n    model.liveTotal = this.schedule.getLiveMatchesModel().matches.length;\n\n    if( model.tournaments  )\n    {\n        model.limit = undefined;\n        PULSE.CLIENT.Template.publish(\n            this.templates.liveMatches,\n            this.$containers.$liveMatchesContainer,\n            model,\n            function()\n            {\n                if( model.liveTotal )\n                {\n                    that.$containers.$liveMatchesContainer.show();\n                    that.$containers.$headerIcon.find('.liveCount').html( model.liveTotal ).show();\n                }\n                else\n                {\n                    that.$containers.$liveMatchesContainer.hide();\n                    that.$containers.$headerIcon.find('.liveCount').hide();\n                }\n            }\n        );\n    }\n}"},"refreshCompleteMatches":{"Documentation":{"description":"Publish complete matches","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.VerticalViewController.prototype.refreshCompleteMatches = function()\n{\n    var that = this,\n        model = this.schedule.getResultsModel();\n\n    if( model.matches.length )\n    {\n        model.limit = 5;\n        PULSE.CLIENT.Template.publish(\n            this.templates.completeMatches,\n            this.$containers.$completeMatchesContainer,\n            model,\n            function() {\n                that.setDefaultTab();\n            }\n        );\n    }\n    else\n    {\n        this.$containers.$completeMatchesContainer.empty().append('<div class=\"no-matches-message\">' +\n            PULSE.I18N.lookup( 'widget.pillar.noresults' ) + '<div class=\"tournamentSelect viewAll\"><a href=\"/results\" class=\"tournamentSelectBtn\">' +\n            PULSE.I18N.lookup( 'action.goto.fullresults' ) + '</a></div></div>');\n    }\n}"},"refreshUpcomingMatches":{"Documentation":{"description":"Publish upcoming matches","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.VerticalViewController.prototype.refreshUpcomingMatches = function()\n{\n    var that = this,\n        model = this.schedule.getUpcomingMatchesModel();\n\n    if( model.matches.length )\n    {\n        model.limit = 5;\n        PULSE.CLIENT.Template.publish(\n            this.templates.upcomingMatches,\n            this.$containers.$upcomingMatchesContainer,\n            model,\n            function() {\n                that.setDefaultTab();\n            }\n        );\n    }\n    else\n    {\n        this.$containers.$upcomingMatchesContainer.empty().append('<div class=\"no-matches-message\">' +\n            PULSE.I18N.lookup( 'widget.pillar.noupcoming' ) + '<div class=\"tournamentSelect viewAll\"><a href=\"/fixtures\" class=\"tournamentSelectBtn\">' +\n            PULSE.I18N.lookup( 'action.goto.fullfixtures' ) + '</a></div></div>');\n    }\n}"},"setDefaultTab":{"Documentation":{"description":"Activates this widget component","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.VerticalViewController.prototype.setDefaultTab = function()\n{\n    if( !this.tabsHaveInitialised )\n    {\n        if( !this.schedule.completeMatches.length )\n        {\n            this.parent.$container.find( '.menu .tab-link' ).eq( 1 ).trigger( 'click' );\n        }\n        else\n        {\n            this.parent.$container.find( '.menu .tab-link' ).eq( 0 ).trigger( 'click' );\n        }\n    }\n    this.tabsHaveInitialised = true;\n}"},"activate":{"Documentation":{"description":"Activates this widget component","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.VerticalViewController.prototype.activate = function()\n{\n    this.active = true;\n    this.refreshMatches();\n\n    $('body').addClass('open');\n    this.$container.show();\n}"},"deactivate":{"Documentation":{"description":"Deactivates this widget component","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchCentrePillar.VerticalViewController.prototype.deactivate = function()\n{\n    this.active = false;\n    $('body').removeClass('open');\n    this.$container.hide();\n}"}}}},"MatchTimeline":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.MatchTimeline"},{"title":"param","description":null,"type":null,"name":"$container"},{"title":"param","description":null,"type":null,"name":"config"},{"title":"param","description":null,"type":null,"name":"tournament"},{"title":"param","description":null,"type":null,"name":"match"}]},"Source":"PULSE.CLIENT.RUGBY.MatchTimeline = function( $container, config, tournament, match  )\n{\n    this.timeline = new PULSE.CLIENT.RUGBY.MC.Timeline.Main( $container, config, tournament, match  );\n    this.timeline.activate();\n}"},"MatchSubstitutions":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.MatchSubstitutions"},{"title":"param","description":null,"type":null,"name":"$container"},{"title":"param","description":null,"type":null,"name":"config"},{"title":"param","description":null,"type":null,"name":"tournament"},{"title":"param","description":null,"type":null,"name":"match"}]},"Source":"PULSE.CLIENT.RUGBY.MatchSubstitutions = function( $container, config, tournament, match  )\n{\n    this.subs = new PULSE.CLIENT.RUGBY.MC.Substitutions( $container, config, tournament, match  );\n    this.subs.activate();\n}"},"MatchesScroller":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the matches scroller"}]},"Source":"PULSE.CLIENT.RUGBY.MatchesScroller = function( container, config, tournament )\n{\n    this.$container = $( container );\n    this.config = config;\n    this.tournament = tournament;\n\n    // Don't continue if no tournament\n    if ( !this.$container.length || !this.tournament )\n    {\n        if ( window.console )\n        {\n            console.error( \"Unable to load a tournament schedule\" );\n        }\n        return;\n    }\n\n    // Add a scrolling mechanism\n    this.$matchesContainer = $( '<div class=\"matchBoxContainer\">' ).appendTo( this.$container );\n    this.scroller = new PULSE.CLIENT.UI.Scroller( this.$matchesContainer );\n\n    // Get common vars\n    this.matchTemplate = 'templates/matches/scroller/matches.html';\n    this.matchList = {};\n    this.matchesRendered = false;\n    this.teamId = this.config[ 'data-team-id' ];\n\n    // Subscribe to data\n    this.setSubscriptions();\n    if ( !this.tournament.schedule.scheduleLoaded )\n    {\n        this.tournament.schedule.getScheduleData( { start: true } );\n    }\n    else\n    {\n        this.refreshMatches();\n    }\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"Subscribe to data events for schedule and live match scoring","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchesScroller.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    // Update the list of matches\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCHEDULE_UPDATE, function( e, params )\n    {\n        if ( params.id === that.tournament.tournamentName )\n        {\n            that.refreshMatches();\n        }\n    } );\n\n    // Update a specific match score\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCORING_UPDATE, function( e, params )\n    {\n        if ( that.matchesRendered )\n        {\n            that.refreshMatch( params.matchId );\n        }\n    } );\n}"},"refreshMatches":{"Documentation":{"description":"Refresh matches and update navigation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchesScroller.prototype.refreshMatches = function()\n{\n    // Once rendered, don't re-render\n    if ( this.matchesRendered )\n    {\n        return;\n    }\n\n    // Get match object\n    if ( this.teamId )\n    {\n        this.matches = this.tournament.schedule.getMatchModelsByTeamId( this.teamId );\n    }\n    else\n    {\n        this.matches = this.tournament.schedule.getAllMatchesModel();\n    }\n    // Workaround for inconsistent data\n    this.matches = this.matches.matches ? this.matches.matches : this.matches;\n    if ( !this.matches || !this.matches.length )\n    {\n        return\n    }\n\n    // Reset match list\n    this.$matchesContainer.empty();\n    for ( var i = 0; i < this.matches.length; i++ )\n    {\n        var match = this.matches[ i ];\n        // Add to container\n        this.matchList[ match.matchId ] = $( PULSE.CLIENT.Template.getHtml(\n            this.matchTemplate, { match: this.matches[ i ] }\n        ) );\n        this.$matchesContainer.append( this.matchList[ match.matchId ] );\n        // Scroll past completed matches\n        if ( !this.currentMatch && match.status !== 'C' )\n        {\n            this.currentMatch = this.matchList[ match.matchId ];\n        }\n    }\n    this.$container.removeClass( 'hide' );\n    // Update slider\n    this.scroller.checkThresholds();\n    if ( this.currentMatch ) {\n        this.scroller.scrollTo( this.currentMatch.offset().left - ( this.$container.width() / 2 ) );\n    }\n    this.matchesRendered = true;\n}"},"refreshMatch":{"Documentation":{"description":"Update a single match","tags":[{"title":"param","description":null,"type":null,"name":"matchId"}]},"Source":"PULSE.CLIENT.RUGBY.MatchesScroller.prototype.refreshMatch = function( matchId )\n{\n    var matchUpdate = this.tournament.schedule.getMatchById( matchId );\n    if ( matchUpdate )\n    {\n        var html = PULSE.CLIENT.Template.getHtml(\n            this.matchTemplate,\n            { match: matchUpdate }\n        );\n        this.matchList[ matchId ].replaceWith( html );\n    }\n}"}}},"EventListFilter":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.EventListFilter"},{"title":"param","description":null,"type":null,"name":"$button"},{"title":"param","description":null,"type":null,"name":"$filterContainer"},{"title":"param","description":null,"type":null,"name":"model"},{"title":"param","description":null,"type":null,"name":"template"},{"title":"param","description":null,"type":null,"name":"filterType"},{"title":"param","description":null,"type":null,"name":"scope"}]},"Source":"PULSE.CLIENT.RUGBY.EventListFilter = function( $button, $filterContainer, model, template, filterType, scope )\n{\n    // render the HTML\n    PULSE.CLIENT.Template.publish( template, $filterContainer.find( '.options' ), model );\n\n    this.strings = {\n        selectAll: PULSE.I18N.lookup( 'mediazone.action.filter.selectall' ),\n        deselectAll: PULSE.I18N.lookup( 'mediazone.action.filter.deselectall' )\n    };\n\n    this.scope = scope;\n    this.$filterContainer = $filterContainer;\n    this.$button = $button;\n    this.$clear = $button.find( '.icon' );\n    this.$selectAll = $filterContainer.find( '.selectAll' );\n    this.$submit = $filterContainer.find( '.apply' );\n    this.$options = $filterContainer.find( '.option' );\n\n    var that = this;\n    this.$button.click( function( e )\n    {\n        that.$filterContainer.siblings().removeClass( 'active' );\n        that.$filterContainer.toggleClass( 'active' );\n    } );\n\n    // select options\n    this.$options.each( function()\n    {\n        $( this ).click( function( e )\n        {\n            $( this ).toggleClass( 'active' );\n        } )\n    } );\n\n    this.allSelected = false;\n    this.$selectAll.click( function( e )\n    {\n        if( !that.allSelected )\n        {\n            that.$options.addClass( 'active' );\n            that.$selectAll[ 0 ].innerHTML = that.strings.deselectAll;\n        }\n        else\n        {\n            that.$options.removeClass( 'active' );\n            that.$selectAll[ 0 ].innerHTML = that.strings.selectAll;\n        }\n\n        that.allSelected = !that.allSelected;\n    } );\n\n    // clear filter and reset widget\n    this.$clear.click( function( e )\n    {\n        if( $( this ).hasClass( 'close' ) )\n        {\n            that.$clear.toggleClass( 'close drop-down' );\n            that.$options.removeClass( 'active' );\n            that.$button.removeClass( 'active' );\n            that.scope.pagination.setPageInfo( { pageInfo: { page: 0 } } );\n            that.scope.setFilterTerms( filterType, undefined );\n            that.scope.update();\n            e.stopPropagation();\n        }\n    } );\n\n    // set filter and retrieve data\n    this.$submit.click( function( e )\n    {\n        var selected = [];\n        for ( var i = 0; i < that.$options.length; i++ )\n        {\n            if ( that.$options.eq( i ).hasClass( 'active' ) )\n            {\n                var id = that.$options.eq( i ).data( 'id' );\n                selected.push( id );\n            }\n        }\n\n        that.scope.pagination.setPageInfo( { pageInfo: { page: 0 } } );\n        that.scope.setFilterTerms( filterType, selected );\n        that.scope.update();\n\n        that.$button.addClass( 'active' );\n        that.$clear.toggleClass( 'close', selected.length > 0 );\n        that.$clear.toggleClass( 'drop-down', selected.length === 0 );\n        that.$filterContainer.removeClass( 'active' );\n    } );\n}"},"EventList":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the signup widget"}]},"Source":"PULSE.CLIENT.RUGBY.EventList = function( container, config, tournament )\n{\n    this.$container = $( container );\n    this.tournament = tournament;\n    this.config = config;\n\n    this.eventGroupId = config[ 'data-event-group' ];\n    this.layout = config[ 'data-layout' ] === 'calendar' ? 'calendar' : 'list';\n    this.restrictedOnly = config[ 'data-restricted-only' ] === \"true\";\n\n    this.pageSize = config[ 'data-page-size' ] || 20;\n    this.pageNum = 0;\n\n    this.templates = {\n        eventThumb: 'templates/media-zone/events/event-list.html',\n        categoryFilter: 'templates/media-zone/events/event-category-filter.html',\n        teamsFilter: 'templates/media-zone/events/team-filter.html',\n        calendar: 'templates/media-zone/events/event-calendar.html'\n    };\n\n    this.eventGroup = new PULSE.CLIENT.RUGBY.EventGroup( this.eventGroupId,\n    {\n        pageSize: this.pageSize\n    } );\n\n    this.resetFilters();\n    this.filtersRendered = {};\n    this.cache = {};\n\n    this.$listView = this.$container.find( '.homeStream, .pagination' );\n    this.$calendarView = this.$container.find( '.calendarSection' );\n\n    this.$eventList = this.$container.find( '.event-list-content' );\n    this.$calendarContainer = this.$calendarView.find( 'ul.calendar' );\n\n    this.$typeFilterClick = this.$container.find( '#dropdown0' );\n    this.$teamsClick = this.$container.find( '#dropdown1' );\n    this.$dateClick = this.$container.find( '#dropdown2' );\n    this.$calendarIcon = this.$dateClick.find( '.icon' );\n\n    this.$typeFilter = this.$container.find( '.filterDropDown.op1' );\n    this.$teamFilter = this.$container.find( '.filterDropDown.op2' );\n\n    this.$paginationContainer = this.$container.find( '.paginationElements' );\n\n    this.paginationId = 'eventMap' + Math.random();\n    // Sets shared paginations details for all the toggles\n    this.pageOptions = {\n        'container': this.$paginationContainer,\n        'currentNumberContainer': '.paginationValue',\n        'maxNumberContainer': '.maxPages',\n        'forwardContainer': '.next',\n        'backwardContainer': '.prev',\n        'pageSize': this.pageSize,\n        'paginationId': this.paginationId\n    };\n\n    this.pagination = new PULSE.CLIENT.UI.Pagination( this.pageOptions );\n\n    this.setDateFilter();\n    this.setListeners();\n\n    this.setSubscriptions();\n    this.eventGroup.getEventGroup();\n    this.eventGroup.searchEvents(\n    {\n        pageNum: this.pageNum\n    } );\n}","prototype":{"resetFilters":{"Documentation":{"description":"Resets filters to a default state.","tags":[]},"Source":"PULSE.CLIENT.RUGBY.EventList.prototype.resetFilters = function()\n{\n    /**\n     * For the calendar view, the default state is the current month's events\n     */\n    var startDate, endDate;\n    if( this.layout === 'calendar' )\n    {\n        var monthTimestamps = this.getMonthStartEndTimestamps();\n        startDate = monthTimestamps.startDate;\n        endDate = monthTimestamps.endDate;\n    }\n\n    this.filters = {\n        longitude: undefined,\n        lat: undefined,\n        radius: undefined,\n        date: undefined,\n        startDate: startDate,\n        endDate: endDate,\n        categories: undefined,\n        teams: undefined,\n        city: undefined,\n        onlyRestrictedEvents: this.restrictedOnly\n    };\n}"},"getCacheName":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.EventList.prototype.getCacheName = function()\n{\n    var name = 'default';\n    for ( var key in this.filters )\n    {\n        if ( this.filters[ key ] )\n        {\n            name = name + this.filters[ key ];\n        }\n    }\n\n    return name;\n}"},"setSubscriptions":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.EventList.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( 'eventGroup/events', function( e, params )\n    {\n        console.log( 'eventGroup/events ' + params.success + ' event group: ' + params.eventGroup );\n        if ( params && params.success )\n        {\n            if ( params.eventGroup == that.eventGroupId )\n            {\n                if ( that.eventGroup.events )\n                {\n                    var cacheName = that.getCacheName();\n                    if ( !that.cache[ cacheName ] )\n                    {\n                        that.cache[ cacheName ] = {};\n                    }\n                    that.cache[ cacheName ][ that.pagination.getPageNum() ] = that.eventGroup\n                        .events;\n                    that.render( that.eventGroup.events );\n                    if ( params.pageInfo )\n                    {\n                        that.cache[ cacheName ].numEntries = params.pageInfo.numEntries;\n                        that.pagination.setNumEntries( params.pageInfo.numEntries );\n                        that.$paginationContainer.show();\n                    }\n                }\n            }\n        }\n    } );\n\n    PULSE.CLIENT.subscribe( 'content/get', function( e, params )\n    {\n        console.log( 'content/get ' + params.id );\n        if ( params.id === that.paginationId )\n        {\n            that.update( true );\n        }\n    } );\n\n    PULSE.CLIENT.subscribe( 'eventGroup/group', function( e, params )\n    {\n        console.log( 'eventGroup/group ' + params.success + ' event group: ' + params.eventGroup );\n        if ( params && params.success )\n        {\n            if ( ( params.eventGroup == that.eventGroupId ) )\n            {\n                if ( !that.categoryBoxesRender )\n                {\n                    that.renderFilter( that.$typeFilterClick, that.$typeFilter,\n                        { eventGroup: that.eventGroup }, that.templates.categoryFilter,\n                        'categories' );\n                }\n\n                that.setCalendarRanges();\n            }\n        }\n    } );\n}"},"loading":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.EventList.prototype.loading = function()\n{\n    this.$eventList.html(\n        '<div class=\"spinner\"><div style=\"height : 50px; width : 50px; background: #e5322b;\"></div></div>'\n    );\n}"},"renderFilter":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"$button"},{"title":"param","description":null,"type":null,"name":"$filterContainer"},{"title":"param","description":null,"type":null,"name":"model"},{"title":"param","description":null,"type":null,"name":"template"},{"title":"param","description":null,"type":null,"name":"filterType"}]},"Source":"PULSE.CLIENT.RUGBY.EventList.prototype.renderFilter = function( $button, $filterContainer, model, template, filterType )\n{\n    if( !this.filtersRendered[ filterType ] )\n    {\n        this.filtersRendered[ filterType ] = new PULSE.CLIENT.RUGBY.EventListFilter( $button,\n            $filterContainer, model, template, filterType, this );\n    }\n}"},"setDateFilter":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.EventList.prototype.setDateFilter = function()\n{\n    var that = this;\n\n    this.setDateTimePicker();\n    this.$calendarIcon.on( 'click', function( e, params )\n    {\n        if( $( this ).hasClass( 'close' ) )\n        {\n            that.$calendarIcon.toggleClass( 'close drop-down' );\n            that.$dateClick.removeClass( 'active' );\n            that.setFilterTerms( 'date', undefined );\n            that.update();\n            that.setDateTimePicker();\n            e.stopPropagation();\n        }\n    } );\n    this.$dateClick.on( 'click', function( e )\n    {\n        that.$container.find( '.filterDropDown' ).removeClass( 'active' );\n        e.preventDefault();\n    } );\n}"},"setDateTimePicker":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.EventList.prototype.setDateTimePicker = function()\n{\n    var that = this;\n    this.$dateClick.datetimepicker(\n    {\n        onSelectDate: function( d, $picker )\n        {\n            d.setHours( 0 );\n            d.setMinutes( 0 );\n            d.setSeconds( 0 );\n            var timestamp = d.getTime();\n            that.setFilterTerms( 'date', timestamp );\n            that.update();\n            that.$calendarIcon.toggleClass( 'close drop-down' );\n\n            $picker.datetimepicker( 'destroy' );\n\n        },\n        timepicker: false,\n        format: 'd/m/Y',\n        formatDate: 'Y/m/d',\n        lang: PULSE.CLIENT.LANGUAGE,\n        closeOnDateSelect: true\n    } );\n}"},"update":{"Documentation":{"description":"Updates the list view by going through the cache first and seeing if there's a hit for the set\nfilter; if not, it will perform a new search.","tags":[]},"Source":"PULSE.CLIENT.RUGBY.EventList.prototype.update = function( noReset )\n{\n    var cacheName = this.getCacheName();\n    if ( this.cache[ cacheName ] && this.cache[ cacheName ][ this.pagination.getPageNum() ] )\n    {\n        this.render( this.cache[ cacheName ][ this.pagination.getPageNum() ] );\n    }\n    else\n    {\n        this.newSearch( noReset );\n    }\n}"},"render":{"Documentation":{"description":"Decides which layout to render based on the set layout","tags":[{"title":"param","description":"the events to render","type":{"type":"NameExpression","name":"Array"},"name":"events"}]},"Source":"PULSE.CLIENT.RUGBY.EventList.prototype.render = function( events )\n{\n    if( this.layout === 'list' )\n    {\n        this.renderThumbs( events );\n    }\n    else\n    {\n        this.renderCalendar( events );\n    }\n}"},"renderThumbs":{"Documentation":{"description":"Splits out events that have multiple date ranges and duplicates them so they can be rendered in\na list with date headers","tags":[{"title":"param","description":"the array of events data from the server","type":{"type":"NameExpression","name":"Array"},"name":"events"}]},"Source":"PULSE.CLIENT.RUGBY.EventList.prototype.renderThumbs = function( events )\n{\n    this.$dateClick.parent().removeClass( 'inactive' );\n    this.$listView.show();\n    this.$calendarView.hide();\n\n    var eventsCopy = [];\n    for ( var i = 0, iLimit = events.length; i < iLimit; i++ )\n    {\n        var event = events[ i ];\n        for ( var j = 0, jLimit = event.dates.length; j < jLimit; j++ )\n        {\n            var eventDate = event.dates[ j ];\n\n            // don't add instances of the event which are in the past\n            if ( eventDate.endDate - new Date() > 0 )\n            {\n                var eventCopy = $.extend( true, {}, event );\n                eventCopy.dates = [ eventDate ];\n                eventsCopy.push( eventCopy );\n            }\n        }\n    }\n\n    eventsCopy.sort( function( a, b )\n    {\n        return a.dates[ 0 ].startDate - b.dates[ 0 ].startDate;\n    } );\n\n    PULSE.CLIENT.Template.publish(\n        this.templates.eventThumb,\n        this.$eventList,\n        {\n            events: eventsCopy\n        }\n    );\n}"},"renderCalendar":{"Documentation":{"description":"Generates the calendar view. If no month is given, it picks the 1st valid event's month","tags":[{"title":"param","description":"the array of event objects, as received from API","type":{"type":"NameExpression","name":"Array"},"name":"events"},{"title":"param","description":"0-based month number, where 0 is January and 11 is December","type":{"type":"NameExpression","name":"Number"},"name":"month"},{"title":"param","description":"the year (e.g., 2015)","type":{"type":"NameExpression","name":"Number"},"name":"year"}]},"Source":"PULSE.CLIENT.RUGBY.EventList.prototype.renderCalendar = function( events )\n{\n    this.$dateClick.parent().addClass( 'inactive' );\n    this.$listView.hide();\n    this.$calendarView.show();\n\n    var month = this.month;\n    var year = this.year;\n\n    var model = {\n        days: {},\n        getEventsForDay: this.getEventsForDay\n    };\n\n    if( events && events.length )\n    {\n        // if no month and day are given, use the first available event month\n        if( typeof month === \"undefined\" || typeof year === \"undefined\" )\n        {\n            var firstDate = new Date( events[ 0 ].dates[ 0 ].startDate );\n\n            // logic to ignore event instances which are in the past\n            eventLoop:\n            for ( var i = 0, iLimit = events.length; i < iLimit; i++ )\n            {\n                var event = events[ i ];\n                for ( var j = 0, jLimit = event.dates.length; j < jLimit; j++ )\n                {\n                    var eventDate = event.dates[ j ];\n                    if ( eventDate.endDate - new Date() > 0 )\n                    {\n                        firstDate = new Date( events[ i ].dates[ j ].startDate );\n                        break eventLoop;\n                    }\n                }\n            }\n\n            year = firstDate.getFullYear();\n            month = firstDate.getMonth();\n        }\n\n        var eventsByDay = this.getEventsByDay( events );\n\n        // only add the given month's events to the model\n        for( var timestamp in eventsByDay )\n        {\n            if( new Date( +timestamp ).getMonth() === month )\n            {\n                model.days[ timestamp ] = eventsByDay[ timestamp ];\n            }\n        }\n    }\n\n    // calendar doesn't have to start with Monday, so just use the start day in the HTML\n    var startDay = this.$container.find( '.calendarTitle li' ).first().data( 'day-number' );\n    var weekdays = this.getWeekdayStructure( startDay ? +startDay : undefined );\n    var calendarMonthSetup = this.getCalendarSetup( year, month, weekdays );\n\n    $.extend( model, calendarMonthSetup );\n\n    this.$calendarView.find( 'h3' ).text( moment( [ model.year, model.month, 1 ] ).format( 'MMMM YYYY' ) );\n\n    PULSE.CLIENT.Template.publish(\n        this.templates.calendar,\n        this.$calendarContainer,\n        model\n    );\n\n    if( typeof this.month === 'undefined' )\n    {\n        this.month = model.month;\n    }\n    if( typeof this.year === 'undefined' )\n    {\n        this.year = model.year;\n    }\n\n    this.$calendarContainer.find( 'div.hover' ).each( function()\n    {\n        var $hoverable = $( this );\n        $hoverable.on( 'click', function()\n        {\n            $( this ).addClass( 'active' );\n        } );\n\n        $hoverable.find( '.close' ).on( 'click', function( e )\n        {\n            $( this ).parent().removeClass( 'active' );\n            e.stopPropagation();\n        } );\n    } );\n}"},"getEventsForDay":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"eventsByDay"},{"title":"param","description":null,"type":null,"name":"year"},{"title":"param","description":null,"type":null,"name":"month"},{"title":"param","description":null,"type":null,"name":"dayNumber"}]},"Source":"PULSE.CLIENT.RUGBY.EventList.prototype.getEventsForDay = function( eventsByDay, year, month, dayNumber )\n{\n    var events = [];\n    for( var timestamp in eventsByDay )\n    {\n        if( new Date( year, month, dayNumber ) - new Date( +timestamp ) === 0 )\n        {\n            events = events.concat( eventsByDay[ timestamp ] );\n            break;\n        }\n    }\n    return events;\n}"},"getWeekdayStructure":{"Documentation":{"description":"Returns the structure of the days in a week, depending on a given day to start with. The default\nis Sun-Sat, where Sunday is 0 and Saturday is 6.","tags":[{"title":"param","description":"the day to start with (e.g., 1 for Monday)","type":{"type":"NameExpression","name":"Number"},"name":"startWith"},{"title":"return","description":"the resulting array (e.g., Sun to Sat is [ 0, 1, 2, 3, 4, 5, 6 ] )","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"Number"}]}}]},"Source":"PULSE.CLIENT.RUGBY.EventList.prototype.getWeekdayStructure = function( startWith )\n{\n    var weekdays = [ 0, 1, 2, 3, 4, 5, 6 ];\n    if( startWith )\n    {\n        for( var i = 0; i < startWith; i++ )\n        {\n            weekdays.push( weekdays.shift() );\n        }\n    }\n\n    return weekdays;\n}"},"getCalendarSetup":{"Documentation":{"description":"Creates a model for rendering a calendar month","tags":[{"title":"param","description":"the year","type":{"type":"NameExpression","name":"Number"},"name":"year"},{"title":"param","description":"the month (0-based, so Jan is 0 and Dec is 11)","type":{"type":"NameExpression","name":"Number"},"name":"month"},{"title":"param","description":"the order of the days in a week (Mon - Sun, Sun - Sat etc.)","type":{"type":"NameExpression","name":"Array"},"name":"weekdayStructure"},{"title":"return","description":"the model","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.EventList.prototype.getCalendarSetup = function( year, month, weekdayStructure )\n{\n    var model = {};\n\n    if( typeof year === 'undefined' && typeof month === 'undefined' )\n    {\n        year = new Date().getFullYear();\n        month = new Date().getMonth();\n    }\n\n    model.year = year;\n    model.month = month;\n\n    var monthStart = new Date( year, month, 1 );\n\n    var firstDay = monthStart.getDay(); // 0 - 6, Sun to Sat\n    var lastDay = new Date( year, month + 1, 0 ).getDay();\n\n    // if we need to pad the calendar to the left, get the number of days in the prev month\n    if( firstDay !== weekdayStructure[ 0 ] )\n    {\n        var prevMonthDays;\n        if( month === 0 )\n        {\n            prevMonthDays = new Date( year - 1, 12, 0 ).getDate();\n            model.prevMonth = new Date( year - 1, 12, 0 ).getMonth();\n            model.prevMonthYear = new Date( year - 1, 12, 0 ).getFullYear();\n        }\n        else\n        {\n            prevMonthDays = new Date( year, month, 0 ).getDate();\n            model.prevMonth = new Date( year, month, 0 ).getMonth();\n            model.prevMonthYear = new Date( year, month, 0 ).getFullYear();\n        }\n        model.prevMonthDays = prevMonthDays;\n        model.prevDaysToRender = _.indexOf( weekdayStructure, firstDay );\n    }\n\n    // if we need to pad the calendar to the right, get the number of days in the next month\n    if( lastDay !== weekdayStructure[ weekdayStructure.length - 1 ] )\n    {\n        var nextMonthDays;\n        if( month === 11 )\n        {\n            nextMonthDays = new Date( year + 1, 1, 0 ).getDate();\n            model.nextMonth = new Date( year + 1, 1, 0 ).getMonth();\n            model.nextMonthYear = new Date( year + 1, 1, 0 ).getFullYear();\n        }\n        else\n        {\n            nextMonthDays = new Date( year, month + 2, 0 ).getDate();\n            model.nextMonth = new Date( year, month + 2, 0 ).getMonth();\n            model.nextMonthYear = new Date( year, month + 2, 0 ).getFullYear();\n        }\n        model.nextMonthDays = nextMonthDays;\n        model.nextDaysToRender = weekdayStructure.length - _.indexOf( weekdayStructure, lastDay ) - 1;\n    }\n\n    model.firstDay = firstDay;\n    model.lastDay = lastDay;\n\n    model.monthDays = new Date( year, month + 1, 0 ).getDate();\n\n    return model;\n}"},"getEventsByDay":{"Documentation":{"description":"Splits events into a map by start of day timestamp. It will duplicate any events that have multiple\ndate ranges, or any events that span over a multitude of days (all in local time)","tags":[{"title":"param","description":"events, as sent by the API","type":{"type":"NameExpression","name":"Array"},"name":"events"},{"title":"return","description":"map of start of day timestamp to array of events","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.EventList.prototype.getEventsByDay = function( events )\n{\n    var eventsMap = {};\n    for ( var i = 0, iLimit = events.length; i < iLimit; i++ )\n    {\n        var event = events[ i ];\n        for( var j = 0, jLimit = event.dates.length; j < jLimit; j++ )\n        {\n            var eventRange = event.dates[ j ];\n            var startDate = moment( eventRange.startDate );\n            var endDate = moment( eventRange.endDate );\n\n            // ignore event instances that have already ended\n            if( endDate - new Date() > 0 )\n            {\n                if( startDate.format( 'LLLL' ) === endDate.format( 'LLLL' ) )\n                {\n                    this.addEventToDateMap( eventsMap, +startDate.startOf( 'day' ), event );\n                }\n                else\n                {\n                    var startTimestsamp = +startDate.startOf( 'day' );\n                    var eventCopy = $.extend( true, {}, event );\n                    eventCopy.dates = [ {\n                        startDate: eventRange.startDate,\n                        endDate: +startDate.endOf( 'day' )\n                    } ];\n                    this.addEventToDateMap( eventsMap, startTimestsamp, event );\n\n                    var newStartDate = startDate.add( 1, 'days' );\n                    while( +newStartDate.endOf( 'day' ) < +endDate )\n                    {\n                        startTimestsamp = +newStartDate.startOf( 'day' );\n                        eventCopy = $.extend( true, {}, event );\n                        eventCopy.dates = [ {\n                            startDate: startTimestsamp,\n                            endDate: +newStartDate.endOf( 'day' )\n                        } ];\n                        this.addEventToDateMap( eventsMap, startTimestsamp, event );\n                        newStartDate = newStartDate.add( 1, 'days' );\n                    }\n\n                    startTimestsamp = +endDate.startOf( 'day' );\n                    eventCopy = $.extend( true, {}, event );\n                    eventCopy.dates = [ {\n                        startDate: startTimestsamp,\n                        endDate: +endDate\n                    } ];\n                    this.addEventToDateMap( eventsMap, startTimestsamp, event );\n                }\n            }\n        }\n    }\n\n    return eventsMap;\n}"},"addEventToDateMap":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"map"},{"title":"param","description":null,"type":null,"name":"timestamp"},{"title":"param","description":null,"type":null,"name":"event"}]},"Source":"PULSE.CLIENT.RUGBY.EventList.prototype.addEventToDateMap = function( map, timestamp, event )\n{\n    if( !map[ timestamp ] )\n    {\n        map[ timestamp ] = [];\n    }\n    map[ timestamp ].push( event );\n}"},"setFilterTerms":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"type"},{"title":"param","description":null,"type":null,"name":"filterTerms"}]},"Source":"PULSE.CLIENT.RUGBY.EventList.prototype.setFilterTerms = function( type, filterTerms )\n{\n    // widget-specific filter validation - don't request events older than today\n    if( type === 'startDate' )\n    {\n        var todaysTimestamp = +moment().startOf( 'day' );\n        if( todaysTimestamp > filterTerms )\n        {\n            filterTerms = todaysTimestamp;\n        }\n    }\n    this.filters[ type ] = filterTerms;\n}"},"newSearch":{"Documentation":{"description":"Given the stored filters (if any) make a request to the server for events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.EventList.prototype.newSearch = function( noReset )\n{\n    this.loading();\n    this.termSearch = false;\n    if ( !noReset )\n    {\n        this.pagination.pageNum = 0;\n    }\n    var searchParams = this.filters;\n    searchParams.pageNum = this.pagination.getPageNum();\n    this.eventGroup.searchEvents( searchParams );\n}"},"setCalendarRanges":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.EventList.prototype.setCalendarRanges = function()\n{\n    if( this.eventGroup.eventDates &&\n        this.eventGroup.eventDates.startDate &&\n        this.eventGroup.eventDates.endDate )\n    {\n        this.startDate = new Date( this.eventGroup.eventDates.startDate );\n        this.endDate = new Date( this.eventGroup.eventDates.endDate );\n    }\n    else\n    {\n        this.startDate = new Date();\n        this.endDate = new Date();\n    }\n}"},"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.EventList.prototype.setListeners = function()\n{\n    var that = this;\n    /**\n     * On first click of the team filter, render the filter and attach listeners\n     */\n    this.$teamsClick.one( 'click', function()\n    {\n        if( PULSE.CLIENT.RUGBY.EventTeams &&\n            PULSE.CLIENT.RUGBY.EventTeams[ that.config[ 'data-season' ] ] )\n        {\n            var teamHash = PULSE.CLIENT.RUGBY.EventTeams[ that.config[ 'data-season' ] ];\n            var model = { teams: [] };\n            for( var teamId in teamHash )\n            {\n                model.teams.push( teamHash[ teamId ] );\n            }\n\n            model.teams.sort( function( a, b )\n            {\n                if( a.name > b.name )\n                {\n                    return 1;\n                }\n                else if( b.name > a.name )\n                {\n                    return -1;\n                }\n                else\n                {\n                    return 0;\n                }\n            } );\n\n            that.renderFilter( that.$teamsClick, that.$teamFilter, model,\n                that.templates.teamsFilter, 'teams' );\n\n            that.$teamsClick.trigger( 'click' );\n        }\n    } );\n\n    /**\n     * Change view to list view.\n     * This will reset any start/end date filters\n     */\n    this.$container.find( 'a.button.list' ).on( 'click', function( e )\n    {\n        that.layout = 'list';\n\n        that.setFilterTerms( 'startDate', undefined );\n        that.setFilterTerms( 'endDate', undefined );\n\n        that.pagination.setPageInfo( { pageInfo: { page: 0 } } );\n        that.update();\n\n        e.preventDefault();\n    } );\n\n    /**\n     * Change view to calendar view.\n     * This will reset any start/end date filters\n     */\n    this.$container.find( 'a.button.calendar' ).on( 'click', function( e )\n    {\n        that.layout = 'calendar';\n\n        var monthTimestamps = that.getMonthStartEndTimestamps();\n        that.setFilterTerms( 'date', undefined );\n        that.setFilterTerms( 'startDate', monthTimestamps.startDate );\n        that.setFilterTerms( 'endDate', monthTimestamps.endDate );\n\n        that.pagination.setPageInfo( { pageInfo: { page: 0 } } );\n        that.update();\n\n        e.preventDefault();\n    } );\n\n    this.$calendarView.find( 'div.previous' ).on( 'click', function( e )\n    {\n        var minMonth = that.startDate.getMonth();\n        var minYear = that.startDate.getFullYear();\n\n        if( that.year > minYear || that.month > minMonth )\n        {\n            that.month = that.month - 1;\n            that.year = that.year;\n\n            if( that.month - 1 < 0 )\n            {\n                that.month = 11;\n                that.year = that.year - 1;\n            }\n            var startOfPrevMonth = new Date( that.year, that.month, 1 );\n            var endOfPrevMonth = new Date( that.year, that.month + 1, 0 );\n\n            that.setFilterTerms( 'startDate', +startOfPrevMonth );\n            that.setFilterTerms( 'endDate', +endOfPrevMonth );\n\n            that.update();\n        }\n    } );\n\n    this.$calendarView.find( 'div.next' ).on( 'click', function( e )\n    {\n        var maxMonth = that.endDate.getMonth();\n        var maxYear = that.endDate.getFullYear();\n\n        if( that.year < maxYear || that.month < maxMonth )\n        {\n            that.month = that.month + 1;\n            that.year = that.year;\n\n            if( that.month + 1 === 12 )\n            {\n                that.month = 0;\n                that.year = that.year + 1;\n            }\n            var startOfNextMonth = new Date( that.year, that.month, 1 );\n            var endOfNextMonth = new Date( that.year, that.month + 1, 0 );\n\n            that.setFilterTerms( 'startDate', +startOfNextMonth );\n            that.setFilterTerms( 'endDate', +endOfNextMonth );\n\n            that.update();\n        }\n    } );\n}"},"getMonthStartEndTimestamps":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"monthNumber"},{"title":"param","description":null,"type":null,"name":"year"}]},"Source":"PULSE.CLIENT.RUGBY.EventList.prototype.getMonthStartEndTimestamps = function( monthNumber, year )\n{\n    if( typeof monthNumber === 'undefined' )\n    {\n        monthNumber = new Date().getMonth();\n    }\n    if( typeof year === 'undefined' )\n    {\n        year = new Date().getFullYear();\n    }\n\n    return {\n        startDate: +moment( new Date( year, monthNumber, 1 ) ).startOf( 'day' ),\n        endDate: +moment( new Date( year, monthNumber + 1, 0 ) ).endOf( 'day' )\n    };\n}"}}},"MC":{"Latest":{"Documentation":{"description":"Paginated content feed widgets","tags":[{"title":"param","description":"DOM element to serve as a wrapper","type":{"type":"NameExpression","name":"Element"},"name":"container"},{"title":"param","description":"Match ID","type":{"type":"NameExpression","name":"String"},"name":"matchId"},{"title":"param","description":"Custom configuration options","type":{"type":"NameExpression","name":"Object"},"name":"config"},{"title":"param","description":"Array of requested content types to fetch","type":{"type":"NameExpression","name":"Array"},"name":"config.dataTypes"},{"title":"param","description":"jQuery element to insert templated content into","type":{"type":"NameExpression","name":"Element"},"name":"config.contentList"},{"title":"param","description":"Rugby match ID to fetch content for","type":{"type":"NameExpression","name":"Integer"},"name":"config.matchId"},{"title":"param","description":"Offset in px to paginate additional content","type":{"type":"NameExpression","name":"Integer"},"name":"config.offset"},{"title":"param","description":"Rugby match ID to fetch content for","type":{"type":"NameExpression","name":"Integer"},"name":"config.pageSize"},{"title":"param","description":"Relative template URL","type":{"type":"NameExpression","name":"String"},"name":"config.template"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Latest = function( container, matchId, config )\n{\n    this.config = {\n        contentList: $( '.latestList', container ),\n        dataTypes: [ 'text', 'video' ],\n        offset: 400,\n        pageSize: 10,\n        emptyTemplate: 'templates/match-centre/empty.html',\n        template: 'templates/match-centre/latest.html'\n    };\n    $.extend( this.config, config );\n\n    this.$container = $( container );\n    // We need a match to continue\n    this.config.matchId = matchId || this.$container.data( 'match-id' );\n    if ( !this.config.matchId )\n    {\n        console.error( \"Unable to continue without a valid match ID\" );\n        return;\n    }\n    // Containers for fetched content\n    this.pageData = [];\n    this.pageInfo = {};\n\n    this.$emptyState = $( PULSE.CLIENT.Template.getHtml( this.config.emptyTemplate ) );\n    this.$container.prepend( this.$emptyState );\n\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n    this.urlGen = new PULSE.CLIENT.RUGBY.getUrlGenerator();\n    this.setListeners();\n    this.getContent( 0, this.config.autostart );\n}","prototype":{"getContent":{"Documentation":{"description":"Set up any content feeds required for the widgets","tags":[{"title":"param","description":"Page number to fetch content of - set to 0 or blank for polling","type":{"type":"NameExpression","name":"Integer"},"name":"pageNum"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Latest.prototype.getContent = function( pageNum )\n{\n    this.contentUrl = this.urlGen.makeMixedContentUrl( PULSE.CLIENT.CMS_ACCOUNT, PULSE.CLIENT.LANGUAGE,\n        {\n            contentTypes: this.config.dataTypes.join( ',' ),\n            pageSize: this.config.pageSize,\n            page: pageNum || 0,\n            references: 'rugby_match:' + this.config.matchId\n            // references: 'rugby_tournament:1238' // USE FOR TEST DATA\n        } );\n    this.dm.addFeed( 'matchCenterLatest', this.contentUrl, pageNum ? 0 : 30, 'onMatchCenterLatest', [ this ] );\n    this.toggleState( this.config.enable );\n}"},"setListeners":{"Documentation":{"description":"Configure any listeners for the widgets","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Latest.prototype.setListeners = function()\n{\n    var that = this,\n        trackScroll = function()\n        {\n            if ( that.config.enable && !that.isPaginating && that.pageInfo.page < ( that.pageInfo.numPages - 1 ) )\n            {\n                // Calculate amount of scroll required to see bottom of list\n                var currentHeight = that.$container.outerHeight() + that.$container.offset().top,\n                    currentPosition = window.pageYOffset + window.innerHeight\n                // Paginate if the current threshold is reached\n                if ( currentPosition >= ( currentHeight - that.config.offset ) )\n                {\n                    that.isPaginating = true;\n                    that.getContent( that.pageInfo.page + 1 );\n                }\n            }\n        };\n    $( window ).on( 'scroll', trackScroll );\n    $( this.$container ).on( 'scroll', trackScroll );\n}","trackScroll":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.MC.Latest.prototype.setListeners.trackScroll"}]},"Source":"var that = this,\n        trackScroll = function()\n        {\n            if ( that.config.enable && !that.isPaginating && that.pageInfo.page < ( that.pageInfo.numPages - 1 ) )\n            {\n                // Calculate amount of scroll required to see bottom of list\n                var currentHeight = that.$container.outerHeight() + that.$container.offset().top,\n                    currentPosition = window.pageYOffset + window.innerHeight\n                // Paginate if the current threshold is reached\n                if ( currentPosition >= ( currentHeight - that.config.offset ) )\n                {\n                    that.isPaginating = true;\n                    that.getContent( that.pageInfo.page + 1 );\n                }\n            }\n        }"}},"activate":{"Documentation":{"description":"Deactivate the plugin","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Latest.prototype.activate = function()\n{\n    this.toggleState( true );\n}"},"deactivate":{"Documentation":{"description":"Activate the plugin","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Latest.prototype.deactivate = function()\n{\n    this.toggleState( false );\n}"},"toggleState":{"Documentation":{"description":"Start / stop a latest feed from being run","tags":[{"title":"param","description":"Set to true to start / resume the content feed","type":{"type":"NameExpression","name":"Boolean"},"name":"enable"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Latest.prototype.toggleState = function( enable )\n{\n    this.config.enable = ( enable === true );\n    if ( this.config.enable )\n    {\n        this.dm.start( this.contentUrl );\n    }\n    else\n    {\n        this.dm.stop( this.contentUrl );\n    }\n}"},"onData":{"Documentation":{"description":"Populate and insert content into the element wrapper","tags":[{"title":"param","description":"JSON data object requested from content feed","type":{"type":"NameExpression","name":"Object"},"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Latest.prototype.onData = function( data )\n{\n    // Don't update if disabled\n    if ( !this.config.enable )\n    {\n        return;\n    }\n\n    // If total number of entries has changed, adjust results index\n    var index = this.pageInfo.numEntries ? data.pageInfo.numEntries - this.pageInfo.numEntries : 0;\n\n    // If this is a pagination, reset pagination option\n    if ( data.pageInfo.page )\n    {\n        this.isPaginating = false;\n    }\n\n    // Add styling class for pagination if more content available\n    if ( ( this.pageInfo.page + 1 ) < this.pageInfo.numPages )\n    {\n        this.$container.addClass( 'loading' );\n    }\n    else\n    {\n        this.$container.removeClass( 'loading' );\n    }\n\n    // Update the pageInfo for content displayed\n    if ( !this.pageInfo.numEntries || data.pageInfo.page )\n    {\n        this.pageInfo = data.pageInfo;\n    }\n    else\n    {\n        this.pageInfo.numEntries = data.pageInfo.numEntries;\n    }\n\n    // Toggle display of the empty content container\n    if ( this.pageInfo.numEntries )\n    {\n        this.$emptyState.hide();\n    }\n\n    // Append content for fresh / paginated content\n    if ( !index || data.pageInfo.page )\n    {\n        for ( index; index < data.content.length; index++ )\n        {\n            PULSE.CLIENT.Template.append(\n                this.config.template,\n                this.config.contentList,\n                {\n                    contentItem: data.content[ index ]\n                }\n            );\n        }\n    }\n    // Prepend content for content found via polling\n    else\n    {\n        while ( index && data.content[ --index ] )\n        {\n            PULSE.CLIENT.Template.prepend(\n                this.config.template,\n                this.config.contentList,\n                {\n                    contentItem: data.content[ index ]\n                }\n            );\n            // Remove bottom contnet\n            if ( this.isPaginating )\n            {\n                this.config.contentList.children( ':nth-child(' + this.config.contentList.length - index + ')' ).remove();\n            }\n        }\n    }\n}"}}},"Main":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for World Rugby match centre widget\n    - Match can be determined by either a passed match object, the widget config or the url"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Main = function( container, config, tournament, match )\n{\n    this.config = config;\n    this.$container = $( container );\n    this.tournament = tournament;\n    this.match = match || undefined;\n    this.defaultTab = 1;\n    this.clearOldMatch();\n    if( this.match && this.match.matchId )\n    {\n        this.$container.attr( 'data-match-id', this.match.matchId );\n    }\n\n    if( !this.tournament || !this.match )\n    {\n        this.setMatch();\n    }\n\n    this.setSubscriptions();\n    this.setListeners();\n    this.initialiseComponents();\n\n    // Initially just get scoring data - call for timeline data afterwards as\n    // player list data is required\n    if( this.match.hasScoringData )\n    {\n        this.components.scoreboard.refreshScoreboard();\n        this.components.scoring.refreshScoring();\n        this.components.teams.refreshTeams();\n        this.match.prepareTimelineData( true );\n        this.match.prepareScoringData( { start: true, interval: 60, forceLoad: true } );\n    }\n    else\n    {\n        this.match.prepareScoringData( { start: true, interval: 60, forceLoad: true } );\n    }\n}","prototype":{"switchActiveTab":{"Documentation":{"description":"Deactivates components on the same level as the tab to activate, show the tab container and\nactivates the given tab","tags":[{"title":"param","description":"the array of tab names on the same level","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"String"}]},"name":"tabArray"},{"title":"param","description":"the index of the tab to be made active","type":{"type":"NameExpression","name":"Number"},"name":"activeTabIdx"},{"title":"param","description":"whether or not to track the tab change","type":{"type":"NameExpression","name":"Boolean"},"name":"dontTrack"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Main.prototype.switchActiveTab = function( tabArray, activeTabIdx, dontTrack )\n{\n    var tabsToIgnore = [ tabArray[ activeTabIdx ] ];\n    var tabsToDeactivate = tabArray;\n\n    if( tabArray.length === this.lhc.length && this.layout !== 'one-column' )\n    {\n        tabsToIgnore = tabsToIgnore.concat( this.rhc );\n    }\n\n    tabsToDeactivate = _.difference( tabArray, tabsToIgnore );\n\n    for( var i = 0, iLimit = tabsToDeactivate.length; i < iLimit; i++ )\n    {\n        var tab = this.tabs[ tabsToDeactivate[ i ] ];\n\n        if( i != activeTabIdx && tab && _.isFunction( tab.deactivate ) )\n        {\n            tab.deactivate();\n        }\n    }\n\n    var tabName = tabArray[ activeTabIdx ];\n\n    /**\n     * Save new subtab\n     */\n    window.location.replace( '#' + tabName );\n\n    if( this.layout === 'one-column' )\n    {\n        for( var i = 0, iLimit = this.$tabs.length; i < iLimit; i++ )\n        {\n            var $tab = this.$tabs[ i ];\n            if( '#tab-' + tabName !== $tab.selector )\n            {\n                $tab.hide();\n            }\n        }\n    }\n\n    var $activeTab = $( '#tab-' + tabName );\n    $activeTab.show();\n\n    if( this.tabs[ tabName ] &&\n        _.isFunction( this.tabs[ tabName ].activate ) )\n    {\n        this.tabs[ tabName ].activate();\n    }\n\n    if( !dontTrack )\n    {\n        // if tab change affects most of the page, track as a page view\n        if( this.layout === 'one-column' || -1 < _.indexOf( this.rhc, tabName ) )\n        {\n            var matchLink = PULSE.CLIENT.generateUrl( 'match', this.match.matchId );\n            PULSE.CLIENT.Tracking.pageview( matchLink + '#' + tabName );\n        }\n        // otherwise, track as a left column tab change\n        else\n        {\n            PULSE.CLIENT.Tracking.event( 'left-column-tabs', 'select', tabName );\n        }\n    }\n}"},"setSubscriptions":{"Documentation":{"description":"Subscribe to scoring and timeline data events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Main.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCORING_UPDATE, function( e, params )\n    {\n        if( params.matchId === that.match.matchId &&\n            params.matchId === parseInt( that.$container.attr( 'data-match-id' ), undefined ) )\n        {\n            // Now that we have scoring, fetch timeline data\n            that.match.prepareTimelineData( true );\n            that.setDefaultTab();\n        }\n    });\n}"},"init":{"Documentation":{"description":"Initialises the layout of the match centre, whether it's two column or one column, deciding what\ntabs should be active depending on the blog and match statuses","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Main.prototype.init = function()\n{\n    if( !this.initialised )\n    {\n        var defaults = this.layout === 'one-column' ? this.ONE_COLUMN_DEFAULTS : this.TWO_COLUMN_DEFAULTS;\n        this.tabs.blog.$context = this.layout === 'one-column' ? undefined : $( '#tab-blog' );\n\n        /**\n         * If there's a tab selected by the user and the tab maps to an existing tab, then override\n         * the match centre behaviour to open that tab by default\n         */\n        var selectedTab = window.location.hash ? window.location.hash.replace( '#', '' ) : '';\n        if( selectedTab )\n        {\n            var hashOverride = { 'U': selectedTab, 'L': selectedTab, 'C': selectedTab };\n            if( this.layout === 'one-column' &&\n                -1 < _.indexOf( this.lhc, selectedTab.toLowerCase() ) )\n            {\n                $.extend( true, defaults[ 0 ], hashOverride );\n            }\n            else if( this.layout !== 'one-column' &&\n                -1 < _.indexOf( this.rhc, selectedTab.toLowerCase() ) )\n            {\n                $.extend( true, defaults[ 1 ], hashOverride );\n            }\n        }\n        /**\n         * If the blog is active, then make it the default tab on mobile in all states, and the\n         * default tab on desktop in the right-hand side\n         */\n        else if( this.blogStatus === 'ACTIVE' )\n        {\n            var blogOverride = { 'U': 'blog', 'L': 'blog', 'C': 'blog' };\n            if( this.layout === 'one-column' )\n            {\n                $.extend( true, defaults[ 0 ], blogOverride );\n            }\n            else\n            {\n                $.extend( true, defaults[ 1 ], blogOverride );\n            }\n\n            this.insights.activate();\n        }\n\n        this.setLayout( defaults );\n\n        this.initialised = true;\n    }\n}"},"setLayout":{"Documentation":{"description":"Activates (and deactivates) the appropriate components in the layout, depending on the given\nconfiguration and the match status","tags":[{"title":"param","description":"the default tab for each column, by match state","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"Object"}]},"name":"defaults"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Main.prototype.setLayout = function( defaults )\n{\n    var matchStatus = this.match.getMatchStatus() || 'U';\n    for( var i = 0, iLimit = defaults.length; i < iLimit; i++ )\n    {\n        var tabColumnDefault = defaults[ i ][ matchStatus ];\n        var tabIdx = 0;\n\n        // the left column is the only column in the one column layout, and the first in the other\n        if( this.layout === 'one-column' || i === 0 )\n        {\n            tabIdx = _.indexOf( this.lhc, tabColumnDefault );\n            this.lhcSwitcher.switchToTab( tabIdx, true );\n            if( this.swiper && this.layout === 'one-column' )\n            {\n                this.swiper.slideTo( tabIdx );\n            }\n        }\n        else\n        {\n            tabIdx = _.indexOf( this.rhc, tabColumnDefault );\n            this.initialiseRHCSwitcher();\n            this.rhcSwitcher.switchToTab( tabIdx, true );\n        }\n    }\n}"},"setListeners":{"Documentation":{"description":"Subscribe to user input events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Main.prototype.setListeners = function()\n{\n    var that = this;\n\n    this.$container.off();\n\n    // Close this match and return to global view\n    this.$container.on( 'click', '.topBar .back-to-mc', function( e )\n    {\n        e.preventDefault();\n        that.$container.hide();\n    } );\n\n    // Close this match and collapse the entire match centre pillar\n    this.$container.on( 'click', '.topBar .close', function( e )\n    {\n        e.preventDefault();\n        that.$container.hide();\n        that.$container.parent().hide();\n        $('body').find('.mainContent').removeClass('open');\n    } );\n\n    // Toggle the match details view\n    this.$container.on('click', '.matchDetailsToggle', function( e )\n    {\n        e.preventDefault();\n        //that.$container.find('.matchDetails').toggle();\n        window.open( '/match/' + that.match.matchId, '_self' );\n    } );\n\n    // Hide and show mc columns depending on the window width\n    $( window ).resize( function( e )\n    {\n        that.setViews();\n    } );\n}"},"initialiseRHCSwitcher":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Main.prototype.initialiseRHCSwitcher = function()\n{\n    var that = this;\n    if( !this.rhcSwitcher )\n    {\n        /**\n         * Handles the click listeners for the right-hand column, which is the second column of the\n         * two column layout. The tab buttons for this are hidden when the match centre adops the\n         * one-column layout.\n         */\n        this.rhcSwitcher = new PULSE.CLIENT.UI.ToggleNav(\n        {\n            navigationContainer: this.$container.find( '.mcNav ul' ),\n            contentContainer: this.$container.find( '.mainColumn .toggleTabs' ),\n            navLinksSelector: 'a',\n            navActiveClass: 'selected',\n            callback: function( selectedTab, dontTrack )\n            {\n                that.switchActiveTab( that.rhc, selectedTab, dontTrack );\n            }\n        } );\n    }\n}"},"initialiseSwiper":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Main.prototype.initialiseSwiper = function()\n{\n    var that = this;\n    if( !this.swiper )\n    {\n        /**\n         * Handles the swipe interaction with the left-hand column, switching to the right tab on swipe.\n         */\n        this.swiper = this.$container.find( '.swiper-container' ).swiper(\n        {\n            mode: 'horizontal',\n            loop: false,\n            keyboardControl: true,\n            slideToClickedSlide: true,\n            centeredSlides: true,\n            slidesPerView: 'auto'//,\n            // onSlideChangeEnd: function( swiper )\n            // {\n            //     that.lhcSwitcher.switchToTab( swiper.activeIndex );\n            // }\n        } );\n    }\n    else\n    {\n        this.swiper.update( true );\n    }\n}"},"clearOldMatch":{"Documentation":{"description":"Returns the mc to it's original state, ready for a new match to be loaded","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Main.prototype.clearOldMatch = function()\n{\n    PULSE.CLIENT.Template.publish(\n        'templates/mc/empty.html',\n        this.$container,\n        {}\n    );\n}"},"setMatch":{"Documentation":{"description":"Extracts tournament and match id from the url or url params if present","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Main.prototype.setMatch = function()\n{\n    var url = window.location.href,\n        rootUrl = url.split('?')[0].split('#')[0],\n        splitBySlash = rootUrl.split('/'),\n        // Assign tournament and match based on url slashes\n        mid = splitBySlash[ splitBySlash.length - 1 ],\n        tid = splitBySlash[ splitBySlash.length - 2 ];\n\n    // Use widget configs if present\n    if( this.config['data-season'] && this.config['data-match-id'] )\n    {\n        mid = this.config['data-match-id'];\n        tid = this.config['data-season'];\n    }\n    // Else try and parse url params\n    else\n    {\n        // Override tournament and match if url params are specified\n        this.params = PULSE.CLIENT.Util.parseUrlParameters();\n        if( this.params.tid && this.params.mid )\n        {\n            tid = this.params.tid;\n            mid = this.params.mid;\n        }\n        else if( PULSE.CLIENT.isTest() && console && console.log )\n        {\n            //console.log( 'MC: Use \"tid\" & \"mid\" url params to set tournament and match or set data in widget config' );\n        }\n    }\n\n    // store the specifics of this match centre\n    this.tournament = window.WidgetController.getTournamentByName( tid );\n    this.matchId = mid;\n    this.match = new PULSE.CLIENT.RUGBY.Match( this.tournament, this.matchId );\n    this.tournament.schedule.matchMap[ this.matchId ] = this.match;\n}"},"initialiseComponents":{"Documentation":{"description":"Initialise widget components","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Main.prototype.initialiseComponents = function()\n{\n    this.components = {\n        scoreboard: new PULSE.CLIENT.RUGBY.MC.Scoreboard( this.$container.find('.scoreboard'), this.config, this.tournament, this.match, this ),\n        scoring: new PULSE.CLIENT.RUGBY.MC.Scoring( this.$container.find('.scoring'), this.config, this.tournament, this.match, this ),\n        timeline: new PULSE.CLIENT.RUGBY.MC.Timeline( this.$container.find('.timeline'), this.config, this.tournament, this.match, this ),\n        teams: new PULSE.CLIENT.RUGBY.MC.Teams( this.$container.find('.matchLineups'), this.config, this.tournament, this.match, this )\n    };\n}"},"initialiseNavigation":{"Documentation":{"description":"Initialise toggle navigation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Main.prototype.initialiseNavigation = function()\n{\n    var that = this;\n    if ( !this.navigationInit )\n    {\n        this.tabController = new PULSE.CLIENT.UI.ToggleNav(\n        {\n            activeTab: this.defaultTab,\n            navigationContainer: this.$container.find('.menu'),\n            contentContainer: '.tabs',\n            navLinksSelector: 'li.tab-link',\n            navActiveClass: 'selected',\n            animate: false,\n            callback: function( selectedTab, dontTrack )\n            {\n                that.selectedTab = selectedTab;\n                // Force tab selection to try and prevent edge case with multiple tabs being highlighted\n                that.setViews();\n            }\n        } );\n        this.navigationInit = true;\n    }\n}"},"setDefaultTab":{"Documentation":{"description":"Set the default tab in the vertical view dependent on the current match state","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Main.prototype.setDefaultTab = function()\n{\n    var windowWidth = $( window ).width();\n\n    if( !this.hasInitialisedNavigation )\n    {\n        // Choose a default tab for vertical view based on the current match state\n        // if( this.match.getMatchStatus() !== 'U' &&\n        //     this.match.teams[0].scoring && _.keys( this.match.teams[0].scoring ) && _.keys( this.match.teams[0].scoring ).length ||\n        //     this.match.teams[1].scoring && _.keys( this.match.teams[1].scoring ) && _.keys( this.match.teams[1].scoring ).length )\n        // {\n        //     this.defaultTab = 0;\n        //     this.selectedTab = 0;\n        // }\n        // else\n        // {\n        //     this.defaultTab = 1;\n        //     this.selectedTab = 1;\n        // }\n\n        this.defaultTab = 0;\n        this.selectedTab = 0;\n\n        this.initialiseNavigation();\n\n        // Show all tabs for tablet view\n        if( windowWidth > 860 && windowWidth < 1280 )\n        {\n            this.$container.find('.tabs').children().show();\n        }\n    }\n}"},"setViews":{"Documentation":{"description":"Shows and hides tabs based on screen size - called on resize","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Main.prototype.setViews = function()\n{\n    var containerWidth = this.$container.width();\n\n    if( containerWidth > 1280 ) // Full screen, vertical pillar\n    {\n        this.$container.find('.tabs').children().show();\n    }\n    else if( containerWidth < 1280 && containerWidth > 860 ) // Tablet pillar\n    {\n        this.$container.find('.tabs').children().show();\n    }\n    else if( containerWidth < 860 ) // Mobile view\n    {\n        this.$container.find('.tabs').children().hide().eq( this.selectedTab ).show();\n    }\n}"}}},"Schedule":{"Documentation":{"description":"Match schedule widget","tags":[{"title":"param","description":"DOM element to serve as a wrapper","type":{"type":"NameExpression","name":"Element"},"name":"container"},{"title":"param","description":"Custom configuration options","type":{"type":"NameExpression","name":"Object"},"name":"config"},{"title":"param","description":"Relative template URL","type":{"type":"NameExpression","name":"String"},"name":"config.template"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Schedule = function( container, config, tournament )\n{\n\tthis.config = {\n\t\tautostart: false,\n\t\tlocationFilter: 'locationFilter',\n\t\tteamFilter: 'teamsFilter',\n\t\ttemplate: 'templates/match-centre/schedule.html'\n\t};\n\n\t// Build elements\n\tthis.$container = $( container );\n\tthis.tournament = tournament;\n\n\t// Get i18n messages\n\tthis.i18n = {\n\t\tfilters:\n\t\t{\n\t\t\tteam:\n\t\t\t{\n\t\t\t\ttitle: PULSE.I18N.lookup( 'widget.matchcentre.matches.filter.team' ),\n\t\t\t\tall: PULSE.I18N.lookup( 'widget.matchcentre.matches.filter.team.all' )\n\t\t\t},\n\t\t\tvenue:\n\t\t\t{\n\t\t\t\ttitle: PULSE.I18N.lookup( 'widget.matchcentre.matches.filter.location' ),\n\t\t\t\tall: PULSE.I18N.lookup( 'widget.matchcentre.matches.filter.location.all' )\n\t\t\t}\n\t\t}\n\t}\n\n\t// Configure libraries and listeners\n\tthis.dm = PULSE.CLIENT.getJqueryDataManager();\n\tthis.urlGen = new PULSE.CLIENT.RUGBY.getUrlGenerator();\n\tthis.setListeners();\n\n\t// Once everything's configured, fetch data\n\tif ( !this.tournament.schedule.scheduleLoaded )\n\t{\n\t\tthis.tournament.schedule.getScheduleData(\n\t\t{\n\t\t\tinterval: 0,\n\t\t\tstart: true\n\t\t} );\n\t}\n}","prototype":{"setListeners":{"Documentation":{"description":"Configure any listeners for the widgets","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Schedule.prototype.setListeners = function()\n{\n\tvar that = this;\n\n\tPULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCHEDULE_UPDATE, function( e, params )\n\t{\n\t\tif ( that.tournament && params.id === that.tournament.tournamentName )\n\t\t{\n\t\t\tthat.updateContent();\n\t\t}\n\t} );\n\n\tthis.$container.on( 'change', 'select', function()\n\t{\n\t\tif ( this.id === 'teamsFilter' )\n\t\t{\n\t\t\t$( '[data-teams]' ).removeClass( 'hideByTeam' );\n\t\t\tthat.teamSelected = this.value;\n\t\t\tif ( this.value )\n\t\t\t{\n\t\t\t\t$( '[data-teams]' ).not( '[data-teams~=\"' + this.value + '\"]' ).addClass( 'hideByTeam' );\n\t\t\t}\n\t\t}\n\t\telse if ( this.id === 'locationFilter' )\n\t\t{\n\t\t\t$( '[data-venue]' ).removeClass( 'hideByVenue' );\n\t\t\tthat.venueSelected = this.value;\n\t\t\tif ( this.value )\n\t\t\t{\n\t\t\t\t$( '[data-venue]' ).not( '[data-venue=\"' + this.value + '\"]' ).addClass( 'hideByVenue' );\n\t\t\t}\n\t\t}\n\t} )\n}"},"updateContent":{"Documentation":{"description":"Populate and insert matches into the wrapper","tags":[{"title":"param","description":"JSON data object requested from content feed","type":{"type":"NameExpression","name":"Object"},"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Schedule.prototype.updateContent = function()\n{\n\t// Reset the container\n\tthis.$container.empty();\n\n\t// Append content for fresh / paginated content\n\tPULSE.CLIENT.Template.append(\n\t\tthis.config.template,\n\t\tthis.$container,\n\t\t{\n\t\t\ti18n: this.i18n,\n\t\t\tmatches: this.tournament.schedule.getAllMatchesModel().matches,\n\t\t\tteams: this.tournament.schedule.getTeamObjectsFromSchedule(),\n\t\t\tvenues: this.tournament.schedule.getVenueObjectsFromSchedule()\n\t\t}\n\t);\n\n\t// Pre-populate select inputs if necessary\n\t$( 'select', this.$container ).sortSelect();\n\t$( '#locationFilter' ).val( this.venueSelected ).selectric();\n\n\t$( '#teamsFilter' ).val( this.teamSelected ).selectric(\n\t{\n\t\toptionsItemBuilder: function( itemData, element, index )\n\t\t{\n\t\t\treturn element.val().length ? '<span class=\"tLogoSmall ' + element.val() + '\"></span>' + itemData.text : itemData.text;\n\t\t},\n\n\t\tcustomClass:\n\t\t{\n\t\t\tprefix: 'teamsFilter selectric',\n\t\t\tcamelCase: false,\n\t\t\toverwrite: false\n\t\t}\n\t} );\n}"}}},"Scorebox":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the scoreboox component of the match centre"},{"title":"param","description":"jquery/selector/dom object for the component container","type":{"type":"NameExpression","name":"Object"},"name":"container"},{"title":"param","description":"object containing config from the widget attributes","type":{"type":"NameExpression","name":"Object"},"name":"config"},{"title":"param","description":"tournament object as set in url","type":{"type":"NameExpression","name":"Object"},"name":"tournament"},{"title":"param","description":"match object as set in url","type":{"type":"NameExpression","name":"Object"},"name":"match"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Scorebox = function( container, config, tournament, match, parent )\n{\n    this.$container = $( container );\n    this.config = config;\n    this.tournament = tournament;\n    this.match = match;\n    this.parent = parent;\n    this.$container.attr( 'data-match-id', this.match.matchId );\n\n    this.$scoreboardContainer = this.$container.find( '.scoreboardContainer' );\n    this.$matchInfoContainer = this.$container.find( '.matchInfoContainer' );\n    this.$countdownContainer = this.$container.find( '.countdownContainer' );\n\n    this.$scorersDropdown = this.$container.find( '.scorerDropdown' );\n    this.$scorersContainer = this.$container.find( '.scorerContainer' );\n\n    this.templates = {\n        scoreboard: 'templates/match-centre/scoreboard.html',\n        scorers : 'templates/match-centre/scorers.html'\n    };\n\n    if( this.match.scoringLoaded &&\n        this.match.getMatchStatus() !== 'U' &&\n        !this.match.timelineLoaded )\n    {\n        this.match.prepareTimelineData( { start: true, interval: 30 } );\n    }\n\n    this.renderScorers = false;\n\n    this.setSubscriptions();\n    this.setListeners();\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"Subscribe to match timeline data events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Scorebox.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCORING_UPDATE, function( e, params )\n    {\n        if( params.matchId === that.match.matchId )\n        {\n            that.refreshScorebox();\n            if( that.match.getMatchStatus() !== 'U' && !that.match.timelineLoaded )\n            {\n                that.match.prepareTimelineData( { start: true, interval: 30 } );\n            }\n        }\n    });\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.TIMELINE_UPDATE, function( e, params )\n    {\n        if( params.matchId === that.match.matchId )\n        {\n            that.refreshScorebox();\n        }\n    });\n}"},"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Scorebox.prototype.setListeners = function()\n{\n    var that = this;\n\n    this.$scorersDropdown.on( 'click', function( e, params )\n    {\n        e.preventDefault();\n        // On mobile view, open/close the scorers\n        if ( !that.renderScorers )\n        {\n            that.renderScorers = true;\n            $( this ).addClass( 'open' );\n            that.$scorersContainer.addClass( 'open' );\n        }\n        else\n        {\n            $( this ).removeClass( 'open' );\n            that.$scorersContainer.removeClass( 'open' );\n            that.renderScorers = false;\n        }\n        that.refreshScorers();\n    } );\n}"},"refreshScorebox":{"Documentation":{"description":"Refresh the entire scorebox with different components showing dependant on the state.","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Scorebox.prototype.refreshScorebox = function()\n{\n    var status = this.match.getMatchStatus();\n    this.refreshMatchInfo();\n    switch( status )\n    {\n        case 'U':\n            this.renderCountdown();''\n            this.$container.find('.scorebox').addClass( 'preMatch' );\n            this.$scorersContainer.hide();\n            break;\n        case 'L':\n            this.$countdownContainer.hide();\n            this.$container.find('.scorebox').removeClass( 'preMatch' );\n            this.refreshScorers();\n            break;\n        default:\n            this.$countdownContainer.hide();\n            this.$container.find('.scorebox').removeClass( 'preMatch' );\n            this.refreshScorers();\n            break;\n    }\n\n    this.refreshScoreboard();\n}"},"refreshScorers":{"Documentation":{"description":"Refresh the scorers of the match","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Scorebox.prototype.refreshScorers = function()\n{\n    // Do not render if the timeline is not loaded or the scorer dropdown has not been opened\n    // in mobile view\n    if ( this.match.timelineLoaded && this.renderScorers )\n    {\n        var scorers = this.match.getScorers();\n\n        var scorerMap = {};\n        var penaltyTryLabel = '';\n\n        // For the scorers found, loop through and create a custom scorer map in the form:\n        // [ scoring type ] : { count : array of the amount of unique scorers (for home and way team ),\n        //  label : the label of the score type ( e.g Try), scorers : a map of player ids\n        //  to the number of scores of this particular type }\n        for ( var key in scorers )\n        {\n            var playersForType = [];\n            var playersCountArray = [];\n            scorerMap[ key ] = {};\n            for ( var i = 0; i < scorers[ key ].length; i++ )\n            {\n                if ( key != 'PT5' )\n                {\n                    var players = {};\n                    var playerCount = 0;\n                    for ( var j = 0; j < scorers[ key ][ i ].length; j++ )\n                    {\n                        var playerId = scorers[ key ][ i ][ j ].playerId\n                        if ( !players[ playerId ] )\n                        {\n                            players[ playerId ] = 1;\n                            playerCount = playerCount + 1;\n                        }\n                        else\n                        {\n                            players[ playerId ] = players[ playerId ] + 1;\n                        }\n                    }\n                    if ( key === 'T5' && scorers[ 'PT5' ] && scorers[ 'PT5' ].length > 0 && scorers[ 'PT5' ][ i ] && scorers[ 'PT5' ][ i ].length > 0 )\n                    {\n                        players[ 'PT5' ] = scorers[ 'PT5' ][ i ].length;\n                        playerCount = playerCount + 1;\n                        penaltyTryLabel = scorers[ 'PT5' ][ i ][ 0 ].typeLabel;\n                    }\n                    playersForType.push( players );\n                    playersCountArray.push( playerCount );\n                }\n            }\n            scorerMap[ key ].scorers = playersForType;\n            scorerMap[ key ].count = playersCountArray;\n            scorerMap[ key ].label = this.getScorerLabel( key );\n        }\n\n        PULSE.CLIENT.Template.publish(\n            this.templates.scorers,\n            this.$scorersContainer,\n            {\n                match: this.match,\n                scorers : scorerMap,\n                penaltyTryLabel : penaltyTryLabel\n            }\n        );\n        this.$scorersContainer.show();\n    }\n    else\n    {\n        this.$scorersContainer.hide();\n    }\n}"},"getScorerLabel":{"Documentation":{"description":"Switch mapping a label to a different scoring type","tags":[{"title":"param","description":"Scoring type, e.g. 'T5'","type":{"type":"NameExpression","name":"String"},"name":"key"},{"title":"return","description":"label The label to show for the scoring type.","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.MC.Scorebox.prototype.getScorerLabel = function( key )\n{\n    var label = '';\n    switch( key )\n    {\n        case 'T5':\n            label = PULSE.I18N.lookup( 'label.rugby.tries' );\n            break;\n        case 'C2':\n            label = PULSE.I18N.lookup( 'label.rugby.conversions.short' );\n            break;\n        case 'P3':\n            label = PULSE.I18N.lookup( 'label.rugby.penalties.short' );\n            break;\n        case 'D3':\n            label = PULSE.I18N.lookup( 'label.rugby.dropgoals.short' );\n            break;\n        default:\n            label = '';\n            break;\n    }\n    return label;\n}"},"refreshMatchInfo":{"Documentation":{"description":"Refreshes the match info showing the title, venue and attendance if available","tags":[{"title":"return","description":"[description]","type":{"type":"ArrayType","elements":[{"type":"NameExpression","name":"type"}]}}]},"Source":"PULSE.CLIENT.RUGBY.MC.Scorebox.prototype.refreshMatchInfo = function()\n{\n    var title = this.match.getTitle() + ', '+ this.match.getVenue();\n    if ( this.match.venue )\n    {\n        this.$container.addClass( 'venue' + this.match.venue.id )\n    }\n    var attendance = this.match.getAttendance();\n    if ( attendance )\n    {\n        title = title + ', ' + PULSE.I18N.lookup( 'label.match.attendance.long' ) + ' ' + attendance;\n    }\n    this.$matchInfoContainer.html( title );\n}"},"refreshScoreboard":{"Documentation":{"description":"Refresh scoreboard showing the score, disciplinary cards and half time scores if available","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Scorebox.prototype.refreshScoreboard = function()\n{\n    var that = this;\n\n    var cards = [ this.match.getDisciplinaryCardsByTeamIndex( 0 ), this.match.getDisciplinaryCardsByTeamIndex( 1 ) ];\n\n    var halfTimeScores = this.match.getHalfTimeScores();\n\n    PULSE.CLIENT.Template.publish(\n        this.templates.scoreboard,\n        this.$scoreboardContainer,\n        {\n            match: this.match,\n            cards : cards,\n            halfTimeScores : halfTimeScores\n        }\n    );\n}"},"renderCountdown":{"Documentation":{"description":"Renders the countdown ( only in prematch )","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Scorebox.prototype.renderCountdown = function()\n{\n    if ( !this.countdown )\n    {\n        this.countdown = new PULSE.CLIENT.RUGBY.CountdownText( this.$countdownContainer, this.match.time.millis );\n    }\n    this.$countdownContainer.show();\n}"}}},"Social":{"Documentation":{"description":"Social image gallery","tags":[{"title":"param","description":"DOM element to serve as a wrapper","type":{"type":"NameExpression","name":"Element"},"name":"container"},{"title":"param","description":"Match ID","type":{"type":"NameExpression","name":"String"},"name":"matchId"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Social = function( container, matchId, config )\n{\n    this.config = {\n        emptyTemplate: 'templates/match-centre/empty.html',\n        id: '4503',\n        hash: '5590bac9b1d75'\n    };\n    $.extend( this.config, config );\n\n    // Construct basic environment\n    this.$container = $( container );\n    this.config.matchId = matchId || this.$container.data( 'match-id' );\n\n    // Add empty state while loading\n    this.$emptyState = $( PULSE.CLIENT.Template.getHtml( this.config.emptyTemplate ) );\n    this.$container.prepend( this.$emptyState );\n\n    // Add the stackla controller and construct the gallery environment\n    this.stackla = PULSE.CLIENT.RUGBY.Stackla;\n    this.$container.append( this.stackla.buildGalleryByMatch( this.config.matchId, this.config ) );\n    this.getContent();\n}","prototype":{"getContent":{"Documentation":{"description":"Fetch 3rd party scripts","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Social.prototype.getContent = function()\n{\n    var that = this;\n    if ( this.stackla && this.config.enable && !this.contentRequested )\n    {\n        this.contentRequested = true;\n        this.stackla.populateGallery( function() {\n            that.$emptyState.hide();\n        });\n    }\n}"},"activate":{"Documentation":{"description":"Deactivate the plugin","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Social.prototype.activate = function()\n{\n    this.config.enable = true;\n    this.getContent();\n}"},"deactivate":{"Documentation":{"description":"Activate the plugin","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Social.prototype.deactivate = function()\n{\n    this.config.enable = false;\n    this.getContent();\n}"}}},"Scoreboard":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the scoreboard component of the world rugby match centre"},{"title":"param","description":"jquery/selector/dom object for the component container","type":{"type":"NameExpression","name":"Object"},"name":"container"},{"title":"param","description":"object containing config from the widget attributes","type":{"type":"NameExpression","name":"Object"},"name":"config"},{"title":"param","description":"tournament object as set in url","type":{"type":"NameExpression","name":"Object"},"name":"tournament"},{"title":"param","description":"match object as set in url","type":{"type":"NameExpression","name":"Object"},"name":"match"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Scoreboard = function( container, config, tournament, match, parent )\n{\n    this.$container = $( container );\n    this.config = config;\n    this.tournament = tournament;\n    this.match = match;\n    this.parent = parent;\n    this.$container.attr( 'data-match-id', this.match.matchId );\n\n    this.templates = {\n        scoreboard: 'templates/mc/scoreboard.html'\n    };\n\n    this.setSubscriptions();\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"Subscribe to match timeline data events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Scoreboard.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCORING_UPDATE, function( e, params )\n    {\n        if( params.matchId === that.match.matchId &&\n            params.matchId === parseInt( that.$container.attr( 'data-match-id' ), undefined ) )\n        {\n            that.refreshScoreboard();\n        }\n    });\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.TIMELINE_UPDATE, function( e, params )\n    {\n        if( params.matchId === that.match.matchId &&\n            params.matchId === parseInt( that.$container.attr( 'data-match-id' ), undefined ) )\n        {\n            that.refreshScoreboard();\n        }\n    });\n}"},"refreshScoreboard":{"Documentation":{"description":"Refresh scoreboard on the DOM","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Scoreboard.prototype.refreshScoreboard = function()\n{\n    var that = this,\n        model = { match: this.match };\n\n    PULSE.CLIENT.Template.publish(\n        this.templates.scoreboard,\n        this.$container,\n        model,\n        function(){\n            that.$container.parent().find('.spinner').hide();\n        }\n    );\n}"}}},"Scoring":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the scoreboard component of the world rugby match centre"},{"title":"param","description":"jquery/selector/dom object for the component container","type":{"type":"NameExpression","name":"Object"},"name":"container"},{"title":"param","description":"object containing config from the widget attributes","type":{"type":"NameExpression","name":"Object"},"name":"config"},{"title":"param","description":"tournament object as set in url","type":{"type":"NameExpression","name":"Object"},"name":"tournament"},{"title":"param","description":"match object as set in url","type":{"type":"NameExpression","name":"Object"},"name":"match"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Scoring = function( container, config, tournament, match, parent )\n{\n    this.$container = $( container );\n    this.$navOption = this.$container.parent().parent().parent().find('.menu li').eq( this.$container.index() );\n    this.config = config;\n    this.tournament = tournament;\n    this.match = match;\n    this.parent = parent;\n    this.$container.attr( 'data-match-id', this.match.matchId );\n\n    this.templates = {\n        scoring: 'templates/mc/scoring.html'\n    };\n\n    this.setSubscriptions();\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"Subscribe to match timeline data events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Scoring.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCORING_UPDATE, function( e, params )\n    {\n        if( params.matchId === that.match.matchId &&\n            params.matchId === parseInt( that.$container.attr( 'data-match-id' ), undefined ) )\n        {\n            that.refreshScoring();\n        }\n    });\n}"},"refreshScoring":{"Documentation":{"description":"Refresh the scoring list on the DOM","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Scoring.prototype.refreshScoring = function()\n{\n    var that = this,\n        model = { match: this.match };\n\n    if( this.match.teams[0].scoring && _.keys( this.match.teams[0].scoring ) && _.keys( this.match.teams[0].scoring ).length ||\n        this.match.teams[1].scoring && _.keys( this.match.teams[1].scoring ) && _.keys( this.match.teams[1].scoring ).length )\n    {\n        PULSE.CLIENT.Template.publish(\n            this.templates.scoring,\n            this.$container,\n            model,\n            function(){\n                that.$navOption.show();\n                $('.matchDetailsToggle').attr('style', ''); // Show tablet match details toggle\n                that.parent.setViews();\n            }\n        );\n    }\n    else\n    {\n        that.$navOption.hide();\n    }\n\n}"}}},"Teams":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the team list component of the world rugby match centre"},{"title":"param","description":"jquery/selector/dom object for the component container","type":{"type":"NameExpression","name":"Object"},"name":"container"},{"title":"param","description":"object containing config from the widget attributes","type":{"type":"NameExpression","name":"Object"},"name":"config"},{"title":"param","description":"tournament object as set in url","type":{"type":"NameExpression","name":"Object"},"name":"tournament"},{"title":"param","description":"match object as set in url","type":{"type":"NameExpression","name":"Object"},"name":"match"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Teams = function( container, config, tournament, match, parent )\n{\n    this.$container = $( container );\n    this.$navOption = this.$container.parent().parent().parent().find('.menu li').eq( this.$container.index() );\n    this.config = config;\n    this.tournament = tournament;\n    this.match = match;\n    this.parent = parent;\n    this.$container.attr( 'data-match-id', this.match.matchId );\n\n    this.templates = {\n        fifteens: 'templates/mc/lineups.html',\n        sevens: 'templates/mc/lineups-sevens.html'\n    };\n\n    this.setSubscriptions();\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"Subscribe to match timeline data events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Teams.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCORING_UPDATE, function( e, params )\n    {\n        if( params.matchId === that.match.matchId &&\n            params.matchId === parseInt( that.$container.attr( 'data-match-id' ), undefined ) )\n        {\n            that.refreshTeams();\n        }\n    });\n}"},"refreshTeams":{"Documentation":{"description":"Refresh team lists on the DOM","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Teams.prototype.refreshTeams = function()\n{\n    var that = this,\n        model = { match: this.match },\n        template = this.getFormat() === '15s' ? this.templates.fifteens : this.templates.sevens;\n\n    if( this.match.teams[0].teamList &&\n        this.match.teams[0].teamList.list &&\n        this.match.teams[1].teamList &&\n        this.match.teams[1].teamList.list )\n    {\n        PULSE.CLIENT.Template.publish(\n            template,\n            this.$container,\n            model,\n            function(){\n                that.$navOption.show();\n                $('.matchDetailsToggle').attr('style', ''); // Show tablet match details toggle\n                that.parent.setViews();\n\n            }\n        );\n    }\n    else\n    {\n        that.$navOption.hide();\n    }\n}"},"getFormat":{"Documentation":{"description":"Determine whether sport is 7s or 15s","tags":[{"title":"return","description":"Format string","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.MC.Teams.prototype.getFormat = function()\n{\n    if( ( this.match.events ) && ( this.match.events.length > 0 ) && ( this.match.events[0].sport === 'mrs' || this.match.events[0].sport === 'wrs' ) )\n    {\n        return '7s';\n    }\n    else\n    {\n        return '15s';\n    }\n}"}}},"Timeline":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the timeline component of the world rugby match centre"},{"title":"param","description":"jquery/selector/dom object for the component container","type":{"type":"NameExpression","name":"Object"},"name":"container"},{"title":"param","description":"object containing config from the widget attributes","type":{"type":"NameExpression","name":"Object"},"name":"config"},{"title":"param","description":"tournament object as set in url","type":{"type":"NameExpression","name":"Object"},"name":"tournament"},{"title":"param","description":"match object as set in url","type":{"type":"NameExpression","name":"Object"},"name":"match"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Timeline = function( container, config, tournament, match, parent )\n{\n    this.$container = $( container );\n    this.$navOption = this.$container.parent().parent().parent().find('.menu li').eq( this.$container.index() );\n    this.config = config;\n    this.tournament = tournament;\n    this.match = match;\n    this.parent = parent;\n    this.$container.attr( 'data-match-id', this.match.matchId );\n\n    this.eventsToRender = [ 'Try', 'Con', 'Pen', 'M Pen', 'M Con', 'DG', 'Sub', 'Sub Off', 'Sub On', 'YC', 'RC', 'MS', 'KCK', 'KCMK' ];\n\n    this.templates = {\n        timeline: 'templates/mc/timeline.html'\n    };\n\n    this.setSubscriptions();\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"Subscribe to match timeline data events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Timeline.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.TIMELINE_UPDATE, function( e, params )\n    {\n        if( params.matchId === that.match.matchId &&\n            params.matchId === parseInt( that.$container.attr( 'data-match-id' ), undefined ) )\n        {\n            that.refreshTimeline();\n        }\n    });\n}"},"refreshTimeline":{"Documentation":{"description":"Refreshes the timeline on the DOM","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Timeline.prototype.refreshTimeline = function()\n{\n    this.match.timeline = this.match.filterEventsbyGroup( this.eventsToRender );\n    var that = this,\n        model = { match: this.match };\n\n    if( this.match.timeline.length )\n    {\n        PULSE.CLIENT.Template.publish(\n            this.templates.timeline,\n            this.$container,\n            model,\n            function(){\n                that.$navOption.show();\n                $('.matchDetailsToggle').attr('style', ''); // Show tablet match details toggle\n                that.parent.setViews();\n            }\n        );\n    }\n    else\n    {\n        that.$navOption.hide();\n    }\n}"}},"Main":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.MC.Timeline.Main"},{"title":"param","description":null,"type":null,"name":"$container"},{"title":"param","description":null,"type":null,"name":"config"},{"title":"param","description":null,"type":null,"name":"tournament"},{"title":"param","description":null,"type":null,"name":"match"},{"title":"param","description":null,"type":null,"name":"$parent"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Timeline.Main = function( $container, config, tournament, match, $parent )\n{\n    this.$container = $container;\n    this.config = config || {};\n\n    this.$matchCentre = $parent\n\n    this.tournament = tournament;\n    this.match = match;\n\n    this.templates = {\n        main : 'templates/match/timeline/main.html',\n        timeline : 'templates/match/timeline/timeline-list.html'\n    };\n\n    this.expanded = false;\n\n    this.init = false;\n    this.active = false;\n\n    if ( !this.match )\n    {\n        var matchId = this.config['data-match-id'];\n        this.match = new PULSE.CLIENT.RUGBY.Match( this.tournament, matchId );\n    }\n}","prototype":{"initTimeline":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Timeline.Main.prototype.initTimeline = function()\n{\n    if ( this.match && !this.init )\n    {\n        this.init = true;\n\n        PULSE.CLIENT.Template.publish(\n            this.templates.main,\n            this.$container\n        );\n\n        // Set timeline events to render and to expand.\n        this.eventsToRender = [ 'Try', 'Con', 'Pen', 'M Pen', 'M Con', 'DG', 'Sub', 'Sub Off', 'Sub On', 'YC', 'RC', 'MS', 'KCK', 'KCMK' ];\n        this.eventCssClass = {\n            'Try' : 'try',\n            'Con' : 'conversion',\n            'Pen' : 'penalty',\n            'M Pen' : 'misspen',\n            'M Con' : 'misscon',\n            'DG' : 'dropgoal',\n            'Substitution' : 'substitution',\n            'Sub' : 'substitution',\n            'Sub On' : 'substitution',\n            'Sub Off' : 'substitution',\n            'YC' : 'yellow',\n            'RC' : 'red',\n            'KCK' : 'kickcomp',\n            'KCMK' : 'kickcompmiss'\n        };\n        this.eventsToExpand = [ 'Try', 'Con', 'Pen', 'DG' ];\n\n        this.$timelineContainer = this.$container.find( '.timelineListContainer' );\n        this.timelinePlayerContainer = '.timelinePlayerContainer';\n\n        this.$detailsContainer = this.$container.find( '.detailsContainer' );\n\n        this.setListeners();\n        this.setSubscriptions();\n\n        if ( !this.match.timelineLoaded )\n        {\n            this.match.prepareTimelineData( { start: true, interval: 30 } );\n        }\n        else\n        {\n            this.startTimelineEvents();\n        }\n        if ( !this.match.scoringLoaded )\n        {\n            this.match.prepareScoringData( { start: true, interval: 30 } );\n        }\n        else\n        {\n            this.startTimelineEvents();\n        }\n    }\n}"},"startTimelineEvents":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Timeline.Main.prototype.startTimelineEvents = function()\n{\n    if ( !this.timelineEvents )\n    {\n        this.timelineEvents = new PULSE.CLIENT.RUGBY.MC.Timeline.Events( this.$detailsContainer, this.match, this.tournament );\n    }\n}"},"setSubscriptions":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"bacon"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Timeline.Main.prototype.setSubscriptions = function(bacon)\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCORING_UPDATE, function( e, params )\n    {\n        if( params.matchId === that.match.matchId )\n        {\n            that.startTimelineEvents();\n            that.refreshTimeline();\n        }\n    });\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.TIMELINE_UPDATE, function( e, params )\n    {\n        if( params.matchId === that.match.matchId )\n        {\n            that.refreshTimeline();\n        }\n    });\n}"},"refreshTimeline":{"Documentation":{"description":"Render the timeline of events, only showing certain events, specified by 'eventsToRender'","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Timeline.Main.prototype.refreshTimeline = function()\n{\n    if ( this.active && this.match.timelineLoaded && this.match.scoringLoaded )\n    {\n        this.renderAttempt = true;\n        // Only render if expanded view is not open\n        if ( !this.expanded )\n        {\n            var events = this.match.filterEventsbyGroup( this.eventsToRender );\n            // Convert sub off/ sub on events into a single substitution event\n            this.events = this.match.makeSubEvents( events );\n\n            this.events.reverse();\n            PULSE.CLIENT.Template.publish(\n                this.templates.timeline,\n                this.$timelineContainer,\n                {\n                    match: this.match,\n                    events : this.events,\n                    eventsToExpand : this.eventsToExpand,\n                    eventCssClass : this.eventCssClass\n                }\n            );\n            this.renderAttempt = false;\n        }\n    }\n}"},"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Timeline.Main.prototype.setListeners = function()\n{\n    var that = this;\n\n    //When the user clicks on each timeline row, open the expanded view\n    this.$timelineContainer.on( 'click', this.timelinePlayerContainer, function( e, params )\n    {\n        e.preventDefault();\n\n        if ( ! that.expanded )\n        {\n            that.expanded = true;\n            $( this ).addClass( 'expandedShow' );\n\n            $( 'body' ).addClass( 'expandedView' );\n\n            var index = $( this ).data( 'index' );\n            var group = $( this ).data( 'group' );\n            var secs = $( this ).data( 'secs' );\n\n            // Check that the event that is clicked on is the correct event in the data and if so render the event.\n            if ( that.events[ index ] && that.events[ index ].group === group && that.events[ index ].time.secs === secs )\n            {\n                that.timelineEvents.renderEvent( that.events[ index ] );\n            }\n        }\n        else\n        {\n            that.expanded = false;\n            if ( that.init )\n            {\n                that.timelineEvents.deactivate();\n            }\n            $( 'body' ).removeClass( 'expandedView' );\n            $( this ).removeClass( 'expandedShow' );\n            if ( that.renderAttempt )\n            {\n                that.refreshTimeline();\n            }\n        }\n\n    } );\n}"},"activate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Timeline.Main.prototype.activate = function()\n{\n    this.active = true;\n    if ( !this.init )\n    {\n        this.initTimeline();\n    }\n    this.refreshTimeline();\n}"},"deactivate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Timeline.Main.prototype.deactivate = function()\n{\n    this.active = false;\n    this.$container.hide();\n}"}}},"Events":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.MC.Timeline.Events"},{"title":"param","description":null,"type":null,"name":"$container"},{"title":"param","description":null,"type":null,"name":"match"},{"title":"param","description":null,"type":null,"name":"tournament"},{"title":"param","description":null,"type":null,"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Timeline.Events = function( $container, match, tournament, config  )\n{\n    this.$container = $container;\n    this.config = config || {};\n\n    this.match = match;\n\n    this.active = true;\n\n    this.imageSize = 140;\n\n    if ( this.config && this.config.imageSize )\n    {\n        this.imageSize = this.config.imageSize;\n    }\n\n    this.templates = {\n        expanded : 'templates/match/timeline/expanded.html',\n        stats : 'templates/match/timeline/stats.html'\n    };\n\n    this.tournament = tournament;\n\n    if ( !this.match )\n    {\n        var matchId = this.config['data-match-id'];\n        this.match = new PULSE.CLIENT.RUGBY.Match( this.tournament, matchId );\n    }\n\n    if ( this.match )\n    {\n        if ( !this.tournament )\n        {\n            this.tournament = this.match.tournament;\n        }\n\n        // Mapping of event types to { metric : stat feed metric, title : title of all stats, statLabel, label for individual stat }\n        this.eventToStat = {\n            'Try' : { metric : 'tries', playerMetric : 'Tries', title : PULSE.I18N.lookup( 'label.rugby.stat.toptryscorers' ) + ' ' + PULSE.I18N.lookup( 'widget.player.stats.event.' + this.tournament.tournamentName ), statLabel : PULSE.I18N.lookup( 'label.rugby.tries' ) },\n            'Con' : { metric : 'conversions', playerMetric : 'Conversions', title : PULSE.I18N.lookup( 'label.rugby.stat.topconversionscorers' ) + ' ' + PULSE.I18N.lookup( 'widget.player.stats.event.' + this.tournament.tournamentName ), statLabel : PULSE.I18N.lookup( 'label.rugby.conversions' ) },\n            'Pen' : { metric : 'penalties', playerMetric : 'Penalties', title : PULSE.I18N.lookup( 'label.rugby.stat.toppenaltyscorers' ) + ' ' + PULSE.I18N.lookup( 'widget.player.stats.event.' + this.tournament.tournamentName ), statLabel : PULSE.I18N.lookup( 'label.rugby.penalties' ) },\n            'DG' : { metric : 'dropgoals', playerMetric : 'DropGoals', title : PULSE.I18N.lookup( 'label.rugby.stat.topdropgoalscorers' ) + ' ' + PULSE.I18N.lookup( 'widget.player.stats.event.' + this.tournament.tournamentName ), statLabel : PULSE.I18N.lookup( 'label.rugby.dropgoals' ) }\n        }\n\n        this.statsContainer = '.timelineStatsContainer';\n\n        this.statLimit = 3;\n\n        this.setSubscriptions();\n\n        this.topPlayers = new PULSE.CLIENT.RUGBY.TopPlayers( this.tournament );\n\n        this.expanded = false;\n    }\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Timeline.Events.prototype.setSubscriptions = function()\n{\n    var that = this\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_TOPPLAYERS.STATS_UPDATE, function( e, params )\n    {\n        if ( that.expanded )\n        {\n            var playerStats = that.checkPlayerStats();\n            var allStats = that.checkTopStats();\n            if ( playerStats && allStats )\n            {\n                that.renderTopStats( allStats, playerStats );\n            }\n        }\n    });\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_PLAYER.STATS_UPDATE, function( e, params )\n    {\n        if( that.expanded && that.playerId && params.id === that.playerId )\n        {\n            var playerStats = that.checkPlayerStats();\n            var allStats = that.checkTopStats();\n            if ( playerStats && allStats )\n            {\n                that.renderTopStats( allStats, playerStats );\n            }\n        }\n    });\n}"},"renderEvent":{"Documentation":{"description":"Renders information about the timeline event","tags":[{"title":"param","description":"Timeline event","type":{"type":"NameExpression","name":"Object"},"name":"thisEvent"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Timeline.Events.prototype.renderEvent = function( thisEvent )\n{\n    var that = this;\n\n    PULSE.CLIENT.Template.publish(\n        this.templates.expanded,\n        this.$container,\n        {\n            match: this.match,\n            thisEvent : thisEvent,\n            imageSize : this.imageSize\n        }\n    );\n\n    this.activate();\n    this.getTopStats( thisEvent );\n}"},"getTopStats":{"Documentation":{"description":"Tries to find the top stats for a given event. If no stats are found then the stat feed is started","tags":[{"title":"param","description":"Timeline event","type":{"type":"NameExpression","name":"Object"},"name":"thisEvent"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Timeline.Events.prototype.getTopStats = function( thisEvent )\n{\n    this.statInfo = this.eventToStat[ thisEvent.group ];\n\n    // Find career stats for the event player\n    this.playerId = thisEvent.playerId;\n    this.teamIndex = thisEvent.teamIndex;\n    var careerStats = this.checkPlayerStats();\n    if ( !careerStats )\n    {\n        this.match.tournament.players[ this.playerId ].generateCareerStats( 'event', 'event', this.tournament.tournamentName );\n    }\n\n    // Find all time stats for event type\n    this.allStatParams = [ 'event', this.statInfo.metric, 'event', this.tournament.tournamentName ];\n    var allStats = this.checkTopStats();\n    if ( !allStats )\n    {\n        this.topPlayers.getTopPlayersStatsData( 'event', this.statInfo.metric, { event : this.tournament.tournamentName } );\n    }\n\n    if ( allStats && careerStats )\n    {\n        this.renderTopStats( allStats, careerStats );\n    }\n}"},"checkTopStats":{"Documentation":{"description":"Check that the top stats for a given - scope, metric and paramter exist","tags":[{"title":"return","description":"Return a list of stats if it exists","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.MC.Timeline.Events.prototype.checkTopStats = function()\n{\n    if ( this.allStatParams )\n    {\n        return this.topPlayers.findTopPlayerStats( this.allStatParams[ 0 ], this.allStatParams[ 1 ], this.allStatParams[ 2 ], this.allStatParams[ 3 ] );\n    }\n    return undefined;\n}"},"checkPlayerStats":{"Documentation":{"description":"Check that a players career stats exist","tags":[{"title":"return","description":"Return a list of stats if it exists","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.MC.Timeline.Events.prototype.checkPlayerStats = function()\n{\n    return this.match.tournament.players[ this.playerId ].getPlayerStatsForType( 'event', 'event', this.tournament.tournamentName );\n}"},"renderTopStats":{"Documentation":{"description":"Render top stats","tags":[{"title":"param","description":"List of stats","type":{"type":"NameExpression","name":"Array"},"name":"stats"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Timeline.Events.prototype.renderTopStats = function( allStats, careerStats )\n{\n    if ( this.expanded )\n    {\n        var limit = this.statLimit;\n\n        if ( allStats.length < limit )\n        {\n            limit = allStats.length;\n        }\n\n        var careerStat = careerStats[ this.statInfo.playerMetric ];\n\n        PULSE.CLIENT.Template.publish(\n            this.templates.stats,\n            this.$container.find( this.statsContainer ),\n            {\n                stats: allStats,\n                teamIndex : this.teamIndex,\n                title : this.statInfo.title,\n                metric : this.statInfo.statLabel,\n                limit : limit,\n                careerStat : careerStat,\n                playerId : this.playerId,\n                match : this.match\n            }\n        );\n    }\n}"},"activate":{"Documentation":{"description":"Activates the expanded view of the timeline event","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Timeline.Events.prototype.activate = function()\n{\n    this.expanded = true;\n    this.$container.show();\n}"},"deactivate":{"Documentation":{"description":"Deactivates the expanded view of the timeline event","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Timeline.Events.prototype.deactivate = function()\n{\n    this.expanded = false;\n    this.$container.hide();\n}"}}}},"Lineups":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.MC.Lineups"},{"title":"param","description":null,"type":null,"name":"$container"},{"title":"param","description":null,"type":null,"name":"config"},{"title":"param","description":null,"type":null,"name":"tournament"},{"title":"param","description":null,"type":null,"name":"match"},{"title":"param","description":null,"type":null,"name":"$parent"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Lineups = function( $container, config, tournament, match, $parent )\n{\n    this.$container = $container;\n    this.config = config || {};\n\n    this.tournament = tournament;\n    this.match = match;\n\n    this.$matchCentre = $parent\n\n    this.imageSize = config.imageSize || 140;\n\n    this.templates = {\n        main : 'templates/match/lineups/main.html',\n        list : 'templates/match/lineups/lineups-list.html',\n        expanded : {\n            players : 'templates/match/lineups/expanded/players.html',\n            official : 'templates/match/lineups/expanded/official.html',\n            mascots : 'templates/match/lineups/expanded/mascots.html'\n        },\n        stats : 'templates/match/lineups/stats.html'\n    };\n\n    if ( !this.match )\n    {\n        var matchId = this.config['data-match-id'];\n        this.match = new PULSE.CLIENT.RUGBY.Match( this.tournament, matchId );\n    }\n\n    this.active = false;\n    this.init = false;\n    this.expanded = false;\n    this.hasMatchStats = false;\n    this.scrollInit = false;\n}","prototype":{"initLineups":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Lineups.prototype.initLineups = function()\n{\n    if ( this.match && !this.init )\n    {\n        PULSE.CLIENT.Template.publish(\n            this.templates.main,\n            this.$container\n        );\n\n        this.$lineupContainer = this.$container.find( '.lineupListContainer' );\n        this.lineupPlayerContainer = '.lineupPlayerContainer';\n\n        this.matchType = 'mru';\n\n        this.feedsCheck = {};\n\n        // Match type used to get career stats\n        if ( this.match.events && this.match.events.length > 0 && this.match.events[0].sport )\n        {\n            this.matchType = this.match.events[0].sport;\n        }\n\n        this.$detailsContainer = this.$container.find( '.detailsContainer' );\n        this.lineupStatsToggle = '.lineupStatsToggle';\n        this.matchStatsContainer = '.lineupMatchStatsContainer';\n        this.careerStatsContainer = '.lineupCareerStatsContainer';\n\n        this.setListeners();\n        this.setSubscriptions();\n        if ( !this.match.scoringLoaded )\n        {\n            this.match.prepareScoringData( { start: true, interval: 30 } );\n        }\n\n        if( this.match.scoringLoaded &&\n            this.match.getMatchStatus() !== 'U' &&\n            !this.match.timelineLoaded )\n        {\n            this.match.prepareTimelineData( { start: true, interval: 30 } );\n        }\n        this.init = true;\n    }\n}"},"setSubscriptions":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Lineups.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCORING_UPDATE, function( e, params )\n    {\n        if( params.matchId === that.match.matchId )\n        {\n            that.refreshLineups();\n            if( that.match.getMatchStatus() !== 'U' && !that.match.timelineLoaded )\n            {\n                that.match.prepareTimelineData( { start: true, interval: 30 } );\n            }\n        }\n    });\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.TIMELINE_UPDATE, function( e, params )\n    {\n        if( params.matchId === that.match.matchId )\n        {\n            that.refreshLineups();\n        }\n    });\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.STATS_UPDATE, function( e, params )\n    {\n        if( params.matchId === that.match.matchId )\n        {\n            that.hasMatchStats = true;\n            that.renderMatchStats();\n        }\n    });\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_PLAYER.STATS_UPDATE, function( e, params )\n    {\n        if( that.players && that.expanded && ( $.inArray( params.id, that.players ) > -1 ) )\n        {\n            that.getCareerStats();\n        }\n    });\n}"},"getStatsModel":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"pos"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Lineups.prototype.getStatsModel = function( pos )\n{\n    var statsModel = [];\n    switch( pos )\n    {\n        case 'general':\n            statsModel = [\n                { label : PULSE.I18N.lookup( 'widget.rankings.tableheader.points.long' ), statId : 'Points' },\n                { label : PULSE.I18N.lookup( 'label.rugby.tries' ), statId : 'Tries' },\n                { label : PULSE.I18N.lookup( 'label.rugby.stat.minutesplayed' ), statId : 'MinutesPlayedTotal' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.metresmade' ), statId : 'Metres' },\n                { label : PULSE.I18N.lookup( 'label.rugby.stat.tackles' ), statId : 'Tackles' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.tacklesuccess' ), statId : 'TackleSuccess', percent : true },\n                { label : PULSE.I18N.lookup( 'label.match.stats.handlingerrors' ), statId : 'HandlingError' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.redcards' ), statId : 'RedCards' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.yellowcards' ), statId : 'YellowCards' }\n            ];\n            break;\n        case 'career':\n            statsModel =  [\n                { label : PULSE.I18N.lookup( 'label.match.stats.matches' ), statId : 'Matches' },\n                { label : PULSE.I18N.lookup( 'widget.rankings.tableheader.points.long' ), statId : 'Points' },\n                { label : PULSE.I18N.lookup( 'label.rugby.tries' ), statId : 'Tries' },\n                { label : PULSE.I18N.lookup( 'label.rugby.penalties' ), statId : 'Penalties' },\n                { label : PULSE.I18N.lookup( 'label.rugby.conversions' ), statId : 'Conversions' },\n                { label : PULSE.I18N.lookup( 'label.rugby.dropgoals' ), statId : 'DropGoals' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.redcards' ), statId : 'RedCards' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.yellowcards' ), statId : 'YellowCards' }\n            ];\n            break;\n        case 'FB':\n            statsModel = [\n                { label : PULSE.I18N.lookup( 'label.match.stats.kicksfromhand' ), statId : 'KicksFromHand' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.offloads' ), statId : 'Offload' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.defendersbeaten' ), statId : 'DefendersBeaten' },\n                { label : PULSE.I18N.lookup( 'label.rugby.penalties' ), statId : 'Penalties' },\n                { label : PULSE.I18N.lookup( 'label.rugby.conversions' ), statId : 'Conversions' },\n                { label : PULSE.I18N.lookup( 'label.rugby.dropgoals' ), statId : 'DropGoals' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.kickpossessionsretained' ), statId : 'KickPossessionRetained' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.cleanbreaks' ), statId : 'CleanBreaks' }\n            ];\n            break;\n        case 'WI':\n        case 'CE':\n            statsModel = [\n                { label : PULSE.I18N.lookup( 'label.match.stats.carriescrossedgainline' ), statId : 'CarriesCrossedGainLine' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.kicksfromhand' ), statId : 'KicksFromHand' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.offloads' ), statId : 'Offload' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.defendersbeaten' ), statId : 'DefendersBeaten' },\n                { label : PULSE.I18N.lookup( 'label.rugby.penalties' ), statId : 'Penalties' },\n                { label : PULSE.I18N.lookup( 'label.rugby.conversions' ), statId : 'Conversions' },\n                { label : PULSE.I18N.lookup( 'label.rugby.dropgoals' ), statId : 'DropGoals' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.cleanbreaks' ), statId : 'CleanBreaks' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.turnoverwon' ), statId : 'TurnoverWon' }\n            ];\n            break;\n        case 'FH':\n        case 'SH':\n            statsModel = [\n                { label : PULSE.I18N.lookup( 'label.match.stats.kicksfromhand' ), statId : 'KicksFromHand' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.runs' ), statId : 'Runs' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.passes' ), statId : 'Passes' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.offloads' ), statId : 'Offload' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.cleanbreaks' ), statId : 'CleanBreaks' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.defendersbeaten' ), statId : 'DefendersBeaten' },\n                { label : PULSE.I18N.lookup( 'label.rugby.penalties' ), statId : 'Penalties' },\n                { label : PULSE.I18N.lookup( 'label.rugby.conversions' ), statId : 'Conversions' },\n                { label : PULSE.I18N.lookup( 'label.rugby.dropgoals' ), statId : 'DropGoals' }\n            ];\n            break;\n        case 'FL':\n        case 'N8':\n            statsModel = [\n                { label : PULSE.I18N.lookup( 'label.match.stats.carriescrossedgainline' ), statId : 'CarriesCrossedGainLine' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.turnoverwon' ), statId : 'TurnoverWon' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.lineoutswon' ), statId : 'LineoutsWon' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.lineoutsteals' ), statId : 'LineoutWonSteal' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.penaltiesconcededkillingruck' ), statId : 'PenaltyConcededKillingRuck' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.kickschargeddown' ), statId : 'KickChargedDown' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.defendersbeaten' ), statId : 'DefendersBeaten' }\n            ];\n            break;\n        case 'SR':\n            statsModel = [\n                { label : PULSE.I18N.lookup( 'label.match.stats.carriescrossedgainline' ), statId : 'CarriesCrossedGainLine' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.turnoverwon' ), statId : 'TurnoverWon' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.lineoutswon' ), statId : 'LineoutsWon' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.lineoutsteals' ), statId : 'LineoutWonSteal' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.kickschargeddown' ), statId : 'KickChargedDown' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.cleanbreaks' ), statId : 'CleanBreaks' }\n            ];\n            break;\n        case 'HK':\n            statsModel = [\n                { label : PULSE.I18N.lookup( 'label.match.stats.carriescrossedgainline' ), statId : 'CarriesCrossedGainLine' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.turnoverwon' ), statId : 'TurnoverWon' },\n                { label : PULSE.I18N.lookup( 'label.match.starts.lineoutswononownthrow' ), statId : 'LineoutWonOwnThrow' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.kickschargeddown' ), statId : 'KickChargedDown' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.cleanbreaks' ), statId : 'CleanBreaks' }\n            ];\n            break;\n        case 'PR':\n            statsModel = [\n                { label : PULSE.I18N.lookup( 'label.match.stats.carriescrossedgainline' ), statId : 'CarriesCrossedGainLine' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.turnoverwon' ), statId : 'TurnoverWon' },\n                { label : PULSE.I18N.lookup( 'label.match.stats.penaltiesconcededatscrum' ), statId : 'PenaltyConcededScrumOffence' }\n            ];\n            break;\n        default:\n            statsModel = [];\n            break;\n    }\n    return statsModel\n}"},"refreshLineups":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Lineups.prototype.refreshLineups = function()\n{\n    var that = this;\n\n    this.renderAttempt = true;\n    if( this.match.teams && this.match.teams.length > 1 && this.match.teams[0].teamList &&\n        this.match.teams[0].teamList &&\n        this.match.teams[1].teamList &&\n        this.match.teams[1].teamList && ( !this.expanded ) && this.active && this.match.scoringLoaded /* && this.match.timelineLoaded */ )\n    {\n        var subsOn = this.match.getPlayerMapFromEventArray( this.match.filterTimeline( { 'type' : 'Sub On' } ) );\n        var subsOff = this.match.getPlayerMapFromEventArray( this.match.filterTimeline( { 'type' : 'Sub Off' } ) );\n\n        var hasLineup = false;\n        if ( ( this.match.teams[ 0 ] && this.match.teams[ 0 ].teamList && this.match.teams[ 0 ].teamList.orderedList &&\n            this.match.teams[ 0 ].teamList.orderedList.length > 15 ) ||\n            ( this.match.teams[ 1 ] && this.match.teams[ 1 ].teamList && this.match.teams[ 1 ].teamList.orderedList &&\n                this.match.teams[ 1 ].teamList.orderedList.length > 15 ) ||\n            ( this.match.officials && this.match.officials.length > 0 ) ||\n            ( this.match.mascots && this.match.mascots.length > 0 ) )\n        {\n            hasLineup = true;\n        }\n\n        var cards = this.match.getPlayerCardsMap();\n\n        PULSE.CLIENT.Template.publish(\n            this.templates.list,\n            this.$lineupContainer,\n            {\n                match: this.match,\n                subsOn : subsOn,\n                subsOff : subsOff,\n                hasLineup : hasLineup,\n                imageSize : this.imageSize,\n                cards : cards\n            }\n        );\n        if( $( window ).width() < 1000 && !this.scrollInit )\n        {\n            this.scrollInit = true;\n            $(\"body\").scrollTop(0);\n        }\n        this.renderAttempt = false;\n    }\n    if ( this.expanded )\n    {\n        var toggles = this.$detailsContainer.find( this.lineupStatsToggle );\n        // Render match stats if the match has started/is complete, otherwise render\n        // career stats\n        if ( this.match.getMatchStatus() != 'U' )\n        {\n            if ( toggles.length > 0 )\n            {\n                $( toggles[ 0 ] ).removeClass( 'inactive' );\n            }\n        }\n    }\n}"},"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Lineups.prototype.setListeners = function()\n{\n    var that = this;\n\n    //When the user clicks on each lineup row, open the expanded view\n    this.$lineupContainer.on( 'click', this.lineupPlayerContainer, function( e, params )\n    {\n        e.preventDefault();\n\n        if ( ! that.expanded )\n        {\n            that.position = {};\n            that.expanded = true;\n            $( this ).addClass( 'expandedShow' );\n            var players = $( this ).data( 'players' );\n            if ( players )\n            {\n                that.players = players.split( ',' );\n                for ( var i = 0; i < that.players.length; i++ )\n                {\n                    that.players[ i ] = parseInt( that.players[ i ] );\n                }\n                that.position.position = $( this ).data( 'position' );\n                that.position.label = $( this ).data( 'position-label' );\n            }\n            var mascots = $( this ).data( 'mascots' );\n            var official = $( this ).data( 'official' );\n\n            $( 'body' ).addClass( 'expandedView' );\n\n            // Check if player/offical/mascot expanded view is required. If players then render\n            // player expanded view and find stats.\n            if ( players )\n            {\n                PULSE.CLIENT.Template.publish(\n                    that.templates.expanded.players,\n                    that.$detailsContainer,\n                    {\n                        match: that.match,\n                        players : that.players,\n                        position : that.position.label,\n                        imageSize : that.imageSize\n                    }\n                );\n\n                var toggles = that.$detailsContainer.find( that.lineupStatsToggle );\n                // Render match stats if the match has started/is complete, otherwise render\n                // career stats\n                if ( that.match.getMatchStatus() != 'U' )\n                {\n                    if ( toggles.length > 0 )\n                    {\n                        $( toggles[ 0 ] ).removeClass( 'inactive' );\n                    }\n                    that.$detailsContainer.find( that.matchStatsContainer ).removeClass( 'inactive' );\n                    that.getMatchStats();\n                }\n                else\n                {\n                    that.$detailsContainer.find( that.matchStatsContainer ).addClass( 'inactive' );\n                    if ( toggles.length > 1 )\n                    {\n                        $( toggles[ 0 ] ).addClass( 'inactive' );\n                        $( toggles [ 1 ] ).click();\n                    }\n                }\n            }\n            else if ( official )\n            {\n                var officialObject = that.match.getOfficial( official );\n                PULSE.CLIENT.Template.publish(\n                    that.templates.expanded.official,\n                    that.$detailsContainer,\n                    {\n                        match: that.match,\n                        official : officialObject,\n                        imageSize : that.imageSize\n                    }\n                );\n            }\n            else if ( mascots )\n            {\n                mascots = mascots + '';\n                var mascotsObjects = mascots.split( ',' );\n                for ( var i = 0; i < mascotsObjects.length; i++ )\n                {\n                    mascotsObjects[ i ] = that.match.getMascot( mascotsObjects[ i ] );\n                }\n                PULSE.CLIENT.Template.publish(\n                    that.templates.expanded.mascots,\n                    that.$detailsContainer,\n                    {\n                        match: that.match,\n                        mascots : mascotsObjects,\n                        imageSize : 'mascots'\n                    }\n                );\n            }\n\n            that.$detailsContainer.show();\n        }\n        else\n        {\n            that.expanded = false;\n            $( 'body' ).removeClass( 'expandedView' );\n            $( this ).removeClass( 'expandedShow' );\n            that.$detailsContainer.hide();\n            if ( that.renderAttempt )\n            {\n                that.refreshLineups();\n            }\n        }\n\n    } );\n\n    // Toggle between match & career stats for expanded line up view\n    this.$detailsContainer.on( 'click', this.lineupStatsToggle, function( e, params )\n    {\n        e.preventDefault();\n        if ( ! $( this ).hasClass( 'inactive' ) )\n        {\n            var toggles = that.$detailsContainer.find( that.lineupStatsToggle );\n            for ( var i = 0; i < toggles.length; i++ )\n            {\n                $( toggles[ i ] ).removeClass( 'active' );\n            }\n            $( this ).addClass( 'active' );\n            var index = $( this ).data( 'index' );\n\n\n            var $matchStatsContainer = that.$detailsContainer.find( that.matchStatsContainer );\n            var $careerStatsContainer = that.$detailsContainer.find( that.careerStatsContainer );\n\n            if ( index === 1 )\n            {\n                $matchStatsContainer.hide();\n                $careerStatsContainer.show();\n                that.getCareerStats();\n            }\n            else\n            {\n                $matchStatsContainer.show();\n                $careerStatsContainer.hide();\n                that.getMatchStats();\n            }\n        }\n    } );\n}"},"getMatchStats":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Lineups.prototype.getMatchStats = function()\n{\n    if ( !this.match.statsLoaded )\n    {\n        this.match.prepareStatsData( { start: true, interval: 60 } );\n    }\n    else\n    {\n        this.renderMatchStats()\n    }\n}"},"getCareerStats":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Lineups.prototype.getCareerStats = function()\n{\n    var hasStats = false;\n    var allCareerStats = true;\n    var theseStats = []\n    if ( this.players && this.expanded && this.active )\n    {\n        for ( var i = 0; i < this.players.length; i++ )\n        {\n            var careerStats = this.match.tournament.players[ this.players[ i ] ].getPlayerStatsForType( 'alltime', 'sport', this.matchType );\n            if ( !careerStats )\n            {\n                allCareerStats = false;\n                var feedName = 'stats-' + this.players[ i ] + 'alltime' + this.matchType;\n                if ( ! this.feedsCheck[ feedName ] )\n                {\n                    this.match.tournament.players[ this.players[ i ] ].generateCareerStats( 'alltime', 'sport', this.matchType );\n                    this.feedsCheck[ feedName ] = true;\n                }\n            }\n            else\n            {\n                theseStats.push( careerStats );\n            }\n        }\n        if ( allCareerStats )\n        {\n            this.renderCareerStats( theseStats );\n        }\n    }\n}"},"renderCareerStats":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"stats"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Lineups.prototype.renderCareerStats = function( stats )\n{\n    if ( this.expanded && this.players && this.active )\n    {\n        var statsModel = this.getStatsModel( 'career' );\n\n         var $container = this.$detailsContainer.find( this.careerStatsContainer );\n\n        this.renderStats( $container, statsModel, stats );\n    }\n}"},"renderMatchStats":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Lineups.prototype.renderMatchStats = function()\n{\n    if ( this.expanded && this.players && this.active )\n    {\n        var statsModel = this.getStatsModel( 'general' );\n        var posModel = this.getStatsModel( this.position.position );\n\n        statsModel = statsModel.concat( posModel );\n\n        var $container = this.$detailsContainer.find( this.matchStatsContainer );\n\n        this.renderStats( $container, statsModel );\n    }\n}"},"renderStats":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"$container"},{"title":"param","description":null,"type":null,"name":"statsModel"},{"title":"param","description":null,"type":null,"name":"passedStats"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Lineups.prototype.renderStats = function( $container, statsModel, passedStats )\n{\n    for ( var i = 0; i < statsModel.length; i++ )\n    {\n        var stats = [];\n        for ( var j = 0; j < this.players.length; j++ )\n        {\n            var stat;\n            if ( !passedStats )\n            {\n                stat = this.match.getPlayerStat( this.players[ j ], statsModel[ i ].statId );\n            }\n            else\n            {\n                if ( passedStats[ j ] )\n                {\n                    stat = this.getStat( passedStats[ j ], statsModel[ i ].statId );\n                }\n                else\n                {\n                    stat = 0;\n                }\n            }\n            if ( statsModel[ i ].percent )\n            {\n                stat = Math.round( stat * 100 );\n            }\n            stats.push( stat );\n        }\n        var largest = stats[ 0 ];\n        var index = 0;\n        if ( stats.length > 1 )\n        {\n            if ( stats[ 1 ] > largest )\n            {\n                index  = 1;\n            }\n            else if ( stats[ 1 ] === largest )\n            {\n                index = -1;\n            }\n        }\n        statsModel[ i ].stats = stats;\n        statsModel[ i ].largest = index;\n    }\n\n     PULSE.CLIENT.Template.publish(\n        this.templates.stats,\n        $container,\n        {\n            stats : statsModel\n        }\n    );\n}"},"getStat":{"Documentation":{"description":"Certain stats, when aggregated, are incorrect. Use this function for retrieving stats generated\nfrom more than one match so they can be recalculated correctly.","tags":[{"title":"param","description":"the stats for the player","type":{"type":"NameExpression","name":"Object"},"name":"playerStats"},{"title":"param","description":"the type of stats key (e.g., \"Tries\")","type":{"type":"NameExpression","name":"String"},"name":"statType"},{"title":"return","description":"the stat, or 0 if it can't be recalculated for whatever reason","type":{"type":"NameExpression","name":"Number"}}]},"Source":"PULSE.CLIENT.RUGBY.MC.Lineups.prototype.getStat = function( playerStats, statType )\n{\n    switch( statType )\n    {\n        case 'TackleSuccess':\n            playerStats[ 'MissedTackles' ] = playerStats[ 'MissedTackles' ] || 0;\n            if( playerStats[ 'Tackles' ] &&\n                playerStats[ 'Tackles' ] + playerStats[ 'MissedTackles' ] > 0 )\n            {\n                return playerStats[ 'Tackles' ] / ( playerStats[ 'Tackles' ] + playerStats[ 'MissedTackles' ] );\n            }\n            return 0;\n        case 'ConversionRate':\n            playerStats[ 'MissedConversions' ] = playerStats[ 'MissedConversions' ] || 0;\n            if( playerStats[ 'Conversions' ] &&\n                playerStats[ 'Conversions' ] + playerStats[ 'MissedConversions' ] > 0 )\n            {\n                return playerStats[ 'Conversions' ] / ( playerStats[ 'Conversions' ] + playerStats[ 'MissedConversions' ] );\n            }\n            return 0;\n\n        default:\n            return playerStats[ statType ] || 0;\n    }\n}"},"activate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Lineups.prototype.activate = function()\n{\n    this.active = true;\n    if ( !this.init )\n    {\n        this.initLineups();\n    }\n    this.refreshLineups();\n}"},"deactivate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Lineups.prototype.deactivate = function()\n{\n    this.active = false;\n    this.$container.hide();\n}"}}},"LiveAudio":{"Documentation":{"description":"Manages the audio button appearing after the 10-min pre-kick-off mark and removing itself once\nthe blog is closed.\n\nPlease note that this component doesn't stand alone from the MC and depends on it to start feeds.","tags":[{"title":"constructor","description":null,"type":null,"name":null},{"title":"param","description":"jQuery container Object","type":{"type":"NameExpression","name":"Object"},"name":"$container"},{"title":"param","description":"instance of a PULSE.CLIENT.RUGBY.Match object","type":{"type":"NameExpression","name":"Object"},"name":"match"},{"title":"param","description":"jQuery container of the blog","type":{"type":"NameExpression","name":"Object"},"name":"blog"}]},"Source":"PULSE.CLIENT.RUGBY.MC.LiveAudio = function( $container, match, $blog )\n{\n    this.$container = $container;\n    this.match = match;\n    this.$blog = $blog;\n    this.blogId = this.$blog.data( 'blog-id' );\n\n    if( this.$container.length )\n    {\n        this.canShowButton = true;\n        this.setSubscriptions();\n    }\n\n    var that = this;\n    this.checkTime = setInterval( function()\n    {\n        that.hideShow();\n    }, 60000 );\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.LiveAudio.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCORING_UPDATE, function( e, params )\n    {\n        if( params.matchId === that.match.matchId && that.canShowButton )\n        {\n            that.hideShow();\n        }\n    } );\n\n    this.$blog.on( PULSE.CLIENT.RUGBY.LIVE_BLOG_EVENTS.STATUS_UPDATE, function( e, params )\n    {\n        if( params.id === that.blogId && params.status === 'CLOSED' )\n        {\n            that.$container.remove();\n            that.stopCheckingTime();\n        }\n    } );\n}"},"hideShow":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.LiveAudio.prototype.hideShow = function()\n{\n    var TEN_MINUTES = 600000;\n    var now = new Date();\n\n    if( this.canShowButton )\n    {\n        var matchStart = this.match.getDate();\n        if( matchStart )\n        {\n            var shouldShow = matchStart - now <= TEN_MINUTES;\n            this.$container.toggle( shouldShow );\n\n            if( shouldShow )\n            {\n                this.stopCheckingTime();\n            }\n        }\n    }\n}"},"stopCheckingTime":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.LiveAudio.prototype.stopCheckingTime = function()\n{\n    if( this.checkTime )\n    {\n        clearInterval( this.checkTime );\n    }\n}"}}},"Substitutions":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.MC.Substitutions"},{"title":"param","description":null,"type":null,"name":"$container"},{"title":"param","description":null,"type":null,"name":"config"},{"title":"param","description":null,"type":null,"name":"tournament"},{"title":"param","description":null,"type":null,"name":"match"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Substitutions = function( $container, config, tournament, match  )\n{\n    this.$container = $container;\n    this.config = config || {};\n\n    this.tournament = tournament;\n    this.match = match;\n\n    this.template = 'templates/match/substitutions/substitutions-list.html';\n\n    this.init = false;\n    this.active = false;\n\n    if ( !this.match )\n    {\n        var matchId = this.config[ 'data-match-id' ];\n        this.match = new PULSE.CLIENT.RUGBY.Match( this.tournament, matchId );\n    }\n}","prototype":{"initSubstitutions":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Substitutions.prototype.initSubstitutions = function()\n{\n    if ( this.match  && !this.init )\n    {\n        this.setSubscriptions();\n        if ( !this.match.scoringLoaded )\n        {\n            this.match.prepareScoringData( { start: true, interval: 30 } );\n        }\n        else\n        {\n            this.refreshSubstitutions();\n        }\n        if( this.match.scoringLoaded &&\n            this.match.getMatchStatus() !== 'U' &&\n            !this.match.timelineLoaded )\n        {\n            this.match.prepareTimelineData( { start: true, interval: 30 } );\n        }\n        this.init = true;\n    }\n}"},"setSubscriptions":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Substitutions.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCORING_UPDATE, function( e, params )\n    {\n        if( params.matchId === that.match.matchId )\n        {\n            that.refreshSubstitutions();\n            if( that.match.getMatchStatus() !== 'U' && !that.match.timelineLoaded )\n            {\n                that.match.prepareTimelineData( { start: true, interval: 30 } );\n            }\n        }\n    });\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.TIMELINE_UPDATE, function( e, params )\n    {\n        if( params.matchId === that.match.matchId )\n        {\n            that.refreshSubstitutions();\n        }\n    });\n}"},"refreshSubstitutions":{"Documentation":{"description":"Render the substitutions in a match","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Substitutions.prototype.refreshSubstitutions = function()\n{\n    if ( this.active /* && this.match.timelineLoaded */ && this.match.scoringLoaded )\n    {\n        var events = this.match.filterEventsbyTypes( [ 'Sub Off', 'Sub On' ] );\n        // Convert sub off/ sub on events into a single substitution event\n        this.events = this.match.makeSubEvents( events );\n\n        // Create map fo players in the lineup to get player positions easily\n        var subMap = this.match.getPlayerMapForLineUp();\n        PULSE.CLIENT.Template.publish(\n            this.template,\n            this.$container,\n            {\n                match: this.match,\n                events : this.events,\n                subMap : subMap\n            }\n        );\n        this.$container.show();\n    }\n}"},"activate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Substitutions.prototype.activate = function()\n{\n    this.active = true;\n    if ( !this.init )\n    {\n        this.initSubstitutions();\n    }\n    this.refreshSubstitutions();\n}"},"deactivate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Substitutions.prototype.deactivate = function()\n{\n    this.active = false;\n    this.$container.hide();\n}"}}},"Insights":{"Card":{"Documentation":{"description":"An Insights card","tags":[{"title":"param","description":"the jQuery container","type":{"type":"NameExpression","name":"Object"},"name":"$container"},{"title":"param","description":"how many seconds this card is allowed to live","type":{"type":"NameExpression","name":"Number"},"name":"lifetime"},{"title":"param","description":"the Insights controller","type":{"type":"NameExpression","name":"Object"},"name":"parent"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.Card = function( $container, parent, name )\n{\n    this.CARD_LIFETIME = 20; //all cards have the default lifetime of 20s\n    this.name = name || 'default';\n\n    this.$container = $container;\n    this.lifetime = this.timeLeft = this.CARD_LIFETIME;\n    this.parent = parent;\n    this.match = this.parent.match;\n    this.urlFactory = this.match.urlGenerator;\n    this.tournament = this.match.tournament;\n\n    this.template = 'templates/match/insights/' + name + '.html';\n}","prototype":{"reset":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.MC.Insights.Card.prototype.reset"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.Card.prototype.reset = function()\n{\n    this.timeLeft = this.lifetime;\n}"},"prepare":{"Documentation":{"description":"Cards are notified to prepare before being shown; this function is called when this is the case","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.Card.prototype.prepare = function()\n{\n    // do nothing\n}"},"getModel":{"Documentation":{"description":"Retrieves and shapes the data for the card","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.Card.prototype.getModel = function()\n{\n    // all cards must have a model\n}"},"startTimer":{"Documentation":{"description":"Start the timer and record the start time\nInitialise the pie chart if not already initialised","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.Card.prototype.startTimer = function()\n{\n    if( !this.initialised )\n    {\n        this.timeLeft = this.lifetime;\n        this.initialised = true;\n    }\n    else\n    {\n        PULSE.CLIENT.Log( 'resuming ' + this.name + ' with ' + this.timeLeft + 's to go' );\n    }\n\n    this.animate = true;\n\n    var that = this;\n    this.cardInterval = setInterval( function()\n    {\n        if( that.timeLeft > 0 && that.animate )\n        {\n            that.timeLeft--;\n            if( !document.visibilityState || document.visibilityState === 'visible' )\n            {\n                that.setDuration( that.timeLeft );\n            }\n            if( that.timeLeft <= 0 )\n            {\n                that.expire();\n                clearInterval( that.cardInterval );\n            }\n        }\n\n        if( that.timeLeft === 5 )\n        {\n            that.parent.$container.trigger( 'card/about-to-expire', { card: that } );\n        }\n    }, 1000 );\n\n    // this.animationStart = new Date();\n    // this.request = window.requestAnimationFrame( this.tick.bind( this ) );\n}"},"pauseTimer":{"Documentation":{"description":"Pause the timer; try to cancel the animation frame","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.Card.prototype.pauseTimer = function( pausedByUser )\n{\n    // if( this.request )\n    // {\n    //     window.cancelAnimationFrame( this.request );\n    // }\n\n    if( this.cardInterval )\n    {\n        clearInterval( this.cardInterval );\n    }\n\n    // if there's only a third of the time left, not worth showing again, so kill the card\n    if( this.timeLeft > this.lifetime / 3 || pausedByUser )\n    {\n        this.pause();\n        return true;\n    }\n    else\n    {\n        this.timeLeft = 0;\n        // this.destroy();\n        return false;\n    }\n}"},"tick":{"Documentation":{"description":"The checks the difference between the last animation and the timestamp of the animation frame\nand if it's equal or more than a second calls itself; if the time left reaches 0, it stops","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.Card.prototype.tick = function()\n{\n    var now = new Date();\n    if( now - this.animationStart >= 1000 )\n    {\n        this.timeLeft -= Math.floor( ( now - this.animationStart ) / 1000 );\n        this.animationStart = now;\n        this.setDuration( this.timeLeft );\n    }\n\n    if( this.timeLeft > 0 && this.animate )\n    {\n        this.request = window.requestAnimationFrame( this.tick.bind( this ) );\n    }\n}"},"setDuration":{"Documentation":{"description":"Calculates how much to animate from the time left and redraws the canvas through the plugin","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.Card.prototype.setDuration = function( time )\n{\n    var percent = 100 - ( time * 100 / this.lifetime );\n}"},"expire":{"Documentation":{"description":"Triggers a notification letting the parent know that the time's up for this card","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.Card.prototype.expire = function()\n{\n    this.initialised = false;\n    this.parent.$container.trigger( 'card/expired', { card: this } );\n}"},"pause":{"Documentation":{"description":"Triggers a notification letting the parent know that the card's been paused","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.Card.prototype.pause = function()\n{\n    this.parent.$container.trigger( 'card/paused', { card: this } );\n}"},"ready":{"Documentation":{"description":"Triggers a notification letting the parent know that the card is ready to be shown","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.Card.prototype.ready = function()\n{\n    this.isReady = true;\n    this.parent.$container.trigger( 'card/ready', { card: this } );\n}"},"publish":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"callback"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.Card.prototype.publish = function( callback )\n{\n    // TODO: canShow() functionality to determine on a card-by-card basis if to publish the model or\n    // just directly expire because there's no relevant data to show\n    PULSE.CLIENT.Template.publish( this.template, this.$container, this.getModel(), function()\n    {\n        if( callback && _.isFunction( callback ) )\n        {\n            callback();\n        }\n    } );\n\n    var that = this;\n    var $imgContainer = this.$container.find( '[data-player-id]' );\n    // set to work with templates that have player photos and with templates that don't\n    if( $imgContainer.length > 0 )\n    {\n        $imgContainer.each( function()\n        {\n            var $this = $( this );\n            that.urlFactory.setPlayerImageLoader( $this.data( 'player-id' ), $this.data( 'size' ), $this, 'png' );\n        } );\n    }\n}"},"activate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.Card.prototype.activate = function()\n{\n    this.active = true;\n    this.animate = true;\n    PULSE.CLIENT.Log( this.name + ' activated' );\n    if( this.isReady )\n    {\n        this.publish();\n    }\n    else\n    {\n        this.prepare();\n    }\n}"},"deactivate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.Card.prototype.deactivate = function()\n{\n    this.active = false;\n    this.animate = false;\n    this.pauseTimer();\n}"}}},"Main":{"Documentation":{"description":"Insights controller - decides what cards to show when.","tags":[{"title":"constructor","description":null,"type":null,"name":null},{"title":"param","description":"jQuery container object","type":{"type":"NameExpression","name":"Object"},"name":"$container"},{"title":"param","description":"instance of PULSE.CLIENT.RUGBY.Match","type":{"type":"NameExpression","name":"Object"},"name":"match"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.Main = function( $container, match )\n{\n    this.$container = $container;\n    this.match = match;\n\n    this.SHOW_LIMIT = 1279;\n\n    /**\n     * Rendered cards\n     * @type {Array}\n     */\n    this.cards = [];\n\n    /**\n     * Stored cards - cards that don't need to be re-rendered, just updated; mapping of name to\n     * card object instance\n     * @type {Object}\n     */\n    this.storedCards = {};\n\n    /**\n     * These are the automatic card types that can be rendered; match event cards are not included\n     * @type {Array}\n     */\n    this.cardTypes = [ 'scrums', 'tackles-made', 'head-to-head', 'discipline', 'in-attack' ];\n\n    /**\n     * The card being shown at the time\n     * @type {PULSE.CLIENT.RUGBY.MC.Insights.Card}\n     */\n    this.current = undefined;\n\n    var windowWidth = $( window ).width();\n    if( windowWidth > this.SHOW_LIMIT )\n    {\n        this.setSubscriptions();\n\n        if( !this.match.scoringLoaded )\n        {\n            this.match.prepareScoringData( { start: true, interval: 30 } );\n        }\n        else if( this.match.getMatchStatus() !== 'U' )\n        {\n            this.init();\n        }\n    }\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.Main.prototype.setSubscriptions = function()\n{\n    var that = this;\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCORING_UPDATE, function( e, params )\n    {\n        if( params.success && params.matchId === that.match.matchId )\n        {\n            /**\n             * Match state change may bring about new cards that can be shown, so re-initialise\n             */\n            var matchState = that.match.getMatchStatus();\n            if( matchState !== 'U' &&\n                ( !that.initialised || that.matchState !== matchState ) )\n            {\n                that.init();\n            }\n\n            if( that.matchState === 'L' && !that.matchEventsListener )\n            {\n                that.matchEventsListener = new PULSE.CLIENT.RUGBY.MatchEvents( that.match );\n            }\n        }\n    } );\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.MATCHEVENT_UPDATE, function( e, params )\n    {\n        var matchEvent = params.events[ 0 ];\n        that.pushCard( true, matchEvent.group.toLowerCase(), matchEvent );\n    } );\n\n\tthis.$container.on( 'card/expired', function( e, params )\n\t{\n\t\tthat.switchCards();\n\t} );\n\n    /**\n     * When a card is about to expire, make sure to refresh data for the one that's to come after\n     * For a normal card, just update data for the next one; if it's an event card, chances are\n     * that another card was paused for the event to show, so update that\n     */\n    this.$container.on( 'card/about-to-expire', function( e, params )\n    {\n        if( params.card instanceof PULSE.CLIENT.RUGBY.MC.Insights.MatchEventCard && that.paused )\n        {\n            that.paused.prepare();\n        }\n        else if( that.cards.length > 1 )\n        {\n            that.cards[ 1 ].prepare();\n        }\n    } );\n\n    this.$container.on( 'card/paused', function( e, params )\n    {\n        this.paused = params.card;\n    } );\n\n    this.$container.on( 'card/ready', function( e, params )\n    {\n        PULSE.CLIENT.Log( 'card ready: ' + params.card.name );\n    } );\n}"},"init":{"Documentation":{"description":"Gets called for every round of cards that need to be created","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.Main.prototype.init = function()\n{\n    this.matchState = this.match.getMatchStatus();\n    var availableCards = this.filterCards( [].concat( this.cardTypes ) );\n\n    if( availableCards.length )\n    {\n        if( !this.current )\n        {\n            var index = Math.floor( Math.random() * ( availableCards.length - 1 ) );\n            var cardName = availableCards[ index ];\n\n            var $container = $( '<div class=\"sideInfoItem\" data-name=\"' + cardName + '\"></div>' );\n            this.$container.html( $container );\n            this.setCurrentCard( this.makeCard( $container, cardName ) );\n\n            availableCards.splice( index, 1 );\n        }\n        else\n        {\n            var index = _.indexOf( availableCards, this.current.name );\n            if( -1 < index )\n            {\n                availableCards.splice( index, 1 );\n            }\n        }\n\n        var that = this;\n        this.cards = [ this.current ].concat( _.map( _.shuffle( availableCards ), function( name )\n        {\n            var $container;\n            if( that.storedCards[ name ] )\n            {\n                $container = that.storedCards[ name ].$container;\n            }\n            else\n            {\n                $container = $( '<div class=\"sideInfoItem\" data-name=\"' + name + '\"></div>' );\n            }\n            that.current.$container.after( $container );\n            return that.makeCard( $container, name );\n        } ) );\n\n        this.initialised = true;\n    }\n}"},"pushCard":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"immediate"},{"title":"param","description":null,"type":null,"name":"name"},{"title":"param","description":null,"type":null,"name":"options"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.Main.prototype.pushCard = function( immediate, name, options )\n{\n    var $container = $( '<div class=\"sideInfoItem\"></div>' );\n    this.current.$container.after( $container );\n    var newCard = this.makeCard( $container, name, options );\n\n    // bump the card; can't bump events, can only queue after them\n    if( immediate && !( this.current instanceof PULSE.CLIENT.RUGBY.MC.Insights.MatchEventCard ) )\n    {\n        this.current.pauseTimer();\n        this.setCurrentCard( newCard );\n    }\n    else\n    {\n        var cardIndex = this.getCurrentCardIndex();\n        this.cards.splice( cardIndex + 1, 0, newCard );\n    }\n}"},"getCurrentCardIndex":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.Main.prototype.getCurrentCardIndex = function()\n{\n    for( var i = 0, iLimit = this.cards.length; i < iLimit; i++ )\n    {\n        var card = this.cards[ i ];\n        if( this.current.name === card.name )\n        {\n            return i;\n        }\n    }\n\n    return -1;\n}"},"switchCards":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.Main.prototype.switchCards = function()\n{\n    // paused cards can only resume in valid situations\n    if( this.paused && this.isValid( this.paused.name ) )\n    {\n        this.setCurrentCard( this.paused );\n    }\n    else\n    {\n        // if( !this.storedCards[ this.cards[ 0 ].name ] )\n        // {\n        //     this.cards[ 0 ].$container.remove();\n        // }\n        this.cards.shift();\n        this.setCurrentCard( this.cards[ 0 ] );\n\n        if( this.cards.length === 1 )\n        {\n            this.init();\n        }\n    }\n}"},"setCurrentCard":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"card"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.Main.prototype.setCurrentCard = function( card )\n{\n    var that = this;\n    var now = new Date();\n    PULSE.CLIENT.Log( 'current insights card: ' + card.name + ' @ ' + dateFormat( now, 'HH:MM:ss' ) );\n\n    var animationEvents = 'webkitAnimationEnd oanimationend msAnimationEnd animationend';\n\n    if( this.current )\n    {\n        this.current.deactivate();\n        // this.current.$container.removeClass( 'showItem' );\n\n        // if( document.visibilityState &&\n        //     document.visibilityState === 'visible' &&\n        //     this.$container.is( ':visible' ) )\n        // {\n        //     this.current.$container.addClass( 'removeItem' );\n        //     this.current.$container.on( animationEvents, function( e )\n        //     {\n        //         PULSE.CLIENT.Log( 'on animation end event' );\n        //         $( e.target ).hide().removeClass( 'removeItem' ).off( animationEvents );\n        //         card.$container.show().addClass( 'showItem' );\n        //     } );\n        // }\n        // else\n        // {\n            this.current.$container.removeClass( 'showItem' ).addClass( 'removeItem' );\n            card.$container.removeClass( 'removeItem' ).addClass( 'showItem' );\n        // }\n    }\n    else\n    {\n        // base case, show the first card\n        card.$container.removeClass( 'removeItem' ).addClass( 'showItem' );\n    }\n\n    this.current = card;\n\n    this.current.activate();\n    this.current.startTimer();\n}"},"makeCard":{"Documentation":{"description":"Either creates a new card instance, or, in the case of cards that can be stored and just\nupdated, returns the instance if it exists (or creates one and stores it). *","tags":[{"title":"param","description":"jQuery container for the card","type":{"type":"NameExpression","name":"Object"},"name":"$container"},{"title":"param","description":"the name (type) of the card","type":{"type":"NameExpression","name":"String"},"name":"name"},{"title":"param","description":"special parameters that may be passed to the card constructor","type":{"type":"NameExpression","name":"Object"},"name":"options"},{"title":"return","description":"instance of PULSE.CLIENT.RUGBY.MC.Insights.Card","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.Main.prototype.makeCard = function( $container, name, options )\n{\n    if( this.storedCards[ name ] )\n    {\n        this.storedCards[ name ].reset();\n        return this.storedCards[ name ];\n    }\n\n    switch( name ) // 'scrums', 'tackles-made', 'head-to-head', 'discipline', 'in-attack'\n    {\n    case 'scrums':\n    case 'head-to-head':\n        this.storedCards[ name ] = new PULSE.CLIENT.RUGBY.MC.Insights.MatchTeamsCard( $container, this, name, this.match );\n        return this.storedCards[ name ];\n    case 'tackles-made':\n        this.storedCards[ name ] = new PULSE.CLIENT.RUGBY.MC.Insights.MatchTeamsTacklesCard( $container, this, this.match );\n        return this.storedCards[ name ];\n    case 'in-attack':\n        this.storedCards[ name ] = new PULSE.CLIENT.RUGBY.MC.Insights.MatchTeamsInAttackCard( $container, this, this.match );\n        return this.storedCards[ name ];\n    case 'discipline':\n        this.storedCards[ name ] = new PULSE.CLIENT.RUGBY.MC.Insights.MatchTeamsDisciplineCard( $container, this, this.match );\n        return this.storedCards[ name ];\n\n    case 'pen':\n    case 'try':\n    case 'yc':\n    case 'rc':\n        return new PULSE.CLIENT.RUGBY.MC.Insights.MatchEventCard( $container, this, name, this.match, options );\n    default:\n        return;\n    }\n}"},"filterCards":{"Documentation":{"description":"Goes through the array of possible cards and checks which ones can be rendered","tags":[{"title":"param","description":"given array of card names","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"String"}]},"name":"cardNames"},{"title":"return","description":"array of cards that can be rendered","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"String"}]}}]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.Main.prototype.filterCards = function( cardNames )\n{\n    var that = this;\n    return $.grep( cardNames, function( cardName )\n    {\n        return that.isValid( cardName );\n    } );\n}"},"isValid":{"Documentation":{"description":"Different cards have differnet requirements, so check if they can be rendered","tags":[{"title":"param","description":"the name of the card","type":{"type":"NameExpression","name":"String"},"name":"cardName"},{"title":"return","description":"whether it can be rendered or not","type":{"type":"NameExpression","name":"Boolean"}}]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.Main.prototype.isValid = function( cardName )\n{\n    switch( cardName )\n    {\n    case 'scrums':\n    case 'tackles-made':\n    case 'head-to-head':\n    case 'discipline':\n    case 'in-attack':\n        return this.match.getMatchStatus() !== 'U';\n    case 'penalty':\n    case 'try':\n    case 'yellow-card':\n    case 'red-card':\n        // return true;\n        return this.match.getMatchStatus() === 'L';\n    default:\n        return;\n    }\n}"},"activate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.Main.prototype.activate = function()\n{\n    this.$container.show();\n}"},"deactivate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.Main.prototype.deactivate = function()\n{\n    this.$container.hide();\n}"}}},"MatchEventCard":{"Documentation":{"description":"Match event card","tags":[{"title":"constructor","description":null,"type":null,"name":null},{"title":"param","description":"card container","type":{"type":"NameExpression","name":"Object"},"name":"$container"},{"title":"param","description":"instance of PULSE.CLIENT.RUGBY.MC.Insights.Main","type":{"type":"NameExpression","name":"Object"},"name":"parent"},{"title":"param","description":"name (type) of the card","type":{"type":"NameExpression","name":"String"},"name":"name"},{"title":"param","description":"instance of PULSE.CLIENT.RUGBY.Match","type":{"type":"NameExpression","name":"Object"},"name":"match"},{"title":"param","description":"timeline event object","type":{"type":"NameExpression","name":"Object"},"name":"matchEvent"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.MatchEventCard = function( $container, parent, name, match, matchEvent )\n{\n    PULSE.CLIENT.RUGBY.MC.Insights.Card.call( this, $container, parent, name );\n    this.lifetime = this.timeLeft = 10;\n    this.match = match;\n    this.matchEvent = matchEvent;\n\n    /**\n     * Event cards are born ready\n     * @type {Boolean}\n     */\n    this.isReady = true;\n\n    this.template = 'templates/match/insights/match-event.html';\n}","prototype":{"getModel":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.MatchEventCard.prototype.getModel = function()\n{\n\tvar player = this.match.getPlayerById( this.matchEvent.playerId );\n\tvar team = this.match.getTeamByPlayerId( this.matchEvent.playerId );\n\n\treturn {\n\t\tmatch: this.match,\n\t\tmatchEvent: this.matchEvent,\n\t\tplayer: player,\n\t\tteam: team\n\t};\n}"}}},"MatchTeamsCard":{"Documentation":{"description":"Card that displays stats information for","tags":[{"title":"param","description":"jQuery container object","type":{"type":"NameExpression","name":"Object"},"name":"$container"},{"title":"param","description":"instance of PULSE.CLIENT.RUGBY.MC.Insights.Main","type":{"type":"NameExpression","name":"Object"},"name":"parent"},{"title":"param","description":"the name of the card describing the type of the template etc.","type":{"type":"NameExpression","name":"String"},"name":"name"},{"title":"param","description":"instance of PULSE.CLIENT.RUGBY.Match","type":{"type":"NameExpression","name":"Object"},"name":"match"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.MatchTeamsCard = function( $container, parent, name, match )\n{\n    PULSE.CLIENT.RUGBY.MC.Insights.Card.call( this, $container, parent, name );\n    this.match = match;\n\n    this.setSubscriptions();\n}","prototype":{"getModel":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.MC.Insights.MatchTeamsCard.prototype.getModel"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.MatchTeamsCard.prototype.getModel = function()\n{\n    return { match: this.match };\n}"},"setSubscriptions":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.MatchTeamsCard.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.STATS_UPDATE, function( e, params )\n    {\n        if( params.matchId === that.match.matchId )\n        {\n            if( that.active )\n            {\n                that.publish();\n            }\n            else\n            {\n                that.ready();\n            }\n        }\n    });\n}"},"prepare":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.MatchTeamsCard.prototype.prepare = function()\n{\n    if( !this.match.statsLoaded )\n    {\n        this.match.prepareStatsData( { start: true, interval: 30 } );\n    }\n    else\n    {\n        this.ready();\n    }\n}"}}},"MatchTeamsDisciplineCard":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.MC.Insights.MatchTeamsDisciplineCard"},{"title":"param","description":null,"type":null,"name":"$container"},{"title":"param","description":null,"type":null,"name":"parent"},{"title":"param","description":null,"type":null,"name":"match"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.MatchTeamsDisciplineCard = function( $container, parent, match )\n{\n    PULSE.CLIENT.RUGBY.MC.Insights.Card.call( this, $container, parent, 'discipline' );\n    this.match = match;\n\n    this.setSubscriptions();\n}","prototype":{"getModel":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.MatchTeamsDisciplineCard.prototype.getModel = function()\n{\n    return { match: this.match };\n}"},"setSubscriptions":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.MatchTeamsDisciplineCard.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCORING_UPDATE, function( e, params )\n    {\n        if( params.success && params.matchId === that.match.matchId )\n        {\n            if( that.hasStats && that.hasScoring )\n            {\n                if( that.active )\n                {\n                    that.publish();\n                }\n                else\n                {\n                    that.ready();\n                }\n            }\n        }\n    } );\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.STATS_UPDATE, function( e, params )\n    {\n        if( params.success && params.matchId === that.match.matchId )\n        {\n            that.hasStats = true;\n            if( that.hasStats && that.hasScoring )\n            {\n                if( that.active )\n                {\n                    that.publish();\n                }\n                else\n                {\n                    that.ready();\n                }\n            }\n        }\n    } );\n}"},"prepare":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.MatchTeamsDisciplineCard.prototype.prepare = function()\n{\n    if( !this.match.scoringLoaded )\n    {\n        this.match.prepareScoringData( { start: true, interval: 30 } );\n    }\n    else\n    {\n        this.hasScoring = true;\n    }\n    if( !this.match.statsLoaded )\n    {\n        this.match.prepareStatsData( { start: true, interval: 30 } );\n    }\n    else\n    {\n        this.hasStats = true;\n    }\n\n    if( this.hasScoring && this.hasStats )\n    {\n        this.ready();\n    }\n}"}}},"MatchTeamsInAttackCard":{"Documentation":{"description":"Almost the same as a Match Teams Card, but also calculates top metres made & offload","tags":[{"title":"param","description":"jQuery container object","type":{"type":"NameExpression","name":"Object"},"name":"$container"},{"title":"param","description":"instance of PULSE.CLIENT.RUGBY.MC.Insights.Main","type":{"type":"NameExpression","name":"Object"},"name":"parent"},{"title":"param","description":"instance of PULSE.CLIENT.RUGBY.Match","type":{"type":"NameExpression","name":"Object"},"name":"match"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.MatchTeamsInAttackCard = function( $container, parent, match )\n{\n    PULSE.CLIENT.RUGBY.MC.Insights.Card.call( this, $container, parent, 'in-attack', match );\n    this.match = match;\n\n    this.setSubscriptions();\n}","prototype":{"getModel":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.MC.Insights.MatchTeamsInAttackCard.prototype.getModel"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.MatchTeamsInAttackCard.prototype.getModel = function()\n{\n    return {\n        match: this.match,\n        topPlayersMetresMade: this.match.getTopPlayers( 'Metres', 3, false ),\n        topPlayersOffloads: this.match.getTopPlayers( 'Offload', 3, false )\n    };\n}"}}},"MatchTeamsTacklesCard":{"Documentation":{"description":"Almost the same as a Match Teams Card, but also calculates top tacklers","tags":[{"title":"param","description":"jQuery container object","type":{"type":"NameExpression","name":"Object"},"name":"$container"},{"title":"param","description":"instance of PULSE.CLIENT.RUGBY.MC.Insights.Main","type":{"type":"NameExpression","name":"Object"},"name":"parent"},{"title":"param","description":"instance of PULSE.CLIENT.RUGBY.Match","type":{"type":"NameExpression","name":"Object"},"name":"match"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.MatchTeamsTacklesCard = function( $container, parent, match )\n{\n    PULSE.CLIENT.RUGBY.MC.Insights.Card.call( this, $container, parent, 'tackles-made', match );\n    this.match = match;\n\n    this.setSubscriptions();\n}","prototype":{"getModel":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.MC.Insights.MatchTeamsTacklesCard.prototype.getModel"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Insights.MatchTeamsTacklesCard.prototype.getModel = function()\n{\n    return {\n        match: this.match,\n        topTacklers: this.match.getTopPlayers( 'Tackles', 3, false, { metric: 'TackleSuccess' } )\n    };\n}"}}}},"Stats":{"HeadToHead":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.MC.Stats.HeadToHead"},{"title":"param","description":null,"type":null,"name":"$container"},{"title":"param","description":null,"type":null,"name":"config"},{"title":"param","description":null,"type":null,"name":"tournament"},{"title":"param","description":null,"type":null,"name":"match"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.HeadToHead = function( $container, config, tournament, match )\n{\n    this.$container = $container;\n    this.config = config || {};\n\n    this.tournament = tournament;\n    this.match = match;\n\n    this.templates = {\n        table : 'templates/match/stats/head-to-head/table.html',\n        pastMeetings : 'templates/match/stats/head-to-head/past-meetings.html',\n        recentForm : 'templates/match/stats/head-to-head/recent-form.html'\n    };\n\n    this.expanded = false;\n\n    this.init = false;\n    this.active = false;\n\n    this.$statsHeadToHeadContainer = this.$container.find( '.statsHeadToHeadContainer' );\n    this.$statsLastMeetings = this.$container.find( '.statsLastMeetings' );\n    this.$formGuide = this.$container.find( '.statsFormGuide' );\n\n    this.headToHead = new PULSE.CLIENT.RUGBY.HeadToHead( this.tournament );\n\n    this.schedules = {};\n\n    this.hasHeadToHead = false;\n\n    if ( !this.match )\n    {\n        var matchId = this.config['data-match-id'];\n        this.match = new PULSE.CLIENT.RUGBY.Match( this.tournament, matchId );\n    }\n}","prototype":{"initHeadToHead":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.HeadToHead.prototype.initHeadToHead = function()\n{\n    if ( !this.init )\n    {\n        this.init = true;\n\n        this.setSubscriptions();\n\n        var team1 = this.match.getTeamIdAtIndex( 0 );\n        var team2 = this.match.getTeamIdAtIndex( 1 );\n\n        if ( team1 != 0 && team2 != 0 )\n        {\n            this.headToHead.getHeadToHeadData( team1, team2 );\n        }\n\n        if ( team1 != 0 )\n        {\n            this.generateForm( team1 );\n        }\n        if ( team2 != 0 )\n        {\n            this.generateForm( team2 );\n        }\n    }\n}"},"generateForm":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"teamId"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.HeadToHead.prototype.generateForm = function( teamId )\n{\n    var schedule = new PULSE.CLIENT.RUGBY.Schedule();\n    var day = new Date();\n    var newDate = new Date();\n    newDate.setDate( day.getDate() + 1 );\n    var resultsRequestOptions = {\n            endDate: newDate.format( 'yyyy-mm-dd' ),\n            sort : 'desc',\n            states: [ 'C' ],\n            page : 0,\n            teams : teamId,\n            pageSize : 5\n        };\n        schedule.getScheduleData(\n        {\n            start: true,\n            params: resultsRequestOptions,\n            feedName : 'schedule' + teamId,\n            language: PULSE.CLIENT.LANGUAGE,\n            interval : 0\n        } );\n    this.schedules[ teamId ] = schedule;\n}"},"refreshHeadToHead":{"Documentation":{"description":"Render the timeline of events, only showing certain events, specified by 'eventsToRender'","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.HeadToHead.prototype.refreshHeadToHead = function()\n{\n    if ( this.active && this.hasHeadToHead )\n    {\n        var teams = [ this.match.getTeamIdAtIndex( 0 ), this.match.getTeamIdAtIndex( 1 ) ];\n\n        var matchesPlayed = this.headToHead.getMatchesPlayed( teams[ 0 ], teams[ 1 ] );\n\n        if ( matchesPlayed )\n        {\n\n            var summary = [\n                { stat : matchesPlayed.length, label : PULSE.I18N.lookup( 'label.stats.played.short' ) },\n                { stat : this.headToHead.getStat( teams[ 0 ], teams[ 1 ], 'wins' ), label : this.match.getTeamAbbrAtIndex( 0 ) },\n                { stat : this.headToHead.getDraws( teams[ 0 ], teams[ 1 ] ) , label : PULSE.I18N.lookup( 'label.match.drawn' ) },\n                { stat : this.headToHead.getStat( teams[ 1 ], teams[ 0 ], 'wins' ), label : this.match.getTeamAbbrAtIndex( 1 ) }\n            ];\n\n            var comparison = this.getStatsComparisonModel( teams );\n\n            PULSE.CLIENT.Template.publish(\n                this.templates.table,\n                this.$statsHeadToHeadContainer,\n                {\n                    summary : summary,\n                    comparison : comparison\n                }\n            );\n\n            var limit = 5;\n\n            if ( limit > matchesPlayed.length )\n            {\n                limit = matchesPlayed.length;\n            }\n\n            PULSE.CLIENT.Template.publish(\n                this.templates.pastMeetings,\n                this.$statsLastMeetings,\n                {\n                    matches : matchesPlayed,\n                    limit : limit\n                }\n            );\n\n        this.$container.show();\n        }\n    }\n}"},"getStatsComparisonModel":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"teams"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.HeadToHead.prototype.getStatsComparisonModel = function( teams )\n{\n    var comparison = [];\n\n    var pointsModel = this.headToHead.getStatComparisonModel( teams[ 0 ], teams[ 1 ], 'points' );\n    pointsModel.label = PULSE.I18N.lookup( 'widget.rankings.tableheader.points.long' );\n    comparison.push( pointsModel );\n\n    var triesModel = this.headToHead.getStatComparisonModel( teams[ 0 ], teams[ 1 ], 'tries' );\n    triesModel.label = PULSE.I18N.lookup( 'label.rugby.tries' );\n    comparison.push( triesModel );\n\n    var triesModel = this.headToHead.getStatComparisonModel( teams[ 0 ], teams[ 1 ], 'conversions' );\n    triesModel.label = PULSE.I18N.lookup( 'label.rugby.conversions.short' );\n    comparison.push( triesModel );\n\n    var penaltiesModel = this.headToHead.getStatComparisonModel( teams[ 0 ], teams[ 1 ], 'penalties' );\n    penaltiesModel.label = PULSE.I18N.lookup( 'label.rugby.penalties' );\n    comparison.push( penaltiesModel );\n\n    var dropGoalsModel = this.headToHead.getStatComparisonModel( teams[ 0 ], teams[ 1 ], 'dropgoals' );\n    dropGoalsModel.label = PULSE.I18N.lookup( 'label.rugby.dropgoals.short' );\n    comparison.push( dropGoalsModel );\n\n    var marginModel = this.headToHead.getStatComparisonModel( teams[ 0 ], teams[ 1 ], 'biggestMargin' );\n    marginModel.label = PULSE.I18N.lookup( 'label.stats.biggestwinmargin' );\n    comparison.push( marginModel );\n\n    return comparison;\n}"},"setSubscriptions":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.HeadToHead.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_HEADTOHEAD.STATS_UPDATE, function( e, params )\n    {\n        if ( params.success && params.team1 === that.match.getTeamIdAtIndex( 0 ) && params.team2 === that.match.getTeamIdAtIndex( 1 ) )\n        {\n            that.hasHeadToHead = true;\n            that.refreshHeadToHead();\n        }\n    });\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCHEDULE_UPDATE, function( e, params )\n    {\n        var team1 = that.match.getTeamIdAtIndex( 0 );\n        var team2 = that.match.getTeamIdAtIndex( 1 );\n\n        // Checks to see whether data can be found, otherwise returns no matches\n        if( params.success && ( ( params.id === 'schedule' + team1 ) || ( params.id === 'schedule' + team2 ) ) )\n        {\n            var thisId = team1;\n\n            if ( params.id === 'schedule' + team2 )\n            {\n                thisId = team2;\n            }\n\n            that.schedules[ thisId ].dataFound = true;\n            that.renderRecentForm();\n        }\n    });\n}"},"renderRecentForm":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.HeadToHead.prototype.renderRecentForm = function()\n{\n    if ( this.match && this.active )\n    {\n        var team1 = this.match.getTeamIdAtIndex( 0 );\n        var team2 = this.match.getTeamIdAtIndex( 1 );\n\n        if ( this.schedules && this.schedules[ team1 ] && this.schedules[ team1 ].dataFound && this.schedules[ team2 ] && this.schedules[ team2 ].dataFound )\n        {\n            var form = [];\n\n            var team1Id = this.match.getTeamIdAtIndex( 0 );\n            var team2Id = this.match.getTeamIdAtIndex( 1 );\n\n            form.push( { id : team1Id, matches : this.schedules[ team1Id ].getAllMatchesModel() } );\n            form.push( { id : team2Id, matches : this.schedules[ team2Id ].getAllMatchesModel() } );\n\n            PULSE.CLIENT.Template.publish(\n                this.templates.recentForm,\n                this.$formGuide,\n                {\n                    form : form,\n                    thisMatch : this.match\n                }\n            );\n\n            this.$container.show();\n        }\n    }\n}"},"activate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.HeadToHead.prototype.activate = function()\n{\n    this.active = true;\n    if ( !this.init )\n    {\n        this.initHeadToHead();\n    }\n    this.refreshHeadToHead();\n    this.renderRecentForm();\n}"},"deactivate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.HeadToHead.prototype.deactivate = function()\n{\n    this.active = false;\n    this.$container.hide();\n}"}}},"InGame":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.MC.Stats.InGame"},{"title":"param","description":null,"type":null,"name":"$container"},{"title":"param","description":null,"type":null,"name":"config"},{"title":"param","description":null,"type":null,"name":"tournament"},{"title":"param","description":null,"type":null,"name":"match"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.InGame = function( $container, config, tournament, match )\n{\n    this.$container = $container;\n    this.config = config || {};\n\n    this.tournament = tournament;\n    this.match = match;\n\n    this.templates = {\n        topComparison : 'templates/match/stats/topComparison.html',\n        table : 'templates/match/stats/table.html',\n        scroller : 'templates/match/stats/scroller.html'\n    };\n\n    this.expanded = false;\n\n    this.imageSize = 140;\n\n    this.init = false;\n    this.active = false;\n\n    if ( !this.match )\n    {\n        var matchId = this.config['data-match-id'];\n        this.match = new PULSE.CLIENT.RUGBY.Match( this.tournament, matchId );\n    }\n}","prototype":{"initInGame":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.InGame.prototype.initInGame = function()\n{\n    if ( !this.init )\n    {\n        this.init = true;\n\n        this.$topStatsComparison = this.$container.find( '.topStatsComparison' );\n        this.statsTables = this.$container.find( '.matchStatsTable' );\n\n        this.statsScrollers = this.$container.find( '.matchStatsTopPlayersScroller' );\n\n        this.setSubscriptions();\n\n        if ( !this.match.statsLoaded )\n        {\n            this.match.prepareStatsData( { start: true, interval: 60 } );\n        }\n\n    }\n}"},"refreshInGame":{"Documentation":{"description":"Render the timeline of events, only showing certain events, specified by 'eventsToRender'","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.InGame.prototype.refreshInGame = function()\n{\n    if ( this.active && this.match.statsLoaded )\n    {\n        this.renderTopStatsComparison();\n        this.renderStatsTables();\n        this.renderStatsScroller();\n    }\n    this.$container.show();\n}"},"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.InGame.prototype.setListeners = function()\n{\n    var that = this;\n\n}"},"setSubscriptions":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.InGame.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.STATS_UPDATE, function( e, params )\n    {\n        if( params.matchId === that.match.matchId )\n        {\n            that.renderTopStatsComparison();\n            that.renderStatsTables();\n            that.renderStatsScroller();\n        }\n    });\n}"},"renderStatsTables":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.InGame.prototype.renderStatsTables = function()\n{\n    for ( var i = 0; i < this.statsTables.length; i++ )\n    {\n        var $table = $( this.statsTables[ i ] );\n        var type = $table.data( 'stat-type' );\n        var statsModel = this.getTableModel( type );\n        PULSE.CLIENT.Template.publish(\n            this.templates.table,\n            $table,\n            { stats : statsModel }\n        );\n    }\n}"},"getTableModel":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"type"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.InGame.prototype.getTableModel = function( type )\n{\n    var model = { title : '', stats : [] };\n\n    switch( type )\n    {\n        case 'attacking':\n            model.title = PULSE.I18N.lookup( 'label.stats.attacking' );\n            model.stats = [\n                {\n                    label : PULSE.I18N.lookup( 'label.match.stats.metresmade' ),\n                    stats : [ this.match.getTeamStat( 0 , 'Metres'), this.match.getTeamStat( 1 , 'Metres') ]\n                },\n                {\n                    label : PULSE.I18N.lookup( 'label.match.stats.cleanbreaks' ),\n                    stats : [ this.match.getTeamStat( 0 , 'clean_breaks'), this.match.getTeamStat( 1 , 'clean_breaks') ]\n                },\n                {\n                    label : PULSE.I18N.lookup( 'label.match.stats.offloads' ),\n                    stats : [ this.match.getTeamStat( 0 , 'Offload'), this.match.getTeamStat( 1 , 'Offload') ]\n                },\n                {\n                    label : PULSE.I18N.lookup( 'label.match.stats.carriescrossedgainline' ),\n                    stats : [ this.match.getTeamStat( 0 , 'CarriesCrossedGainLine'), this.match.getTeamStat( 1 , 'CarriesCrossedGainLine') ]\n                },\n                {\n                    label : PULSE.I18N.lookup( 'label.stats.triesfromkicks' ),\n                    stats : [ this.match.getTeamStat( 0 , 'TryKicks'), this.match.getTeamStat( 1 , 'TryKicks') ]\n                }\n            ];\n            break;\n        case 'defending':\n            model.title = PULSE.I18N.lookup( 'labels.stats.defending' );\n             model.stats = [\n                {\n                    label : PULSE.I18N.lookup( 'label.rugby.stat.tackles' ),\n                    stats : [ this.match.getTeamStat( 0 , 'Tackles'), this.match.getTeamStat( 1 , 'Tackles') ]\n                },\n                {\n                    label : PULSE.I18N.lookup( 'label.stats.match.tacklesmissed' ),\n                    stats : [ this.match.getTeamStat( 0 , 'MissedTackles'), this.match.getTeamStat( 1 , 'MissedTackles') ]\n                },\n                {\n                    label : PULSE.I18N.lookup( 'label.match.stats.turnoverwon' ),\n                    stats : [ this.match.getTeamStat( 0 , 'TurnoverWon'), this.match.getTeamStat( 1 , 'TurnoverWon') ]\n                },\n                {\n                    label : PULSE.I18N.lookup( 'label.stats.match.turnoverownhalf' ),\n                    stats : [ this.match.getTeamStat( 0 , 'TurnoverOwnHalf'), this.match.getTeamStat( 1 , 'TurnoverOwnHalf') ]\n                }\n            ];\n            break;\n        case 'scrums':\n            model.title = PULSE.I18N.lookup( 'label.stats.scrums' );\n             model.stats = [\n                {\n                    label : PULSE.I18N.lookup( 'label.stats.match.scrums.won' ),\n                    stats : [ this.match.getTeamStat( 0 , 'ScrumsWon'), this.match.getTeamStat( 1 , 'ScrumsWon') ]\n                },\n                {\n                    label : PULSE.I18N.lookup( 'label.stats.match.scrums.lost' ),\n                    stats : [ this.match.getTeamStat( 0 , 'ScrumsLost'), this.match.getTeamStat( 1 , 'ScrumsLost') ]\n                }\n            ];\n            break;\n        case 'lineouts':\n            model.title = PULSE.I18N.lookup( 'label.stats.lineouts' );\n             model.stats = [\n                {\n                    label : PULSE.I18N.lookup( 'label.match.stats.lineoutsteals' ),\n                    stats : [ this.match.getTeamStat( 0 , 'LineoutWonSteal'), this.match.getTeamStat( 1 , 'LineoutWonSteal') ]\n                },\n                {\n                    label : PULSE.I18N.lookup( 'label.stats.match.lineoutthrownotstraight' ),\n                    stats : [ this.match.getTeamStat( 0 , 'LineoutThrowNotStraight'), this.match.getTeamStat( 1 , 'LineoutThrowNotStraight') ]\n                }\n            ];\n            break;\n        case 'kicking':\n            model.title = PULSE.I18N.lookup( 'label.stats.kicking' );\n             model.stats = [\n                {\n                    label : PULSE.I18N.lookup( 'label.match.stats.kicksfromhand' ),\n                    stats : [ this.match.getTeamStat( 0 , 'KicksFromHand'), this.match.getTeamStat( 1 , 'KicksFromHand') ]\n                },\n                {\n                    label : PULSE.I18N.lookup( 'label.stats.match.kicksfromhandsmetres' ),\n                    stats : [ this.match.getTeamStat( 0 , 'KickFromHandMetres'), this.match.getTeamStat( 1 , 'KickFromHandMetres') ]\n                }\n            ];\n            break;\n        case 'discipline':\n            model.title = PULSE.I18N.lookup( 'label.stats.discipline' );\n             model.stats = [\n                {\n                    label : PULSE.I18N.lookup( 'label.stats.match.penaltiesconceded' ),\n                    stats : [ this.match.getTeamStat( 0 , 'PenaltiesConceded'), this.match.getTeamStat( 1 , 'PenaltiesConceded') ]\n                },\n                {\n                    label : PULSE.I18N.lookup( 'label.stats.match.penaltiesconcededownhalf' ),\n                    stats : [ this.match.getTeamStat( 0 , 'PenaltyConcededOwnHalf'), this.match.getTeamStat( 1 , 'PenaltyConcededOwnHalf') ]\n                },\n                {\n                    label : PULSE.I18N.lookup( 'label.stats.match.penaltiesconcededatlineout' ),\n                    stats : [ this.match.getTeamStat( 0 , 'PenaltyConcededLineOutOffence'), this.match.getTeamStat( 1 , 'PenaltyConcededLineOutOffence') ]\n                },\n                {\n                    label : PULSE.I18N.lookup( 'label.match.stats.penaltiesconcededatscrum' ),\n                    stats : [ this.match.getTeamStat( 0 , 'PenaltyConcededScrumOffence'), this.match.getTeamStat( 1 , 'PenaltyConcededScrumOffence') ]\n                },\n                {\n                    label : PULSE.I18N.lookup( 'label.stats.match.freekicksconceded' ),\n                    stats : [ this.match.getTeamStat( 0 , 'FreeKickConceded'), this.match.getTeamStat( 1 , 'FreeKickConceded') ]\n                }\n            ];\n            break;\n\n    }\n    return model;\n}"},"renderStatsScroller":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.InGame.prototype.renderStatsScroller = function()\n{\n    for ( var i = 0; i < this.statsScrollers.length; i++ )\n    {\n        var $table = $( this.statsScrollers[ i ] );\n        var type = $table.data( 'stat-type' );\n        var limit = 5;\n        var statsModel = this.getScrollerModel( type, limit );\n        statsModel.urlGen = this.match.urlGenerator;\n        statsModel.imageSize = this.imageSize;\n        statsModel.match = this.match;\n        PULSE.CLIENT.Template.publish(\n            this.templates.scroller,\n            $table,\n            statsModel\n        );\n    }\n}"},"getScrollerModel":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"type"},{"title":"param","description":null,"type":null,"name":"limit"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.InGame.prototype.getScrollerModel = function( type, limit )\n{\n    var model = { title : '', stats : [] };\n\n    switch( type )\n    {\n        case 'attacking':\n            model.stats = [\n                {\n                    metric : 'Metres',\n                    entries : this.match.getTopPlayers( 'Metres', limit )\n                },\n                {\n                    metric : 'CleanBreaks',\n                    entries : this.match.getTopPlayers( 'CleanBreaks', limit )\n                },\n                {\n                    metric : 'Offload',\n                    entries : this.match.getTopPlayers('Offload', limit )\n                },\n                {\n                    metric : 'CarriesCrossedGainLine',\n                    entries : this.match.getTopPlayers( 'CarriesCrossedGainLine', limit )\n                }\n            ];\n            break;\n        case 'defending':\n             model.stats = [\n                {\n                    metric : 'Tackles',\n                    entries : this.match.getTopPlayers( 'Tackles', limit )\n                },\n                {\n                    metric : 'MissedTackles',\n                    entries : this.match.getTopPlayers( 'MissedTackles', limit )\n                },\n                {\n                    metric : 'TurnoverWon',\n                    entries : this.match.getTopPlayers( 'TurnoverWon', limit )\n                },\n                {\n                    metric : 'TurnoverOwnHalf',\n                    entries : this.match.getTopPlayers( 'TurnoverOwnHalf', limit )\n                }\n            ];\n            break;\n    }\n    return model;\n}"},"renderTopStatsComparison":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.InGame.prototype.renderTopStatsComparison = function()\n{\n    if ( this.active )\n    {\n        var statsModel = [\n            {\n                label : PULSE.I18N.lookup( 'label.match.stats.territory' ),\n                stats : [ Math.round( this.match.getTeamStat( 0 , 'Territory') * 100 ), Math.round( this.match.getTeamStat( 1 , 'Territory') * 100 ) ],\n                subLabel : PULSE.I18N.lookup( 'label.stats.match.territoryinlast10mins' ),\n                subStats : [ Math.round( this.match.getTeamStat( 0 , 'TerritoryLast10Mins') * 100 ), Math.round( this.match.getTeamStat( 1 , 'TerritoryLast10Mins') * 100 ) ]\n            },\n            {\n                label : PULSE.I18N.lookup( 'label.match.stats.possession' ),\n                stats : [ Math.round( this.match.getTeamStat( 0 , 'Possession') * 100 ), Math.round( this.match.getTeamStat( 1 , 'Possession') * 100 ) ],\n                subLabel : PULSE.I18N.lookup( 'label.stats.match.possessioninlast10mins' ),\n                subStats : [ Math.round( this.match.getTeamStat( 0 , 'BallPossessionLast10Mins') * 100 ), Math.round( this.match.getTeamStat( 1 , 'BallPossessionLast10Mins') * 100 ) ]\n            }\n        ]\n\n        PULSE.CLIENT.Template.publish(\n            this.templates.topComparison,\n            this.$topStatsComparison,\n            { stats : statsModel }\n        );\n\n    }\n}"},"activate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.InGame.prototype.activate = function()\n{\n    this.active = true;\n    if ( !this.init )\n    {\n        this.initInGame();\n    }\n    this.refreshInGame();\n}"},"deactivate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.InGame.prototype.deactivate = function()\n{\n    this.active = false;\n    this.$container.hide();\n}"}}},"Main":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.MC.Stats.Main"},{"title":"param","description":null,"type":null,"name":"$container"},{"title":"param","description":null,"type":null,"name":"config"},{"title":"param","description":null,"type":null,"name":"tournament"},{"title":"param","description":null,"type":null,"name":"match"}]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.Main = function( $container, config, tournament, match  )\n{\n    this.$container = $container;\n    this.config = config || {};\n\n    this.tournament = tournament;\n    this.match = match;\n\n    this.templates = {\n        main : 'templates/match/stats/main.html'\n    };\n\n    this.expanded = false;\n\n    this.init = false;\n    this.active = false;\n\n    this.hasScoring = false;\n    this.subscriptionsSet = false;\n\n    if ( !this.match )\n    {\n        var matchId = this.config['data-match-id'];\n        this.match = new PULSE.CLIENT.RUGBY.Match( this.tournament, matchId );\n    }\n\n    if ( !this.match.scoringLoaded )\n    {\n        this.match.prepareScoringData( { start: true, interval: 60 } );\n        this.setSubscriptions();\n    }\n    else\n    {\n        this.hasScoring = true;\n    }\n}","prototype":{"initStats":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.Main.prototype.initStats = function()\n{\n    if ( !this.init && this.hasScoring )\n    {\n        this.init = true;\n\n        PULSE.CLIENT.Template.publish(\n            this.templates.main,\n            this.$container,\n            { match : this.match }\n        );\n\n        this.statsToggle = '.mcStatsToggle';\n        this.toggles = this.$container.find( this.statsToggle );\n        this.statsContainers = this.$container.find( '.statsSectionContainer' );\n\n        this.statSections = [\n            new PULSE.CLIENT.RUGBY.MC.Stats.InGame( this.$container.find( '.inGameStatsContainer' ), this.config, this.tournament, this.match ),\n            new PULSE.CLIENT.RUGBY.MC.Stats.HeadToHead( this.$container.find( '.headToHeadStatsContainer' ), this.config, this.tournament, this.match ),\n            new PULSE.CLIENT.RUGBY.MC.Stats.TeamStats( this.$container.find( '.homeTeamStatsContainer' ), this.match.teams[ 0 ].id ),\n            new PULSE.CLIENT.RUGBY.MC.Stats.TeamStats( this.$container.find( '.awayTeamStatsContainer' ), this.match.teams[ 1 ].id )\n        ];\n        this.setSubscriptions();\n        this.setListeners();\n\n        this.setCurrentTab();\n        this.$container.show();\n    }\n}"},"setCurrentTab":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.Main.prototype.setCurrentTab = function()\n{\n    var status = this.match.getMatchStatus();\n\n    var type = 'inGame';\n    if ( status === 'U' )\n    {\n        type = 'headToHead';\n    }\n\n    for ( var i = 0; i < this.toggles.length; i++ )\n    {\n        if ( $( this.toggles[ i ] ).data( 'type' ) === type )\n        {\n            $( this.toggles[ i ] ).click();\n        }\n    }\n\n}"},"setSubscriptions":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.Main.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    if ( !this.subscriptionsSet )\n    {\n        this.subscriptionsSet = true;\n        //When the user clicks on each timeline row, open the expanded view\n\n        PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCORING_UPDATE, function( e, params )\n        {\n            if( params.matchId === that.match.matchId )\n            {\n                that.hasScoring = true;\n                if ( that.active && !that.init )\n                {\n                    that.initStats();\n                }\n            }\n        });\n    }\n}"},"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.Main.prototype.setListeners = function()\n{\n    var that = this;\n\n    this.$container.on( 'click', this.statsToggle, function( e, params )\n        {\n        e.preventDefault();\n\n        for ( var i = 0; i < that.toggles.length; i++ )\n        {\n            $( that.toggles[ i ] ).removeClass( 'active' );\n        }\n        $( this ).addClass( 'active' );\n\n        var type = $( this ).data( 'type' );\n\n        for ( var i = 0; i < that.statsContainers.length; i++ )\n        {\n            if ( $( that.statsContainers[ i ] ).data( 'type' ) === type )\n            {\n                that.statSections[ i ].activate();\n            }\n            else\n            {\n                that.statSections[ i ].deactivate();\n            }\n        }\n\n    } );\n}"},"activate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.Main.prototype.activate = function()\n{\n    this.active = true;\n    if ( !this.init )\n    {\n        this.initStats();\n    }\n    else\n    {\n        this.$container.show();\n    }\n}"},"deactivate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.Main.prototype.deactivate = function()\n{\n    this.active = false;\n}"}}},"TeamStats":{"Documentation":{"description":"Fetch the webview page for team stats","tags":[{"title":"param","description":null,"type":null,"name":"container"},{"title":"param","description":null,"type":null,"name":"teamId"},{"title":"param","description":null,"type":null,"name":"init"},{"title":"constructor","description":null,"type":null,"name":null}]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.TeamStats = function( container, teamId, init )\n{\n    this.$container = $( container );\n    this.config = {\n        emptyTemplate: 'templates/match-centre/empty.html',\n        toggleClass: 'hide',\n        teamId: teamId\n    };\n    this.urlGen = new PULSE.CLIENT.RUGBY.UrlGenerator();\n\n    if ( init )\n    {\n        this.activate();\n    }\n    else\n    {\n        this.noContent();\n    }\n}","prototype":{"activate":{"Documentation":{"description":"Display the stats info","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.TeamStats.prototype.activate = function()\n{\n    var self = this;\n    self.$container.removeAttr( 'style' ).removeClass( this.config.toggleClass );\n\n    if ( !self.init && self.config.teamId )\n    {\n        $.ajax( {\n            dataType: 'html',\n            url: self.urlGen.makeTeamUrl( { id: self.config.teamId } ) + '/stats/webview',\n            success: function( data )\n            {\n                this.$data = $( data ).filter( '.webview' );\n                self.$container.html( this.$data.html() );\n            },\n            error: function()\n            {\n                self.noContent();\n            }\n        } );\n    }\n    else\n    {\n        self.noContent();\n    }\n    this.init = true;\n}"},"noContent":{"Documentation":{"description":"Hide the stats","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.TeamStats.prototype.noContent = function()\n{\n    if ( !this.init )\n    {\n        PULSE.CLIENT.Template.publish(\n            this.config.emptyTemplate,\n            this.$container\n        );\n    }\n}"},"deactivate":{"Documentation":{"description":"Hide the stats","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MC.Stats.TeamStats.prototype.deactivate = function()\n{\n    this.$container.addClass( this.config.toggleClass );\n}"}}}}},"MeSearchResults":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the search results widget"}]},"Source":"PULSE.CLIENT.RUGBY.MeSearchResults = function( container )\n{\n    var params = PULSE.CLIENT.Util.parseUrlParameters();\n\n    this.urlGen = new PULSE.CLIENT.RUGBY.getUrlGenerator();\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n    this.festivalOfRugbyUrl = \"http://www.festivalofrugby2015.com\";\n\n    this.pageNum = 0; // Defaults the page number to 0\n\n    // Sets the results template for each toggle\n    this.templates =\n    {\n        'all' : 'templates/search/media-extranet/all.html',\n        'text' : 'templates/search/media-extranet/all.html',\n        'event' : 'templates/search/media-extranet/event.html',\n        'none' : 'templates/search/noresults.html'\n    }\n\n    // Sets the page sizes for each toggle\n    this.pageSize = {\n        'all' : 7,\n        'text' : 7,\n        'event' : 7\n    }\n\n    this.$container = container;\n    this.$searchBar = $('.searchBar');\n    this.$searchResults = this.$searchBar.find( 'input.search' );\n    this.$newSearch = this.$searchBar.find( '.go' );\n    this.$searchForm = this.$container.find( '#searchPageForm' );\n    this.$socialBox = this.$container.find( '.socialBox' );\n    this.$searchShow = this.$container.find('#searchResultsShow');\n    //this.$itemUrl = this.$searchShow.find('.resultItem');\n    this.$searchTypes = this.$container.find( '#searchTypes' );\n\n\n    this.$maxNumberContainer = this.$container.find( '.maxPages' );\n    this.$currentNumberContainer = this.$container.find( '.paginationValue' );\n\n    this.$pagination = this.$container.find( '.pagination' );\n\n    this.$maxNumberContainer.html( '1' );\n    this.$currentNumberContainer.val( 1 );\n\n    this.$mobileNav = this.$container.find( '.filterButton' );\n    this.$filterNav = this.$container.find( '.filterNav' );\n\n    var dropdownOptions = {\n        'dropdownId' : 'MobileDropdown',\n        'itemsContainer' : this.$filterNav,\n        'itemContainer' : 'a',\n        'currentContainer' : this.$mobileNav,\n        'dropdownContainer' : this.$filterNav,\n        'changeCurrent' : true,\n        'addCurrent' : '<span class=\"icon drop-down-blue\"></span>'\n    };\n\n    if ( $( window ).width() > 666 )\n    {\n        dropdownOptions.notClose = true;\n    }\n\n    this.categoryDropdown = new PULSE.CLIENT.UI.DropdownMenu( this.$container, dropdownOptions );\n\n    if ( $( window ).width() > 666 )\n    {\n        this.$filterNav.show();\n    }\n\n    if ( 'toggle' in params )\n    {\n        var defaultToggle = params[ 'toggle' ];\n        if ( defaultToggle in this.pageSize )\n        {\n            this.toggle = defaultToggle;\n            //var newContainer = this.$searchTypes.find( '#' + defaultToggle + 'Div' );\n            var newContainer = this.$searchTypes.find( '.' + defaultToggle );\n            this.$searchTypes.find('a').removeClass('active');\n            if ( newContainer )\n            {\n                $( newContainer ).addClass( 'active' );\n            }\n        }\n        else\n        {\n            this.toggle = 'all';\n            var newContainer = this.$searchTypes.find( '.all' );\n            if ( newContainer )\n            {\n                //$( newContainer ).show();\n                $( newContainer ).addClass( 'active' );\n            }\n        }\n    }\n    else\n    {\n        this.toggle = 'all';\n        var newContainer = this.$searchTypes.find( '.all' );\n        if ( newContainer )\n        {\n            //$( newContainer ).show();\n            $( newContainer ).addClass( 'active' );\n        }\n    }\n    // Determines which toggle is being used in the search\n    // this.toggle = 'all';\n\n    // Holds the pagination for each toggle and acts as a cache for each toggle and page\n    //this.paginations = {};\n    this.pagination = undefined;\n\n    this.cache = {};\n\n    // Sets shared paginations details for all the toggles\n    this.pageOptions = {\n        'container' : this.$container,\n        'currentNumberContainer' : '.paginationValue',\n        'maxNumberContainer' : '.maxPages',\n        'displayMoreContainer' : this.$searchShow\n    };\n\n\n    var mediaOptions =\n    {\n        container: container,\n        type: \"list\",//\"player\"\n        link: '.audioThumb', //LIST (data-mediaid is on this link always)\n        link_click : '.audioThumb a',\n        player_scope: \"primary\", //whatever name\n        link_time: '.duration', //inside link container\n        link_title: '.title', //inside link container\n        link_date: '.datePosted', //inside link container\n        external_link_click : '.externalLink',\n        external_player_url : '/worldrugbytv/audio'\n    };\n\n    var mediaList = new PULSE.CLIENT.MediaList( mediaOptions );\n\n    if ( 's' in params )\n    {\n        this.searchText = params[ 's' ];\n\n        if ( this.searchText )\n        {\n            var spacedSearchText = this.searchText.replace(/\\+/g,' ');\n            this.$searchResults.val( spacedSearchText );\n            this.searchText = escape( spacedSearchText );\n        }\n        this.getResults( this.searchText, this.toggle );\n    }\n    else\n    {\n        this.searchText = '';\n        this.showNoResults();\n    }\n\n    this.setListeners();\n    this.setSubscriptions();\n}","prototype":{"newSearch":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MeSearchResults.prototype.newSearch = function()\n{\n    var url = window.location.href;\n    this.searchText = this.$searchResults.val();\n\n    if ( this.searchText.length > 2 )\n    {\n        if (url.indexOf('?') > -1)\n        {\n            url = url.split( '?' )[ 0 ] + '?s=' + this.searchText;\n        }\n        else\n        {\n            url = url + '?s=' + this.searchText;\n        }\n\n        if ( this.toggle.indexOf( 'all' ) < 0 )\n        {\n            url = url + '&toggle=' + this.toggle;\n        }\n        window.location.href = url;\n    }\n}"},"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MeSearchResults.prototype.setListeners = function()\n{\n    var that = this;\n\n    // If the user searches a new term, then the window is refreshed with the new term\n    // as a url parameter - in the form [ url ]?s=[ new term ]\n    this.$newSearch.on( 'click', function( e, params )\n    {\n        that.newSearch();\n    } );\n\n    this.$searchForm.submit( function( e )\n    {\n        e.preventDefault();\n        that.newSearch();\n    } );\n\n    $( window ).on( 'resize', function ( e )\n    {\n        if ( $( window ).width() > 666 )\n        {\n            that.$filterNav.show();\n            that.categoryDropdown.notClose = true;\n        }\n        else\n        {\n            that.$filterNav.hide();\n            that.categoryDropdown.notClose = false;\n        }\n    } );\n\n    // Handles toggle clicks. Data is either\n    this.$searchTypes.on( 'click', 'li', function( e, params ){\n        that.$searchTypes.find('a').removeClass('active');\n        var toggle =  $( this ).find( 'a' ).html().toLowerCase();\n\n        if ( toggle.indexOf( 'event' ) > -1 )\n        {\n            that.toggle = 'event';\n        }\n\n        if ( toggle.indexOf( 'news' ) > -1 )\n        {\n            that.toggle = 'text';\n        }\n\n        else if ( toggle.indexOf( 'all' ) > -1 )\n        {\n            that.toggle = 'all';\n        }\n\n        $( this ).find( 'a' ).addClass( 'active' );\n\n        that.pageNum = 0;\n\n        // Checks if the new toggle data has been cached. If it has then it resets the pagination to\n        // the first page and displays the content.\n        // Otherwise new data is requested for the toggle\n        that.checkIfCached();\n        if ( that.checkIfCached() )\n        {\n            that.pagination.pageNum = 0;\n            that.pagination.setNumEntries( that.cache[ that.toggle ][ that.pageNum ].numEntries );\n            that.publishData( that.cache[ that.toggle ][ that.pageNum ] );\n        }\n        else\n        {\n            that.getResults( that.searchText, that.toggle )\n        }\n\n    } );\n\n}"},"setSubscriptions":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MeSearchResults.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.SEARCH_EVENTS.SEARCH_UPDATE, function( e, params )\n    {\n\n        if ( that.currentSearch.getNumEntries() < 1 )\n        {\n            that.showNoResults();\n        }\n        else\n        {\n            var numEntries = that.currentSearch.getNumEntries();\n\n            //if (!( that.toggle in that.paginations ))\n            //{\n\n            if (! that.pagination )\n            {\n                that.pageOptions.template = that.templates[ that.toggle ];\n                that.pageOptions.pageSize = that.pageSize[ that.toggle ];\n                that.pageOptions.numEntries = numEntries;\n                that.pageOptions.maxEntries = numEntries;\n                that.pageOptions.forwardContainer = '.next';\n                that.pageOptions.backwardContainer = '.prev';\n\n                that.pagination = new PULSE.CLIENT.UI.Pagination(that.pageOptions);\n            }\n\n            that.publishData( that.currentSearch );\n        }\n    } );\n\n\n    PULSE.CLIENT.subscribe( 'content/get', function()\n    {\n        var cached = false;\n\n        that.pageNum = that.pagination.getPageNum();\n\n        // Checks if the data is cached. If it is then it publishes the cached data,\n        // otherwise it gets more content for the next page\n        if ( that.checkIfCached() )\n        {\n            that.publishData( that.cache[ that.toggle ][ that.pageNum ] )\n        }\n        else\n        {\n            that.getResults( that.searchText, that.toggle);\n        }\n    });\n}"},"checkIfCached":{"Documentation":{"description":"Checks if the current toggle and page number has been cached.","tags":[{"title":"return","description":"Whether the data exists in the cache","type":{"type":"NameExpression","name":"Boolean"}}]},"Source":"PULSE.CLIENT.RUGBY.MeSearchResults.prototype.checkIfCached = function()\n{\n    var cached = false;\n\n    if ( this.cache[ this.toggle ] )\n    {\n        if ( this.cache[ this.toggle ][ this.pageNum ] )\n        {\n            cached = true;\n        }\n    }\n\n    return cached;\n}"},"publishData":{"Documentation":{"description":"Publishes the downloads data for the different toggles","tags":[{"title":"param","description":"Data for the content items","type":{"type":"NameExpression","name":"Object"},"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.MeSearchResults.prototype.publishData = function( data )\n{\n    var bestPhotos = [],\n        results = data.getResults();\n\n    // Finds the best variant ( thumnail ) for the photos toggle\n\n    // for ( var i = 0; i < results.length; i++ )\n    // {\n    //     //bestPhotos.push( PULSE.CLIENT.getBestFitPhotoVariant( results[ i ].variants, 260 ) );\n    // }\n\n    PULSE.CLIENT.Template.publish(\n        this.templates[ this.toggle ],\n        this.$searchShow,\n        {\n            content : results, photoVariant : bestPhotos, pageSize : this.pageSize[ this.toggle ]\n        }\n    );\n\n    // Checks if the toggle has already been cached\n    if ( ! this.cache[ this.toggle ] )\n    {\n        this.cache[ this.toggle ] = {};\n        this.pagination.pageNum = 0;\n    }\n\n    // Adds data to the cache\n    this.cache[ this.toggle ][ this.pageNum ] = data;\n    this.pagination.pageSize = this.pageSize[ this.toggle ];\n    this.pagination.setNumEntries( data.numEntries );\n}"},"getResults":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"terms"},{"title":"param","description":null,"type":null,"name":"type"}]},"Source":"PULSE.CLIENT.RUGBY.MeSearchResults.prototype.getResults = function( terms, type )\n{\n    var tags = undefined,\n    //sort = 'timestamp desc',\n        sort = undefined,\n        language = PULSE.CLIENT.LANGUAGE;\n\n    this.loading();\n\n    if ( type.indexOf( 'all' ) > -1)\n    {\n        type = 'text,event';\n    }\n    else if ( type.indexOf( 'text' ) > -1)\n    {\n        //tags = 'News Article';\n    }\n\n    if ( terms )\n    {\n        var today = new Date();\n        startDate = today.getTime();\n        this.currentSearch = new PULSE.CLIENT.RUGBY.Search( terms, language, type, PULSE.CLIENT.CMS_ACCOUNT, sort, this.pageSize[ this.toggle ], this.pageNum, tags, null, null, startDate );\n        console.log(this.currentSearch);\n    }\n    else\n    {\n        this.showNoResults();\n    }\n}"},"loading":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MeSearchResults.prototype.loading = function()\n{\n    this.$searchShow.html( '<div class=\"spinner\"><div style=\"height : 25px; width : 25px\"></div></div>' );\n\n    // if ( this.$pagination )\n    // {\n    //     this.$pagination.hide();\n    // }\n}"},"showNoResults":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MeSearchResults.prototype.showNoResults = function()\n{\n    if ( this.pagination )\n    {\n        this.pagination.setNumEntries( 0 );\n    }\n\n    PULSE.CLIENT.Template.publish(\n        this.templates.none,\n        this.$searchShow,\n        { term : this.searchText }\n    );\n\n}"}}},"MediaDownload":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for Media Download widget"},{"title":"param","description":"Jquery object or selector string","type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"Object"},{"type":"NameExpression","name":"String"}]},"name":"container"}]},"Source":"PULSE.CLIENT.RUGBY.MediaDownload = function( container )\n{\n    this.urlGen = new PULSE.CLIENT.RUGBY.getUrlGenerator( { 'type' : 'document' } );\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n\n    this.$container = container;\n    this.$pagination = this.$container.find( '.pagination' );\n    this.$downloadsContainer = this.$container.find( '#mediaDownload' );\n    this.$searchTypes = this.$container.find( '#searchTypes li a' );\n\n    this.templates =\n    {\n        'document' : 'templates/download/document.html',\n        'photo' : 'templates/download/photo.html',\n        'audio' : 'templates/download/audio.html'\n    }\n\n    this.pageNum = 0;\n\n    this.toggle = 'photo';\n\n    // Sets shared paginations details for all the toggles\n    this.pageOptions = {\n        'container' : this.$container,\n        'currentNumberContainer' : '.paginationValue',\n        'maxNumberContainer' : '.maxPages',\n        'displayMoreContainer' : this.$downloadsContainer\n    };\n\n    this.cache = {};\n\n    this.pageSize =\n    {\n        'document' : 10,\n        'photo' : 7,\n        'audio' : 4\n    }\n\n    this.paginationId =\n    {\n        'document' : 'documentDownload' + Math.random(),\n        'photo' : 'photoDownload' + Math.random(),\n        'audio' : 'audioDownload' + Math.random()\n    }\n\n    this.setListeners();\n\n    // this.pageOptions.template = this.templates[ this.toggle ];\n    // this.pageOptions.forwardContainer = '.next';\n    // this.pageOptions.backwardContainer = '.prev';\n\n    // // this.pagination = new PULSE.CLIENT.UI.Pagination(this.pageOptions);\n\n    this.contentTags = this.$container.data( 'tags' );\n\n    this.references = this.$container.data( \"references\" );\n\n    var pageSize = this.$container.data( \"size\" );\n\n    if ( pageSize )\n    {\n        this.pageSize[ 'photo' ] = pageSize;\n    }\n\n    this.getMoreContent();\n}","prototype":{"setListeners":{"Documentation":{"description":"Sets listeners for the toggle and pagination","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MediaDownload.prototype.setListeners = function()\n{\n    var that = this,\n        index = 0;\n\n    this.$searchTypes.on( 'click', function( e, params ){\n\n        for ( var i = 0; i < that.$searchTypes.length; i++ )\n        {\n            $( that.$searchTypes[ i ] ).removeClass( 'active' );\n        }\n\n        switch ( $( this ).text() )\n        {\n            case 'Documents':\n                index = 0;\n                that.toggle = 'document';\n                break;\n            case 'Photos':\n                index = 1;\n                that.toggle = 'photo';\n                break;\n            case 'Audio':\n                index = 2;\n                that.toggle = 'audio';\n        }\n\n        $( that.$searchTypes[ index ] ).addClass( 'active' );\n\n        that.pageNum = 0;\n\n        // Checks if the new toggle data has been cached. If it has then it resets the pagination to\n        // the first page and displays the content.\n        // Otherwise new data is requested for the toggle\n        that.checkIfCached();\n        if ( that.checkIfCached() )\n        {\n            that.pagination.pageNum = 0;\n            that.pagination.setNumEntries( that.cache[ that.toggle ][ that.pageNum ].pageInfo.numEntries );\n            that.publishData( that.cache[ that.toggle ][ that.pageNum ] );\n        }\n        else\n        {\n            that.getMoreContent();\n        }\n\n    });\n\n    PULSE.CLIENT.subscribe( 'content/get', function( e, params )\n    {\n        if ( params.id === that.paginationId[ that.toggle ] )\n        {\n            var cached = false;\n\n            that.pageNum = that.pagination.getPageNum();\n\n            // Checks if the data is cached. If it is then it publishes the cached data,\n            // otherwise it gets more content for the next page\n            if ( that.checkIfCached() )\n            {\n                that.publishData( that.cache[ that.toggle ][ that.pageNum ] )\n            }\n            else\n            {\n                that.getMoreContent();\n            }\n        }\n    });\n}"},"checkIfCached":{"Documentation":{"description":"Checks if the current toggle and page number has been cached.","tags":[{"title":"return","description":"Whether the data exists in the cache","type":{"type":"NameExpression","name":"Boolean"}}]},"Source":"PULSE.CLIENT.RUGBY.MediaDownload.prototype.checkIfCached = function()\n{\n    var cached = false;\n\n     if ( this.cache[ this.toggle ] )\n    {\n        if ( this.cache[ this.toggle ][ this.pageNum ] )\n        {\n            cached = true;\n        }\n    }\n\n    return cached;\n}"},"onData":{"Documentation":{"description":"On data task and sets up paginaton if it doesn't already exist","tags":[{"title":"param","description":"Data for the content items","type":{"type":"NameExpression","name":"Object"},"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.MediaDownload.prototype.onData = function( data )\n{\n    if (! this.pagination )\n    {\n        this.pageOptions.template = this.templates[ this.toggle ];\n        this.pageOptions.pageSize = data.pageInfo.pageSize;\n        this.pageOptions.numEntries = data.pageInfo.numEntries;\n        this.pageOptions.maxEntries = data.pageInfo.numEntries;\n        this.pageOptions.forwardContainer = '.next';\n        this.pageOptions.backwardContainer = '.prev';\n        this.pageOptions.paginationId = this.paginationId[ this.toggle ];\n\n        this.pagination = new PULSE.CLIENT.UI.Pagination(this.pageOptions);\n    }\n\n    this.publishData( data );\n}"},"publishData":{"Documentation":{"description":"Publishes the downloads data for the different toggles","tags":[{"title":"param","description":"Data for the content items","type":{"type":"NameExpression","name":"Object"},"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.MediaDownload.prototype.publishData = function( data )\n{\n    var bestPhotos = [],\n        photoUrls = [];\n\n    // Finds the best variant ( thumnail ) for the photos toggle\n    if ( this.toggle.indexOf( 'photo' ) > -1 )\n    {\n        for ( var i = 0; i < data.content.length; i++ )\n        {\n            bestPhotos.push( PULSE.CLIENT.getBiggestPhotoVariant( data.content[ i ].variants ) );\n            photoUrls.push( PULSE.CLIENT.getBiggestPhotoVariant( data.content[ i ].variants ) );\n        }\n    }\n\n    if ( this.$pagination )\n    {\n        this.$pagination.show();\n    }\n\n    PULSE.CLIENT.Template.publish(\n            this.templates[ this.toggle ],\n            this.$downloadsContainer,\n            {\n                content : data.content, photoVariant : bestPhotos, photoUrls : photoUrls\n            }\n    );\n\n    // Checks if the toggle has already been cached\n    if ( ! this.cache[ this.toggle ] )\n    {\n        this.cache[ this.toggle ] = {};\n        this.pagination.pageNum = 0;\n    }\n\n    // Adds data to the cache\n    this.cache[ this.toggle ][ this.pageNum ] = data;\n    this.pagination.pageSize = this.pageSize[ this.toggle ]\n    this.pagination.setNumEntries( data.pageInfo.numEntries );\n}"},"getMoreContent":{"Documentation":{"description":"Requests more content from the CMS","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MediaDownload.prototype.getMoreContent = function()\n{\n    this.feeds = {};\n\n    this.urlGen.config.type = this.toggle;\n\n    this.loading();\n\n    var contentTags = this.contentTags;\n\n    // if( this.toggle.indexOf( 'photo' ) > -1 )\n    // {\n    //     if ( contentTags && contentTags.length > 0 )\n    //     {\n    //         contentTags = contentTags + ',rights_free';\n    //     }\n    //     else\n    //     {\n    //         contentTags = contentTags + 'rights_free';\n    //     }\n    // }\n\n    // If a photo is requested then make sure only 'rights_free' tagged photos are requested\n    // if( this.toggle.indexOf( 'photo' ) > -1 )\n    // {\n    //     this.feeds.contentUrl = this.urlGen.makeContentQueryUrl( PULSE.CLIENT.CMS_ACCOUNT, PULSE.CLIENT.LANGUAGE, this.pageSize[ this.toggle ], this.pageNum, 'rights_free' );\n    // }\n    // else\n    // {\n    //     this.feeds.contentUrl = this.urlGen.makeContentQueryUrl( PULSE.CLIENT.CMS_ACCOUNT, PULSE.CLIENT.LANGUAGE, this.pageSize[ this.toggle ], this.pageNum );\n    // }\n\n    this.feeds.contentUrl = this.urlGen.makeContentQuery( PULSE.CLIENT.CMS_ACCOUNT, PULSE.CLIENT.LANGUAGE, { \"pageSize\" : this.pageSize[ this.toggle ], \"page\" : this.pageNum, \"tagNames\" : contentTags, \"references\" : this.references } );\n\n\n    this.feeds.feedContent = 'mediaList';\n    this.feeds.contentInterval = 360;\n    this.feeds.contentCallback = 'onMediaContent';\n\n    this.dm.addFeed( this.feeds.feedContent, this.feeds.contentUrl,\n        this.feeds.contentInterval, this.feeds.conentCallback, [ this ] );\n\n    this.dm.start( this.feeds.contentUrl );\n}"},"loading":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MediaDownload.prototype.loading = function()\n{\n    this.$downloadsContainer.html( '<div class=\"spinner\"><div style=\"height : 25px; width : 25px\"></div></div>' );\n\n    // if ( this.$pagination )\n    // {\n    //     this.$pagination.hide();\n    // }\n\n}"}}},"MainMenuWidget":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.MainMenuWidget"},{"title":"param","description":null,"type":null,"name":"container"},{"title":"param","description":null,"type":null,"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.MainMenuWidget = function( container, config )\n{\n    this.$container = $( container );\n    this.$links = this.$container.find( '.navLink' );\n    this.$dropdowns = this.$container.find( '.megaDropdown, .dropdown' );\n    this.$megaDropdown = this.$container.find( '.megaDropdown' );\n    this.$masthead = $( '.masthead' );\n    this.$mobileButton = this.$masthead.find( '.mobileMenuBtn' );\n\n    this.open = false;\n\n    var that = this;\n    this.$links.each( function()\n    {\n        $( this ).on( 'click', function( e )\n        {\n            var href = $( this ).attr( 'href' );\n            if( !href || href === '#' )\n            {\n                var $megaDropdown = $( this ).parent().find( '.megaDropdown, .dropdown' );\n                that.open = $megaDropdown.is( ':visible' ) === false;\n\n                that.$dropdowns.hide();\n                that.$links.removeClass( 'active' );\n                $( this ).toggleClass( 'active', that.open );\n                $megaDropdown.toggle( that.open );\n\n                if( that.open )\n                {\n                    that.attachClickListener();\n                }\n                else\n                {\n                    that.detachClickListener();\n                }\n\n                e.preventDefault();\n                e.stopPropagation();\n            }\n        } );\n    } );\n\n    this.$mobileButton.on( 'click.toggleDeviceNav', function( e ) {\n        var isOpen = that.$masthead.hasClass( 'menuOpen' );\n\n        if( isOpen ) \n        {\n            that.$masthead.removeClass( 'menuOpen' );\n            $( 'body, html' ).removeClass( 'fixedScroll' );\n        } \n        else \n        {\n            that.$masthead.addClass( 'menuOpen' );\n            $( 'body, html' ).addClass( 'fixedScroll' );\n        }\n        e.preventDefault();\n        e.stopPropagation();\n    });\n}","prototype":{"attachClickListener":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MainMenuWidget.prototype.attachClickListener = function()\n{\n    var that = this;\n    $( 'body' ).off( 'click.megadropdown' ).on( 'click.megadropdown', function( e, params )\n    {\n        if ( !that.$megaDropdown.is( e.target ) && that.$megaDropdown.has( e.target ).length === 0 )\n        {\n            $( '.navLink' ).removeClass( 'active' );\n            that.$masthead.removeClass( 'menuOpen' );\n            that.$dropdowns.hide();\n            that.detachClickListener();\n        }\n    } );\n}"},"detachClickListener":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MainMenuWidget.prototype.detachClickListener = function()\n{\n    $( 'body' ).off( 'click.megadropdown' );\n}"}}},"MediaSearch":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for Audio List widget"},{"title":"param","description":"Jquery object or selector string","type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"Object"},{"type":"NameExpression","name":"String"}]},"name":"container"}]},"Source":"PULSE.CLIENT.RUGBY.MediaSearch = function( container )\n{\n    var params = PULSE.CLIENT.Util.parseUrlParameters();\n\n    this.urlGen = new PULSE.CLIENT.RUGBY.getUrlGenerator();\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n\n    this.$container = container;\n    this.$resultsContainer = this.$container.find('#mediaResultsShow');\n    this.$resultsHeader = this.$container.find( '#mediaResultsHeader' );\n\n    this.pageOptions = {\n        'container' : container,\n        'forwardContainer' : '.next',\n        'backwardContainer' : '.prev',\n        'currentNumberContainer' : '.paginationValue',\n        'maxNumberContainer' : '.maxPages',\n        'displayMoreContainer' : '#mediaResultsShow'\n    };\n\n    this.templates =\n    {\n        'video' : 'templates/search/video.html',\n        'audio' : 'templates/search/audio.html',\n        'none' : 'templates/search/noresults.html'\n    }\n\n    this.pageNum = 0;\n\n    this.pageSize =\n    {\n        'video' : 12,\n        'audio' : 12\n    }\n\n     var mediaOptions =\n    {\n        container: container,\n        type: \"list\",//\"player\"\n        link: '.audioThumb', //LIST (data-mediaid is on this link always)\n        link_click : '.audioThumb a',\n        player_scope: \"primary\", //whatever name\n        link_time: '.duration', //inside link container\n        link_title: '.title', //inside link container\n        link_date: '.datePosted', //inside link container\n        external_link_click : '.externalLink',\n        external_player_url : '/worldrugbytv/audio'\n    };\n\n    var mediaList = new PULSE.CLIENT.MediaList( mediaOptions );\n\n    if ( 's' in params )\n    {\n        this.searchText = escape( params[ 's' ] );\n        this.type = escape( params[ 'type' ] );\n        this.$resultsHeader.html( 'Search Results: ' + this.searchText );\n        this.getResults( this.searchText, this.type );\n    }\n\n    this.setListeners();\n}","prototype":{"getResults":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"terms"},{"title":"param","description":null,"type":null,"name":"type"}]},"Source":"PULSE.CLIENT.RUGBY.MediaSearch.prototype.getResults = function( terms, type )\n{\n    var sort = 'timestamp desc';\n\n    this.loading();\n\n    if ( terms )\n    {\n        this.currentSearch = new PULSE.CLIENT.RUGBY.Search( terms, PULSE.CLIENT.LANGUAGE, type, PULSE.CLIENT.CMS_ACCOUNT, sort, this.pageSize[ type ], this.pageNum, false );\n    }\n    else\n    {\n        this.showNoResults();\n    }\n}"},"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MediaSearch.prototype.setListeners = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.SEARCH_EVENTS.SEARCH_UPDATE, function( e, params )\n    {\n\n        var results = that.currentSearch.getResults();\n\n        if ( results.length > 0 )\n        {\n            if ( !that.pagination )\n            {\n                var numEntries = that.currentSearch.getNumEntries();\n\n                that.pageOptions.template = that.templates[ that.type ];\n                that.pageOptions.pageSize = that.pageSize[ that.type ];\n                that.pageOptions.numEntries = numEntries;\n                that.pageOptions.maxEntries = numEntries;\n\n                that.pagination = new PULSE.CLIENT.UI.Pagination(that.pageOptions);\n                that.pagination.total = 0;\n                that.pagination.setData( { content : [ results ] } );\n                that.pagination.total = results.length;\n            }\n            else\n            {\n                that.pagination.setData( { content : [ results ] } );\n                that.pagination.total = that.pagination.total - 1;\n                that.paginationtotal = that.pagination.total + results.length;\n            }\n        }\n        else\n        {\n            that.showNoResults();\n        }\n\n    });\n\n    PULSE.CLIENT.subscribe( 'content/get', function()\n    {\n        that.pageNum = that.pagination.getPageNum();\n        that.getResults( that.searchText, that.type );\n    });\n}"},"showNoResults":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MediaSearch.prototype.showNoResults = function()\n{\n    this.$resultsContainer.html( '' );\n}"},"loading":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MediaSearch.prototype.loading = function()\n{\n    this.$resultsContainer.html( '<div class=\"spinner\"><div style=\"height : 25px; width : 25px\"></div></div>' );\n}"}}},"MediaSearchBar":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for Audio List widget"},{"title":"param","description":"Jquery object or selector string","type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"Object"},{"type":"NameExpression","name":"String"}]},"name":"container"}]},"Source":"PULSE.CLIENT.RUGBY.MediaSearchBar = function( container )\n{\n    var params = PULSE.CLIENT.Util.parseUrlParameters();\n\n    this.$container = container;\n    this.$searchButton = this.$container.find( '#mediaSearchButton' );\n    this.$searchResults = this.$container.find( '#mediaSearchBox' );\n\n    this.$mediaSearchForm = this.$container.find( '#mediaSearchForm' );\n\n    this.$categoryMenu = this.$container.find( '.categoryMenu' );\n    this.$categoryButton = this.$container.find( '.categoriesBtn' );\n\n    this.$audioSwitch = this.$container.find( '#audioSwitch' );\n    this.$videoSwitch = this.$container.find( '#videoSwitch' );\n\n    if ( window.location.href.indexOf( '/audio' ) > -1 )\n    {\n        this.$audioSwitch.addClass( 'active' );\n        this.$videoSwitch.removeClass( 'active' );\n    }\n    else\n    {\n        this.$videoSwitch.addClass( 'active' );\n        this.$audioSwitch.removeClass( 'active' );\n    }\n\n    this.$mediaToggle = this.$container.find( '.mediaToggle .active' );\n\n    this.scope = undefined;\n\n    var dropdownOptions = {\n                'dropdownId' : 'CategoryDropdown',\n                'itemsContainer' : this.$categoryMenu,\n                'itemContainer' : 'li',\n                'currentContainer' : '.categoriesBtn',\n                'dropdownContainer' : this.$categoryMenu\n    };\n\n    var categoryDropdown = new PULSE.CLIENT.UI.DropdownMenu( this.$container, dropdownOptions );\n\n    if ( 's' in params || 'scope' in params )\n    {\n        this.searchText = params[ 's' ];\n        if ( this.searchText )\n        {\n            this.$searchResults.val( this.searchText );\n        }\n    }\n\n    this.setListeners();\n}","prototype":{"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MediaSearchBar.prototype.setListeners = function()\n{\n    var that = this;\n\n    // If the user searches a new term, then the window is refreshed with the new term\n    // as a url parameter - in the form [ url ]?s=[ new term ]\n    this.$searchButton.on( 'click', function( e, params )\n    {\n        that.newSearch( that.$searchResults.val() );\n    } );\n\n    this.$mediaSearchForm.submit( function( e )\n    {\n        e.preventDefault();\n        that.newSearch( that.$searchResults.val() );\n    } );\n\n    this.$categoryMenu.bind( 'itemSelected', function( e, data ){\n        that.newSearch( data.text );\n    } );\n\n    this.$audioSwitch.on( 'click', function( e, params )\n    {\n        e.preventDefault();\n\n        var findUrl = window.location.href;\n\n        if ( findUrl.indexOf( '/video' ) > -1 )\n        {\n            findUrl = findUrl.replace( '/video', '/audio' );\n        }\n        else if ( findUrl.indexOf( '/audio' ) < 0 )\n        {\n            findUrl = findUrl + '/audio';\n        }\n\n        findUrl = findUrl.replace( '?type=video', '?type=audio' );\n        var urlSplit = findUrl.split( '/' );\n\n        if ( /^\\+?(0|[1-9]\\d*)$/.test(urlSplit[ urlSplit.length - 1 ] ) )\n        {\n            urlSplit.splice( -1,1 );\n            findUrl = urlSplit.join( '/' );\n        }\n\n        window.location.href = findUrl;\n    } );\n\n    this.$videoSwitch.on( 'click', function( e, params )\n    {\n        e.preventDefault();\n        var findUrl = window.location.href;\n\n        if ( findUrl.indexOf( '/audio' ) > -1 )\n        {\n            findUrl = findUrl.replace( '/audio', '/video' );\n        }\n        else if ( findUrl.indexOf( '/video' ) < 0 )\n        {\n            findUrl = findUrl + '/video';\n        }\n\n        findUrl = findUrl.replace( '?type=audio', '?type=video' );\n\n        var urlSplit = findUrl.split( '/' );\n        if ( /^\\+?(0|[1-9]\\d*)$/.test(urlSplit[ urlSplit.length - 1 ] ) )\n        {\n            urlSplit.splice( -1,1 );\n            findUrl = urlSplit.join( '/' );\n        }\n\n        window.location.href = findUrl;\n    } );\n\n}"},"newSearch":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"term"}]},"Source":"PULSE.CLIENT.RUGBY.MediaSearchBar.prototype.newSearch = function( term )\n{\n    this.searchText = term;\n\n    if ( term.length > 2 )\n    {\n        var url = '/worldrugbytv/',\n                type = this.$mediaToggle.text().toLowerCase(),\n                endUrl = '?type=' + type;\n\n        url = url + type + '/search';\n\n        if ( this.searchText )\n        {\n            endUrl = endUrl + '&s=' + this.searchText;\n        }\n\n        if (url.indexOf('?') > -1)\n        {\n           url = url.split( '?' )[ 0 ] + endUrl;\n        }\n        else\n        {\n           url = url + endUrl;\n        }\n        window.location.href = url;\n    }\n}"}}},"NewsListWidget":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the news list widget"},{"title":"param","description":"Jquery object or selector","type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"Object"},{"type":"NameExpression","name":"String"}]},"name":"container"}]},"Source":"PULSE.CLIENT.RUGBY.NewsListWidget = function ( container )\n{\n    this.$container = $( container );\n\n    this.urlGen = new PULSE.CLIENT.RUGBY.getUrlGenerator( { 'type' : 'text' } );\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n    this.restrictedOnly = this.$container.data( 'restricted-only' ) === \"true\";\n\n    this.refreshTimeStamps();\n\n    var pageOptions = {\n        'container' : container,\n        'forwardContainer' : '.next',\n        'backwardContainer' : '.prev',\n        'currentNumberContainer' : '.paginationValue',\n        'maxNumberContainer' : '.maxPages',\n        'template' : this.$container.data( 'item-tpl' ) || 'templates/content/news-list.html',\n        'displayMoreContainer' : '.newsList',\n        //'urlPaginated' : /\\/news\\/([0-9])\\/*/\n        'urlPaginated' : this.$container.data( 'newsListUrlPaginated' ) || false\n    };\n\n    var showOptions = {\n        'container' : container,\n        'showMoreContainer' : '#moreNews',\n        'template' : 'templates/content/news-list.html',\n        'displayMoreContainer' : '.newsList'\n    };\n\n    this.setListeners();\n    this.pageOps = pageOptions;\n\n    var paginationContainer = this.$container.find( '.paginationValue' );\n\n    if ( paginationContainer.length > 0 )\n    {\n        this.moreContent = new PULSE.CLIENT.UI.Pagination( pageOptions );\n        if(this.pageOps.urlPaginated)\n        {\n            this.moreContent.checkUrl();\n        }\n\n    }\n    else {\n        this.moreContent = new PULSE.CLIENT.UI.ShowMore( showOptions );\n    }\n\n\n\n}","prototype":{"addReference":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"reference"}]},"Source":"PULSE.CLIENT.RUGBY.NewsListWidget.prototype.addReference = function ( reference )\n{\n    var reference = reference || '';\n    var refLength = 0;\n\n    if ( this.moreContent.references.indexOf( reference ) === -1 )\n    {\n        refLength = this.moreContent.references.length;\n        reference = refLength ? ',' + reference : reference;\n        this.moreContent.references += reference;\n    }\n\n    this.$container.data( 'references', this.moreContent.references );\n}"},"removeReference":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"reference"}]},"Source":"PULSE.CLIENT.RUGBY.NewsListWidget.prototype.removeReference = function ( reference )\n{\n    var reference = reference || '';\n\n    var contentReferences = this.moreContent.references.split( ',' );\n    var idx = contentReferences.indexOf( reference );\n\n    if ( idx !== -1 )\n    {\n        contentReferences.splice( idx, 1 );\n        this.moreContent.references = contentReferences.join( ',' );\n    }\n\n    this.$container.data( 'references', this.moreContent.references );\n}"},"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.NewsListWidget.prototype.setListeners = function ()\n{\n    var that = this;\n\n    $( 'body' ).on( 'content/get', function ()\n    {\n        that.getMoreContent();\n    } );\n\n    $( 'body' ).on( 'filter-drop-down.team-filter-1', function ( e, data )\n    {\n        var id = data.id || '';\n        var type = data.type || '';\n\n        that.moreContent.references = '';\n        that.moreContent.pageNum = 0;\n\n        data.items.map( function ( item, idx )\n        {\n            that.addReference( type + ':' + item );\n        } );\n\n        that.getMoreContent();\n    } );\n}"},"getMoreContent":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.NewsListWidget.prototype.getMoreContent = function ()\n{\n    this.feeds = {};\n\n    this.feeds.contentUrl = this.urlGen.makeContentQuery( PULSE.CLIENT.CMS_ACCOUNT, PULSE.CLIENT.LANGUAGE, {\n        \"pageSize\" : this.moreContent.pageSize || parseInt( this.$container.data( 'page-size' ) ),\n        \"page\" : this.moreContent.pageNum,\n        \"tagNames\" : this.moreContent.contentTags || this.$container.data( 'tags' ),\n        \"references\" : this.moreContent.references || this.$container.data( \"references\" ),\n        \"onlyRestrictedContent\": this.restrictedOnly\n    } );\n\n    this.feeds.feedContent = 'newsList';\n    this.feeds.contentInterval = 360;\n    this.feeds.contentCallback = 'onNewsList';\n\n    this.dm.addFeed( this.feeds.feedContent, this.feeds.contentUrl,\n        this.feeds.contentInterval, this.feeds.contentCallback, [ this ] );\n\n    this.dm.start( this.feeds.contentUrl );\n}"},"onData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.NewsListWidget.prototype.onData = function ( data )\n{\n    this.moreContent.setData( data );\n    this.moreContent.setPageInfo( data );\n}"},"refreshTimeStamps":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.NewsListWidget.prototype.refreshTimeStamps = function ()\n{\n    var stamps = this.$container.find( '.newsTimeStamp' );\n\n    for ( var i = 0; i < stamps.length; i++ )\n    {\n        stamp = $( stamps[ i ] ).text();\n\n        if ( stamp.split( ' ' ).length < 2 )\n        {\n            $( stamps[ i ] ).text( PULSE.CLIENT.DateUtil.getDaysAgo( stamp ) );\n        }\n    }\n}"}}},"GalleriesPlaylist":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.GalleriesPlaylist"},{"title":"param","description":null,"type":null,"name":"container"}]},"Source":"PULSE.CLIENT.RUGBY.GalleriesPlaylist = function( container )\n{\n    this.$container = $( container );\n\n    this.urlGen = new PULSE.CLIENT.RUGBY.getUrlGenerator( { 'type' : 'playlist' } );\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n\n    this.paginationId = 'galleryList' + Math.random();\n\n    var pageOptions = {\n        'container' : container,\n        'forwardContainer' : '.next',\n        'backwardContainer' : '.prev',\n        'currentNumberContainer' : '.paginationValue',\n        'maxNumberContainer' : '.maxPages',\n        'template' : 'templates/content/galleries-list.html',\n        'displayMoreContainer' : '#showMoreContainer',\n        'paginationId' : this.paginationId\n    };\n\n    var showOptions = {\n        'container' : container,\n        'showMoreContainer' : '#showMore',\n        'template' : 'templates/content/galleries-list.html',\n        'displayMoreContainer' : '#showMoreContainer'\n    };\n\n    this.setListeners();\n\n    var paginationContainer = this.$container.find( '.paginationValue' );\n\n    if( paginationContainer.length > 0 )\n    {\n        this.moreContent = new PULSE.CLIENT.UI.Pagination( pageOptions );\n    }\n    else\n    {\n        this.moreContent = new PULSE.CLIENT.UI.ShowMore( showOptions );\n    }\n\n}","prototype":{"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.GalleriesPlaylist.prototype.setListeners = function()\n{\n    var that = this;\n\n    $( 'body' ).on( 'content/get', function( e, params )\n    {\n        if ( params.id === that.paginationId )\n        {\n            that.getMoreContent();\n        }\n    });\n}"},"getMoreContent":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.GalleriesPlaylist.prototype.getMoreContent = function()\n{\n    this.feeds = {};\n\n    // if( this.moreContent.contentTags.length > 0 )\n    // {\n    //     this.feeds.contentUrl = this.urlGen.makeContentQuery( PULSE.CLIENT.CMS_ACCOUNT, PULSE.CLIENT.LANGUAGE, { pageSize: this.moreContent.pageSize, page: this.moreContent.pageNum, tags: this.moreContent.contentTags, playlistTypeRestriction : 'photo' } );\n    // }\n    // else\n    // {\n    //     this.feeds.contentUrl = this.urlGen.makeContentQuery( PULSE.CLIENT.CMS_ACCOUNT, PULSE.CLIENT.LANGUAGE, { pageSize: this.moreContent.pageSize, page: this.moreContent.pageNum, playlistTypeRestriction : 'photo' } );\n    // }\n\n    this.feeds.contentUrl = this.urlGen.makeContentQuery( PULSE.CLIENT.CMS_ACCOUNT, PULSE.CLIENT.LANGUAGE, { \"pageSize\" : this.moreContent.pageSize, \"page\" : this.moreContent.pageNum, playlistTypeRestriction : \"photo\", \"tagNames\" : this.moreContent.contentTags, \"references\" : this.moreContent.references } );\n\n    this.feeds.feedContent = 'photogallery';\n    this.feeds.contentInterval = 360;\n    this.feeds.contentCallback = 'on' + this.moreContent.contentType;\n\n    this.dm.addFeed( this.feeds.feedContent, this.feeds.contentUrl,\n        this.feeds.contentInterval, this.feeds.conentCallback, [ this ] );\n\n    this.dm.start( this.feeds.contentUrl );\n}"},"onData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.GalleriesPlaylist.prototype.onData = function( data )\n{\n    this.moreContent.setData( data );\n}"}}},"RankingsPredictor":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the rankings predictor widget"},{"title":"param","description":"Jquery/Dom/Selector for this widget container","type":{"type":"NameExpression","name":"Object"},"name":"container"}]},"Source":"PULSE.CLIENT.RUGBY.RankingsPredictor = function( container )\n{\n    var today = ( new Date()).format( 'yyyy-mm-dd' );\n\n    this.scheduleRequestOptions = {\n        startDate: today,\n        states: [ 'U', 'L' ]\n    };\n\n    this.$container = $( container );\n    this.$teamSelect = this.$container.find( '.teamSelect' )\n\n    this.templates = {\n        match: 'templates/rankings/new-match.html',\n        pastmatch: 'templates/rankings/past-match.html',\n        table: 'templates/rankings/table.html',\n        teamlist: 'templates/rankings/team-list.html'\n    };\n\n    this.limit = 10;\n    this.refresh = true;\n    this.init = true;\n    this.pastUpcoming = 0;\n    this.upcoming = false;\n\n    var new_rankings = this.newRankings( 75.36, 80.92, 'draw', false, false, 2 );\n    this.ranking = new PULSE.CLIENT.RUGBY.Rankings( 'mru' );\n    this.next_rankings = {entries : []};\n    this.movement = [];\n    this.past_buttons = [];\n    this.matches = [];\n    this.rank_difs = [];\n\n    this.groups = {};\n\n    this.metaSchedule = new PULSE.CLIENT.RUGBY.Schedule();\n\n    this.addListeners( container );\n    this.setSubscriptions( container );\n\n    this.$container.find( '#add_upcoming' ).hide();\n    this.$container.find( '#upcoming_limit' ).hide();\n\n    this.$container.find( '.teamListHome' ).hide();\n    this.$container.find( '.teamListAway' ).hide();\n\n    PULSE.CLIENT.Template.append(\n        this.templates.match,\n        this.$container.find( '.teamSelect' ),\n        {}\n    );\n\n    var params = PULSE.CLIENT.Util.parseUrlParameters();\n\n    if ( params.mid )\n    {\n        var pathArray = [ 'match', params.mid, 'summary' ];\n        this.feeds = {};\n        this.urlGen = new PULSE.CLIENT.RUGBY.getUrlGenerator();\n        this.dm = PULSE.CLIENT.getJqueryDataManager();\n        this.feeds.contentUrl = this.urlGen.makeDataUrl( pathArray, { language: PULSE.CLIENT.LANGUAGE } );\n\n        this.feeds.feedContent = 'match';\n        this.feeds.contentInterval = 360;\n        this.feeds.contentCallback = 'onmatch';\n\n        this.dm.addFeed( this.feeds.feedContent, this.feeds.contentUrl,\n        this.feeds.contentInterval, this.feeds.conentCallback, [ this ] );\n\n        this.dm.start( this.feeds.contentUrl );\n    }\n\n    // Only need when server is down\n    // var testRankings = {\"label\":\"Mens Rugby Union\",\"entries\":[{\"team\":{\"id\":37,\"name\":\"New Zealand\",\"abbreviation\":\"NZL\"},\"matches\":147,\"pts\":93.81138,\"pos\":1},{\"team\":{\"id\":39,\"name\":\"South Africa\",\"abbreviation\":\"RSA\"},\"matches\":140,\"pts\":89.33828,\"pos\":2},{\"team\":{\"id\":38,\"name\":\"Australia\",\"abbreviation\":\"AUS\"},\"matches\":152,\"pts\":86.9363,\"pos\":3},{\"team\":{\"id\":34,\"name\":\"England\",\"abbreviation\":\"ENG\"},\"matches\":138,\"pts\":85.67704,\"pos\":4},{\"team\":{\"id\":36,\"name\":\"Ireland\",\"abbreviation\":\"IRE\"},\"matches\":130,\"pts\":83.4438,\"pos\":5},{\"team\":{\"id\":33,\"name\":\"Wales\",\"abbreviation\":\"WAL\"},\"matches\":143,\"pts\":80.69676,\"pos\":6},{\"team\":{\"id\":42,\"name\":\"France\",\"abbreviation\":\"FRA\"},\"matches\":139,\"pts\":80.01295,\"pos\":7},{\"team\":{\"id\":35,\"name\":\"Scotland\",\"abbreviation\":\"SCO\"},\"matches\":127,\"pts\":77.77967,\"pos\":8},{\"team\":{\"id\":45,\"name\":\"Samoa\",\"abbreviation\":\"SAM\"},\"matches\":79,\"pts\":76.5919,\"pos\":9},{\"team\":{\"id\":49,\"name\":\"Japan\",\"abbreviation\":\"JPN\"},\"matches\":121,\"pts\":75.38749,\"pos\":10},{\"team\":{\"id\":46,\"name\":\"Fiji\",\"abbreviation\":\"FJI\"},\"matches\":80,\"pts\":74.56182,\"pos\":11},{\"team\":{\"id\":40,\"name\":\"Argentina\",\"abbreviation\":\"ARG\"},\"matches\":119,\"pts\":73.97526,\"pos\":12},{\"team\":{\"id\":47,\"name\":\"Tonga\",\"abbreviation\":\"TGA\"},\"matches\":71,\"pts\":72.5764,\"pos\":13},{\"team\":{\"id\":41,\"name\":\"Italy\",\"abbreviation\":\"ITA\"},\"matches\":131,\"pts\":70.91672,\"pos\":14},{\"team\":{\"id\":720,\"name\":\"Georgia\",\"abbreviation\":\"GEO\"},\"matches\":103,\"pts\":70.460266,\"pos\":15},{\"team\":{\"id\":52,\"name\":\"Romania\",\"abbreviation\":\"ROM\"},\"matches\":110,\"pts\":68.419426,\"pos\":16},{\"team\":{\"id\":50,\"name\":\"Canada\",\"abbreviation\":\"CAN\"},\"matches\":82,\"pts\":68.01011,\"pos\":17},{\"team\":{\"id\":51,\"name\":\"USA\",\"abbreviation\":\"USA\"},\"matches\":77,\"pts\":67.30213,\"pos\":18},{\"team\":{\"id\":68,\"name\":\"Uruguay\",\"abbreviation\":\"URU\"},\"matches\":83,\"pts\":62.88778,\"pos\":19},{\"team\":{\"id\":756,\"name\":\"Russia\",\"abbreviation\":\"RUS\"},\"matches\":94,\"pts\":62.05924,\"pos\":20},{\"team\":{\"id\":43,\"name\":\"Spain\",\"abbreviation\":\"ESP\"},\"matches\":82,\"pts\":60.652107,\"pos\":21},{\"team\":{\"id\":58,\"name\":\"Namibia\",\"abbreviation\":\"NAM\"},\"matches\":66,\"pts\":58.77868,\"pos\":22},{\"team\":{\"id\":725,\"name\":\"Hong Kong\",\"abbreviation\":\"HKG\"},\"matches\":66,\"pts\":58.466354,\"pos\":23},{\"team\":{\"id\":44,\"name\":\"Portugal\",\"abbreviation\":\"POR\"},\"matches\":99,\"pts\":57.726192,\"pos\":24},{\"team\":{\"id\":736,\"name\":\"Korea\",\"abbreviation\":\"KOR\"},\"matches\":49,\"pts\":57.221397,\"pos\":25},{\"team\":{\"id\":721,\"name\":\"Germany\",\"abbreviation\":\"GER\"},\"matches\":66,\"pts\":57.187023,\"pos\":26},{\"team\":{\"id\":57,\"name\":\"Zimbabwe\",\"abbreviation\":\"ZIM\"},\"matches\":49,\"pts\":55.975014,\"pos\":27},{\"team\":{\"id\":708,\"name\":\"Chile\",\"abbreviation\":\"CHL\"},\"matches\":52,\"pts\":54.535316,\"pos\":28},{\"team\":{\"id\":743,\"name\":\"Moldova\",\"abbreviation\":\"MDA\"},\"matches\":57,\"pts\":54.098,\"pos\":29},{\"team\":{\"id\":699,\"name\":\"Belgium\",\"abbreviation\":\"BEL\"},\"matches\":67,\"pts\":53.898026,\"pos\":30},{\"team\":{\"id\":64,\"name\":\"Netherlands\",\"abbreviation\":\"NED\"},\"matches\":63,\"pts\":53.158863,\"pos\":31},{\"team\":{\"id\":777,\"name\":\"Ukraine\",\"abbreviation\":\"UKR\"},\"matches\":65,\"pts\":52.37362,\"pos\":32},{\"team\":{\"id\":735,\"name\":\"Kenya\",\"abbreviation\":\"KEN\"},\"matches\":62,\"pts\":51.988926,\"pos\":33},{\"team\":{\"id\":745,\"name\":\"Morocco\",\"abbreviation\":\"MAR\"},\"matches\":39,\"pts\":51.17771,\"pos\":34},{\"team\":{\"id\":753,\"name\":\"Poland\",\"abbreviation\":\"POL\"},\"matches\":59,\"pts\":50.637276,\"pos\":35},{\"team\":{\"id\":693,\"name\":\"Arabian Gulf\",\"abbreviation\":\"AER\"},\"matches\":32,\"pts\":51.888847,\"pos\":36},{\"team\":{\"id\":703,\"name\":\"Brazil\",\"abbreviation\":\"BRA\"},\"matches\":55,\"pts\":50.626667,\"pos\":36},{\"team\":{\"id\":751,\"name\":\"Paraguay\",\"abbreviation\":\"PAR\"},\"matches\":42,\"pts\":50.42411,\"pos\":37},{\"team\":{\"id\":775,\"name\":\"Tunisia\",\"abbreviation\":\"TUN\"},\"matches\":40,\"pts\":49.892048,\"pos\":38},{\"team\":{\"id\":714,\"name\":\"Czech Republic\",\"abbreviation\":\"CZE\"},\"matches\":65,\"pts\":49.490982,\"pos\":39},{\"team\":{\"id\":734,\"name\":\"Kazakhstan\",\"abbreviation\":\"KAZ\"},\"matches\":52,\"pts\":48.906116,\"pos\":40},{\"team\":{\"id\":1030,\"name\":\"Malta\",\"abbreviation\":\"MLT\"},\"matches\":56,\"pts\":48.85422,\"pos\":41},{\"team\":{\"id\":759,\"name\":\"Senegal\",\"abbreviation\":\"SEN\"},\"matches\":34,\"pts\":48.685307,\"pos\":42},{\"team\":{\"id\":740,\"name\":\"Madagascar\",\"abbreviation\":\"MAD\"},\"matches\":39,\"pts\":48.500282,\"pos\":43},{\"team\":{\"id\":769,\"name\":\"Sweden\",\"abbreviation\":\"SWE\"},\"matches\":58,\"pts\":47.822598,\"pos\":44},{\"team\":{\"id\":770,\"name\":\"Switzerland\",\"abbreviation\":\"SUI\"},\"matches\":48,\"pts\":47.265175,\"pos\":45},{\"team\":{\"id\":712,\"name\":\"Cook Islands\",\"abbreviation\":\"COK\"},\"matches\":24,\"pts\":47.106884,\"pos\":46},{\"team\":{\"id\":681,\"name\":\"Cote D'Ivoire\",\"abbreviation\":\"CIV\"},\"matches\":37,\"pts\":47.076332,\"pos\":47},{\"team\":{\"id\":766,\"name\":\"Sri Lanka\",\"abbreviation\":\"SRI\"},\"matches\":46,\"pts\":46.950104,\"pos\":48},{\"team\":{\"id\":738,\"name\":\"Lithuania\",\"abbreviation\":\"LTU\"},\"matches\":55,\"pts\":46.20372,\"pos\":49},{\"team\":{\"id\":729,\"name\":\"Israel\",\"abbreviation\":\"ISR\"},\"matches\":50,\"pts\":45.74983,\"pos\":50},{\"team\":{\"id\":2537,\"name\":\"Philippines\",\"abbreviation\":\"PHP\"},\"matches\":21,\"pts\":45.567543,\"pos\":51},{\"team\":{\"id\":774,\"name\":\"Trinidad & Tobago\",\"abbreviation\":\"TRI\"},\"matches\":27,\"pts\":45.50433,\"pos\":52},{\"team\":{\"id\":723,\"name\":\"Guyana\",\"abbreviation\":\"GUY\"},\"matches\":26,\"pts\":45.49038,\"pos\":53},{\"team\":{\"id\":707,\"name\":\"Cayman Islands\",\"abbreviation\":\"CAY\"},\"matches\":27,\"pts\":45.409065,\"pos\":54},{\"team\":{\"id\":713,\"name\":\"Croatia\",\"abbreviation\":\"CRO\"},\"matches\":56,\"pts\":45.280514,\"pos\":55},{\"team\":{\"id\":750,\"name\":\"Papua New Guinea\",\"abbreviation\":\"PNG\"},\"matches\":25,\"pts\":45.267494,\"pos\":56},{\"team\":{\"id\":776,\"name\":\"Uganda\",\"abbreviation\":\"UGA\"},\"matches\":56,\"pts\":44.67534,\"pos\":57},{\"team\":{\"id\":760,\"name\":\"Singapore\",\"abbreviation\":\"SIN\"},\"matches\":37,\"pts\":44.53986,\"pos\":58},{\"team\":{\"id\":772,\"name\":\"Thailand\",\"abbreviation\":\"THA\"},\"matches\":36,\"pts\":43.372196,\"pos\":59},{\"team\":{\"id\":711,\"name\":\"Colombia\",\"abbreviation\":\"COL\"},\"matches\":39,\"pts\":43.32711,\"pos\":60},{\"team\":{\"id\":1247,\"name\":\"Mexico\",\"abbreviation\":\"MEX\"},\"matches\":17,\"pts\":43.20349,\"pos\":61},{\"team\":{\"id\":737,\"name\":\"Latvia\",\"abbreviation\":\"LAT\"},\"matches\":54,\"pts\":42.96301,\"pos\":62},{\"team\":{\"id\":710,\"name\":\"Chinese Taipei\",\"abbreviation\":\"TPE\"},\"matches\":39,\"pts\":42.617374,\"pos\":63},{\"team\":{\"id\":692,\"name\":\"Andorra\",\"abbreviation\":\"AND\"},\"matches\":51,\"pts\":42.536945,\"pos\":64},{\"team\":{\"id\":781,\"name\":\"Venezuela\",\"abbreviation\":\"VEN\"},\"matches\":41,\"pts\":41.665024,\"pos\":65},{\"team\":{\"id\":700,\"name\":\"Bermuda\",\"abbreviation\":\"BER\"},\"matches\":29,\"pts\":41.588715,\"pos\":66},{\"team\":{\"id\":709,\"name\":\"China\",\"abbreviation\":\"CHN\"},\"matches\":33,\"pts\":41.473335,\"pos\":67},{\"team\":{\"id\":726,\"name\":\"Hungary\",\"abbreviation\":\"HUN\"},\"matches\":53,\"pts\":41.02297,\"pos\":68},{\"team\":{\"id\":748,\"name\":\"Niue Island\",\"abbreviation\":\"NIU\"},\"matches\":19,\"pts\":40.446674,\"pos\":69},{\"team\":{\"id\":762,\"name\":\"Solomon Islands\",\"abbreviation\":\"SOL\"},\"matches\":18,\"pts\":40.350567,\"pos\":70},{\"team\":{\"id\":741,\"name\":\"Malaysia\",\"abbreviation\":\"MAS\"},\"matches\":32,\"pts\":40.196766,\"pos\":71},{\"team\":{\"id\":752,\"name\":\"Peru\",\"abbreviation\":\"PER\"},\"matches\":40,\"pts\":40.13029,\"pos\":72},{\"team\":{\"id\":715,\"name\":\"Denmark\",\"abbreviation\":\"DEN\"},\"matches\":58,\"pts\":39.936363,\"pos\":73},{\"team\":{\"id\":702,\"name\":\"Botswana\",\"abbreviation\":\"BWA\"},\"matches\":29,\"pts\":39.642326,\"pos\":74},{\"team\":{\"id\":727,\"name\":\"India\",\"abbreviation\":\"IND\"},\"matches\":29,\"pts\":39.071053,\"pos\":75},{\"team\":{\"id\":705,\"name\":\"Cameroon\",\"abbreviation\":\"CAM\"},\"matches\":25,\"pts\":38.326572,\"pos\":76},{\"team\":{\"id\":698,\"name\":\"Barbados\",\"abbreviation\":\"BRB\"},\"matches\":30,\"pts\":38.25607,\"pos\":77},{\"team\":{\"id\":1031,\"name\":\"Nigeria\",\"abbreviation\":\"NGA\"},\"matches\":20,\"pts\":38.054245,\"pos\":78},{\"team\":{\"id\":732,\"name\":\"Jamaica\",\"abbreviation\":\"JAM\"},\"matches\":22,\"pts\":36.99363,\"pos\":79},{\"team\":{\"id\":767,\"name\":\"St Lucia\",\"abbreviation\":\"LCA\"},\"matches\":14,\"pts\":37.56884,\"pos\":80},{\"team\":{\"id\":2476,\"name\":\"St Vincent and the Grenadines\",\"abbreviation\":\"SVG\"},\"matches\":13,\"pts\":36.841846,\"pos\":80},{\"team\":{\"id\":2397,\"name\":\"Pakistan\",\"abbreviation\":\"PAK\"},\"matches\":12,\"pts\":36.73589,\"pos\":81},{\"team\":{\"id\":696,\"name\":\"Austria\",\"abbreviation\":\"AUT\"},\"matches\":54,\"pts\":36.58946,\"pos\":82},{\"team\":{\"id\":2340,\"name\":\"Serbia\",\"abbreviation\":\"SRB\"},\"matches\":49,\"pts\":36.544487,\"pos\":83},{\"team\":{\"id\":761,\"name\":\"Slovenia\",\"abbreviation\":\"SVN\"},\"matches\":53,\"pts\":36.49019,\"pos\":84},{\"team\":{\"id\":739,\"name\":\"Luxembourg\",\"abbreviation\":\"LUX\"},\"matches\":49,\"pts\":35.939648,\"pos\":85},{\"team\":{\"id\":771,\"name\":\"Tahiti\",\"abbreviation\":\"PYF\"},\"matches\":15,\"pts\":35.374683,\"pos\":86},{\"team\":{\"id\":744,\"name\":\"Monaco\",\"abbreviation\":\"MON\"},\"matches\":12,\"pts\":35.17156,\"pos\":87},{\"team\":{\"id\":722,\"name\":\"Guam\",\"abbreviation\":\"GUM\"},\"matches\":17,\"pts\":34.950787,\"pos\":88},{\"team\":{\"id\":784,\"name\":\"Zambia\",\"abbreviation\":\"ZAM\"},\"matches\":35,\"pts\":34.768196,\"pos\":89},{\"team\":{\"id\":701,\"name\":\"Bosnia & Herzegovina\",\"abbreviation\":\"BIH\"},\"matches\":38,\"pts\":34.543686,\"pos\":90},{\"team\":{\"id\":704,\"name\":\"Bulgaria\",\"abbreviation\":\"BUL\"},\"matches\":48,\"pts\":34.523483,\"pos\":91},{\"team\":{\"id\":2857,\"name\":\"Mauritius\",\"abbreviation\":\"MUS\"},\"matches\":14,\"pts\":33.857563,\"pos\":92},{\"team\":{\"id\":780,\"name\":\"Vanuatu\",\"abbreviation\":\"VAN\"},\"matches\":16,\"pts\":33.453693,\"pos\":93},{\"team\":{\"id\":697,\"name\":\"Bahamas\",\"abbreviation\":\"BHS\"},\"matches\":23,\"pts\":32.992638,\"pos\":94},{\"team\":{\"id\":749,\"name\":\"Norway\",\"abbreviation\":\"NOR\"},\"matches\":52,\"pts\":32.677498,\"pos\":95},{\"team\":{\"id\":768,\"name\":\"Swaziland\",\"abbreviation\":\"SWZ\"},\"matches\":18,\"pts\":32.041035,\"pos\":96},{\"team\":{\"id\":2861,\"name\":\"Uzbekistan\",\"abbreviation\":\"UZB\"},\"matches\":1,\"pts\":31.93651,\"pos\":97},{\"team\":{\"id\":3223,\"name\":\"United Arab Emirates\",\"abbreviation\":\"UAE\"},\"matches\":18,\"pts\":30.0,\"pos\":98},{\"team\":{\"id\":3674,\"name\":\"American Samoa\",\"abbreviation\":\"ASA\"},\"matches\":10,\"pts\":30.0,\"pos\":98},{\"team\":{\"id\":2576,\"name\":\"Indonesia\",\"abbreviation\":\"IDO\"},\"matches\":1,\"pts\":30.0,\"pos\":98},{\"team\":{\"id\":1029,\"name\":\"Finland\",\"abbreviation\":\"FIN\"},\"matches\":41,\"pts\":29.435652,\"pos\":101},{\"team\":{\"id\":2529,\"name\":\"Greece\",\"abbreviation\":\"HEL\"},\"matches\":17,\"pts\":28.546452,\"pos\":102}]};\n    //     this.ranking.getRankingsData({start: true});\n    //         this.ranking.feeds.feedRankings = 'rankings';\n    //         this.ranking.onData( testRankings, 'rankings' );\n\n    // var testTournament = { schedule: {\"event\":{\"id\":1238,\"label\":\"Rugby World Cup 2015\",\"sport\":\"mru\",\"start\":{\"millis\":1441065600000,\"label\":\"2015-09-01\"},\"end\":{\"millis\":1447545600000,\"label\":\"2015-11-15\"}},\"matches\":[{\"matchId\":14184,\"description\":\"Match 1\",\"eventPhase\":\"Pool A\",\"venue\":{\"id\":4,\"name\":\"Twickenham\",\"city\":\"London\",\"country\":\"England\"},\"time\":{\"millis\":1442610000000,\"gmtOffset\":1.0,\"label\":\"Fri 18 Sep 2015, 20:00 GMT+01:00\"},\"teams\":[{\"id\":34,\"name\":\"England\",\"abbreviation\":\"ENG\"},{\"id\":46,\"name\":\"Fiji\",\"abbreviation\":\"FJI\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14206,\"description\":\"Match 2\",\"eventPhase\":\"Pool C\",\"venue\":{\"id\":31,\"name\":\"Kingsholm\",\"city\":\"Gloucester\",\"country\":\"England\"},\"time\":{\"millis\":1442667600000,\"gmtOffset\":1.0,\"label\":\"Sat 19 Sep 2015, 12:00 GMT+01:00\"},\"teams\":[{\"id\":47,\"name\":\"Tonga\",\"abbreviation\":\"TGA\"},{\"id\":720,\"name\":\"Georgia\",\"abbreviation\":\"GEO\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14220,\"description\":\"Match 3\",\"eventPhase\":\"Pool D\",\"venue\":{\"id\":2,\"name\":\"Millennium Stadium\",\"city\":\"Cardiff\",\"country\":\"Wales\"},\"time\":{\"millis\":1442676600000,\"gmtOffset\":1.0,\"label\":\"Sat 19 Sep 2015, 14:30 GMT+01:00\"},\"teams\":[{\"id\":36,\"name\":\"Ireland\",\"abbreviation\":\"IRE\"},{\"id\":50,\"name\":\"Canada\",\"abbreviation\":\"CAN\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14194,\"description\":\"Match 4\",\"eventPhase\":\"Pool B\",\"venue\":{\"id\":1184,\"name\":\"Brighton Community Stadium\",\"city\":\"Brighton\",\"country\":\"England\"},\"time\":{\"millis\":1442684700000,\"gmtOffset\":1.0,\"label\":\"Sat 19 Sep 2015, 16:45 GMT+01:00\"},\"teams\":[{\"id\":39,\"name\":\"South Africa\",\"abbreviation\":\"RSA\"},{\"id\":49,\"name\":\"Japan\",\"abbreviation\":\"JPN\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14221,\"description\":\"Match 5\",\"eventPhase\":\"Pool D\",\"venue\":{\"id\":4,\"name\":\"Twickenham\",\"city\":\"London\",\"country\":\"England\"},\"time\":{\"millis\":1442696400000,\"gmtOffset\":1.0,\"label\":\"Sat 19 Sep 2015, 20:00 GMT+01:00\"},\"teams\":[{\"id\":42,\"name\":\"France\",\"abbreviation\":\"FRA\"},{\"id\":41,\"name\":\"Italy\",\"abbreviation\":\"ITA\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14195,\"description\":\"Match 6\",\"eventPhase\":\"Pool B\",\"venue\":{\"id\":1184,\"name\":\"Brighton Community Stadium\",\"city\":\"Brighton\",\"country\":\"England\"},\"time\":{\"millis\":1442754000000,\"gmtOffset\":1.0,\"label\":\"Sun 20 Sep 2015, 12:00 GMT+01:00\"},\"teams\":[{\"id\":45,\"name\":\"Samoa\",\"abbreviation\":\"SAM\"},{\"id\":51,\"name\":\"USA\",\"abbreviation\":\"USA\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14185,\"description\":\"Match 7\",\"eventPhase\":\"Pool A\",\"venue\":{\"id\":2,\"name\":\"Millennium Stadium\",\"city\":\"Cardiff\",\"country\":\"Wales\"},\"time\":{\"millis\":1442763000000,\"gmtOffset\":1.0,\"label\":\"Sun 20 Sep 2015, 14:30 GMT+01:00\"},\"teams\":[{\"id\":33,\"name\":\"Wales\",\"abbreviation\":\"WAL\"},null],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14208,\"description\":\"Match 8\",\"eventPhase\":\"Pool C\",\"venue\":{\"id\":9,\"name\":\"Wembley Stadium\",\"city\":\"London\",\"country\":\"England\"},\"time\":{\"millis\":1442771100000,\"gmtOffset\":1.0,\"label\":\"Sun 20 Sep 2015, 16:45 GMT+01:00\"},\"teams\":[{\"id\":37,\"name\":\"New Zealand\",\"abbreviation\":\"NZL\"},{\"id\":40,\"name\":\"Argentina\",\"abbreviation\":\"ARG\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14196,\"description\":\"Match 9\",\"eventPhase\":\"Pool B\",\"venue\":{\"id\":31,\"name\":\"Kingsholm\",\"city\":\"Gloucester\",\"country\":\"England\"},\"time\":{\"millis\":1443022200000,\"gmtOffset\":1.0,\"label\":\"Wed 23 Sep 2015, 14:30 GMT+01:00\"},\"teams\":[{\"id\":35,\"name\":\"Scotland\",\"abbreviation\":\"SCO\"},{\"id\":49,\"name\":\"Japan\",\"abbreviation\":\"JPN\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14186,\"description\":\"Match 10\",\"eventPhase\":\"Pool A\",\"venue\":{\"id\":2,\"name\":\"Millennium Stadium\",\"city\":\"Cardiff\",\"country\":\"Wales\"},\"time\":{\"millis\":1443030300000,\"gmtOffset\":1.0,\"label\":\"Wed 23 Sep 2015, 16:45 GMT+01:00\"},\"teams\":[{\"id\":38,\"name\":\"Australia\",\"abbreviation\":\"AUS\"},{\"id\":46,\"name\":\"Fiji\",\"abbreviation\":\"FJI\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14222,\"description\":\"Match 11\",\"eventPhase\":\"Pool D\",\"venue\":{\"id\":1189,\"name\":\"Olympic Stadium\",\"city\":\"London\",\"country\":\"England\"},\"time\":{\"millis\":1443042000000,\"gmtOffset\":1.0,\"label\":\"Wed 23 Sep 2015, 20:00 GMT+01:00\"},\"teams\":[{\"id\":42,\"name\":\"France\",\"abbreviation\":\"FRA\"},{\"id\":52,\"name\":\"Romania\",\"abbreviation\":\"ROM\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14209,\"description\":\"Match 12\",\"eventPhase\":\"Pool C\",\"venue\":{\"id\":1189,\"name\":\"Olympic Stadium\",\"city\":\"London\",\"country\":\"England\"},\"time\":{\"millis\":1443128400000,\"gmtOffset\":1.0,\"label\":\"Thu 24 Sep 2015, 20:00 GMT+01:00\"},\"teams\":[{\"id\":37,\"name\":\"New Zealand\",\"abbreviation\":\"NZL\"},{\"id\":58,\"name\":\"Namibia\",\"abbreviation\":\"NAM\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14211,\"description\":\"Match 13\",\"eventPhase\":\"Pool C\",\"venue\":{\"id\":31,\"name\":\"Kingsholm\",\"city\":\"Gloucester\",\"country\":\"England\"},\"time\":{\"millis\":1443203100000,\"gmtOffset\":1.0,\"label\":\"Fri 25 Sep 2015, 16:45 GMT+01:00\"},\"teams\":[{\"id\":40,\"name\":\"Argentina\",\"abbreviation\":\"ARG\"},{\"id\":720,\"name\":\"Georgia\",\"abbreviation\":\"GEO\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14224,\"description\":\"Match 14\",\"eventPhase\":\"Pool D\",\"venue\":{\"id\":481,\"name\":\"Elland Road\",\"city\":\"Leeds\",\"country\":\"England\"},\"time\":{\"millis\":1443281400000,\"gmtOffset\":1.0,\"label\":\"Sat 26 Sep 2015, 14:30 GMT+01:00\"},\"teams\":[{\"id\":41,\"name\":\"Italy\",\"abbreviation\":\"ITA\"},{\"id\":50,\"name\":\"Canada\",\"abbreviation\":\"CAN\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14197,\"description\":\"Match 15\",\"eventPhase\":\"Pool B\",\"venue\":{\"id\":1185,\"name\":\"Villa Park\",\"city\":\"Birmingham\",\"country\":\"England\"},\"time\":{\"millis\":1443289500000,\"gmtOffset\":1.0,\"label\":\"Sat 26 Sep 2015, 16:45 GMT+01:00\"},\"teams\":[{\"id\":39,\"name\":\"South Africa\",\"abbreviation\":\"RSA\"},{\"id\":45,\"name\":\"Samoa\",\"abbreviation\":\"SAM\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14187,\"description\":\"Match 16\",\"eventPhase\":\"Pool A\",\"venue\":{\"id\":4,\"name\":\"Twickenham\",\"city\":\"London\",\"country\":\"England\"},\"time\":{\"millis\":1443301200000,\"gmtOffset\":1.0,\"label\":\"Sat 26 Sep 2015, 20:00 GMT+01:00\"},\"teams\":[{\"id\":34,\"name\":\"England\",\"abbreviation\":\"ENG\"},{\"id\":33,\"name\":\"Wales\",\"abbreviation\":\"WAL\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14188,\"description\":\"Match 17\",\"eventPhase\":\"Pool A\",\"venue\":{\"id\":1185,\"name\":\"Villa Park\",\"city\":\"Birmingham\",\"country\":\"England\"},\"time\":{\"millis\":1443358800000,\"gmtOffset\":1.0,\"label\":\"Sun 27 Sep 2015, 12:00 GMT+01:00\"},\"teams\":[{\"id\":38,\"name\":\"Australia\",\"abbreviation\":\"AUS\"},null],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14198,\"description\":\"Match 18\",\"eventPhase\":\"Pool B\",\"venue\":{\"id\":481,\"name\":\"Elland Road\",\"city\":\"Leeds\",\"country\":\"England\"},\"time\":{\"millis\":1443367800000,\"gmtOffset\":1.0,\"label\":\"Sun 27 Sep 2015, 14:30 GMT+01:00\"},\"teams\":[{\"id\":35,\"name\":\"Scotland\",\"abbreviation\":\"SCO\"},{\"id\":51,\"name\":\"USA\",\"abbreviation\":\"USA\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14225,\"description\":\"Match 19\",\"eventPhase\":\"Pool D\",\"venue\":{\"id\":9,\"name\":\"Wembley Stadium\",\"city\":\"London\",\"country\":\"England\"},\"time\":{\"millis\":1443375900000,\"gmtOffset\":1.0,\"label\":\"Sun 27 Sep 2015, 16:45 GMT+01:00\"},\"teams\":[{\"id\":36,\"name\":\"Ireland\",\"abbreviation\":\"IRE\"},{\"id\":52,\"name\":\"Romania\",\"abbreviation\":\"ROM\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14212,\"description\":\"Match 20\",\"eventPhase\":\"Pool C\",\"venue\":{\"id\":750,\"name\":\"Sandy Park\",\"city\":\"Exeter\",\"country\":\"England\"},\"time\":{\"millis\":1443548700000,\"gmtOffset\":1.0,\"label\":\"Tue 29 Sep 2015, 16:45 GMT+01:00\"},\"teams\":[{\"id\":47,\"name\":\"Tonga\",\"abbreviation\":\"TGA\"},{\"id\":58,\"name\":\"Namibia\",\"abbreviation\":\"NAM\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14189,\"description\":\"Match 21\",\"eventPhase\":\"Pool A\",\"venue\":{\"id\":2,\"name\":\"Millennium Stadium\",\"city\":\"Cardiff\",\"country\":\"Wales\"},\"time\":{\"millis\":1443721500000,\"gmtOffset\":1.0,\"label\":\"Thu 1 Oct 2015, 16:45 GMT+01:00\"},\"teams\":[{\"id\":33,\"name\":\"Wales\",\"abbreviation\":\"WAL\"},{\"id\":46,\"name\":\"Fiji\",\"abbreviation\":\"FJI\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14227,\"description\":\"Match 22\",\"eventPhase\":\"Pool D\",\"venue\":{\"id\":1190,\"name\":\"Stadiummk\",\"city\":\"Milton Keynes\",\"country\":\"England\"},\"time\":{\"millis\":1443733200000,\"gmtOffset\":1.0,\"label\":\"Thu 1 Oct 2015, 20:00 GMT+01:00\"},\"teams\":[{\"id\":42,\"name\":\"France\",\"abbreviation\":\"FRA\"},{\"id\":50,\"name\":\"Canada\",\"abbreviation\":\"CAN\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14213,\"description\":\"Match 23\",\"eventPhase\":\"Pool C\",\"venue\":{\"id\":2,\"name\":\"Millennium Stadium\",\"city\":\"Cardiff\",\"country\":\"Wales\"},\"time\":{\"millis\":1443819600000,\"gmtOffset\":1.0,\"label\":\"Fri 2 Oct 2015, 20:00 GMT+01:00\"},\"teams\":[{\"id\":37,\"name\":\"New Zealand\",\"abbreviation\":\"NZL\"},{\"id\":720,\"name\":\"Georgia\",\"abbreviation\":\"GEO\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14200,\"description\":\"Match 24\",\"eventPhase\":\"Pool B\",\"venue\":{\"id\":1190,\"name\":\"Stadiummk\",\"city\":\"Milton Keynes\",\"country\":\"England\"},\"time\":{\"millis\":1443886200000,\"gmtOffset\":1.0,\"label\":\"Sat 3 Oct 2015, 14:30 GMT+01:00\"},\"teams\":[{\"id\":45,\"name\":\"Samoa\",\"abbreviation\":\"SAM\"},{\"id\":49,\"name\":\"Japan\",\"abbreviation\":\"JPN\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14199,\"description\":\"Match 25\",\"eventPhase\":\"Pool B\",\"venue\":{\"id\":524,\"name\":\"St James Park\",\"city\":\"Newcastle upon Tyne\",\"country\":\"England\"},\"time\":{\"millis\":1443894300000,\"gmtOffset\":1.0,\"label\":\"Sat 3 Oct 2015, 16:45 GMT+01:00\"},\"teams\":[{\"id\":39,\"name\":\"South Africa\",\"abbreviation\":\"RSA\"},{\"id\":35,\"name\":\"Scotland\",\"abbreviation\":\"SCO\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14190,\"description\":\"Match 26\",\"eventPhase\":\"Pool A\",\"venue\":{\"id\":4,\"name\":\"Twickenham\",\"city\":\"London\",\"country\":\"England\"},\"time\":{\"millis\":1443906000000,\"gmtOffset\":1.0,\"label\":\"Sat 3 Oct 2015, 20:00 GMT+01:00\"},\"teams\":[{\"id\":34,\"name\":\"England\",\"abbreviation\":\"ENG\"},{\"id\":38,\"name\":\"Australia\",\"abbreviation\":\"AUS\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14215,\"description\":\"Match 27\",\"eventPhase\":\"Pool C\",\"venue\":{\"id\":1193,\"name\":\"Leicester City Stadium\",\"city\":\"Leicester\",\"country\":\"England\"},\"time\":{\"millis\":1443972600000,\"gmtOffset\":1.0,\"label\":\"Sun 4 Oct 2015, 14:30 GMT+01:00\"},\"teams\":[{\"id\":40,\"name\":\"Argentina\",\"abbreviation\":\"ARG\"},{\"id\":47,\"name\":\"Tonga\",\"abbreviation\":\"TGA\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14228,\"description\":\"Match 28\",\"eventPhase\":\"Pool D\",\"venue\":{\"id\":1189,\"name\":\"Olympic Stadium\",\"city\":\"London\",\"country\":\"England\"},\"time\":{\"millis\":1443980700000,\"gmtOffset\":1.0,\"label\":\"Sun 4 Oct 2015, 16:45 GMT+01:00\"},\"teams\":[{\"id\":36,\"name\":\"Ireland\",\"abbreviation\":\"IRE\"},{\"id\":41,\"name\":\"Italy\",\"abbreviation\":\"ITA\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14229,\"description\":\"Match 29\",\"eventPhase\":\"Pool D\",\"venue\":{\"id\":1193,\"name\":\"Leicester City Stadium\",\"city\":\"Leicester\",\"country\":\"England\"},\"time\":{\"millis\":1444153500000,\"gmtOffset\":1.0,\"label\":\"Tue 6 Oct 2015, 16:45 GMT+01:00\"},\"teams\":[{\"id\":50,\"name\":\"Canada\",\"abbreviation\":\"CAN\"},{\"id\":52,\"name\":\"Romania\",\"abbreviation\":\"ROM\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14191,\"description\":\"Match 30\",\"eventPhase\":\"Pool A\",\"venue\":{\"id\":1190,\"name\":\"Stadiummk\",\"city\":\"Milton Keynes\",\"country\":\"England\"},\"time\":{\"millis\":1444165200000,\"gmtOffset\":1.0,\"label\":\"Tue 6 Oct 2015, 20:00 GMT+01:00\"},\"teams\":[{\"id\":46,\"name\":\"Fiji\",\"abbreviation\":\"FJI\"},null],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14202,\"description\":\"Match 31\",\"eventPhase\":\"Pool B\",\"venue\":{\"id\":1189,\"name\":\"Olympic Stadium\",\"city\":\"London\",\"country\":\"England\"},\"time\":{\"millis\":1444239900000,\"gmtOffset\":1.0,\"label\":\"Wed 7 Oct 2015, 16:45 GMT+01:00\"},\"teams\":[{\"id\":39,\"name\":\"South Africa\",\"abbreviation\":\"RSA\"},{\"id\":51,\"name\":\"USA\",\"abbreviation\":\"USA\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14216,\"description\":\"Match 32\",\"eventPhase\":\"Pool C\",\"venue\":{\"id\":750,\"name\":\"Sandy Park\",\"city\":\"Exeter\",\"country\":\"England\"},\"time\":{\"millis\":1444251600000,\"gmtOffset\":1.0,\"label\":\"Wed 7 Oct 2015, 20:00 GMT+01:00\"},\"teams\":[{\"id\":58,\"name\":\"Namibia\",\"abbreviation\":\"NAM\"},{\"id\":720,\"name\":\"Georgia\",\"abbreviation\":\"GEO\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14217,\"description\":\"Match 33\",\"eventPhase\":\"Pool C\",\"venue\":{\"id\":524,\"name\":\"St James Park\",\"city\":\"Newcastle upon Tyne\",\"country\":\"England\"},\"time\":{\"millis\":1444424400000,\"gmtOffset\":1.0,\"label\":\"Fri 9 Oct 2015, 20:00 GMT+01:00\"},\"teams\":[{\"id\":37,\"name\":\"New Zealand\",\"abbreviation\":\"NZL\"},{\"id\":47,\"name\":\"Tonga\",\"abbreviation\":\"TGA\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14203,\"description\":\"Match 34\",\"eventPhase\":\"Pool B\",\"venue\":{\"id\":524,\"name\":\"St James Park\",\"city\":\"Newcastle upon Tyne\",\"country\":\"England\"},\"time\":{\"millis\":1444491000000,\"gmtOffset\":1.0,\"label\":\"Sat 10 Oct 2015, 14:30 GMT+01:00\"},\"teams\":[{\"id\":45,\"name\":\"Samoa\",\"abbreviation\":\"SAM\"},{\"id\":35,\"name\":\"Scotland\",\"abbreviation\":\"SCO\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14192,\"description\":\"Match 35\",\"eventPhase\":\"Pool A\",\"venue\":{\"id\":4,\"name\":\"Twickenham\",\"city\":\"London\",\"country\":\"England\"},\"time\":{\"millis\":1444499100000,\"gmtOffset\":1.0,\"label\":\"Sat 10 Oct 2015, 16:45 GMT+01:00\"},\"teams\":[{\"id\":38,\"name\":\"Australia\",\"abbreviation\":\"AUS\"},{\"id\":33,\"name\":\"Wales\",\"abbreviation\":\"WAL\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14193,\"description\":\"Match 36\",\"eventPhase\":\"Pool A\",\"venue\":{\"id\":1208,\"name\":\"Manchester City Stadium\",\"city\":\"Manchester\",\"country\":\"England\"},\"time\":{\"millis\":1444510800000,\"gmtOffset\":1.0,\"label\":\"Sat 10 Oct 2015, 20:00 GMT+01:00\"},\"teams\":[{\"id\":34,\"name\":\"England\",\"abbreviation\":\"ENG\"},null],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14218,\"description\":\"Match 37\",\"eventPhase\":\"Pool C\",\"venue\":{\"id\":1193,\"name\":\"Leicester City Stadium\",\"city\":\"Leicester\",\"country\":\"England\"},\"time\":{\"millis\":1444568400000,\"gmtOffset\":1.0,\"label\":\"Sun 11 Oct 2015, 12:00 GMT+01:00\"},\"teams\":[{\"id\":40,\"name\":\"Argentina\",\"abbreviation\":\"ARG\"},{\"id\":58,\"name\":\"Namibia\",\"abbreviation\":\"NAM\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14231,\"description\":\"Match 38\",\"eventPhase\":\"Pool D\",\"venue\":{\"id\":750,\"name\":\"Sandy Park\",\"city\":\"Exeter\",\"country\":\"England\"},\"time\":{\"millis\":1444577400000,\"gmtOffset\":1.0,\"label\":\"Sun 11 Oct 2015, 14:30 GMT+01:00\"},\"teams\":[{\"id\":41,\"name\":\"Italy\",\"abbreviation\":\"ITA\"},{\"id\":52,\"name\":\"Romania\",\"abbreviation\":\"ROM\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14232,\"description\":\"Match 39\",\"eventPhase\":\"Pool D\",\"venue\":{\"id\":2,\"name\":\"Millennium Stadium\",\"city\":\"Cardiff\",\"country\":\"Wales\"},\"time\":{\"millis\":1444585500000,\"gmtOffset\":1.0,\"label\":\"Sun 11 Oct 2015, 16:45 GMT+01:00\"},\"teams\":[{\"id\":42,\"name\":\"France\",\"abbreviation\":\"FRA\"},{\"id\":36,\"name\":\"Ireland\",\"abbreviation\":\"IRE\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14205,\"description\":\"Match 40\",\"eventPhase\":\"Pool B\",\"venue\":{\"id\":31,\"name\":\"Kingsholm\",\"city\":\"Gloucester\",\"country\":\"England\"},\"time\":{\"millis\":1444597200000,\"gmtOffset\":1.0,\"label\":\"Sun 11 Oct 2015, 20:00 GMT+01:00\"},\"teams\":[{\"id\":51,\"name\":\"USA\",\"abbreviation\":\"USA\"},{\"id\":49,\"name\":\"Japan\",\"abbreviation\":\"JPN\"}],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14226,\"description\":\"Match 41\",\"eventPhase\":\"Quarter Finals\",\"venue\":{\"id\":4,\"name\":\"Twickenham\",\"city\":\"London\",\"country\":\"England\"},\"time\":{\"millis\":1445101200000,\"gmtOffset\":1.0,\"label\":\"Sat 17 Oct 2015, 16:00 GMT+01:00\"},\"teams\":[null,null],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14230,\"description\":\"Match 42\",\"eventPhase\":\"Quarter Finals\",\"venue\":{\"id\":2,\"name\":\"Millennium Stadium\",\"city\":\"Cardiff\",\"country\":\"Wales\"},\"time\":{\"millis\":1445115600000,\"gmtOffset\":1.0,\"label\":\"Sat 17 Oct 2015, 20:00 GMT+01:00\"},\"teams\":[null,null],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14223,\"description\":\"Match 43\",\"eventPhase\":\"Quarter Finals\",\"venue\":{\"id\":2,\"name\":\"Millennium Stadium\",\"city\":\"Cardiff\",\"country\":\"Wales\"},\"time\":{\"millis\":1445176800000,\"gmtOffset\":1.0,\"label\":\"Sun 18 Oct 2015, 13:00 GMT+01:00\"},\"teams\":[null,null],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14219,\"description\":\"Match 44\",\"eventPhase\":\"Quarter Finals\",\"venue\":{\"id\":4,\"name\":\"Twickenham\",\"city\":\"London\",\"country\":\"England\"},\"time\":{\"millis\":1445187600000,\"gmtOffset\":1.0,\"label\":\"Sun 18 Oct 2015, 16:00 GMT+01:00\"},\"teams\":[null,null],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14214,\"description\":\"Match 45\",\"eventPhase\":\"Semi Finals\",\"venue\":{\"id\":4,\"name\":\"Twickenham\",\"city\":\"London\",\"country\":\"England\"},\"time\":{\"millis\":1445706000000,\"gmtOffset\":1.0,\"label\":\"Sat 24 Oct 2015, 16:00 GMT+01:00\"},\"teams\":[null,null],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14210,\"description\":\"Match 46\",\"eventPhase\":\"Semi Finals\",\"venue\":{\"id\":4,\"name\":\"Twickenham\",\"city\":\"London\",\"country\":\"England\"},\"time\":{\"millis\":1445788800000,\"label\":\"Sun 25 Oct 2015, 16:00 GMT\"},\"teams\":[null,null],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14204,\"description\":\"Match 47\",\"eventPhase\":\"Bronze Final\",\"venue\":{\"id\":1189,\"name\":\"Olympic Stadium\",\"city\":\"London\",\"country\":\"England\"},\"time\":{\"millis\":1446235200000,\"label\":\"Fri 30 Oct 2015, 20:00 GMT\"},\"teams\":[null,null],\"scores\":[0,0],\"status\":\"U\"},{\"matchId\":14201,\"description\":\"Match 48\",\"eventPhase\":\"Final\",\"venue\":{\"id\":4,\"name\":\"Twickenham\",\"city\":\"London\",\"country\":\"England\"},\"time\":{\"millis\":1446307200000,\"label\":\"Sat 31 Oct 2015, 16:00 GMT\"},\"teams\":[null,null],\"scores\":[0,0],\"status\":\"U\"}]} };\n    //     var tournamentName = '1238';\n    //     this.tournament = new PULSE.CLIENT.RUGBY.Tournament( { tournamentName: tournamentName } );\n    //     this.tournament.getSchedule( { interval: 600, start: true } );\n    //     this.tournament.feeds.feedSchedule = 'schedule';\n    //     this.tournament.onData( testTournament.schedule, 'schedule' );\n\n    //this.tournament.getSchedule( { interval: 600, start: true } );\n    this.ranking.getRankingsData( {\n        start: true,\n        language: PULSE.CLIENT.LANGUAGE\n    } );\n\n}","prototype":{"onData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.RankingsPredictor.prototype.onData = function( data )\n{\n\n    if ( data.match.events[ 0 ].rankingsWeight )\n    {\n        data.match['rankingsWeight'] = data.match.events[ 0 ].rankingsWeight;\n    }\n\n    var past_buttons = this.getPastButtons( data.match );\n    this.addMatch( past_buttons );\n\n}"},"setSubscriptions":{"Documentation":{"description":"Sets subscriptions for rankings and schedule","tags":[{"title":"param","description":"Widget container","type":{"type":"NameExpression","name":"Object"},"name":"container"},{"title":"param","description":"Configuration for the widget","type":{"type":"NameExpression","name":"Object"},"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.RankingsPredictor.prototype.setSubscriptions = function( container )\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.RANKINGS_UPDATE, function()\n    {\n        var i, pts;\n\n        if( that.refresh )\n        {\n            that.getRankings( container );\n            that.getTeamLists( container );\n\n            var entriesLength = that.ranking.entries.length;\n\n            that.next_rankings.entries = new Array( entriesLength );\n\n            var sortedRankings = that.ranking.sort( 'pts' );\n\n            for ( i = 0; i < that.ranking.entries.length; i++ )\n            {\n                that.ranking.entries[ i ] = sortedRankings [ i ];\n            }\n\n            for( i = 0; i < that.ranking.entries.length; i++ )\n            {\n                that.next_rankings.entries[ i ] = that.ranking.entries[ i ];\n            }\n\n            for( i = 0; i < that.past_buttons.length; i++ )\n            {\n                that.newRank( container, that.past_buttons[ i ].homename, that.past_buttons[ i ].awayname, that.past_buttons[ i ].homescore, that.past_buttons[ i ].awayscore, that.past_buttons[ i ].homeadv, that.past_buttons[ i ].weight, false, that.past_buttons[ i ].matchtype, that.past_buttons[ i ].matchphase );\n            }\n            pts = [];\n            for( i = 0; i < that.ranking.entries.length; i++ )\n            {\n                pts.push( that.ranking.entries[ i ].pts );\n            }\n        }\n        if( that.init )\n        {\n            var today = ( new Date() ).format( 'yyyy-mm-dd' ),\n            scheduleRequestOptions = {\n                startDate: today,\n                states: [ 'U', 'L' ]\n             };\n\n            that.metaSchedule.getScheduleData( { start: true, params: scheduleRequestOptions } );\n            console.log( 'ay' );\n\n        }\n        that.init = false;\n        that.refresh = false;\n    } );\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCHEDULE_UPDATE, function()\n    {\n        var limit = $( container ).find( '#upcoming_limit' ),\n            filteredMatchList = [],\n            i;\n\n        that.liveMatches = that.metaSchedule.getSortedMatches( 'live' );\n\n        that.matches = that.metaSchedule.getSortedMatches( 'upcoming' );\n\n        teams = that.ranking.getTeamIds();\n\n        // Filter upcming matches so only matches involving teams from the rankings will be shown\n        for( i = 0; i < that.matches.length; i++ )\n        {\n            if( ( teams.indexOf( that.matches[ i ].teams[ 0 ].id )) > -1 && ( teams.indexOf( that.matches[ i ].teams[ 1 ].id ) > -1) )\n            {\n                filteredMatchList.push( that.matches[ i ] );\n            }\n        }\n\n        that.matches = filteredMatchList;\n\n        $( container ).find( '#add_upcoming' ).show();\n        limit.show();\n        limit.val( 0 );\n        limit.attr( 'max', that.matches.length );\n\n        for( i = 0; i < that.liveMatches.length; i++ )\n        {\n            that.addLiveMatch( that.liveMatches[ i ] );\n        }\n\n    } );\n\n}"},"getPastButtons":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"match"}]},"Source":"PULSE.CLIENT.RUGBY.RankingsPredictor.prototype.getPastButtons = function( match )\n{\n    var past_buttons = {};\n\n    if( match.teams[ 0 ].name )\n    {\n        past_buttons.homename = match.teams[ 0 ].name;\n    }\n    else\n    {\n        past_buttons.homename = match.eventPhase;\n    }\n    if( match.teams[ 1 ].name )\n    {\n        past_buttons.awayname = match.teams[ 1 ].name;\n    }\n    else\n    {\n        past_buttons.awayname = match.eventPhase;\n    }\n    if ( match.venue )\n    {\n        if( match.venue.country == match.teams[ 0 ].name )\n        {\n            past_buttons.homeadv = true;\n        }\n    }\n    else\n    {\n        past_buttons.homeadv = false;\n    }\n    past_buttons.weight = match.rankingsWeight;\n\n    if( match.scores.length > 1 )\n    {\n        past_buttons.homescore = match.scores[ 0 ];\n    }\n    else\n    {\n        past_buttons.homescore = '0';\n    }\n    if( match.scores.length > 1 )\n    {\n        past_buttons.awayscore = match.scores[ 1 ];\n    }\n    else\n    {\n        past_buttons.awayscore = 0;\n    }\n    if( match.events )\n    {\n        if( match.events.length > 0  )\n        {\n            if ( match.events[ 0 ].label )\n            {\n                past_buttons.matchtype = match.events[0].label + ': ' + match.description;\n                if ( match.eventPhase )\n                {\n                    past_buttons.matchphase = match.events[0].label + ': ' + match.eventPhase;\n                }\n                else\n                {\n                    past_buttons.matchphase = match.events[0].label;\n                }\n            }\n        }\n    }\n    else\n    {\n        past_buttons.matchtype = 'Match: ' + match.description;\n        past_buttons.matchphase = 'Match';\n    }\n    return past_buttons;\n}"},"addMatch":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"past_buttons"}]},"Source":"PULSE.CLIENT.RUGBY.RankingsPredictor.prototype.addMatch = function( past_buttons )\n{\n    PULSE.CLIENT.Template.append(\n        this.templates.match,\n        this.$container.find( '.teamSelect' ),\n        {\n            past_buttons: past_buttons\n        }\n    );\n\n    this.getTeamLists( this.$container );\n    this.getRankingsNearby( this.$container, past_buttons.homename, '1', 'teamListHome' );\n    this.getRankingsNearby( this.$container, past_buttons.awayname, '1', 'teamListAway' );\n}"},"addLiveMatch":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"match"}]},"Source":"PULSE.CLIENT.RUGBY.RankingsPredictor.prototype.addLiveMatch = function( match )\n{\n    var past_buttons = this.getPastButtons( match );\n\n    past_buttons.matchtype = 'Live: ' + past_buttons.matchtype;\n    past_buttons.matchphase = 'Live: ' + past_buttons.matchphase;\n\n    this.newRank( this.$container, past_buttons.homename, past_buttons.awayname, past_buttons.homescore, past_buttons.awayscore, past_buttons.homeadv, past_buttons.weight, true, past_buttons.matchtype, past_buttons.matchphase );\n}"},"addListeners":{"Documentation":{"description":"Listeners for button or element presse for the predictor","tags":[{"title":"param","description":"Widget container","type":{"type":"NameExpression","name":"Object"},"name":"container"}]},"Source":"PULSE.CLIENT.RUGBY.RankingsPredictor.prototype.addListeners = function( container )\n{\n    var that = this;\n\n    // Allows all the matches in the tournament to be predicted\n    $( 'body' ).on( 'change', '#upcoming_limit', function( e )\n    {\n        if( e )\n        {\n            e.preventDefault();\n        }\n        var tables = that.$container.find( '.teamSelect' )[ 0 ].children,\n            past = that.$container.find( '.past_matches' )[ 0 ].children,\n            Ids = [],\n            limit = parseInt( $( container ).find( '#upcoming_limit' ).val() ),\n            tablesLength, past_button, body, id, i, j;\n\n        that.upcoming = true;\n\n        for( i = 0; i < tables.length; i++ )\n        {\n            body = $( tables[ i ] )[ 0 ].children[ 0 ].children[ 0 ];\n            id = $( body ).attr( 'id' );\n            if( id != 'Match' )\n            {\n                Ids.push( id );\n            }\n        }\n\n        for( i = 0; i < past.length; i++ )\n        {\n            body = $( past[ i ] )[ 0 ].children[ 0 ];\n            id = $( body ).attr( 'id' );\n            if( id != 'Match' )\n            {\n                Ids.push( id );\n            }\n        }\n\n        for( i = 0; i < limit; i++ )\n        {\n            past_button = that.getPastButtons( that.matches[ i ] );\n            if( Ids.indexOf( past_button.matchtype ) < 0 )\n            {\n                that.addMatch( past_button );\n            }\n        }\n\n        if( limit < that.pastUpcoming )\n        {\n            for( i = limit; i < that.pastUpcoming; i++ )\n            {\n                past_button = that.getPastButtons( that.matches[ i ] );\n                tablesLength = tables.length;\n\n                for( j = 0; j < tables.length; j++ )\n                {\n                    body = $( tables[ j ] )[ 0 ].children[ 0 ].children[ 0 ];\n                    if( past_button.matchtype == $( body ).attr( 'id' ) )\n                    {\n                        tables[ j ].remove();\n                    }\n                }\n\n                for( j = 0; j < past.length; j++ )\n                {\n                    body = $( past[ j ] )[ 0 ].children[ 0 ];\n                    id = $( body ).attr( 'id' );\n                    if( past_button.matchtype == $( body ).attr( 'id' ) )\n                    {\n                        $( past[ j ] )[ 0 ].children[ 1 ].click();\n                    }\n                }\n            }\n        }\n        that.pastUpcoming = limit;\n\n    } );\n\n    $( 'body' ).on( 'click', '#auto_all', function( e )\n    {\n        if( e )\n        {\n            e.preventDefault();\n        }\n        var tables = that.$container.find( '.teamSelect' )[ 0 ].children,\n            body, i;\n\n        for( i = 0; i < tables.length; i++ )\n        {\n            body = $( tables[ i ] ).find( '.auto_button' ).click();\n        }\n\n    } );\n\n    $( 'body' ).on( 'click', '#rank_all', function( e )\n    {\n        if( e )\n        {\n            e.preventDefault();\n        }\n        var tables = that.$container.find( '.teamSelect' )[ 0 ].children,\n            body,\n            length = tables.length;\n\n        for( var i = 0; i < length; i++ )\n        {\n            body = $( tables[ i ] ).find( '.rank_button' );\n\n            if ( body.length < 1 )\n            {\n                body = $( tables[ i ] ).find( '.edit_rank' );\n            }\n            body.click();\n\n            if( tables.length < length )\n            {\n                i = i - 1;\n            }\n            length = tables.length;\n        }\n\n    } );\n\n    // Called when a team is selected for the predictor (home or away)\n    $( 'body' ).on( 'click', '.teamSelect ul li', function( e )\n    {\n        if( e )\n        {\n            e.preventDefault();\n        }\n        var self = $( this ),\n            index = self.index(),\n            body,\n            form = $( this ).parent().parent(),\n            id = self.parent().attr( 'class' );\n\n        self.parents( 'ul' ).find( 'li' ).removeClass( 'selected' );\n        self.addClass( 'selected' );\n\n        if( id == 'teamListHome' )\n        {\n            body = form.find( '.currentHome' );\n        }\n        else\n        {\n            body = form.find( '.currentAway' );\n        }\n        that.getRankingsNearby( container, self.text(), '1', id );\n        body.html( self.text() );\n        if( id == 'teamListHome' )\n        {\n            form.find( '.teamListHome' ).hide();\n        }\n        else\n        {\n            form.find( '.teamListAway' ).hide();\n        }\n    } );\n\n    // Called when a predicted match is clicked on - this enables the user to edit the match\n    $( 'body' ).on( 'click', '.past_matches li a', function( e )\n    {\n\n        var self = $( this ).parent(),\n            index = self.index(),\n            body = $( container ).find( '.teamSelect' );\n\n        try\n        {\n            PULSE.CLIENT.Template.append(\n                that.templates.match,\n                body,\n                {\n                    rank: true,\n                    past_buttons: that.past_buttons[ index ],\n                    i: index\n                }\n            );\n            that.getTeamLists( container );\n            self.find( 'button' ).click();\n        } catch (err)\n        {\n            console.log( err );\n        }\n    } );\n\n    // Allows the dropdown menu to be displayed for the home/away team\n    $( 'body' ).on( 'click', '.teamSelect div', function( e )\n    {\n        if( e )\n        {\n            e.preventDefault();\n        }\n        var form = $( this ).parent().parent();\n\n        if( $( this ).attr( 'class' ) == 'currentHome' )\n        {\n            form.find( '.teamListHome' ).show();\n        }\n        else\n        {\n            form.find( '.teamListAway' ).show();\n        }\n    } );\n\n    // Called when a user predicts a match\n    $( 'body' ).on( 'click', '.rank_button', function( e )\n    {\n        if( e )\n        {\n            e.preventDefault();\n        }\n        var form = $( this ).parent().parent(),\n            teams = that.ranking.getTeams();\n\n        if( form.find( '.currentHome' ).text() != form.find( '.currentAway' ).text() )\n        {\n\n            if( ( teams.indexOf( form.find( '.currentHome' ).text() )) > -1 && ( teams.indexOf( form.find( '.currentAway' ).text() ) > -1) )\n            {\n\n                if( ( parseInt( form.find( '.homeScore' ).val() )) > -1 && ( parseInt( form.find( '.awayScore' ).val() ) > -1) )\n                {\n\n                    that.newRank( container, form.find( '.currentHome' ).text(), form.find( '.currentAway' ).text(), form.find( '.homeScore' ).val(), form.find( '.awayScore' ).val(), form.find( '.homeAdv' ).attr( 'checked' ), form.find( '.weight' ).val(), true, form.attr( 'id' ), form.attr( 'class' ) );\n                    $( this ).closest( 'table' ).remove();\n\n                }\n            }\n        }\n    } );\n\n    // Called when a user edits a predicted match\n    $( 'body' ).on( 'click', '.edit_rank', function( e )\n    {\n        if( e )\n        {\n            e.preventDefault();\n        }\n        var form = $( this ).parent().parent(),\n            teams = that.ranking.getTeams();\n        index = parseInt( $( this ).attr( 'id' ) );\n\n        if( form.find( '.currentHome' ).text() != form.find( '.currentAway' ).text() )\n        {\n\n            if( ( teams.indexOf( form.find( '.currentHome' ).text() )) > -1 && ( teams.indexOf( form.find( '.currentAway' ).text() ) > -1) )\n            {\n\n                if( ( parseInt( form.find( '.homeScore' ).val() )) > -1 && ( parseInt( form.find( '.awayScore' ).val() ) > -1) )\n                {\n\n                    that.past_buttons.splice( index, 0, {\n                        homename: form.find( '.currentHome' ).text(),\n                        awayname: form.find( '.currentAway' ).text(),\n                        homescore: form.find( '.homeScore' ).val(),\n                        awayscore: form.find( '.awayScore' ).val(),\n                        homeadv: form.find( '.homeAdv' ).attr( 'checked' ),\n                        weight: form.find( '.weight' ).val(),\n                        matchtype: form.attr( 'id' ),\n                        matchphase: form.attr( 'class' )\n                    } );\n                    $( this ).closest( 'table' ).remove();\n                    that.restart( container );\n                }\n            }\n        }\n    } );\n\n    // Called when the user changes the maximum amount of teams to show in the main rankings\n    $( 'body' ).on( 'change', '.rank_limit', function( e )\n    {\n        if( e )\n        {\n            e.preventDefault();\n        }\n        that.limit = this.value;\n        if( that.movement.length > 0 )\n        {\n            that.showUpdatedRankings( container, that.movement );\n        }\n        else\n        {\n            that.getRankings( container );\n        }\n    } );\n\n    // Called when the user changes the maximum amount of teams to show in the main rankings\n    // $('body').on('change', '#upcoming_limit', function(e) {\n    //     if (e) { e.preventDefault() }\n    //     if (that.upcoming)\n    //     {\n    //         $(container).find('#add_upcoming').click();\n    //     }\n    // });\n\n    // Called when a user deletes all predictions\n    $( 'body' ).on( 'click', '.rank_delete', function( e )\n    {\n        if( e )\n        {\n            e.preventDefault();\n        }\n        var index = $( this ).parent().index();\n\n        that.past_buttons.splice( index, 1 );\n        that.rank_difs.splice( index, 1 );\n        that.restart( container );\n    } );\n\n    // Called when a deletes all predictions\n    $( 'body' ).on( 'click', '.delete_all', function( e )\n    {\n        that.past_buttons = [];\n        that.restart( container );\n    } );\n\n    // Called when a user adds a new predictor row\n    $( 'body' ).on( 'click', '.add_rank', function( e )\n    {\n        PULSE.CLIENT.Template.append(\n            that.templates.match,\n            $( container ).find( '.teamSelect' ),\n            {}\n        );\n\n        that.getTeamLists( container );\n    } );\n\n    // Called when a user deletes a new predictor row\n    $( 'body' ).on( 'click', '.delete_new', function( e )\n    {\n        $( this ).parent().parent().remove();\n    } );\n\n    // Called when a user predicts a match\n    $( 'body' ).on( 'click', '.auto_button', function( e )\n    {\n        if( e )\n        {\n            e.preventDefault();\n        }\n        var form = $( this ).parent().parent(),\n            teams = that.ranking.getTeams(),\n            scores = [ 0, 0 ];\n\n        if( ( teams.indexOf( form.find( '.currentHome' ).text() )) < 0 )\n        {\n            form.find( '.currentHome' ).text( that.getRandomTeam() );\n        }\n        if( ( teams.indexOf( form.find( '.currentAway' ).text() )) < 0 )\n        {\n            form.find( '.currentAway' ).text( that.getRandomTeam() );\n        }\n        scores = that.autoScores( form.find( '.currentHome' ).text(), form.find( '.currentAway' ).text() );\n        form.find( '.homeScore' ).val( scores[ 0 ] );\n        form.find( '.awayScore' ).val( scores[ 1 ] );\n\n    } );\n}"},"getRandomTeam":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.RankingsPredictor.prototype.getRandomTeam = function()\n{\n    var teams = this.ranking.getTeamNames(),\n        team,\n        randNum = Math.floor( Math.random() * teams.length );\n\n    if( randNum > teams.length - 1 )\n    {\n        randNum = teams.length - 1;\n    }\n    if( randNum < 0 )\n    {\n        randNum = 0;\n    }\n    return teams[ randNum ];\n    //Math.floor(Math.random() * teams.length);\n}"},"getPoints":{"Documentation":{"description":"Return an estimate of the amount of points a team will score based on a weighting","tags":[{"title":"param","description":"A float to either increase or decrease the chance of scoring points","type":{"type":"NameExpression","name":"Float"},"name":"weight"},{"title":"return","description":"score The amount of points a team has been estimated to get","type":{"type":"NameExpression","name":"Int"}}]},"Source":"PULSE.CLIENT.RUGBY.RankingsPredictor.prototype.getPoints = function( weight )\n{\n    var scores = {},\n        tryMax = Math.floor( Math.random() * 12 * weight ),\n        penMax = Math.floor( Math.random() * 8 * weight ),\n        score;\n\n    if( tryMax > 20 )\n    {\n        tryMax = 20;\n    }\n    if( penMax > 15 )\n    {\n        penMax = 15;\n    }\n    scores.try = Math.floor( Math.random() * tryMax * weight );\n    scores.pen = Math.floor( Math.random() * penMax * weight );\n\n    if( scores.try > 20 )\n    {\n        scores.try = 20;\n    }\n    if( scores.pen > 15 )\n    {\n        scores.pen = 15;\n    }\n    scores.conv = Math.floor( Math.random() * scores.try * 2 );\n\n    if( scores.conv > scores.try )\n    {\n        scores.conv = scores.try;\n    }\n    score = ( scores.try * 5) + ( scores.pen * 3) + ( scores.conv * 2);\n    return score;\n}"},"autoScores":{"Documentation":{"description":"Returns an automatic guess of the score between two teams","tags":[{"title":"param","description":"Name of the home team","type":{"type":"NameExpression","name":"String"},"name":"teamHome"},{"title":"param","description":"Name of the away team","type":{"type":"NameExpression","name":"String"},"name":"teamAway"},{"title":"return","description":"Returns the guessed score","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.RankingsPredictor.prototype.autoScores = function( teamHome, teamAway )\n{\n    var home_points = parseFloat( this.ranking.getPtsByName( teamHome ) ),\n        away_points = parseFloat( this.ranking.getPtsByName( teamAway ) ),\n        home_div = home_points / away_points,\n        away_div = away_points / home_points,\n        homeScore = this.getPoints( home_div ),\n        awayScore = this.getPoints( away_div ),\n        upset = Math.floor( Math.random() * 100 );\n\n    if( teamHome == teamAway )\n    {\n        return [ 0, 0 ];\n    }\n    if( upset > 95 )\n    {\n        return [ awayScore, homeScore ];\n    }\n    return [ homeScore, awayScore ];\n}"},"restart":{"Documentation":{"description":"Restarts the predictor finding the original rankings and reseting most of the variables (this.past_buttons is not rest to allow for editing/deleting)","tags":[{"title":"param","description":"Widget container","type":{"type":"NameExpression","name":"Object"},"name":"container"}]},"Source":"PULSE.CLIENT.RUGBY.RankingsPredictor.prototype.restart = function( container )\n{\n    this.rank_difs = [];\n    this.movement = [];\n    this.refresh = true;\n\n    $( container ).find( '#home_rankings' ).html( '' );\n    $( container ).find( '#away_rankings' ).html( '' );\n    $( container ).find( '.away_table_header' ).hide();\n    $( container ).find( '.home_table_header' ).hide();\n\n    // for (var key in this.groups) {\n    //     if (this.groups.hasOwnProperty(key)) {\n    //         this.groups[key] = [];\n    //     }\n    // }\n\n    this.ranking.requestRankingsData( {\n        start: true\n    } );\n\n    // //While server is down\n    // var testRankings = {\"label\":\"Mens Rugby Union\",\"entries\":[{\"team\":{\"id\":37,\"name\":\"New Zealand\",\"abbreviation\":\"NZL\"},\"matches\":147,\"pts\":93.81138,\"pos\":1},{\"team\":{\"id\":39,\"name\":\"South Africa\",\"abbreviation\":\"RSA\"},\"matches\":140,\"pts\":89.33828,\"pos\":2},{\"team\":{\"id\":38,\"name\":\"Australia\",\"abbreviation\":\"AUS\"},\"matches\":152,\"pts\":86.9363,\"pos\":3},{\"team\":{\"id\":34,\"name\":\"England\",\"abbreviation\":\"ENG\"},\"matches\":138,\"pts\":85.67704,\"pos\":4},{\"team\":{\"id\":36,\"name\":\"Ireland\",\"abbreviation\":\"IRE\"},\"matches\":130,\"pts\":83.4438,\"pos\":5},{\"team\":{\"id\":33,\"name\":\"Wales\",\"abbreviation\":\"WAL\"},\"matches\":143,\"pts\":80.69676,\"pos\":6},{\"team\":{\"id\":42,\"name\":\"France\",\"abbreviation\":\"FRA\"},\"matches\":139,\"pts\":80.01295,\"pos\":7},{\"team\":{\"id\":35,\"name\":\"Scotland\",\"abbreviation\":\"SCO\"},\"matches\":127,\"pts\":77.77967,\"pos\":8},{\"team\":{\"id\":45,\"name\":\"Samoa\",\"abbreviation\":\"SAM\"},\"matches\":79,\"pts\":76.5919,\"pos\":9},{\"team\":{\"id\":49,\"name\":\"Japan\",\"abbreviation\":\"JPN\"},\"matches\":121,\"pts\":75.38749,\"pos\":10},{\"team\":{\"id\":46,\"name\":\"Fiji\",\"abbreviation\":\"FJI\"},\"matches\":80,\"pts\":74.56182,\"pos\":11},{\"team\":{\"id\":40,\"name\":\"Argentina\",\"abbreviation\":\"ARG\"},\"matches\":119,\"pts\":73.97526,\"pos\":12},{\"team\":{\"id\":47,\"name\":\"Tonga\",\"abbreviation\":\"TGA\"},\"matches\":71,\"pts\":72.5764,\"pos\":13},{\"team\":{\"id\":41,\"name\":\"Italy\",\"abbreviation\":\"ITA\"},\"matches\":131,\"pts\":70.91672,\"pos\":14},{\"team\":{\"id\":720,\"name\":\"Georgia\",\"abbreviation\":\"GEO\"},\"matches\":103,\"pts\":70.460266,\"pos\":15},{\"team\":{\"id\":52,\"name\":\"Romania\",\"abbreviation\":\"ROM\"},\"matches\":110,\"pts\":68.419426,\"pos\":16},{\"team\":{\"id\":50,\"name\":\"Canada\",\"abbreviation\":\"CAN\"},\"matches\":82,\"pts\":68.01011,\"pos\":17},{\"team\":{\"id\":51,\"name\":\"USA\",\"abbreviation\":\"USA\"},\"matches\":77,\"pts\":67.30213,\"pos\":18},{\"team\":{\"id\":68,\"name\":\"Uruguay\",\"abbreviation\":\"URU\"},\"matches\":83,\"pts\":62.88778,\"pos\":19},{\"team\":{\"id\":756,\"name\":\"Russia\",\"abbreviation\":\"RUS\"},\"matches\":94,\"pts\":62.05924,\"pos\":20},{\"team\":{\"id\":43,\"name\":\"Spain\",\"abbreviation\":\"ESP\"},\"matches\":82,\"pts\":60.652107,\"pos\":21},{\"team\":{\"id\":58,\"name\":\"Namibia\",\"abbreviation\":\"NAM\"},\"matches\":66,\"pts\":58.77868,\"pos\":22},{\"team\":{\"id\":725,\"name\":\"Hong Kong\",\"abbreviation\":\"HKG\"},\"matches\":66,\"pts\":58.466354,\"pos\":23},{\"team\":{\"id\":44,\"name\":\"Portugal\",\"abbreviation\":\"POR\"},\"matches\":99,\"pts\":57.726192,\"pos\":24},{\"team\":{\"id\":736,\"name\":\"Korea\",\"abbreviation\":\"KOR\"},\"matches\":49,\"pts\":57.221397,\"pos\":25},{\"team\":{\"id\":721,\"name\":\"Germany\",\"abbreviation\":\"GER\"},\"matches\":66,\"pts\":57.187023,\"pos\":26},{\"team\":{\"id\":57,\"name\":\"Zimbabwe\",\"abbreviation\":\"ZIM\"},\"matches\":49,\"pts\":55.975014,\"pos\":27},{\"team\":{\"id\":708,\"name\":\"Chile\",\"abbreviation\":\"CHL\"},\"matches\":52,\"pts\":54.535316,\"pos\":28},{\"team\":{\"id\":743,\"name\":\"Moldova\",\"abbreviation\":\"MDA\"},\"matches\":57,\"pts\":54.098,\"pos\":29},{\"team\":{\"id\":699,\"name\":\"Belgium\",\"abbreviation\":\"BEL\"},\"matches\":67,\"pts\":53.898026,\"pos\":30},{\"team\":{\"id\":64,\"name\":\"Netherlands\",\"abbreviation\":\"NED\"},\"matches\":63,\"pts\":53.158863,\"pos\":31},{\"team\":{\"id\":777,\"name\":\"Ukraine\",\"abbreviation\":\"UKR\"},\"matches\":65,\"pts\":52.37362,\"pos\":32},{\"team\":{\"id\":735,\"name\":\"Kenya\",\"abbreviation\":\"KEN\"},\"matches\":62,\"pts\":51.988926,\"pos\":33},{\"team\":{\"id\":745,\"name\":\"Morocco\",\"abbreviation\":\"MAR\"},\"matches\":39,\"pts\":51.17771,\"pos\":34},{\"team\":{\"id\":753,\"name\":\"Poland\",\"abbreviation\":\"POL\"},\"matches\":59,\"pts\":50.637276,\"pos\":35},{\"team\":{\"id\":693,\"name\":\"Arabian Gulf\",\"abbreviation\":\"AER\"},\"matches\":32,\"pts\":51.888847,\"pos\":36},{\"team\":{\"id\":703,\"name\":\"Brazil\",\"abbreviation\":\"BRA\"},\"matches\":55,\"pts\":50.626667,\"pos\":36},{\"team\":{\"id\":751,\"name\":\"Paraguay\",\"abbreviation\":\"PAR\"},\"matches\":42,\"pts\":50.42411,\"pos\":37},{\"team\":{\"id\":775,\"name\":\"Tunisia\",\"abbreviation\":\"TUN\"},\"matches\":40,\"pts\":49.892048,\"pos\":38},{\"team\":{\"id\":714,\"name\":\"Czech Republic\",\"abbreviation\":\"CZE\"},\"matches\":65,\"pts\":49.490982,\"pos\":39},{\"team\":{\"id\":734,\"name\":\"Kazakhstan\",\"abbreviation\":\"KAZ\"},\"matches\":52,\"pts\":48.906116,\"pos\":40},{\"team\":{\"id\":1030,\"name\":\"Malta\",\"abbreviation\":\"MLT\"},\"matches\":56,\"pts\":48.85422,\"pos\":41},{\"team\":{\"id\":759,\"name\":\"Senegal\",\"abbreviation\":\"SEN\"},\"matches\":34,\"pts\":48.685307,\"pos\":42},{\"team\":{\"id\":740,\"name\":\"Madagascar\",\"abbreviation\":\"MAD\"},\"matches\":39,\"pts\":48.500282,\"pos\":43},{\"team\":{\"id\":769,\"name\":\"Sweden\",\"abbreviation\":\"SWE\"},\"matches\":58,\"pts\":47.822598,\"pos\":44},{\"team\":{\"id\":770,\"name\":\"Switzerland\",\"abbreviation\":\"SUI\"},\"matches\":48,\"pts\":47.265175,\"pos\":45},{\"team\":{\"id\":712,\"name\":\"Cook Islands\",\"abbreviation\":\"COK\"},\"matches\":24,\"pts\":47.106884,\"pos\":46},{\"team\":{\"id\":681,\"name\":\"Cote D'Ivoire\",\"abbreviation\":\"CIV\"},\"matches\":37,\"pts\":47.076332,\"pos\":47},{\"team\":{\"id\":766,\"name\":\"Sri Lanka\",\"abbreviation\":\"SRI\"},\"matches\":46,\"pts\":46.950104,\"pos\":48},{\"team\":{\"id\":738,\"name\":\"Lithuania\",\"abbreviation\":\"LTU\"},\"matches\":55,\"pts\":46.20372,\"pos\":49},{\"team\":{\"id\":729,\"name\":\"Israel\",\"abbreviation\":\"ISR\"},\"matches\":50,\"pts\":45.74983,\"pos\":50},{\"team\":{\"id\":2537,\"name\":\"Philippines\",\"abbreviation\":\"PHP\"},\"matches\":21,\"pts\":45.567543,\"pos\":51},{\"team\":{\"id\":774,\"name\":\"Trinidad & Tobago\",\"abbreviation\":\"TRI\"},\"matches\":27,\"pts\":45.50433,\"pos\":52},{\"team\":{\"id\":723,\"name\":\"Guyana\",\"abbreviation\":\"GUY\"},\"matches\":26,\"pts\":45.49038,\"pos\":53},{\"team\":{\"id\":707,\"name\":\"Cayman Islands\",\"abbreviation\":\"CAY\"},\"matches\":27,\"pts\":45.409065,\"pos\":54},{\"team\":{\"id\":713,\"name\":\"Croatia\",\"abbreviation\":\"CRO\"},\"matches\":56,\"pts\":45.280514,\"pos\":55},{\"team\":{\"id\":750,\"name\":\"Papua New Guinea\",\"abbreviation\":\"PNG\"},\"matches\":25,\"pts\":45.267494,\"pos\":56},{\"team\":{\"id\":776,\"name\":\"Uganda\",\"abbreviation\":\"UGA\"},\"matches\":56,\"pts\":44.67534,\"pos\":57},{\"team\":{\"id\":760,\"name\":\"Singapore\",\"abbreviation\":\"SIN\"},\"matches\":37,\"pts\":44.53986,\"pos\":58},{\"team\":{\"id\":772,\"name\":\"Thailand\",\"abbreviation\":\"THA\"},\"matches\":36,\"pts\":43.372196,\"pos\":59},{\"team\":{\"id\":711,\"name\":\"Colombia\",\"abbreviation\":\"COL\"},\"matches\":39,\"pts\":43.32711,\"pos\":60},{\"team\":{\"id\":1247,\"name\":\"Mexico\",\"abbreviation\":\"MEX\"},\"matches\":17,\"pts\":43.20349,\"pos\":61},{\"team\":{\"id\":737,\"name\":\"Latvia\",\"abbreviation\":\"LAT\"},\"matches\":54,\"pts\":42.96301,\"pos\":62},{\"team\":{\"id\":710,\"name\":\"Chinese Taipei\",\"abbreviation\":\"TPE\"},\"matches\":39,\"pts\":42.617374,\"pos\":63},{\"team\":{\"id\":692,\"name\":\"Andorra\",\"abbreviation\":\"AND\"},\"matches\":51,\"pts\":42.536945,\"pos\":64},{\"team\":{\"id\":781,\"name\":\"Venezuela\",\"abbreviation\":\"VEN\"},\"matches\":41,\"pts\":41.665024,\"pos\":65},{\"team\":{\"id\":700,\"name\":\"Bermuda\",\"abbreviation\":\"BER\"},\"matches\":29,\"pts\":41.588715,\"pos\":66},{\"team\":{\"id\":709,\"name\":\"China\",\"abbreviation\":\"CHN\"},\"matches\":33,\"pts\":41.473335,\"pos\":67},{\"team\":{\"id\":726,\"name\":\"Hungary\",\"abbreviation\":\"HUN\"},\"matches\":53,\"pts\":41.02297,\"pos\":68},{\"team\":{\"id\":748,\"name\":\"Niue Island\",\"abbreviation\":\"NIU\"},\"matches\":19,\"pts\":40.446674,\"pos\":69},{\"team\":{\"id\":762,\"name\":\"Solomon Islands\",\"abbreviation\":\"SOL\"},\"matches\":18,\"pts\":40.350567,\"pos\":70},{\"team\":{\"id\":741,\"name\":\"Malaysia\",\"abbreviation\":\"MAS\"},\"matches\":32,\"pts\":40.196766,\"pos\":71},{\"team\":{\"id\":752,\"name\":\"Peru\",\"abbreviation\":\"PER\"},\"matches\":40,\"pts\":40.13029,\"pos\":72},{\"team\":{\"id\":715,\"name\":\"Denmark\",\"abbreviation\":\"DEN\"},\"matches\":58,\"pts\":39.936363,\"pos\":73},{\"team\":{\"id\":702,\"name\":\"Botswana\",\"abbreviation\":\"BWA\"},\"matches\":29,\"pts\":39.642326,\"pos\":74},{\"team\":{\"id\":727,\"name\":\"India\",\"abbreviation\":\"IND\"},\"matches\":29,\"pts\":39.071053,\"pos\":75},{\"team\":{\"id\":705,\"name\":\"Cameroon\",\"abbreviation\":\"CAM\"},\"matches\":25,\"pts\":38.326572,\"pos\":76},{\"team\":{\"id\":698,\"name\":\"Barbados\",\"abbreviation\":\"BRB\"},\"matches\":30,\"pts\":38.25607,\"pos\":77},{\"team\":{\"id\":1031,\"name\":\"Nigeria\",\"abbreviation\":\"NGA\"},\"matches\":20,\"pts\":38.054245,\"pos\":78},{\"team\":{\"id\":732,\"name\":\"Jamaica\",\"abbreviation\":\"JAM\"},\"matches\":22,\"pts\":36.99363,\"pos\":79},{\"team\":{\"id\":767,\"name\":\"St Lucia\",\"abbreviation\":\"LCA\"},\"matches\":14,\"pts\":37.56884,\"pos\":80},{\"team\":{\"id\":2476,\"name\":\"St Vincent and the Grenadines\",\"abbreviation\":\"SVG\"},\"matches\":13,\"pts\":36.841846,\"pos\":80},{\"team\":{\"id\":2397,\"name\":\"Pakistan\",\"abbreviation\":\"PAK\"},\"matches\":12,\"pts\":36.73589,\"pos\":81},{\"team\":{\"id\":696,\"name\":\"Austria\",\"abbreviation\":\"AUT\"},\"matches\":54,\"pts\":36.58946,\"pos\":82},{\"team\":{\"id\":2340,\"name\":\"Serbia\",\"abbreviation\":\"SRB\"},\"matches\":49,\"pts\":36.544487,\"pos\":83},{\"team\":{\"id\":761,\"name\":\"Slovenia\",\"abbreviation\":\"SVN\"},\"matches\":53,\"pts\":36.49019,\"pos\":84},{\"team\":{\"id\":739,\"name\":\"Luxembourg\",\"abbreviation\":\"LUX\"},\"matches\":49,\"pts\":35.939648,\"pos\":85},{\"team\":{\"id\":771,\"name\":\"Tahiti\",\"abbreviation\":\"PYF\"},\"matches\":15,\"pts\":35.374683,\"pos\":86},{\"team\":{\"id\":744,\"name\":\"Monaco\",\"abbreviation\":\"MON\"},\"matches\":12,\"pts\":35.17156,\"pos\":87},{\"team\":{\"id\":722,\"name\":\"Guam\",\"abbreviation\":\"GUM\"},\"matches\":17,\"pts\":34.950787,\"pos\":88},{\"team\":{\"id\":784,\"name\":\"Zambia\",\"abbreviation\":\"ZAM\"},\"matches\":35,\"pts\":34.768196,\"pos\":89},{\"team\":{\"id\":701,\"name\":\"Bosnia & Herzegovina\",\"abbreviation\":\"BIH\"},\"matches\":38,\"pts\":34.543686,\"pos\":90},{\"team\":{\"id\":704,\"name\":\"Bulgaria\",\"abbreviation\":\"BUL\"},\"matches\":48,\"pts\":34.523483,\"pos\":91},{\"team\":{\"id\":2857,\"name\":\"Mauritius\",\"abbreviation\":\"MUS\"},\"matches\":14,\"pts\":33.857563,\"pos\":92},{\"team\":{\"id\":780,\"name\":\"Vanuatu\",\"abbreviation\":\"VAN\"},\"matches\":16,\"pts\":33.453693,\"pos\":93},{\"team\":{\"id\":697,\"name\":\"Bahamas\",\"abbreviation\":\"BHS\"},\"matches\":23,\"pts\":32.992638,\"pos\":94},{\"team\":{\"id\":749,\"name\":\"Norway\",\"abbreviation\":\"NOR\"},\"matches\":52,\"pts\":32.677498,\"pos\":95},{\"team\":{\"id\":768,\"name\":\"Swaziland\",\"abbreviation\":\"SWZ\"},\"matches\":18,\"pts\":32.041035,\"pos\":96},{\"team\":{\"id\":2861,\"name\":\"Uzbekistan\",\"abbreviation\":\"UZB\"},\"matches\":1,\"pts\":31.93651,\"pos\":97},{\"team\":{\"id\":3223,\"name\":\"United Arab Emirates\",\"abbreviation\":\"UAE\"},\"matches\":18,\"pts\":30.0,\"pos\":98},{\"team\":{\"id\":3674,\"name\":\"American Samoa\",\"abbreviation\":\"ASA\"},\"matches\":10,\"pts\":30.0,\"pos\":98},{\"team\":{\"id\":2576,\"name\":\"Indonesia\",\"abbreviation\":\"IDO\"},\"matches\":1,\"pts\":30.0,\"pos\":98},{\"team\":{\"id\":1029,\"name\":\"Finland\",\"abbreviation\":\"FIN\"},\"matches\":41,\"pts\":29.435652,\"pos\":101},{\"team\":{\"id\":2529,\"name\":\"Greece\",\"abbreviation\":\"HEL\"},\"matches\":17,\"pts\":28.546452,\"pos\":102}]};\n    // this.ranking.getRankingsData({start: true});\n    // this.ranking.feeds.feedRankings = 'rankings';\n    // this.ranking.onData( testRankings, 'rankings' );\n\n    this.getRankings( container );\n    this.updatePastMatches( container );\n}"},"newRank":{"Documentation":{"description":"Creates a new prediction","tags":[{"title":"param","description":"Widget container","type":{"type":"NameExpression","name":"Object"},"name":"container"},{"title":"param","description":"The name of the home team","type":{"type":"NameExpression","name":"String"},"name":"home_name"},{"title":"param","description":"The name of the away team","type":{"type":"NameExpression","name":"String"},"name":"away_name"},{"title":"param","description":"The score of the home team","type":{"type":"NameExpression","name":"String"},"name":"home_score"},{"title":"param","description":"The score of the away team","type":{"type":"NameExpression","name":"String"},"name":"away_score"},{"title":"param","description":"Whether the home team has home field advantage","type":{"type":"NameExpression","name":"Boolean"},"name":"home_advantage"},{"title":"param","description":"The weighting the match has on the rankings","type":{"type":"NameExpression","name":"Float"},"name":"weight"},{"title":"param","description":"If the prediction is new, or it is just being used for editing/deleting","type":{"type":"NameExpression","name":"Boolean"},"name":"new_past"}]},"Source":"PULSE.CLIENT.RUGBY.RankingsPredictor.prototype.newRank = function( container, home_name, away_name, home_score, away_score, home_advantage, weight, new_past, type, phase )\n{\n    var new_rankings = this.findRanking( home_name, away_name, home_score, away_score, home_advantage, weight ),\n        movements = this.updateRankings( [ home_name, away_name ], new_rankings[ 0 ] );\n\n    this.showUpdatedRankings( container, movements[ 0 ] );\n    this.showUpdatedRankingsMovement( container, home_name, '1', 'teamListHome', movements[ 0 ], movements[ 1 ][ 0 ] );\n    this.showUpdatedRankingsMovement( container, away_name, '1', 'teamListAway', movements[ 0 ], movements[ 1 ][ 1 ] );\n    this.rank_difs.push( {\n        home: new_rankings[ 1 ][ 0 ].toFixed( 5 ),\n        away: new_rankings[ 1 ][ 1 ].toFixed( 5 )\n    } );\n    this.movement = movements[ 0 ];\n    if( new_past )\n    {\n        this.past_buttons.push( {\n            homename: home_name,\n            awayname: away_name,\n            homescore: home_score,\n            awayscore: away_score,\n            homeadv: home_advantage,\n            weight: weight,\n            matchtype: type,\n            matchphase: phase\n        } );\n    }\n    this.updatePastMatches( container );\n}"},"updatePastMatches":{"Documentation":{"description":"Updates the previous predicted matches","tags":[{"title":"param","description":"Widget container","type":{"type":"NameExpression","name":"Object"},"name":"container"}]},"Source":"PULSE.CLIENT.RUGBY.RankingsPredictor.prototype.updatePastMatches = function( container )\n{\n    var body = $( container ).find( '.past_matches' );\n    body.html( '' );\n\n    // for (var key in this.groups) {\n    //         if (this.groups.hasOwnProperty(key)) {\n    //             this.groups[key] = [];\n    //         }\n    //     }\n\n    for( var i = 0; i < this.rank_difs.length; i++ )\n    {\n        PULSE.CLIENT.Template.append(\n            this.templates.pastmatch,\n            body,\n            {\n                past_buttons: this.past_buttons[ i ],\n                rank_dif: this.rank_difs[ i ]\n            }\n        );\n\n        // var phase = this.past_buttons[i].matchphase;\n        // if ((phase.indexOf('Pool') > -1) || (phase.indexOf('Group') > -1))\n        // {\n        //     this.groups[phase].push(this.past_buttons[i]);\n        //     console.log(this.groups);\n        // }\n    }\n}"},"updateRankings":{"Documentation":{"description":"Updates the rankings fiven two teams and their new rankings","tags":[{"title":"param","description":"Names of the two teams with new rankings","type":{"type":"NameExpression","name":"Array"},"name":"teams"},{"title":"param","description":"The new rankings of the teams in the teams array","type":{"type":"NameExpression","name":"Array"},"name":"new_rankings"},{"title":"return","description":"Array containing the movement of all teams and the specified teams","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.RankingsPredictor.prototype.updateRankings = function( teams, new_rankings )\n{\n    var indexes = [ this.ranking.getIndexbyElement( teams[ 0 ], 'name' ), this.ranking.getIndexbyElement( teams[ 1 ], 'name' ) ],\n        team_move = [ 0, 0 ],\n        movement = [],\n        original_index, diff, i;\n\n    for( i = 0; i < this.next_rankings.entries.length; i++ )\n    {\n        this.next_rankings.entries[ i ] = this.ranking.entries[ i ];\n    }\n\n    for( i = 0; i < 2; i++ )\n    {\n        this.next_rankings.entries[ indexes[ i ] ].pts = parseFloat( new_rankings[ i ] );\n    }\n\n    new_rankings = this.ranking.sortArray( this.next_rankings.entries, 'pts' );\n\n    for( i = 0; i < new_rankings.length; i++ )\n    {\n        original_index = this.ranking.getIndexbyElement( new_rankings[ i ].team.name, 'name' );\n        diff = parseInt( original_index - i );\n        if( i !== 0 )\n        {\n            if( parseFloat( new_rankings[ i ].pts ) == parseFloat( new_rankings[ i - 1 ].pts ) )\n            {\n                new_rankings[ i ].pos = new_rankings[ i - 1 ].pos;\n            }\n            else\n            {\n                new_rankings[ i ].pos = i + 1;\n            }\n        }\n        else\n        {\n            new_rankings[ i ].pos = 1;\n        }\n        if( original_index == indexes[ 0 ] )\n        {\n            team_move[ 0 ] = diff;\n        }\n        else if( original_index == indexes[ 1 ] )\n        {\n            team_move[ 1 ] = diff;\n        }\n        movement.push( diff );\n    }\n\n    for( i = 0; i < this.ranking.entries.length; i++ )\n    {\n        this.ranking.entries[ i ] = new_rankings[ i ];\n        this.next_rankings.entries[ i ] = new_rankings[ i ];\n    }\n    return [ movement, team_move ];\n}"},"findRanking":{"Documentation":{"description":"Calculates the new rankings for each team based a predicted match","tags":[{"title":"param","description":"The name of the home team","type":{"type":"NameExpression","name":"String"},"name":"teamHome"},{"title":"param","description":"The name of the away team","type":{"type":"NameExpression","name":"String"},"name":"teamAway"},{"title":"param","description":"The score of the home team","type":{"type":"NameExpression","name":"String"},"name":"homeScore"},{"title":"param","description":"The score of the away team","type":{"type":"NameExpression","name":"String"},"name":"awayScore"},{"title":"param","description":"Whether the home team has home field advantage","type":{"type":"NameExpression","name":"Boolean"},"name":"homeAdv"},{"title":"param","description":"The weighting the match has on the rank","type":{"type":"NameExpression","name":"Float"},"name":"weight"},{"title":"return","description":"The teams new rankings and the difference between the new and old rankings","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.RankingsPredictor.prototype.findRanking = function( teamHome, teamAway, homeScore, awayScore, homeAdv, weight )\n{\n    var home_points = parseFloat( this.ranking.getPtsByName( teamHome ) ),\n        away_points = parseFloat( this.ranking.getPtsByName( teamAway ) ),\n        home_win = true,\n        more_fifteen = false,\n        home_advantage = false,\n        new_rankings,\n        home_status = 'win',\n        home_diff = 0,\n        away_diff = 0;\n\n    homeScore = parseInt( homeScore );\n    awayScore = parseInt( awayScore );\n\n    if( homeScore < awayScore )\n    {\n        home_win = false;\n        home_status = 'lose';\n    }\n    else if( homeScore == awayScore )\n    {\n        home_status = 'draw';\n    }\n    if( Math.abs( homeScore - awayScore ) > 15 )\n    {\n        more_fifteen = true;\n    }\n    if( homeAdv )\n    {\n        home_advantage = true;\n    }\n\n    new_rankings = this.newRankings( home_points, away_points, home_status, home_advantage, more_fifteen, weight );\n\n    home_diff = new_rankings[ 0 ] - home_points;\n    away_diff = new_rankings[ 1 ] - away_points;\n    return [ new_rankings, [ home_diff, away_diff ] ];\n}"},"getRankings":{"Documentation":{"description":"Displayes the current rankings","tags":[{"title":"param","description":"Widget container","type":{"type":"NameExpression","name":"Object"},"name":"container"}]},"Source":"PULSE.CLIENT.RUGBY.RankingsPredictor.prototype.getRankings = function( container )\n{\n    var rankings = this.ranking.entries,\n        limit = this.limit;\n\n    if( limit > rankings.length )\n    {\n        limit = rankings.length;\n    }\n    PULSE.CLIENT.Template.publish(\n        this.templates.table,\n        $( container ).find( '#show_rankings' ),\n        {\n            rankings: rankings,\n            limit: limit\n        }\n    );\n}"},"showUpdatedRankings":{"Documentation":{"description":"Displayes the rankings with movement details","tags":[{"title":"param","description":"Widget Container","type":{"type":"NameExpression","name":"Object"},"name":"container"},{"title":"param","description":"Movement for each team in the rankings","type":{"type":"NameExpression","name":"Array"},"name":"movement"}]},"Source":"PULSE.CLIENT.RUGBY.RankingsPredictor.prototype.showUpdatedRankings = function( container, movement )\n{\n    var rankings = this.ranking.entries,\n        limit = this.limit;\n\n\n    var body = $( container ).find( '#show_rankings' );\n\n    if( limit > rankings.length )\n    {\n        limit = rankings.length;\n    }\n    PULSE.CLIENT.Template.publish(\n        this.templates.table,\n        $( container ).find( '#show_rankings' ),\n        {\n            rankings: rankings,\n            limit: limit,\n            movement: movement\n        }\n    );\n}"},"showUpdatedRankingsMovement":{"Documentation":{"description":"Displayes the nearby rankngs of a team given its movement","tags":[{"title":"param","description":"Widget container","type":{"type":"NameExpression","name":"Object"},"name":"container"},{"title":"param","description":"Name of the team","type":{"type":"NameExpression","name":"String"},"name":"name"},{"title":"param","description":"Number of teams to display above and below the chosen team","type":{"type":"NameExpression","name":"Integer"},"name":"limit"},{"title":"param","description":"Id of either home or away team","type":{"type":"NameExpression","name":"String"},"name":"id"},{"title":"param","description":"Array of movemet for all teams in the rankings","type":{"type":"NameExpression","name":"Array"},"name":"movement"},{"title":"param","description":"The movement of the chosen team","type":{"type":"NameExpression","name":"Integer"},"name":"moved"}]},"Source":"PULSE.CLIENT.RUGBY.RankingsPredictor.prototype.showUpdatedRankingsMovement = function( container, name, limit, id, movement, moved )\n{\n    var rankings,\n        lower = limit,\n        higher = limit,\n        body,\n        rankmove = [];\n\n    if( moved > 0 )\n    {\n        lower = moved + 1;\n    }\n    else if( moved < 0 )\n    {\n        higher = ( moved * -1) + 1;\n    }\n    if( higher < limit )\n    {\n        higher = limit;\n    }\n    if( lower < limit )\n    {\n        lower = limit;\n    }\n    rankings = this.ranking.getEntriesNearElement( name, 'name', higher, lower );\n\n    if( id == 'teamListHome' )\n    {\n        body = $( container ).find( '#home_rankings' );\n        $( container ).find( '.home_table_header' ).show();\n    }\n    else\n    {\n        body = $( container ).find( '#away_rankings' );\n        $( container ).find( '.away_table_header' ).show();\n    }\n    for( var i = 0; i < rankings.length; i++ )\n    {\n        var index = this.ranking.getIndexbyElement( rankings[ i ].team.name, 'name' );\n        rankmove.push( movement[ index ] );\n    }\n\n    PULSE.CLIENT.Template.publish(\n        this.templates.table,\n        body,\n        {\n            rankings: rankings,\n            limit: rankings.length,\n            lower: lower,\n            higher: higher,\n            movement: rankmove\n        }\n    );\n}"},"getRankingsNearby":{"Documentation":{"description":"Displays the rankings nearby a team","tags":[{"title":"param","description":"Widget container","type":{"type":"NameExpression","name":"Object"},"name":"container"},{"title":"param","description":"Name of the team","type":{"type":"NameExpression","name":"String"},"name":"name"},{"title":"param","description":"Number of teams to display above and below the chosen team","type":{"type":"NameExpression","name":"Integer"},"name":"limit"},{"title":"param","description":"Id of either home or away team","type":{"type":"NameExpression","name":"String"},"name":"id"}]},"Source":"PULSE.CLIENT.RUGBY.RankingsPredictor.prototype.getRankingsNearby = function( container, name, limit, id )\n{\n    var rankings = this.ranking.getEntriesNearElement( name, 'name', limit, limit ),\n        body,\n        higher = false,\n        lower = false;\n\n    if( id == 'teamListHome' )\n    {\n        body = $( container ).find( '#home_rankings' );\n        $( container ).find( '.home_table_header' ).show();\n        $( container ).find( '#home_rankings' ).show();\n    }\n    else\n    {\n        body = $( container ).find( '#away_rankings' );\n        $( container ).find( '.away_table_header' ).show();\n    }\n    if( rankings[ 0 ].pos > 1 )\n    {\n        higher = true;\n    }\n    if( rankings[ rankings.length - 1 ].pos < 104 )\n    {\n        lower = true;\n    }\n    PULSE.CLIENT.Template.publish(\n        this.templates.table,\n        body,\n        {\n            rankings: rankings,\n            limit: rankings.length,\n            lower: lower,\n            higher: higher\n        }\n    );\n}"},"getTeamLists":{"Documentation":{"description":"Displays a list of all the team names","tags":[{"title":"param","description":"Widget container","type":{"type":"NameExpression","name":"Object"},"name":"container"}]},"Source":"PULSE.CLIENT.RUGBY.RankingsPredictor.prototype.getTeamLists = function( container )\n{\n    var bodyHome = $( container ).find( '.teamListHome' ),\n        bodyAway = $( container ).find( '.teamListAway' );\n\n    bodyHome.hide();\n    bodyAway.hide();\n\n    var sorted_ranking = this.ranking.sort( 'team,name' )\n    for ( var i = 0; i < sorted_ranking.length; i++ )\n    {\n        var teamName = sorted_ranking[ i ].team.name;\n        PULSE.CLIENT.Template.append(\n            this.templates.teamlist,\n            bodyHome,\n            {\n                'teamName': teamName\n            }\n        );\n\n        PULSE.CLIENT.Template.append(\n            this.templates.teamlist,\n            bodyAway,\n            {\n                'teamName': teamName\n            }\n        );\n    }\n}"},"newRankings":{"Documentation":{"description":"Calculates the new rankings of two teams based on the predicted outcome of a match","tags":[{"title":"param","description":"The ranking of the home team","type":{"type":"NameExpression","name":"Float"},"name":"rank_home"},{"title":"param","description":"The ranking of the away team","type":{"type":"NameExpression","name":"Float"},"name":"rank_away"},{"title":"param","description":"The outcome of the match (win, lose or draw)","type":{"type":"NameExpression","name":"String"},"name":"home_status"},{"title":"param","description":"Whether the team gained home advantage","type":{"type":"NameExpression","name":"Boolean"},"name":"home_adv"},{"title":"param","description":"Whether the winner won by more than 15 points","type":{"type":"NameExpression","name":"Boolean"},"name":"more_fifteen"},{"title":"param","description":"The weighting the match has on the ranking","type":{"type":"NameExpression","name":"Float"},"name":"weight"},{"title":"return","description":"Returns the new rankings","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.RankingsPredictor.prototype.newRankings = function( rank_home, rank_away, home_status, home_adv, more_fifteen, weight )\n{\n\n    var rank_dif,\n        new_rank_home = rank_home,\n        core_rating_change,\n        rating_gap,\n        home_higher = true,\n        home_final,\n        away_final;\n\n    if( home_adv )\n    {\n        new_rank_home = new_rank_home + 3;\n    }\n    rating_gap = new_rank_home - rank_away;\n\n    if( new_rank_home < rank_away )\n    {\n        rating_gap = rating_gap * -1;\n        home_higher = false;\n    }\n    rank_dif = rating_gap / 10;\n\n    if( rank_dif > 1 )\n    {\n        rank_dif = 1;\n    }\n    if( home_status == 'win' )\n    {\n\n        if( home_higher )\n        {\n            core_rating_change = 1 - rank_dif;\n        }\n        else\n        {\n            core_rating_change = 1 + rank_dif;\n        }\n    }\n    else if( home_status == 'draw' )\n    {\n        if( home_higher )\n        {\n            core_rating_change = -1 * rank_dif;\n        }\n        else\n        {\n            core_rating_change = rank_dif;\n        }\n    }\n    else if( home_status == 'lose' )\n    {\n        if( home_higher )\n        {\n            core_rating_change = -1 * ( 1 + rank_dif);\n        }\n        else\n        {\n            core_rating_change = -1 * ( 1 - rank_dif);\n        }\n    }\n    if( more_fifteen )\n    {\n        core_rating_change = core_rating_change * 1.5;\n    }\n\n    //Multiply ranking by weight\n    core_rating_change = core_rating_change * weight;\n\n    home_final = rank_home + core_rating_change;\n    away_final = rank_away + ( -1 * core_rating_change);\n    return [ home_final, away_final ];\n}"}}},"ProductList":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"container"}]},"Source":"PULSE.CLIENT.RUGBY.ProductList = function( container )\n{\n\tcontainer.productList = true;\n}"},"ResetPasswordWidget":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the reset password widget"}]},"Source":"PULSE.CLIENT.RUGBY.ResetPasswordWidget = function( container, config )\n{\n    this.$container = $( container );\n    this.config = config;\n    this.bindEvents();\n    this.userProfile = PULSE.CLIENT.RUGBY.UserProfileWidget;\n    this.inputSummary = this.$container.find( '.inputSummary' );\n    this.errors = {};\n    this.validationFields = {};\n}","prototype":{"bindEvents":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.ResetPasswordWidget.prototype.bindEvents = function()\n{\n    var that = this;\n\n    this.$setPassword = this.$container.find( '.setPassword' );\n\n    this.$setPassword.on( 'click', function()\n    {\n        that.setPassword();\n    } );\n\n    $( '.input' ).keypress( function( e )\n    {\n        if ( e.which == 13 )\n        {\n            that.setPassword();\n        }\n    } );\n\n}"},"setPassword":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.ResetPasswordWidget.prototype.setPassword = function()\n{\n    var that = this;\n    // set fields and newPassword rules\n    that.validationFields.newPassword = [ \"required\" ,\"length=6\"];\n    that.validationFields.confirmNewPassword = [ \"required\",\"length=6\" ];\n    var isValid = that.validateForm();\n\n    var getParams = that.getQueryParams();\n    var newPassword = $( '[name=\"newPassword\"]' ).val();\n    var confirmNewPassword = $( '[name = \"confirmNewPassword\"]' ).val();\n\n    if ( isValid ) {\n        if (newPassword == confirmNewPassword)\n        {\n            var successCallback = function (data, textStatus, jqXHR) {\n                    if (data.passwordChanged) {\n                        window.location.href = window.location.origin + \"/media/releases\";\n                    }\n                    else {\n                        that.resetFields();\n                    }\n                },\n                errorCallback = function (jqXHR, textStatus, errorThrown) {\n                    var textResponse = $.parseJSON(jqXHR.responseText);\n                    console.log(textResponse);\n                    that.inputSummary.empty().append(PULSE.I18N.lookup('mediazone.widget.changepassword.alert.passwordupdate.error'));\n                    that.resetFields();\n                },\n                uuid = getParams.uuid,\n                email = getParams.email;\n\n        var requestUrl = 'newPassword=' + newPassword +\n            '&confirmNewPassword=' + confirmNewPassword +\n            \"&trackedLinkUuid=\" + uuid + \"&emailAddress=\" + email;\n        that.userProfile.request('resetPassword', requestUrl, successCallback, errorCallback, \"POST\");\n\n        }\n        else\n        {\n            that.inputSummary.empty().append(PULSE.I18N.lookup('mediazone.widget.changepassword.alert.passwordupdate.error'));\n        }\n    }\n    else\n    {\n        that.setErrorMessages();\n    }\n\n}","successCallback":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"textStatus"},{"title":"param","description":null,"type":null,"name":"jqXHR"}]},"Source":"var successCallback = function (data, textStatus, jqXHR) {\n                    if (data.passwordChanged) {\n                        window.location.href = window.location.origin + \"/media/releases\";\n                    }\n                    else {\n                        that.resetFields();\n                    }\n                }"},"errorCallback":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"jqXHR"},{"title":"param","description":null,"type":null,"name":"textStatus"},{"title":"param","description":null,"type":null,"name":"errorThrown"}]},"Source":"var successCallback = function (data, textStatus, jqXHR) {\n                    if (data.passwordChanged) {\n                        window.location.href = window.location.origin + \"/media/releases\";\n                    }\n                    else {\n                        that.resetFields();\n                    }\n                },\n                errorCallback = function (jqXHR, textStatus, errorThrown) {\n                    var textResponse = $.parseJSON(jqXHR.responseText);\n                    console.log(textResponse);\n                    that.inputSummary.empty().append(PULSE.I18N.lookup('mediazone.widget.changepassword.alert.passwordupdate.error'));\n                    that.resetFields();\n                }"}},"validateForm":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.ResetPasswordWidget.prototype.validateForm = function()\n{\n    var isValid = true;\n    that = this;\n    this.errors = {};\n\n    $.each( this.validationFields, function( key, value )\n    {\n        var fieldSelector = $( '[name=\"' + key + '\"]' );\n\n        $.each( value, function( k, v )\n        {\n\n            if ( v == \"required\" )\n            {\n                if ( fieldSelector.val() == \"\" && isValid )\n                {\n                    isValid = false;\n                    that.errors[ key ] = v;\n                }\n            }\n            else if ( v == \"email\" && isValid )\n            {\n                if ( that.isEmail( fieldSelector.val() ) == \"\" )\n                {\n                    isValid = false;\n                    that.errors[ key ] = v;\n                }\n            }\n            else if (v.match(\"^length\") && isValid )\n            {\n                var lengthCfg = v.split(\"=\");\n                if ( fieldSelector.val().length < lengthCfg[1] )\n                {\n                    isValid = false;\n                    that.errors[ key ] = lengthCfg[0];\n                }\n            }\n        } );\n\n    } );\n\n    return isValid;\n}"},"resetFields":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.ResetPasswordWidget.prototype.resetFields = function()\n{\n    $.each( that.validationFields, function( key, value )\n    {\n        $( '[name = \"' + key + '\"]' ).val( \"\" );\n    } )\n}"},"setErrorMessages":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.ResetPasswordWidget.prototype.setErrorMessages = function()\n{\n    $.each( that.validationFields, function( k, v )\n    {\n        that.$container.find( ( '[name=\"' + k + '\"]' ) ).css( 'style', '' );\n    } );\n\n    $.each( that.errors, function( k, v )\n    {\n        errorFields = that.$container.find( ( '[name=\"' + k + '\"]' ) ).css( 'border', '1px solid red' );\n        console.log(k,v);\n        if(v.match(\"^length\")){\n            that.inputSummary.empty().append(PULSE.I18N.lookup( 'mediazone.widget.changepassword.alert.lengthwarning' ));\n        }else{\n            that.inputSummary.empty().append(PULSE.I18N.lookup( 'mediazone.widget.changepassword.alert.passwordupdate.error' ));\n        }\n    } );\n\n}"},"getQueryParams":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.ResetPasswordWidget.prototype.getQueryParams = function()\n{\n    var queries = {};\n    $.each( document.location.search.substr( 1 ).split( '&' ), function( c, q )\n    {\n        var i = q.split( '=' );\n        if ( i.length > 1 )\n        {\n            queries[ i[ 0 ].toString() ] = i[ 1 ].toString();\n        }\n\n    } );\n    return queries;\n}"}}},"Shop":{"Documentation":{"description":"Shop widget","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Shop = function( container, config )\n{\n    this.config = {\n        category: container.getAttribute('data-category'),\n        results: parseInt( container.getAttribute('data-results') ) || 3\n    };\n    $.extend( this.config, config );\n\n    this.$container = $( container );\n    // If active, prevent additional requests\n    if ( this.$container.data('active') || !this.config.category )\n    {\n        return;\n    }\n    this.$container.data('active', true);\n\n    // Mobile device? You aren't from around here, are you...\n    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))\n    {\n        this.$container.remove();\n        return;\n    }\n\n    // Update the URL\n    this.url = window.location.protocol + '//www.rwcshop.com/?catcount=' + this.config.results + '&catid=' + this.config.category;\n    $( '.shop-link', this.$container ).attr( 'href', this.url );\n\n    // Fetch data and build response\n    $.ajax(\n        {\n            url:  this.url + '&serveas=ajax',\n            that: this,\n            error: function()\n            {\n                this.that.$container.hide();\n            },\n            success: function( data )\n            {\n                // Make image URLs relative\n                this.$data = $( data );\n                $( 'img', this.$data).attr( 'src', function(index, src) {\n                    return window.location.protocol + '//www.rwcshop.com' + src;\n                });\n\n                // Update all links to open in new tab\n                $( 'a', this.$data ).attr( 'target', '_blank' );\n\n                // Trim results and append listing to content\n                $( '.Listing', this.$data).appendTo( this.that.$container).hide().slideDown();\n            }\n        }\n    )\n}"},"RWCQuiz":{"Documentation":{"description":"RWC Quiz\nUsed to make the RWC quiz work","tags":[{"title":"constructor","description":null,"type":null,"name":null},{"title":"param","description":"jQuery container for the MC widget","type":{"type":"NameExpression","name":"Object"},"name":"$container"},{"title":"param","description":"additional configuration object based on data attrs of container","type":{"type":"NameExpression","name":"Object"},"name":"config"},{"title":"param","description":"instance of PULSE.CLIENT.RUGBY.Tournament, if any","type":{"type":"NameExpression","name":"Object"},"name":"tournament"}]},"Source":"PULSE.CLIENT.RUGBY.RWCQuiz = function( $container, config, tournament )\n{\n    this.$container = $container;\n\n    this.pages = [ \n        this.$container.find( '.userNameEntry' ),\n        this.$container.find( '.questionContainer' ),\n        this.$container.find( '.userDetailsContainer' ),\n        this.$container.find( '.resultsSection' )\n    ];\n\n    this.page = 0;\n\n    this.templates = {\n        questions : 'templates/rwc-quiz/questions.html',\n        results : 'templates/rwc-quiz/results.html'\n    }\n\n    // Array of answers for the questions\n    this.answers = [\n    \t1, 2, 3, 4, 2,\n        2, 1, 3, 2, 1,\n        3, 2, 1, 2, 1,\n        3, 3, 3, 3, 1,\n        4, 1, 1, 3, 2\n    ];\n\n    // Specifies amount of questions user should answer\n    this.totalQuestions = 3;\n\n    //User Name Entry\n    this.$firstName = this.$container.find( '#firstName' );\n    this.$lastName = this.$container.find( '#lastName' );\n    this.$userNameSubmit = this.$container.find( '.userNameSubmit' );\n\n    //User Details Entry\n    this.$userDetailsSubmit = this.$container.find( '.userDetailsSubmit' );\n    this.$email = this.$container.find( '#email' );\n    this.$country = this.$container.find( '#country' );\n    this.$userLevel = this.$container.find( 'input[name=\"describeyourself\"]:checked' );\n    this.contact = document.getElementById( 'contact' );\n\n    this.setListeners();\n\n    // Details about the user\n    this.user = {\n    \t'fullName' : '',\n        'email' : '',\n        'country' : '',\n        'level' : '',\n        'contact' : true\n    };\n\n    this.checkUser();\n    this.checkDetails();\n}","prototype":{"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.RWCQuiz.prototype.setListeners = function()\n{\n\tvar that = this;\n\n    // User Name Listeners\n\tthis.$firstName.on( 'input', function( e, params )\n\t{\n\t\tthat.checkUser();\n\t} );\n\n    // User Name Listeners\n    this.$lastName.on( 'input', function( e, params )\n    {\n        that.checkUser();\n    } );\n\n\tthis.$userNameSubmit.on( 'click', function( e, params )\n\t{\n\t\te.preventDefault();\n\n\t\tif ( ! $( this ).hasClass( 'disable' ) )\n\t\t{\n\t\t\tthat.user.fullName = that.$firstName.val() + ' ' + that.$lastName.val();\n\t\t\tthat.generateRandomQuestions();\n            that.getNextPage();\n\t\t}\n\t} );\n\n    //Quiz Listeners\n    $( this.pages[ 1 ] ).on( 'click', '.quizBackButton', function( e, params )\n    {\n        e.preventDefault();\n        var index = $( this ).data( 'index' );\n        if ( parseInt( index ) < 1 )\n        {\n            that.getPreviousPage();\n        }\n        else\n        {\n            that.moveQuestion( index )\n        }\n    } );\n\n    $( this.pages[ 1 ] ).on( 'click', '.quizQuestionAnswer', function( e, params )\n    {\n        e.preventDefault();\n        var index = $( this ).data( 'index' );\n        var answer = $( this ).data( 'answer' );\n        that.answeredQuestions[ index ].answer = answer;\n        if ( index === that.answeredQuestions.length - 1 )\n        {\n            that.getNextPage();\n        }\n        else\n        {\n            that.moveQuestion( index, true );\n        }\n    } );\n\n    //User Details Listeners\n    this.$email.on( 'input', function( e, params )\n    {\n        that.checkDetails();\n    } );\n\n    this.$country.on( 'change', function( e, params )\n    {\n        that.checkDetails();\n    } );\n\n    this.$userDetailsSubmit.on( 'click', function( e, params )\n    {\n        e.preventDefault();\n\n        if ( ! $( this ).hasClass( 'disable' ) )\n        {\n            that.user.email = that.$email.val();\n            that.getUserDetails();\n            that.getResults();\n            that.getNextPage();\n        }\n    } );\n\n    //Try Again returns the user back to the first question\n    $( this.pages[ 3 ] ).on( 'click', '.playGameAgain', function( e, params )\n    {\n        e.preventDefault();\n        that.$container.removeClass( 'winner' );\n        that.$container.removeClass( 'looser' );\n        that.generateRandomQuestions();\n        that.getPage( 1 );\n    } );\n}"},"checkUser":{"Documentation":{"description":"Check a user name has been inputted and disable button if it's not","tags":[]},"Source":"PULSE.CLIENT.RUGBY.RWCQuiz.prototype.checkUser = function()\n{\n    if ( this.$firstName.val().length > 1 && this.$lastName.val().length > 1 )\n    {\n        this.$userNameSubmit.removeClass( 'disable' );\n    }\n    else\n    {\n        this.$userNameSubmit.addClass( 'disable' );\n    }\n}"},"checkDetails":{"Documentation":{"description":"Check a valid email has been set and disable button if it's not","tags":[]},"Source":"PULSE.CLIENT.RUGBY.RWCQuiz.prototype.checkDetails = function()\n{\n    var re = /^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$/i;\n    var thisCountry = this.$country.val();\n    if ( re.test( this.$email.val() ) && thisCountry && thisCountry.length > 0 )\n    {\n        this.$userDetailsSubmit.removeClass( 'disable' );\n    }\n    else\n    {\n        this.$userDetailsSubmit.addClass( 'disable' );\n    }\n}"},"moveQuestion":{"Documentation":{"description":"Move question container along or back to the next question","tags":[{"title":"param","description":"Index of question","type":{"type":"NameExpression","name":"int"},"name":"index"},{"title":"param","description":"= Whether it should move forward or back","type":{"type":"NameExpression","name":"Boolean"},"name":"next"}]},"Source":"PULSE.CLIENT.RUGBY.RWCQuiz.prototype.moveQuestion = function( index, next ) {\n    \n    var thisIndex = parseInt( index );\n    var moveIndex = thisIndex - 1;\n    var leftOffset = $( this.pages[ 1 ] ).find( '.thisQuestion' + index ).width();\n\n    if ( next )\n    {\n        moveIndex = thisIndex + 1;\n        leftOffset = leftOffset * -1;\n    }\n\n    for ( var i = 0; i < this.answeredQuestions.length; i++ )\n    {\n        var $question = $( this.pages[ 1 ] ).find( '.thisQuestion' + i );\n        if ( thisIndex === i )\n        {\n            $question.removeClass( 'slideShow' );\n        }\n        else if ( next && thisIndex + 1 === i )\n        {\n            $question.addClass( 'slideShow' );\n        }\n        else if ( !next && thisIndex - 1 === i )\n        {\n            $question.addClass( 'slideShow' );\n        }\n        var thisOffset = $question.offset().left;\n        $question.offset( { left: thisOffset + leftOffset } );\n    }\n}"},"getNextPage":{"Documentation":{"description":"Get next page of the quiz","tags":[]},"Source":"PULSE.CLIENT.RUGBY.RWCQuiz.prototype.getNextPage = function() {\n    if ( this.page < this.pages.length - 1 )\n    {\n        this.getPage( this.page + 1 );\n    }\n}"},"getPreviousPage":{"Documentation":{"description":"Get previous page of the quiz","tags":[]},"Source":"PULSE.CLIENT.RUGBY.RWCQuiz.prototype.getPreviousPage = function() {\n    if ( this.page > 0 )\n    {\n        this.getPage( this.page - 1 );\n    }\n}"},"getPage":{"Documentation":{"description":"Get a specific page of the quiz","tags":[]},"Source":"PULSE.CLIENT.RUGBY.RWCQuiz.prototype.getPage = function( page ) {\n    $( this.pages[ this.page ] ).hide();\n    this.page = page;\n    $( this.pages[ this.page ] ).show();\n}"},"generateRandomQuestions":{"Documentation":{"description":"Generates random questions","tags":[]},"Source":"PULSE.CLIENT.RUGBY.RWCQuiz.prototype.generateRandomQuestions = function() {\n    \n    this.questionsLeft = [];\n\n    for ( var i = 0; i < this.answers.length; i++ )\n    {\n        this.questionsLeft.push( i );\n    }\n\n    this.answeredQuestions = [];\n\n    if ( this.totalQuestions > this.questionsLeft )\n    {\n        this.totalQuestions = this.questionsLeft.length;\n    }\n\n    while ( this.answeredQuestions.length < this.totalQuestions )\n    {\n        var randomNum = Math.floor( Math.random() * ( this.questionsLeft.length - 1 ) );\n        var questionIndex = this.questionsLeft[ randomNum ];\n        this.questionsLeft.splice( randomNum, 1 );\n        this.answeredQuestions.push( { number : questionIndex, answer : undefined } );\n    }\n    this.renderQuestions();\n}"},"renderQuestions":{"Documentation":{"description":"Renders questions","tags":[]},"Source":"PULSE.CLIENT.RUGBY.RWCQuiz.prototype.renderQuestions = function() {\n    if ( this.answeredQuestions.length > 0 )\n    {\n        PULSE.CLIENT.Template.publish(\n            this.templates.questions,\n            $( this.pages[ 1 ] ),\n            {\n                questions : this.answeredQuestions\n            }\n        );\n    }\n}"},"getUserDetails":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.RWCQuiz.prototype.getUserDetails = function()\n{\n    this.user.country = this.$country.val();\n    this.user.email = this.$email.val();\n    this.user.level = this.$userLevel.val();\n    this.user.contact = this.contact.checked;\n\n    console.log( this.user );\n}"},"getResults":{"Documentation":{"description":"Calculates and renders results","tags":[]},"Source":"PULSE.CLIENT.RUGBY.RWCQuiz.prototype.getResults = function()\n{\n    var result = 0;\n    var total = this.answeredQuestions.length;\n    var correct = true;\n    for ( var i = 0; i < total; i++ )\n    {\n        if ( this.answers[ this.answeredQuestions[ i ].number ] === this.answeredQuestions[ i ].answer )\n        {\n            result++;\n        }\n        else\n        {\n            correct = false;\n        }\n    }\n\n    if ( correct )\n    {\n        this.$container.addClass( 'winner' );\n    }\n    else\n    {\n        this.$container.addClass( 'looser' )\n    }\n\n    PULSE.CLIENT.Template.publish(\n        this.templates.results,\n        $( this.pages[ 3 ] ),\n        {\n            result : result,\n            total : total,\n            correct : correct\n        }\n    );\n}"}}},"SearchBoxRedirect":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.SearchBoxRedirect"},{"title":"param","description":null,"type":null,"name":"container"},{"title":"param","description":null,"type":null,"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.SearchBoxRedirect = function( container, config )\n{\n\tthis.$container = $( container );\n\tvar that = this;\n\n\tvar minLength = config[\"data-min-length\"] || 3;\n    \n    var $input = this.$container.find( 'input' );\n    if( $input.length )\n    {\n        $input[ 0 ].oninvalid = function( e )\n        {\n            e.target.setCustomValidity(\"Invalid input\");\n        }\n    }\n\n\tthis.$container.submit( function( e )\n\t{\n  \t\tvar searchString = $( this ).find( 'input.search' ).val();\n  \t\tif ( searchString.length < minLength )\n  \t\t{\n  \t\t\te.preventDefault();\n  \t\t}\n\t} );\n\n}"},"SponsorRotation":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the fixtures widget"}]},"Source":"PULSE.CLIENT.RUGBY.SponsorRotation = function( container, sponsors, template, startWith )\n{\n    this.$container = $( container );\n    this.sponsors = sponsors;\n    this.template = template;\n\n    if( startWith )\n    {\n        this.count = startWith;\n    }\n    else\n    {\n        this.count = Math.floor( Math.random() * this.sponsors.length );\n    }\n\n    this.$sponsorRotate = this.$container.find( '#sponsorRotate' );\n    this.updateSponsor();\n\n    this.setRotation();\n}","prototype":{"setRotation":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.SponsorRotation.prototype.setRotation = function()\n{\n    var that = this;\n\n    setInterval( function()\n    {\n        that.$sponsorRotate.fadeOut( 500, function()\n        {\n            that.$sponsorRotate.html( '' );\n            that.count = that.count + 1;\n            if ( that.count > that.sponsors.length - 1 )\n            {\n                that.count = 0;\n            }\n\n            that.$sponsorRotate.fadeIn( 500 );\n            that.updateSponsor();\n        } );\n\n    }, 3500 );\n}"},"updateSponsor":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.SponsorRotation.prototype.updateSponsor = function()\n{\n    var model = {\n        url: this.sponsors[ this.count ].url,\n        clazz: this.sponsors[ this.count ][ 'class' ]\n    };\n\n    PULSE.CLIENT.Template.publish( this.template, this.$sponsorRotate, model );\n}"}}},"SearchResults":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the search results widget"}]},"Source":"PULSE.CLIENT.RUGBY.SearchResults = function( container )\n{\n    var params = PULSE.CLIENT.Util.parseUrlParameters();\n\n    this.urlGen = new PULSE.CLIENT.RUGBY.getUrlGenerator();\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n\n    this.pageNum = 0; // Defaults the page number to 0\n\n    // Sets the results template for each toggle\n    this.templates =\n    {\n        'all' : 'templates/search/all.html',\n        'text' : 'templates/search/all.html',\n        'photo' : 'templates/search/photo.html',\n        'video' : 'templates/search/video.html',\n        'audio' : 'templates/search/audio.html',\n        'document' : 'templates/search/document.html',\n        'tournament' : 'templates/search/tournament.html',\n        //'team' : 'templates/search/team.html',\n        'none' : 'templates/search/noresults.html'\n    }\n\n    // Sets the page sizes for each toggle\n    this.pageSize = {\n        'all' : 7,\n        'text' : 7,\n        'photo' : 12,\n        'video' : 12,\n        'audio' : 12,\n        'document' : 15,\n        'tournament' : 15\n        //'team' : 4\n    }\n\n    this.$container = container;\n    this.$searchResults = this.$container.find('#searchResultsBox');\n    this.$newSearch = this.$container.find( '#newSearch' );\n    this.$searchForm = this.$container.find( '#searchPageForm' );\n    this.$socialBox = this.$container.find( '.socialBox' );\n    this.$searchShow = this.$container.find('#searchResultsShow');\n    this.$searchTypes = this.$container.find( '#searchTypes' );\n\n    this.$maxNumberContainer = this.$container.find( '.maxPages' );\n    this.$currentNumberContainer = this.$container.find( '.paginationValue' );\n\n    this.$pagination = this.$container.find( '.pagination' );\n\n    this.$maxNumberContainer.html( '1' );\n    //this.$currentNumberContainer.html( '1' );\n    this.$currentNumberContainer.val( 1 );\n\n    this.$mobileNav = this.$container.find( '.filterButton' );\n    this.$filterNav = this.$container.find( '.filterNav' );\n\n    var dropdownOptions = {\n                'dropdownId' : 'MobileDropdown',\n                'itemsContainer' : this.$filterNav,\n                'itemContainer' : 'a',\n                'currentContainer' : this.$mobileNav,\n                'dropdownContainer' : this.$filterNav,\n                'changeCurrent' : true,\n                'addCurrent' : '<span class=\"icon drop-down-blue\"></span>'\n    };\n\n    if ( $( window ).width() > 666 )\n    {\n        dropdownOptions.notClose = true;\n    }\n\n    this.categoryDropdown = new PULSE.CLIENT.UI.DropdownMenu( this.$container, dropdownOptions );\n\n    if ( $( window ).width() > 666 )\n    {\n        this.$filterNav.show();\n    }\n\n    if ( 'toggle' in params )\n    {\n        var defaultToggle = params[ 'toggle' ];\n        if ( defaultToggle in this.pageSize )\n        {\n            this.toggle = defaultToggle;\n            //var newContainer = this.$searchTypes.find( '#' + defaultToggle + 'Div' );\n            var newContainer = this.$searchTypes.find( '.' + defaultToggle );\n            if ( newContainer )\n            {\n                //$( newContainer ).show();\n                $( newContainer ).addClass( 'active' );\n            }\n        }\n        else\n        {\n            this.toggle = 'all';\n            var newContainer = this.$searchTypes.find( '.all' );\n            if ( newContainer )\n            {\n                //$( newContainer ).show();\n                $( newContainer ).addClass( 'active' );\n            }\n        }\n    }\n    else\n    {\n        this.toggle = 'all';\n        var newContainer = this.$searchTypes.find( '.all' );\n        if ( newContainer )\n        {\n            //$( newContainer ).show();\n            $( newContainer ).addClass( 'active' );\n        }\n    }\n    // Determines which toggle is being used in the search\n    // this.toggle = 'all';\n\n    // Holds the pagination for each toggle and acts as a cache for each toggle and page\n    //this.paginations = {};\n    this.pagination = undefined;\n\n    this.cache = {};\n\n    // Sets shared paginations details for all the toggles\n    this.pageOptions = {\n        'container' : this.$container,\n        'currentNumberContainer' : '.paginationValue',\n        'maxNumberContainer' : '.maxPages',\n        'displayMoreContainer' : this.$searchShow\n    };\n\n    // this.pageOptions.template = this.templates[ this.toggle ];\n    //             this.pageOptions.pageSize = this.pageSize[ this.toggle ];\n    //             this.pageOptions.forwardContainer = '.next';\n    //             this.pageOptions.backwardContainer = '.prev';\n\n    //             this.pagination = new PULSE.CLIENT.UI.Pagination(this.pageOptions);\n\n     var mediaOptions =\n    {\n        container: container,\n        type: \"list\",//\"player\"\n        link: '.audioThumb', //LIST (data-mediaid is on this link always)\n        link_click : '.audioThumb a',\n        player_scope: \"primary\", //whatever name\n        link_time: '.duration', //inside link container\n        link_title: '.title', //inside link container\n        link_date: '.datePosted', //inside link container\n        external_link_click : '.externalLink',\n        external_player_url : '/worldrugbytv/audio'\n    };\n\n    var mediaList = new PULSE.CLIENT.MediaList( mediaOptions );\n\n    // var dropdownOptions = {\n    //             'dropdownId' : 'SocialDropdown',\n    //             'itemsContainer' : this.$container.find( '.dropdown' ),\n    //             'itemContainer' : 'li',\n    //             'currentContainer' : '.socialBox',\n    //             'dropdownContainer' : this.$socialBox\n    // };\n\n    // var socialDropdown = new PULSE.CLIENT.UI.DropdownMenu( this.$container, dropdownOptions );\n\n    // Tries to find parameters in the url and gets the results based on this search parameter\n    // Urls are passed in the form [ url ]?s=[ search term ]\n    if ( 's' in params )\n    {\n        this.searchText = params[ 's' ]\n\n        if ( this.searchText )\n        {\n            var spacedSearchText = this.searchText.replace(/\\+/g,' ');\n            this.$searchResults.val( spacedSearchText );\n            this.searchText = escape( spacedSearchText );\n        }\n        this.getResults( this.searchText, this.toggle );\n    }\n    else\n    {\n        this.searchText = '';\n        this.showNoResults();\n    }\n\n    this.setListeners();\n    this.setSubscriptions();\n}","prototype":{"newSearch":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.SearchResults.prototype.newSearch = function()\n{\n    var url = window.location.href;\n\n        this.searchText = this.$searchResults.val();\n\n        if ( this.searchText.length > 2 )\n        {\n            if (url.indexOf('?') > -1)\n            {\n               url = url.split( '?' )[ 0 ] + '?s=' + this.searchText;\n            }\n            else\n            {\n               url = url + '?s=' + this.searchText;\n            }\n\n            if ( this.toggle.indexOf( 'all' ) < 0 )\n            {\n                url = url + '&toggle=' + this.toggle;\n            }\n            window.location.href = url;\n        }\n}"},"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.SearchResults.prototype.setListeners = function()\n{\n    var that = this;\n\n    // If the user searches a new term, then the window is refreshed with the new term\n    // as a url parameter - in the form [ url ]?s=[ new term ]\n    this.$newSearch.on( 'click', function( e, params )\n    {\n        that.newSearch();\n    } );\n\n    this.$searchForm.submit( function( e )\n    {\n        e.preventDefault();\n        that.newSearch();\n    } );\n\n    $( window ).on( 'resize', function ( e )\n    {\n        if ( $( window ).width() > 666 )\n        {\n            that.$filterNav.show();\n            that.categoryDropdown.notClose = true;\n        }\n        else\n        {\n            that.$filterNav.hide();\n            that.categoryDropdown.notClose = false;\n        }\n    } );\n\n    // Handles toggle clicks. Data is either\n    this.$searchTypes.on( 'click', 'li', function( e, params ){\n\n        var divs = that.$searchTypes.find( 'a' ),\n            index = 0;\n        for ( var i = 0; i < divs.length; i++ )\n        {\n            //$( divs[ i ] ).hide();\n            $( divs[ i ] ).removeClass( 'active' );\n        }\n\n        var toggle =  $( this ).find( 'a' ).html().toLowerCase();\n\n        if ( toggle.indexOf( 'news' ) > -1 )\n        {\n            that.toggle = 'text';\n            index = 1;\n        }\n        else if ( toggle.indexOf( 'photos' ) > -1 )\n        {\n            that.toggle = 'photo';\n            index = 2;\n        }\n        else if ( toggle.indexOf( 'videos' ) > -1 )\n        {\n            that.toggle = 'video';\n            index = 3;\n        }\n        else if ( toggle.indexOf( 'audio' ) > -1 )\n        {\n            that.toggle = 'audio';\n            index = 4;\n        }\n        else if ( toggle.indexOf( 'documents' ) > -1 )\n        {\n            that.toggle = 'document';\n            index = 5;\n        }\n        else if ( toggle.indexOf( 'tournaments' ) > -1 )\n        {\n            that.toggle = 'tournament';\n            index = 6;\n        }\n        // else if ( toggle.indexOf( 'teams' ) > -1 )\n        // {\n        //     that.toggle = 'team';\n        //     index = 7;\n        // }\n        else if ( toggle.indexOf( 'all' ) > -1 )\n        {\n            that.toggle = 'all';\n            index = 0;\n        }\n\n        //$( this ).find( 'div' ).show();\n        $( this ).find( 'a' ).addClass( 'active' );\n\n        that.pageNum = 0;\n\n        // Checks if the new toggle data has been cached. If it has then it resets the pagination to\n        // the first page and displays the content.\n        // Otherwise new data is requested for the toggle\n        that.checkIfCached();\n        if ( that.checkIfCached() )\n        {\n            that.pagination.pageNum = 0;\n            that.pagination.setNumEntries( that.cache[ that.toggle ][ that.pageNum ].numEntries );\n            that.publishData( that.cache[ that.toggle ][ that.pageNum ] );\n        }\n        else\n        {\n            that.getResults( that.searchText, that.toggle )\n        }\n\n    } );\n}"},"setSubscriptions":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.SearchResults.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.SEARCH_EVENTS.SEARCH_UPDATE, function( e, params )\n    {\n\n        if ( that.currentSearch.getNumEntries() < 1 )\n        {\n            that.showNoResults();\n        }\n        else\n        {\n            var numEntries = that.currentSearch.getNumEntries();\n\n            //if (!( that.toggle in that.paginations ))\n            //{\n\n            if (! that.pagination )\n            {\n                that.pageOptions.template = that.templates[ that.toggle ];\n                that.pageOptions.pageSize = that.pageSize[ that.toggle ];\n                that.pageOptions.numEntries = numEntries;\n                that.pageOptions.maxEntries = numEntries;\n                that.pageOptions.forwardContainer = '.next';\n                that.pageOptions.backwardContainer = '.prev';\n\n                that.pagination = new PULSE.CLIENT.UI.Pagination(that.pageOptions);\n            }\n\n            that.publishData( that.currentSearch );\n        }\n    } );\n\n\n    PULSE.CLIENT.subscribe( 'content/get', function()\n    {\n        var cached = false;\n\n        that.pageNum = that.pagination.getPageNum();\n\n        // Checks if the data is cached. If it is then it publishes the cached data,\n        // otherwise it gets more content for the next page\n        if ( that.checkIfCached() )\n        {\n            that.publishData( that.cache[ that.toggle ][ that.pageNum ] )\n        }\n        else\n        {\n            that.getResults( that.searchText, that.toggle);\n        }\n    });\n}"},"checkIfCached":{"Documentation":{"description":"Checks if the current toggle and page number has been cached.","tags":[{"title":"return","description":"Whether the data exists in the cache","type":{"type":"NameExpression","name":"Boolean"}}]},"Source":"PULSE.CLIENT.RUGBY.SearchResults.prototype.checkIfCached = function()\n{\n    var cached = false;\n\n     if ( this.cache[ this.toggle ] )\n    {\n        if ( this.cache[ this.toggle ][ this.pageNum ] )\n        {\n            cached = true;\n        }\n    }\n\n    return cached;\n}"},"publishData":{"Documentation":{"description":"Publishes the downloads data for the different toggles","tags":[{"title":"param","description":"Data for the content items","type":{"type":"NameExpression","name":"Object"},"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.SearchResults.prototype.publishData = function( data )\n{\n    var bestPhotos = [],\n        results = data.getResults();\n\n    // Finds the best variant ( thumnail ) for the photos toggle\n\n    // for ( var i = 0; i < results.length; i++ )\n    // {\n    //     //bestPhotos.push( PULSE.CLIENT.getBestFitPhotoVariant( results[ i ].variants, 260 ) );\n    // }\n\n    PULSE.CLIENT.Template.publish(\n            this.templates[ this.toggle ],\n            this.$searchShow,\n            {\n                content : results, photoVariant : bestPhotos, pageSize : this.pageSize[ this.toggle ]\n            }\n    );\n\n    // Checks if the toggle has already been cached\n    if ( ! this.cache[ this.toggle ] )\n    {\n        this.cache[ this.toggle ] = {};\n        this.pagination.pageNum = 0;\n    }\n\n    // Adds data to the cache\n    this.cache[ this.toggle ][ this.pageNum ] = data;\n    this.pagination.pageSize = this.pageSize[ this.toggle ];\n    this.pagination.setNumEntries( data.numEntries );\n}"},"getResults":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"terms"},{"title":"param","description":null,"type":null,"name":"type"}]},"Source":"PULSE.CLIENT.RUGBY.SearchResults.prototype.getResults = function( terms, type )\n{\n    var tags = undefined,\n        //sort = 'timestamp desc',\n        sort = undefined,\n        language = PULSE.CLIENT.LANGUAGE;\n\n    this.loading();\n\n    if ( type.indexOf( 'all' ) > -1)\n    {\n        type = 'audio,document,photo,text,tournament,video';\n    }\n    else if ( type.indexOf( 'text' ) > -1)\n    {\n        tags = 'News Article';\n    }\n    else if ( ( type.indexOf( 'tournament' ) > -1) )\n    {\n        language = false;\n        sort = undefined;\n    }\n\n    if ( terms )\n    {\n        this.currentSearch = new PULSE.CLIENT.RUGBY.Search( terms, language, type, PULSE.CLIENT.CMS_ACCOUNT, sort, this.pageSize[ this.toggle ], this.pageNum, tags );\n    }\n    else\n    {\n        this.showNoResults();\n    }\n}"},"loading":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.SearchResults.prototype.loading = function()\n{\n    this.$searchShow.html( '<div class=\"spinner\"><div style=\"height : 25px; width : 25px\"></div></div>' );\n\n    // if ( this.$pagination )\n    // {\n    //     this.$pagination.hide();\n    // }\n}"},"showNoResults":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.SearchResults.prototype.showNoResults = function()\n{\n    if ( this.pagination )\n    {\n        this.pagination.setNumEntries( 0 );\n    }\n\n    PULSE.CLIENT.Template.publish(\n        this.templates.none,\n        this.$searchShow,\n        { term : this.searchText }\n    );\n\n}"}}},"TeamRankingsMovers":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the full rankings widget"},{"title":"param","description":"Jquery/Dom/Selector for this widget container","type":{"type":"NameExpression","name":"Object"},"name":"container"},{"title":"param","description":"Configuration for this widget from container attrs","type":{"type":"NameExpression","name":"Object"},"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.TeamRankingsMovers = function( container, config )\n{\n    // vars\n    this.$container = $( container );\n    this.config = config;\n\n    this.scope = this.config[ 'data-rankings-scope' ] || 'mru';\n    this.limit = this.config[ 'data-max-entries' ] || 5;\n    this.dateString = this.config[ 'data-rankings-date' ] || undefined;\n    this.date = this.dateString ? PULSE.CLIENT.DateUtil.parseDateTime( this.dateString ).format( 'yyyy-mm-dd' ) : '';\n    this.widgetName = this.config[ 'data-widget-type' ] || 'team-rankings-climbers_widget';\n    this.heading = this.widgetName === 'team-rankings-climbers_widget' ? 'Climbers' : 'Fallers';\n    this.getterFunction = this.widgetName === 'team-rankings-climbers_widget' ? 'getBiggestClimbers' : 'getBiggestFallers';\n    this.listSelector = this.widgetName === 'team-rankings-climbers_widget' ? '.biggestClimbers' : '.biggestFallers';\n    this.$listContainer = this.$container.find( this.listSelector );\n    this.$table = this.$listContainer.find( 'table' );\n    this.$tableHeader = this.$table.find( 'tr.header' ).detach();\n    this.headerHTML = this.$tableHeader.length ? this.$tableHeader[0].innerHTML : '';\n\n    this.rankings = new PULSE.CLIENT.RUGBY.Rankings( this.scope );\n    this.templates = {\n        teamRankingsMovers: 'templates/rankings/team-rankings-movers.html'\n    };\n\n    // init\n    this.setLoadingState();\n    this.setSubscriptions();\n    this.rankings.getRankingsData( {\n        start: true,\n        params: {\n            date: this.date\n        }\n    } );\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"Subscribe to rankings data events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TeamRankingsMovers.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.RANKINGS_UPDATE, function()\n    {\n        that.refreshRankingsList();\n    } );\n}"},"refreshRankingsList":{"Documentation":{"description":"Refresh rankings list on DOM","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TeamRankingsMovers.prototype.refreshRankingsList = function()\n{\n    // Get movement type based on the widget type\n    var rankings = $.extend( {}, this.rankings ),\n        model = {\n            rankings: $.extend( rankings, { 'entries': rankings[ this.getterFunction ]() } ),\n            limit: this.limit,\n            heading: this.heading,\n            favouriteTeamId: undefined\n        };\n\n    var tableHTML = PULSE.CLIENT.Template.getHtml( this.templates.teamRankingsMovers, model );\n\n    if( this.$table.length )\n    {\n        this.$table[0].innerHTML = this.headerHTML + tableHTML;\n    }\n}"},"setLoadingState":{"Documentation":{"description":"Adds a loading spinner to the table view when refreshing data","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TeamRankingsMovers.prototype.setLoadingState = function()\n{\n    this.$table.html( '<div class=\"spinner\"><div></div></div>' );\n}"}}},"TabbedLeaders":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the fixtures widget"}]},"Source":"PULSE.CLIENT.RUGBY.TabbedLeaders = function( container, config, tournament )\n{\n    this.$container = $( container );\n    this.config = config;\n    this.tournament = tournament;\n\n    this.urlGen = new PULSE.CLIENT.RUGBY.getUrlGenerator();\n\n    this.imageSize = 140;\n\n    this.tab = 'tries';\n\n    this.stats = {\n        'tries' : { stats : undefined, rendered : true, requested : false, received : false },\n        'conversions' : { stats : undefined, rendered : false, requested : false, received : false },\n        'penalties' : { stats : undefined, rendered : false, requested : false, received : false },\n        'dropgoals' : { stats : undefined, rendered : false, requested : false, received : false }\n    }\n\n    this.templates = {\n        stats: \"templates/stats/table.html\"\n    };\n\n    var data = {\n        scope : this.$container.data( 'scope' ),\n        metric : this.$container.data( 'metric' ),\n        scopeIds : this.$container.data( 'scopeids' )\n    };\n\n    if ( data.scopeids )\n    {\n\n        data.scopeIds = ( data.scopeIds + '' ).split( ',' );\n    }\n\n    this.tabbedStatsContainers = this.$container.find( '.tabbedStatsContainer' );\n    this.tabbedLeaderToggle = '.tabbedLeaderToggle';\n    this.leaderToggles = this.$container.find( this.tabbedLeaderToggle );\n\n    this.pageSize = this.$container.data('page-size');\n\n    this.setSubscriptions();\n    this.setListeners();\n\n    this.topPlayers = new PULSE.CLIENT.RUGBY.TopPlayers( this.tournament );\n\n    this.statDetails = this.topPlayers.setStats( data );\n\n    if ( this.statDetails.scope === 'event' && this.statDetails.paramValue )\n    {\n        this.tournament = window.WidgetController.getTournamentByName( this.statDetails.paramValue )\n    }\n\n    this.createPlayerImages();\n    this.createEntryUrls();\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"Subscribe to standings data events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TabbedLeaders.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_TOPPLAYERS.STATS_UPDATE, function( e, params )\n    {\n        that.stats[ params.metric ].received = true;\n        that.findTopStats( params.metric );\n        that.renderStats();\n    });\n}"},"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TabbedLeaders.prototype.setListeners = function()\n{\n    var that = this;\n\n    this.$container.on( 'click', this.tabbedLeaderToggle, function( e, params )\n    {\n        e.preventDefault();\n        for ( var i = 0; i < that.leaderToggles.length; i++ )\n        {\n            $( that.leaderToggles[ i ] ).removeClass( 'active' );\n        }\n        $( this ).addClass( 'active' );\n\n        that.tab = $( this ).data( 'stat' );\n        that.renderStats();\n\n    } );\n}"},"renderStats":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TabbedLeaders.prototype.renderStats = function()\n{\n    var that = this;\n    var thisStat = this.stats[ this.tab ];\n\n    var $thisContainer;\n\n    for ( var i = 0; i < this.tabbedStatsContainers.length; i++ )\n    {\n        if ( $( this.tabbedStatsContainers[ i ] ).data( 'stat' ) === this.tab )\n        {\n            $thisContainer = $( this.tabbedStatsContainers[ i ] );\n        }\n        else\n        {\n            $( this.tabbedStatsContainers[ i ] ).hide();\n        }\n    }\n\n    if ( this.stats[ this.tab ].rendered )\n    {\n        $thisContainer.show();\n    }\n    else\n    {\n        if ( this.stats[ this.tab ].received )\n        {\n            var stats = this.stats[ this.tab ].stats;\n\n            if ( !stats )\n            {\n                stats = [];\n            }\n\n            PULSE.CLIENT.Template.publish(\n                this.templates.stats,\n                $thisContainer,\n                { stats : stats },\n                function()\n                {\n                    that.createPlayerImages();\n                    that.createEntryUrls();\n                }\n            );\n            $thisContainer.show();\n            this.stats[ this.tab ].rendered = true;\n        }\n        else\n        {\n            if ( ! this.stats[ this.tab ].requested )\n            {\n                this.getTopStats();\n                this.stats[ this.tab ].stats = [];\n            }\n        }\n    }\n}"},"findTopStats":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"tab"}]},"Source":"PULSE.CLIENT.RUGBY.TabbedLeaders.prototype.findTopStats = function( tab )\n{\n    this.stats[ tab ].stats = this.topPlayers.findTopPlayerStats( this.statDetails.scope, tab, this.statDetails.param, this.statDetails.paramValue );\n}"},"getTopStats":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TabbedLeaders.prototype.getTopStats = function()\n{\n    var statObject = {};\n    statObject[ this.statDetails.param ] = this.statDetails.paramValue;\n    statObject.pageSize = this.pageSize;\n    this.stats[ this.tab ].requested = true;\n    this.topPlayers.getTopPlayersStatsData( this.statDetails.scope, this.tab, statObject );\n}"},"createEntryUrls":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TabbedLeaders.prototype.createEntryUrls = function()\n{\n    var that = this;\n\n    var $thisContainer = this.findCurrentContainer();\n\n    var $entryContainer = $thisContainer.find('.entryStatContainer');\n\n     $entryContainer.each( function() {\n        var teamCode = $( this ).data( 'team' );\n        var teamId = PULSE.CLIENT.RUGBY.ABBREVIATION_LOOKUP[ teamCode ];\n        var playerId = $( this ).data( 'player' );\n        if ( teamId && playerId )\n        {\n            var url = that.urlGen.makeTeamUrl( { id : teamId }, { id : playerId } );\n            if ( url )\n            {\n                $( this ).attr( 'href', url );\n            }\n        }\n    } );\n}"},"findCurrentContainer":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TabbedLeaders.prototype.findCurrentContainer = function()\n{\n    for ( var i = 0; i < this.tabbedStatsContainers.length; i++ )\n    {\n        if ( $( this.tabbedStatsContainers[ i ] ).data( 'stat' ) === this.tab )\n        {\n            $thisContainer = $( this.tabbedStatsContainers[ i ] );\n        }\n    }\n\n    return $thisContainer;\n}"},"createPlayerImages":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TabbedLeaders.prototype.createPlayerImages = function()\n{\n    var that = this;\n\n    var $thisContainer = this.findCurrentContainer();\n\n    var $playerImages = $thisContainer.find( '.playerImage' );\n\n    $playerImages.each( function() {\n        var playerId = $(this).attr( 'data-player-id' );\n        that.urlGen.setPlayerImageLoader( playerId, that.imageSize, this );\n    } );\n}"}}},"TabbedPoolsWidget":{"Documentation":{"description":"Subscribes to standings and displays the pools when the data comes","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TabbedPoolsWidget = function( container )\n{\n    var that = this;\n\n    // Prevent multiple event binding\n    if ( container.tabsActive )\n    {\n        return;\n    }\n    container.tabsActive = true;\n\n    that.$container = $( container).on( 'click', '[data-tab-key]', function( e )\n    {\n        e.preventDefault();\n        $( '[data-tab-key]', that.$container ).removeClass( 'active').filter( this ).addClass( 'active' );\n        $( '[data-tab-content]', that.$container ).addClass( 'hide' )\n            .filter( '[data-tab-content=' + $( this).data( 'tab-key' ) + ']' ).removeClass( 'hide')\n            .find( 'tbody' ).hide().fadeIn( 750 );\n    } )\n\n    // Show the first content tab\n    $( '[data-tab-key]', that.$container).first().click();\n}"},"StacklaFilters":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.StacklaFilters"},{"title":"param","description":null,"type":null,"name":"$target"},{"title":"param","description":null,"type":null,"name":"filters"}]},"Source":"PULSE.CLIENT.RUGBY.StacklaFilters = function( $target, filters )\n{\n    var self = this;\n\n    self.config = {\n        activeClass: 'active',\n        initial: $target.data(),\n        linkClass: 'stacklaLink'\n    };\n\n    self.$filters = $( filters );\n    self.galleryCache = {};\n\n    // Fetch filter links\n    self.$filterLinks = $( '.' + self.config.linkClass, self.$filters ).on( 'click', function( e )\n    {\n        // Get item and update classes\n        if ( this === self.current )\n        {\n            return;\n        }\n        self.current = this;\n        self.$filterLinks.not( self.current ).removeClass( self.config.activeClass );\n        $( self.current ).addClass( self.config.activeClass );\n\n        // Retrieve config (from cache if available) and display\n        $target.$currentContent.remove();\n        if ( !self.galleryCache[ this.href ] )\n        {\n            self.galleryCache[ this.href ] = PULSE.CLIENT.RUGBY.Stackla.buildGalleryFromConfig( $.extend( {}, self.config.initial, $( this ).data() ) );\n        }\n        $target.$currentContent = self.galleryCache[ this.href ].appendTo( $target );\n        PULSE.CLIENT.RUGBY.Stackla.populateGallery();\n    } );\n\n    // Dropdown on click\n    self.$dropdownLinks = $( '.dropdownLink', self.$filters ).on( 'click', function( e )\n    {\n        e.preventDefault();\n        self.currentDropdown = this.parentNode;\n        $( this ).toggleClass( self.config.activeClass );\n        self.$dropdownLinks.not( this ).removeClass( self.config.activeClass);\n        self.$filterLinks.removeClass( self.config.activeClass );\n    } );\n\n    // Fan iframe on click\n    $( '.fanLink' ).on( 'click', function(e) {\n        $target.$currentContent.remove();\n        $target.$currentContent = $( '<iframe width=\"100%\" height=\"1400px;\" src=\"http://tag.huggity.com/fanpic/664-2015-canon-rwc/gallery/canon.html\"></iframe>' ).appendTo( $target );\n    });\n\n    // Remove dropdown on click\n    $( document.body ).on ( 'click', function( e )\n    {\n        if ( self.currentDropdown && !$.contains( self.currentDropdown, e.target ) ) {\n            self.$dropdownLinks.removeClass( self.config.activeClass );\n        }\n    } );\n\n    if ( window.location.hash )\n    {\n        self.$filters.filter( '[href=\"' + window.location.hash + '\"]' ).click();\n    }\n\n}"},"Stackla":{"Documentation":{"description":"Build a stackla widget element width the following attributes:\ndata-id='' data-hash='' data-ct='' data-alias='' data-ttl=\"30\"","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Stackla = (function( $ )\n{\n    var lookup = {\n            matchCenter: {\n                '14184': '12984',\n                '14206': '12983',\n                '14220': '12982',\n                '14194': '12981',\n                '14221': '12980',\n                '14195': '13352',\n                '14185': '12978',\n                '14208': '12977',\n                '14196': '12976',\n                '14186': '12975',\n                '14222': '12974',\n                '14209': '12973',\n                '14211': '12972',\n                '14224': '12971',\n                '14197': '12970',\n                '14187': '12969',\n                '14188': '12968',\n                '14198': '12967',\n                '14225': '12966',\n                '14212': '12965',\n                '14189': '12964',\n                '14227': '12963',\n                '14213': '12962',\n                '14200': '12961',\n                '14199': '12960',\n                '14190': '12959',\n                '14215': '12958',\n                '14228': '12957',\n                '14229': '12956',\n                '14191': '12955',\n                '14202': '12954',\n                '14216': '12941',\n                '14217': '12940',\n                '14203': '12939',\n                '12687': '12938',\n                '14193': '12937',\n                '14218': '12936',\n                '14231': '12935',\n                '14232': '12934',\n                '14205': '12933'\n            },\n            matchGallery: {\n                '14184': '14632',\n                '14206': '14631',\n                '14220': '14630',\n                '14194': '14629',\n                '14221': '14628',\n                '14195': '14627',\n                '14185': '14626',\n                '14208': '14625',\n                '14196': '14624',\n                '14186': '14623',\n                '14222': '14622',\n                '14209': '14621',\n                '14211': '14620',\n                '14224': '14619',\n                '14197': '14618',\n                '14187': '14617',\n                '14188': '14616',\n                '14198': '14615',\n                '14225': '14614',\n                '14212': '14613',\n                '14189': '14612',\n                '14227': '14611',\n                '14213': '14610',\n                '14200': '14609',\n                '14199': '14608',\n                '14190': '14607',\n                '14215': '14606',\n                '14228': '14605',\n                '14229': '14604',\n                '14191': '14603',\n                '14202': '14602',\n                '14216': '14601',\n                '14217': '14600',\n                '14203': '14599',\n                '12687': '14598',\n                '14193': '14597',\n                '14218': '14596',\n                '14231': '14595',\n                '14232': '14594',\n                '14205': '14593'\n            },\n            socialTeam: {\n                '33': '12032',\n                '34': '11957',\n                '35': '12040',\n                '36': '13351',\n                '37': '12046',\n                '38': '12030',\n                '39': '12036',\n                '40': '12048',\n                '41': '12058',\n                '42': '12056',\n                '45': '12038',\n                '46': '12034',\n                '47': '12050',\n                '49': '12042',\n                '50': '12060',\n                '51': '12044',\n                '52': '12062',\n                '58': '12054',\n                '69': '12064',\n                '720': '12052'\n            },\n            team: {\n                '33': '12033',\n                '34': '11959',\n                '35': '12041',\n                '36': '12029',\n                '37': '12047',\n                '38': '12031',\n                '39': '12037',\n                '40': '12049',\n                '41': '12059',\n                '42': '12057',\n                '45': '12039',\n                '46': '12035',\n                '47': '12051',\n                '49': '12043',\n                '50': '12061',\n                '51': '12045',\n                '52': '12063',\n                '58': '12055',\n                '69': '12065',\n                '720': '12053'\n            }\n        },\n        buildElement = function( config )\n        {\n            return $( '<div>' ).addClass( 'stacklahfw' )\n                .attr( 'data-alias', config.alias || 'rugbyworldcup2015.stackla.com' )\n                .attr( 'data-ct', config.ct || '' )\n                .attr( 'data-hash', config.hash )\n                .attr( 'data-id', config.id )\n                .attr( 'data-filter', config.filter )\n                .attr( 'data-ttl', config.ttl || 30 );\n        };\n\n    return {\n\n        /**\n         * Return a standard stackla configured element\n         *\n         * @param config\n         */\n        buildGallery: function( config )\n        {\n            return buildElement( config )\n        },\n\n        /**\n         * Return a standard stackla match configured element\n         *\n         * @param matchId\n         * @param config\n         */\n        buildGalleryByMatch: function( matchId, config )\n        {\n            config.filter = lookup[ config.matchGallery ? 'matchGallery' : 'matchCenter' ][ matchId ];\n            return buildElement( config );\n        },\n\n        /**\n         * Return a standard stackla team configured element\n         *\n         * @param teamId\n         * @param config\n         */\n        buildGalleryByTeam: function( teamId, config )\n        {\n            config.filter = lookup[ config.social ? 'socialTeam' : 'team' ][ teamId ];\n            return buildElement( config );\n        },\n\n        /**\n         * Dynamically generate a stackla gallery element from configuration\n         *\n         * @param config\n         */\n        buildGalleryFromConfig: function( config )\n        {\n            if ( config.match )\n            {\n                return this.buildGalleryByMatch( config.match, config );\n            }\n            else if ( config.team )\n            {\n                return this.buildGalleryByTeam( config.team, config );\n            }\n            else\n            {\n                return this.buildGallery( config );\n            }\n        },\n\n        /**\n         * Fetch 3rd party scripts\n         *\n         * @param callback\n         */\n        populateGallery: function( callback )\n        {\n            $.getScript( '//assetscdn.stackla.com/media/js/widget/horizontal-fluid-embed.js', callback )\n        }\n    }\n}","buildElement":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.Stackla.buildElement"},{"title":"param","description":null,"type":null,"name":"config"}]},"Source":"var lookup = {\n            matchCenter: {\n                '14184': '12984',\n                '14206': '12983',\n                '14220': '12982',\n                '14194': '12981',\n                '14221': '12980',\n                '14195': '13352',\n                '14185': '12978',\n                '14208': '12977',\n                '14196': '12976',\n                '14186': '12975',\n                '14222': '12974',\n                '14209': '12973',\n                '14211': '12972',\n                '14224': '12971',\n                '14197': '12970',\n                '14187': '12969',\n                '14188': '12968',\n                '14198': '12967',\n                '14225': '12966',\n                '14212': '12965',\n                '14189': '12964',\n                '14227': '12963',\n                '14213': '12962',\n                '14200': '12961',\n                '14199': '12960',\n                '14190': '12959',\n                '14215': '12958',\n                '14228': '12957',\n                '14229': '12956',\n                '14191': '12955',\n                '14202': '12954',\n                '14216': '12941',\n                '14217': '12940',\n                '14203': '12939',\n                '12687': '12938',\n                '14193': '12937',\n                '14218': '12936',\n                '14231': '12935',\n                '14232': '12934',\n                '14205': '12933'\n            },\n            matchGallery: {\n                '14184': '14632',\n                '14206': '14631',\n                '14220': '14630',\n                '14194': '14629',\n                '14221': '14628',\n                '14195': '14627',\n                '14185': '14626',\n                '14208': '14625',\n                '14196': '14624',\n                '14186': '14623',\n                '14222': '14622',\n                '14209': '14621',\n                '14211': '14620',\n                '14224': '14619',\n                '14197': '14618',\n                '14187': '14617',\n                '14188': '14616',\n                '14198': '14615',\n                '14225': '14614',\n                '14212': '14613',\n                '14189': '14612',\n                '14227': '14611',\n                '14213': '14610',\n                '14200': '14609',\n                '14199': '14608',\n                '14190': '14607',\n                '14215': '14606',\n                '14228': '14605',\n                '14229': '14604',\n                '14191': '14603',\n                '14202': '14602',\n                '14216': '14601',\n                '14217': '14600',\n                '14203': '14599',\n                '12687': '14598',\n                '14193': '14597',\n                '14218': '14596',\n                '14231': '14595',\n                '14232': '14594',\n                '14205': '14593'\n            },\n            socialTeam: {\n                '33': '12032',\n                '34': '11957',\n                '35': '12040',\n                '36': '13351',\n                '37': '12046',\n                '38': '12030',\n                '39': '12036',\n                '40': '12048',\n                '41': '12058',\n                '42': '12056',\n                '45': '12038',\n                '46': '12034',\n                '47': '12050',\n                '49': '12042',\n                '50': '12060',\n                '51': '12044',\n                '52': '12062',\n                '58': '12054',\n                '69': '12064',\n                '720': '12052'\n            },\n            team: {\n                '33': '12033',\n                '34': '11959',\n                '35': '12041',\n                '36': '12029',\n                '37': '12047',\n                '38': '12031',\n                '39': '12037',\n                '40': '12049',\n                '41': '12059',\n                '42': '12057',\n                '45': '12039',\n                '46': '12035',\n                '47': '12051',\n                '49': '12043',\n                '50': '12061',\n                '51': '12045',\n                '52': '12063',\n                '58': '12055',\n                '69': '12065',\n                '720': '12053'\n            }\n        },\n        buildElement = function( config )\n        {\n            return $( '<div>' ).addClass( 'stacklahfw' )\n                .attr( 'data-alias', config.alias || 'rugbyworldcup2015.stackla.com' )\n                .attr( 'data-ct', config.ct || '' )\n                .attr( 'data-hash', config.hash )\n                .attr( 'data-id', config.id )\n                .attr( 'data-filter', config.filter )\n                .attr( 'data-ttl', config.ttl || 30 );\n        }"}},"StatsPlugins":{"Main":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.StatsPlugins.Main"},{"title":"param","description":null,"type":null,"name":"container"}]},"Source":"PULSE.CLIENT.RUGBY.StatsPlugins.Main = function( container )\n{\n    if ( container.activated )\n    {\n        return;\n    }\n\n    container.activated = true;\n    this.$container = $( container );\n\n    // Toggle stats page tabs\n    if ( this.$container.data( 'tabbed' ) && !this.$container.attr( 'data-tabs-active' ) )\n    {\n        this.$container.attr( 'data-tabs-active', true );\n        this.buildTabs( this.$container.data( 'tabSet' ) );\n    }\n\n    // Toggle position stats\n    this.$positionToggles = $( '[data-pos-toggle]', this.$container );\n    if ( this.$positionToggles.length )\n    {\n        this.positionToggle();\n    }\n\n    // Toggle top player card filterable generation\n    this.$leaderCardContainerFilterable = $( '[data-top-player-stats-filterable]', this.$container );\n    for ( var i = 0; i < this.$leaderCardContainerFilterable.length; i++ )\n    {\n        if ( $( this.$leaderCardContainerFilterable[ i ] ).children().length === 0 )\n        {\n            new PULSE.CLIENT.RUGBY.StatsPlugins.TopPlayersFilterable( this.$leaderCardContainerFilterable[ i ],\n            {\n                tabDelay: this.$container.attr( 'data-tabs-active' ) && this.$container\n                    .hasClass( 'hide' ),\n                $tabWrap: this.$container\n            } );\n        }\n    }\n\n    // Toggle top player card generation\n    this.$leaderCardContainer = $( '[data-top-player-stats]', this.$container );\n    for ( var i = 0; i < this.$leaderCardContainer.length; i++ )\n    {\n        if ( $( this.$leaderCardContainer[ i ] ).children().length === 0 )\n        {\n            new PULSE.CLIENT.RUGBY.StatsPlugins.TopPlayers( this.$leaderCardContainer[ i ],\n            {\n                tabDelay: this.$container.attr( 'data-tabs-active' ) && this.$container\n                    .hasClass( 'hide' ),\n                $tabWrap: this.$container\n            } );\n        }\n    }\n\n\n\n    // Toggle top team generation\n    this.$TopTeamsContainer = $( '[data-top-team-stats]', this.$container );\n    for ( var i = 0; i < this.$TopTeamsContainer.length; i++ )\n    {\n        if ( $( this.$TopTeamsContainer[ i ] ).children().length === 0 )\n        {\n        new PULSE.CLIENT.RUGBY.StatsPlugins.TopTeamsStatsHub( this.$TopTeamsContainer[ i ] );\n        }\n    }\n\n    // filter init\n    this.$filterContainer = $( '[data-top-stats-filter]', this.$container );\n    //console.log(this.$filterContainer);\n    for ( var i = 0; i < this.$filterContainer.length; i++ )\n    {\n        if ( $( this.$filterContainer[ i ] ) )\n        {\n            new PULSE.CLIENT.RUGBY.StatsPlugins.FilterControl( this.$filterContainer[ i ] );\n        }\n    }\n\n    // Generate required results charts\n    this.$resultsChartContainer = $( '[data-results-chart]', this.$container );\n    for ( var i = 0; i < this.$resultsChartContainer.length; i++ )\n    {\n        if ( $( this.$resultsChartContainer[ i ] ).is( ':empty' ) )\n        {\n            new PULSE.CLIENT.RUGBY.StatsPlugins.ResultsChart( this.$resultsChartContainer[ i ] );\n        }\n    }\n\n\n    // Animate the detailed stats numbers usng jQuery Counter\n    $( '.detailedStatsCard .info', this.$container ).each( function()\n    {\n        var $this = $( this ),\n            initial = $this.text();\n\n        $(\n        {\n            counter: 0\n        } ).animate(\n        {\n            counter: parseInt( $this.text().replace( /\\s+/g, '' ) )\n        },\n        {\n            duration: 2000,\n            step: function()\n            {\n                $this.text( Math.floor( this.counter ) );\n            },\n            complete: function()\n            {\n                $this.text( initial );\n            }\n        } );\n    } );\n\n}","prototype":{"buildTabs":{"Documentation":{"description":"Build tabs  dynamically and select first","tags":[]},"Source":"PULSE.CLIENT.RUGBY.StatsPlugins.Main.prototype.buildTabs = function( tabSet )\n{\n    var self = this;\n    self.$tabLinks = $( '[data-tab-links=\"' + tabSet + '\"]' );\n    if ( !self.$tabLinks.length )\n    {\n        self.$tabLinks = $( '<ul class=\"statsTabs\" data-tab-links=\"' + tabSet + '\">' );\n        self.$tabLinks.insertBefore( self.$container, null );\n    }\n\n    self.$tabLink = $( '<li><a href=\"#\">' + self.$container.data( 'tab-title' ) + '</a></li>' )\n        .on( 'click', function( e )\n        {\n            e.preventDefault();\n            $( 'li', self.$tabLinks ).not( this ).trigger( 'tab:close' );\n            $( this ).trigger( 'tab:open' );\n        } ).on( 'tab:open', function()\n        {\n            if ( !this.active )\n            {\n                this.active = true;\n                $( 'a', this ).addClass( 'active' );\n                self.$container.removeClass( 'hide' ).trigger( 'tab:open' );\n            }\n        } ).on( 'tab:close', function()\n        {\n            this.active = false;\n            $( 'a', this ).removeClass( 'active' );\n            self.$container.addClass( 'hide' ).trigger( 'tab:close' );\n        } ).appendTo( this.$tabLinks );\n\n    $( 'li:first', self.$tabLinks ).trigger( 'tab:open' );\n}"},"positionToggle":{"Documentation":{"description":"Toggle visibility of positional stats sections","tags":[]},"Source":"PULSE.CLIENT.RUGBY.StatsPlugins.Main.prototype.positionToggle = function()\n{\n    var self = this;\n    self.playerPosition = $( '[data-pos]' ).data( 'pos' );\n    if ( self.playerPosition )\n    {\n        self.$positionToggles.addClass( 'hide' ).filter( '[data-pos-toggle=' + self.playerPosition +\n            ']' ).removeClass( 'hide' );\n    }\n}"}}},"getParamsFromUrl":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"fullpath"}]},"Source":"PULSE.CLIENT.RUGBY.StatsPlugins.getParamsFromUrl = function(\n    fullpath )\n{\n    var statsRegex = new RegExp(\n        \"\\/stats\\/(2015|alltime)\\/(players|teams)\\/*([a-z]+)*\\/*([0-9]+)*\\/*\" );\n    var paramarray = statsRegex.exec( fullpath );\n\n    return {\n        fullUrl: fullpath,\n        rootType: paramarray[ 2 ],\n        scope: paramarray[ 1 ] == \"alltime\" ? \"alltime_eventtype\" : \"event\",\n        scopeId: paramarray[ 1 ] == \"alltime\" ? \"5\" : \"1238\",\n        metric: paramarray[ 3 ] || \"tries\",\n        teamId: paramarray[ 4 ] ? paramarray[ 4 ] : \"\"\n    }\n}"},"ResultsChart":{"Documentation":{"description":"Build a chart based on a set of team results","tags":[{"title":"constructor","description":null,"type":null,"name":null},{"title":"param","description":"container requires ['data-results-chart'] = '{ \"data\":[...], \"colors\":[...] \"type\": \"string\", \"width\": \"number\", \"height\": \"number\" }'\nThe data array should be ordered to match the color array to use the correct colors","type":null,"name":"container"}]},"Source":"PULSE.CLIENT.RUGBY.StatsPlugins.ResultsChart = function(container)\n{  \n    // Get config values from HTML attribute of container\n    this.config = JSON.parse( container.dataset.resultsChart );\n\n    // Create a Google data table\n\tvar data = new google.visualization.DataTable();\n\tdata.addColumn( 'string', 'label' );\n\tdata.addColumn( 'number', 'value' );\n\tdata.addRows( this.config.data );\n\n\t// Currently only Pie Chart is supported\n\t// To extend check against this.config.type\n\n\t// Build pie Chart\n\tvar options = {\n\t\tlegend: { position: 'none' },\n\t\tcolors: this.config.colors,\n\t\tpieSliceText: 'none',\n\t\tbackgroundColor: 'none',\n\t\tchartArea: {\n\t\t\twidth: '100%',\n\t\t\theight: '100%'\n\t\t},\n\t\twidth: this.config.width,\n\t\theight: this.config.height,\n\t\tenableInteractivity: false,\n\t\tpieSliceBorderColor: 'none'\n\t};\n\tvar chart = new google.visualization.PieChart( container );\n\n\t// Apply data to chart\n\tchart.draw( data, options );\n}"},"TopPlayers":{"Documentation":{"description":"Build a list of top player cards and populate with data","tags":[{"title":"param","description":null,"type":null,"name":"container"},{"title":"param","description":null,"type":null,"name":"scope"},{"title":"param","description":null,"type":null,"name":"scopeId"},{"title":"constructor","description":null,"type":null,"name":null}]},"Source":"PULSE.CLIENT.RUGBY.StatsPlugins.TopPlayers = function( container, config )\n{\n    // Ensure no content has already been fetched\n    this.$container = $( container );\n    if ( this.$container.children().length !== 0 )\n    {\n        if ( window.console )\n        {\n            console.info( \"Top player data already collected\" );\n        }\n        return;\n    }\n    this.config = config;\n    this.$topPlayerList = $( '<ul class=\"top-player-list\">' ).addClass( 'hide' ).appendTo( this.$container );\n    this.$topPlayerList.$children = {};\n\n    // Fetch list of metric IDs\n    this.metricList = this.$container.data( 'top-player-stats' ) || '';\n    this.metricList = this.metricList.toLowerCase().split( ',' );\n\n    // Stats parameters\n    this.params = {\n        page: this.$container.data( 'page' ) || 0,\n        pageSize: this.$container.data( 'page-size' ) || 5,\n        teamId: this.$container.data( 'team' )\n    };\n\n    // Stats scope\n    this.scope = ( config.scope || this.$container.data( 'scope' ) || 'sport' ).trim().toLowerCase();\n    this.scopeKey = this.scope === 'event' ? 'event' : this.scope === 'alltime_eventtype' ? 'type' : 'sport';\n    this.scope = this.scope === 'event' ? 'event' : 'alltime';\n    this.scopeId = config.scopeId || this.$container.data( 'scopeId' ) || 'mru';\n    this.params[ this.scopeKey ] = this.scopeId;\n    if ( !this.scope || !this.scopeId )\n    {\n        if ( window.console )\n        {\n            console.error( \"Unable to get top players without a scope\" );\n        }\n        return;\n    }\n\n    // URL gen for player / team URLs\n    this.tournament = config.tournament;\n    this.topPlayerService = new PULSE.CLIENT.RUGBY.TopPlayers( this.tournament );\n    this.urlGen = new PULSE.CLIENT.RUGBY.getUrlGenerator();\n\n    // Fetch a template for display\n    this.templateOptions = {\n        hero: 'templates/stats/top-players-hero.html', inline: 'templates/stats/top-players-inline.html', list: 'templates/stats/top-players-list.html', stack: 'templates/stats/top-players-stack.html', hubtable: 'templates/stats/top-players-hub-table.html'\n    };\n    this.template = this.templateOptions[ this.$container.data( 'template' ) ];\n    if ( !this.template )\n    {\n        this.template = this.templateOptions[ 'hero' ];\n    }\n\n    // Enough data gathering - get the DATA (unless there's tabs)!\n    this.setSubscriptions();\n    if ( !config.tabDelay )\n    {\n        this.getContent();\n    }\n\n    // Add basic scroll functionality\n    if ( this.$container.data( 'scroll' ) )\n    {\n        this.scroller = new PULSE.CLIENT.UI.Scroller( this.$topPlayerList );\n        \n    }\n}","prototype":{"getContent":{"Documentation":{"description":"Listen for updated data","tags":[]},"Source":"PULSE.CLIENT.RUGBY.StatsPlugins.TopPlayers.prototype.getContent = function()\n{\n    // Don't get the data twice\n    if ( this.playersRequested )\n    {\n        return;\n    }\n    this.playersRequested = true;\n\n    // Get the data for each metric\n    for ( var i = 0; i < this.metricList.length; i++ )\n    {\n        var metric = this.metricList[ i ].trim().toLowerCase();\n        this.$topPlayerList.$children[ metric ] = $( '<li class=\"statsCardContainer player-card\">' ).hide().appendTo( this.$topPlayerList );\n        this.topPlayerService.getTopPlayersStatsData( this.scope, metric, this.params, {\n            interval: -1\n        } );\n    }\n}"},"setSubscriptions":{"Documentation":{"description":"Listen for updated data","tags":[]},"Source":"PULSE.CLIENT.RUGBY.StatsPlugins.TopPlayers.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    this.config.$tabWrap.on( 'tab:open', function()\n    {\n        that.getContent();\n        if ( that.scroller )\n        {\n            that.scroller.checkThresholds();\n        }\n\n    } );\n\n    // Update card on data fetch\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_TOPPLAYERS.STATS_UPDATE, function( e, params )\n    {\n        that.buildCard( params.metric, params.scope );\n    } );\n}"},"buildCard":{"Documentation":{"description":"Add / update a top players card","tags":[{"title":"param","description":null,"type":null,"name":"metric"}]},"Source":"PULSE.CLIENT.RUGBY.StatsPlugins.TopPlayers.prototype.buildCard = function( metric, scope )\n{\n    var self = this,\n        playerList;\n\n    if ( scope !== self.scope || self.metricList.indexOf( metric ) < 0 )\n    {\n\n        return;\n    }\n\n    playerList = self.topPlayerService.findTopPlayerStats( self.scope, metric, self.scopeKey, self.scopeId );\n    if ( !playerList || playerList[ 0 ].value < 1 )\n    {\n        return;\n    }\n\n    self.$topPlayerList.removeClass( 'hide' );\n\n    PULSE.CLIENT.Template.publish( self.template, self.$topPlayerList.$children[ metric ].show(), {\n        entries: playerList, scope: self.scope, metric: metric, teamId: function( entry )\n        {\n            if ( self.params.teamId )\n            {\n                return self.params.teamId;\n            }\n            else if ( entry && entry.team )\n            {\n                return PULSE.CLIENT.RUGBY.ABBREVIATION_LOOKUP[ entry.team.code ];\n            }\n            return 0;\n        }, urlGen: self.urlGen\n    } );\n\n    if ( self.scroller )\n    {\n        self.scroller.checkThresholds();\n    }\n}"}}},"TopPlayersFilterable":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.StatsPlugins.TopPlayersFilterable"},{"title":"param","description":null,"type":null,"name":"container"},{"title":"param","description":null,"type":null,"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.StatsPlugins.TopPlayersFilterable = function( container, config )\n{\n\tthis.params = {}\n\tthis.getUrlParams( container );\n\tthis.rawdata = {}\n\tPULSE.CLIENT.RUGBY.StatsPlugins.TopPlayers.call( this, container, config );\n\tthis.setFilterListeners();\n\tthis.getUrlParams();\n\n\tthis.stateCount = 1;\n}","prototype":{"setFilterListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.StatsPlugins.TopPlayersFilterable.prototype.setFilterListeners = function()\n{\n\tvar that = this;\n\n\tPULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.CONTENT_EVENTS.TEAM_FILTER_REMOVED, function( e,\n\t\tparams )\n\t{\n\t\tthat.filterCard( \"\" );\n\t\tthat.setUrlForTeamId( \"\" );\n\n\n\t} );\n\n\tPULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.CONTENT_EVENTS.TEAM_FILTER_SELECTED, function( e,\n\t\tparams )\n\t{\n\t\tthat.filterCard( params );\n\t\t//update URL also.\n\t\tthat.setUrlForTeamId( params.teamid );\n\t} );\n\n\twindow.onpopstate = function( e )\n\t{\n\t\tif ( that.stateCount !== e.state.stateCount )\n\t\t\thistory.go( this.stateCount );\n\t}\n}"},"setUrlForTeamId":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"teamid"}]},"Source":"PULSE.CLIENT.RUGBY.StatsPlugins.TopPlayersFilterable.prototype.setUrlForTeamId = function( teamid )\n{\n\n\tif ( window.history.replaceState )\n\t{\n\t\tthis.stateCount++;\n\t\t//build the new url based on the old one\n\t\tvar url = '/stats/' + ( this.urlParamArray.scope ==\n\t\t\t\"alltime_eventtype\" ? \"alltime/\" : \"2015/\" )  + this.urlParamArray.rootType + '/'  + this.urlParamArray.metric + '/' + (\n\t\t\tteamid ? teamid : \"\" );\n\n\t\twindow.history.replaceState(\n\t\t{\n\t\t\tchangeCount: this.stateCount\n\t\t}, null, url );\n\n\t}\n\n\n}"},"getUrlParams":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"container"}]},"Source":"PULSE.CLIENT.RUGBY.StatsPlugins.TopPlayersFilterable.prototype.getUrlParams = function( container )\n{\n\tthis.urlParamArray = PULSE.CLIENT.RUGBY.StatsPlugins.getParamsFromUrl( window.location.pathname );\n\t//scope : capturing group 1, metric capturing group 2\n\tthis.setParamsFromUrl( this.urlParamArray, container );\n}"},"setParamsFromUrl":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"params"},{"title":"param","description":null,"type":null,"name":"container"}]},"Source":"PULSE.CLIENT.RUGBY.StatsPlugins.TopPlayersFilterable.prototype.setParamsFromUrl = function( params,\n\tcontainer )\n{\n\n\n\t$( container ).attr( \"data-top-player-stats\", params.metric );\n\t$( container ).attr( \"data-scope\", params.scope );\n\t$( container ).attr( \"data-scope-id\", params.scopeId );\n\t$( container ).attr( \"data-team\", params.teamId );\n\n\tif ( params.teamId )\n\t{\n\t\t//loading a url with a pre-set team, set the initial params\n\t\t//from teamid\n\t\tthis.params.teamId = params.teamId;\n\t\tthis.params.teamAbbr = PULSE.CLIENT.RUGBY.TEAMID_ABBR_LOOKUP[ parseInt( params.teamId ) ];\n\t\tthis.params.teamName = PULSE.CLIENT.RUGBY.TEAMID_NAME_LOOKUP[ parseInt( params.teamId ) ];\n\n\t}\n\n}"},"filterCard":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"team"}]},"Source":"PULSE.CLIENT.RUGBY.StatsPlugins.TopPlayersFilterable.prototype.filterCard = function( team )\n{\n\n\tthis.params.teamId = team.teamid;\n\tthis.params.teamAbbr = team.teamabbr;\n\tthis.params.teamName = team.teamname;\n\n\t//update views for all metrics\n\tfor ( var i = 0; i < this.metricList.length; i++ )\n\t{\n\t\tvar metric = this.metricList[ i ].trim().toLowerCase();\n\t\t/* FILTER JBY GETTING A FULL NEW LIST OF TOP TEAM PLAYERS */\n\n\t\tthis.topPlayerService.getTopPlayersStatsData( this.scope, metric, this.params,\n\t\t{\n\t\t\tinterval: -1\n\t\t} );\n\n\t}\n\n\n}"},"buildCard":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"metric"},{"title":"param","description":null,"type":null,"name":"scope"}]},"Source":"PULSE.CLIENT.RUGBY.StatsPlugins.TopPlayersFilterable.prototype.buildCard = function( metric, scope )\n{\n\n\tthis.$topPlayerList.$children[ metric ].html( \"\" );\n\tthis.$topPlayerList.$children[ metric ] = $( '<li class=\"statsCardContainer player-card\">' ).appendTo(\n\t\tthis.$topPlayerList );\n\tvar self = this;\n\n\tself.$topPlayerList.removeClass( 'hide' );\n\n\tif ( scope !== self.scope || self.metricList.indexOf( metric ) < 0 )\n\t{\n\n\t\treturn;\n\t}\n\n\tvar rd = self.topPlayerService.findTopPlayerStats( self.scope, metric,\n\t\tself.scopeKey, self.scopeId );\n\n\n\tPULSE.CLIENT.Template.publish(\n\t\tself.template,\n\t\tself.$topPlayerList.$children[ metric ],\n\t\t{\n\t\t\tentries: rd,\n\t\t\tmetric: metric,\n\t\t\tteamId: function( entry )\n\t\t\t{\n\t\t\t\tif ( self.params.teamId )\n\t\t\t\t{\n\t\t\t\t\treturn self.params.teamId;\n\t\t\t\t}\n\t\t\t\telse if ( entry.team )\n\t\t\t\t{\n\t\t\t\t\treturn PULSE.CLIENT.RUGBY.ABBREVIATION_LOOKUP[ entry.team.code ];\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t},\n\t\t\tteamabbr: function( entry )\n\t\t\t{\n\t\t\t\tif ( self.params.teamAbbr )\n\t\t\t\t{\n\t\t\t\t\treturn self.params.teamAbbr;\n\n\t\t\t\t}\n\t\t\t\telse if ( entry.team )\n\t\t\t\t{\n\t\t\t\t\treturn entry.team.code;\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t},\n\t\t\tteamname: function( entry )\n\t\t\t{\n\t\t\t\tif ( self.params.teamName )\n\t\t\t\t{\n\t\t\t\t\treturn self.params.teamName\n\t\t\t\t}\n\t\t\t\telse if ( entry.team )\n\t\t\t\t{\n\t\t\t\t\treturn entry.team.name;\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t},\n\t\t\turlGen: self.urlGen,\n\t\t\ttranslate: PULSE.I18N\n\t\t}\n\t);\n}"}}},"FilterControl":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"container"}]},"Source":"PULSE.CLIENT.RUGBY.StatsPlugins.FilterControl = function( container )\n{\n\tthis.$container = $( container );\n\tthis.$dropdown = $( '.filterDropdown', this.$container );\n\tthis.$controls = $( '.filterControls', this.$container );\n\tthis.teamid = -1;\n\tthis.teamabbr = -1;\n\tthis.teamname = \"\";\n\tthis.setListeners();\n\n\tthis.$controls.find(\".remove\").css({display: \"none\"})\n\n\tthis.$dropdown.find(\".tLogoSmall\").css({\"pointer-events\" : \"none\"})\n\n\tvar urlparam = PULSE.CLIENT.RUGBY.StatsPlugins.getParamsFromUrl( window.location.pathname );\n\n\tif ( this.$container.data( \"scopeFromUrl\" ) )\n\t{\n\t\tthis.$container.find( \".subHeader\" ).text( PULSE.I18N.lookup(\n\t\t\t\"widget.stats.leaders.\" + urlparam.metric ) );\n\t\tthis.$container.find( \".period\" ).text( PULSE.I18N.lookup(\n\t\t\t\"widget.player.stats.\" + urlparam.scope + \".\" + urlparam.scopeId ) );\n\t}\n\n\tif ( urlparam.teamId )\n\t{\n\t\tthis.setTeam( urlparam.teamId, PULSE.CLIENT.RUGBY.TEAMID_ABBR_LOOKUP[ parseInt( urlparam.teamId ) ],\n\t\t\tPULSE.CLIENT.RUGBY.TEAMID_NAME_LOOKUP[ parseInt( urlparam.teamId ) ] );\n\t}\n\n\n}","prototype":{"setTeamHyperlinks":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.StatsPlugins.FilterControl.prototype.setTeamHyperlinks = function() {\n\n}"},"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.StatsPlugins.FilterControl.prototype.setListeners = function()\n{\n\n\tvar that = this;\n\n\t$( '.team', this.$dropdown ).on( \"click\", function( event )\n\t{\n\t\t\n\t\tevent.preventDefault();\n\t\tthat.toggleDropdown();\n\t\tthat.setTeam( $( event.target ).data( \"teamId\" ), $( event.target ).data( \"teamAbbr\" ), $(\n\t\t\tevent.target ).data( \"teamName\" ) )\n\t} );\n\n\t$( '.selection', this.$controls ).on( \"click\", function( event )\n\t{\n\t\tevent.preventDefault();\n\t\tif(that.teamid == -1 )\n\t\t{\n\t\t\tthat.toggleDropdown();\n\t\t}else{\n\t\t\tthat.removeTeam();\n\t\t}\n\n\t\t\n\t} );\n\n\t$( '.remove', this.$controls ).on( \"click\", function( event )\n\t{\n\t\tevent.preventDefault();\n\t\tthat.removeTeam();\n\t\tthat.$controls.find(\".remove\").css({display: \"none\"});\n\t\tevent.stopPropagation();\n\n\t} );\n\n\t$( '.selection', this.$controls ).on( \"mouseenter\", function( event )\n\t{\n\t\tevent.preventDefault();\n\t\tif(that.teamid !== -1)\n\t\t{\n\t\t\tthat.$controls.find(\".remove\").css({display: \"block\"});\n\t\t}\n\t\t\n\t});\n\n\t$( '.selection', this.$controls ).on( \"mouseleave\", function( event )\n\t{\n\t\tevent.preventDefault();\n\t\tthat.$controls.find(\".remove\").css({display: \"none\"});\n\t} );\n\n}"},"setTeam":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"tid"},{"title":"param","description":null,"type":null,"name":"tabbr"},{"title":"param","description":null,"type":null,"name":"tname"}]},"Source":"PULSE.CLIENT.RUGBY.StatsPlugins.FilterControl.prototype.setTeam = function( tid, tabbr, tname )\n{\n\n\tthis.teamid = tid;\n\tthis.teamabbr = tabbr;\n\tthis.teamname = tname;\n\n\tif ( $( \".selectionText>span\", this.$controls ).length == 0 && this.teamid )\n\t{\n\t\t$( \"<span></span>\" ).prependTo( $( \".selectionText\", this.$controls ) );\n\n\t}\n\telse if ( !this.teamid )\n\t{\n\t\t$( \".selectionText>span\" ).remove();\n\t}\n\n\t$( \".selectionText>span\", this.$controls ).attr( \"class\", \"tLogoSmall \" + this.teamabbr );\n\n\t$( \".selectionText\", this.$controls ).get( 0 ).lastChild.nodeValue = this.teamname ? this.teamname :\n\t\t\"ALL TEAMS\";\n\tPULSE.CLIENT.Log(\"setting active\", this.$controls.addClass(\"active\"));\n\n\n\tPULSE.CLIENT.notify( PULSE.CLIENT.RUGBY.CONTENT_EVENTS.TEAM_FILTER_SELECTED,\n\t{\n\t\tteamid: this.teamid,\n\t\tteamabbr: this.teamabbr,\n\t\tteamname: this.teamname\n\t} );\n\n\tif(!this.teamname)\n\t{\n\t\tthis.teamid = -1;\n\t}\n\n}"},"removeTeam":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.StatsPlugins.FilterControl.prototype.removeTeam = function()\n{\n\t$( \".selectionText\", this.$controls ).text( \"SELECT TEAM\" );\n\tPULSE.CLIENT.notify( PULSE.CLIENT.RUGBY.CONTENT_EVENTS.TEAM_FILTER_REMOVED,\n\t{\n\t\tteamid: this.teamid\n\t} );\n\n\tthis.$controls.removeClass(\"active\");\n\n\tthis.teamid = -1;\n\tthis.teamabbr = -1;\n\tthis.teamname = \"\";\n}"},"toggleDropdown":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.StatsPlugins.FilterControl.prototype.toggleDropdown = function()\n{\n\tthis.$container.toggleClass( \"open\" );\n}"}}},"TopTeamsStatsHub":{"Documentation":{"description":"Build a list of top player cards and populate with data","tags":[{"title":"param","description":null,"type":null,"name":"container"},{"title":"param","description":null,"type":null,"name":"scope"},{"title":"param","description":null,"type":null,"name":"scopeId"},{"title":"constructor","description":null,"type":null,"name":null}]},"Source":"PULSE.CLIENT.RUGBY.StatsPlugins.TopTeamsStatsHub = function( container, tournament, scope, scopeId )\n{\n    this.$container = $( container );\n    if ( this.$container.children().length !== 0 )\n    {\n        return;\n    }\n\n    this.params = {\n        page: this.$container.data( 'page' ) || 0,\n        pageSize: this.$container.data( 'page-size' ) || 3\n    };\n\n    if ( this.$container.attr( \"params-from-url\" ) )\n    {\n        this.urlparams = PULSE.CLIENT.RUGBY.StatsPlugins.getParamsFromUrl( window.location.pathname );\n        this.scope = this.urlparams.scope;\n        this.scopeId = this.urlparams.scopeId;\n        this.params.teamId = \"\";\n        this.metric = this.urlparams.metric;\n\n        $( '.statsSection' ).find( \".subHeader\" ).text( PULSE.I18N.lookup(\n            \"widget.stats.leaders.\" + this.urlparams.metric ) );\n\n\n        $( '.statsSection' ).find( \".period\" ).text( PULSE.I18N.lookup(\n            \"widget.player.stats.\" + this.urlparams.scope + \".\" + this.urlparams.scopeId\n        ) );\n    }\n    else\n    {\n        // Stats parameters\n        this.params.teamId = \"\";\n        this.scope = this.$container.data( 'scope' );\n        this.scopeId = this.$container.data( 'scopeId' );\n        this.metric = this.$container.data( 'topTeamStats' );\n\n    }\n\n    this.scopeKey = this.scope === 'event' ? 'event' : this.scope === 'alltime_eventtype' ?\n        'type' : 'sport';\n    this.params[ this.scopeKey ] = this.scopeId;\n    if ( this.scope == \"alltime_eventtype\" )\n    {\n        this.params.type = 5;\n    }\n\n    this.ts = new PULSE.CLIENT.RUGBY.TopTeamsStats( \"\" );\n    this.ts.getTopTeamsStatsData( this.scope, this.metric, this.params,\n    {\n        interval: -1\n    } );\n\n    this.urlGen = new PULSE.CLIENT.RUGBY.getUrlGenerator();\n\n    // Fetch a template for display\n    this.templateOptions = {\n        list: 'templates/stats/top-teams-list.html',\n        rate: 'templates/stats/top-teams-list-rate.html'\n    };\n    this.template = this.templateOptions[ this.$container.data( 'template' ) ];\n    if ( !this.template )\n    {\n        this.template = this.templateOptions[ 'list' ];\n    }\n\n    this.setSubscriptions();\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"Listen for updated data","tags":[]},"Source":"PULSE.CLIENT.RUGBY.StatsPlugins.TopTeamsStatsHub.prototype.setSubscriptions = function()\n{\n    var that = this;\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_TOPTEAMS.STATS_UPDATE, function( e,\n        params )\n    {\n        that.buildCard( params.metric, params.scope );\n    } );\n}"},"buildCard":{"Documentation":{"description":"Add / update a top players card","tags":[{"title":"param","description":null,"type":null,"name":"metric"}]},"Source":"PULSE.CLIENT.RUGBY.StatsPlugins.TopTeamsStatsHub.prototype.buildCard = function( metric, scope )\n{\n\n    var self = this;\n\n    var data = this.ts.findTopTeamStats( scope, metric, self.scopeKey, self.scopeId );\n    if(data[0].extended && data[0].extended.length > 0)\n    {\n        //data has rate information\n        self.template = self.templateOptions[\"rate\"];\n    }else\n    {\n        self.template = self.templateOptions[\"list\"];\n    }\n\n    PULSE.CLIENT.Template.publish(\n        self.template,\n        self.$container,\n        {\n            entries: data,\n            metric: metric,\n            urlGen: self.urlGen,\n            translate: PULSE.I18N\n        }\n    );\n\n\n}"}}}},"TeamRankingsList":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the full rankings widget"},{"title":"param","description":"Jquery/Dom/Selector for this widget container","type":{"type":"NameExpression","name":"Object"},"name":"container"},{"title":"param","description":"Configuration for this widget from container attrs","type":{"type":"NameExpression","name":"Object"},"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.TeamRankingsList = function( container, config )\n{\n    this.$container = $( container );\n    this.config = config;\n\n    this.scope = this.config['data-rankings-scope'] || 'mru';\n    this.limit = this.config['data-max-entries'] || 5;\n    this.dateString = this.config[ 'data-rankings-date' ] || undefined;\n    this.date = this.dateString ? PULSE.CLIENT.DateUtil.parseDateTime( this.dateString ).format( 'yyyy-mm-dd' ) : '';\n\n    this.rankings = new PULSE.CLIENT.RUGBY.Rankings( this.scope );\n    this.favouriteCookieName = 'FAVOURITE_TEAM';\n    this.templates = {\n        teamRankingsList: 'templates/rankings/team-world-rankings-list.html'\n    };\n\n    this.$table = this.$container.find( 'table' );\n    this.$tableHeader = this.$table.find( 'tr.header' );\n    this.headerHTML = this.$tableHeader.length ? this.$tableHeader[0].innerHTML : '';\n\n    this.teamId = config[ 'data-team-id' ];\n\n    this.setListeners();\n    this.setSubscriptions();\n\n    // Make rankings data request if it doesn't have it or return it's data if\n    // it already exists\n    this.rankings.getRankingsData( {\n        start: true,\n        params: {\n            date: this.date\n        }\n    } );\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"Subscribe to rankings data events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TeamRankingsList.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.RANKINGS_UPDATE, function( e, params )\n    {\n        that.refreshRankingsList();\n    });\n}"},"setListeners":{"Documentation":{"description":"Subscribe to user input events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TeamRankingsList.prototype.setListeners = function()\n{\n    var that = this;\n\n    // Set favourite cookie\n    this.$container.on( 'click', '.addToFavourite', function( e )\n    {\n        var $entry = $(this).parent(),\n            teamId = $entry.attr('data-team-id');\n\n        $(this).parent().siblings().removeClass('favouriteRankings');\n        $entry.addClass('favouriteRankings');\n        that.setCookie( teamId );\n    } );\n\n    // Show full rankings\n    this.$container.on( 'click', '.showMore', function( e )\n    {\n        e.preventDefault();\n        that.limit = 0; // Zero = no limit\n        that.refreshRankingsList();\n    } );\n}"},"refreshRankingsList":{"Documentation":{"description":"Refresh rankings list on DOM","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TeamRankingsList.prototype.refreshRankingsList = function()\n{\n    if ( this.teamId )\n    {\n        var newLimit = Math.floor( ( this.limit - 1 ) / 2 );\n        this.rankings.entries = this.rankings.getEntriesNearElement( this.teamId, 'id', newLimit, newLimit );\n    }\n\n    var model = {\n        rankings: this.rankings,\n        limit: this.limit,\n        favouriteTeamId: PULSE.CLIENT.getCookie( this.favouriteCookieName ) || undefined,\n    };\n\n    var tableHTML = PULSE.CLIENT.Template.getHtml( this.templates.teamRankingsList, model );\n\n    if( this.$table.length )\n    {\n        this.$table[0].innerHTML = this.headerHTML + tableHTML;\n    }\n}"},"setLoadingState":{"Documentation":{"description":"Adds a loading spinner to the table view when refreshing data","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TeamRankingsList.prototype.setLoadingState = function()\n{\n    this.$table.html( '<div class=\"spinner\"><div></div></div>' );\n}"},"setCookie":{"Documentation":{"description":"Sets the favourite cookie to a new value","tags":[{"title":"param","description":"Value to set to cookie","type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"String"},{"type":"NameExpression","name":"Number"}]},"name":"value"}]},"Source":"PULSE.CLIENT.RUGBY.TeamRankingsList.prototype.setCookie = function( value )\n{\n    $.cookie( this.favouriteCookieName, value, { expires: 30, path: '/' });\n    console.log('Cookie saved!');\n}"}}},"TeamRankingsPage":{"Main":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the full rankings widget"},{"title":"param","description":"Jquery/Dom/Selector for this widget container","type":{"type":"NameExpression","name":"Object"},"name":"container"},{"title":"param","description":"Configuration for this widget from container attrs","type":{"type":"NameExpression","name":"Object"},"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.TeamRankingsPage.Main = function( container, config )\n{\n    // vars\n    this.$container = $( container );\n    this.config = config;\n\n    this.scope = this.config['data-rankings-scope'] || 'mru';\n    this.limit = this.config['data-max-entries'] || 5;\n    this.date = this.config['data-rankings-date'] || this.setDate();\n\n    this.rankings = new PULSE.CLIENT.RUGBY.Rankings( this.scope );\n    this.favouriteCookieName = 'FAVOURITE_TEAM';\n    this.templates = {\n        teamRankingsHistory: 'templates/rankings/team-rankings-history.html'\n    };\n\n    /**\n     * This widget is split up into three different components\n     *     - They used as one here despite working independently so that the user\n     *       is able to change each to a different year in one click\n     */\n    this.components = {\n        fullRankings: new PULSE.CLIENT.RUGBY.TeamRankingsList( this.$container.find('.fullRankingsContainer'), $.extend( this.config, { 'data-max-entries': 10 } ) ),\n        climbers: new PULSE.CLIENT.RUGBY.TeamRankingsMovers( this.$container.find('.biggestClimbersContainer'), $.extend( this.config, { 'data-widget-type': 'team-rankings-climbers_widget', 'data-max-entries': 5 }) ),\n        fallers: new PULSE.CLIENT.RUGBY.TeamRankingsMovers( this.$container.find('.biggestFallersContainer'), $.extend( this.config, { 'data-widget-type': 'team-rankings-fallers_widget', 'data-max-entries': 5 }) )\n        //datePicker: new PULSE.CLIENT.RUGBY.TeamRankingsPage.DatePicker( this.$container.find('.chooseDate'), this.config, this )\n    };\n\n    // init\n    this.setSubscriptions();\n    this.initDatePicker();\n}","prototype":{"initDatePicker":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TeamRankingsPage.Main.prototype.initDatePicker = function()\n{\n    var that = this,\n        today = PULSE.CLIENT.DateUtil.parseDateTime( new Date() ),\n        firstRankings = PULSE.CLIENT.DateUtil.parseDateTime( '2003-10-07' ),\n        daysDiff = Math.floor(( ( today - firstRankings ) / ( 1000 * 60 * 60 * 24 ) ));\n\n    this.$container.find( '.chooseDateToggle' ).Zebra_DatePicker( {\n        direction: false, //[ false, daysDiff ],\n        offset: [-170, 280],\n        format: 'Y, m, D',\n        onSelect: function( format, date, dateObj, container )\n        {\n            that.setDate( date );\n            _.each( that.components, function( component, name ) { component.setLoadingState(); } );\n            that.getData();\n        }\n    } );\n\n    this.$zdp = $('#element').data('Zebra_DatePicker');\n\n\n}"},"setDate":{"Documentation":{"description":"Set a date for the rankings this widget should fetch\n    - If a date parameter is supplied then it will be parsed into the correct format\n    - If no date parameter is supplied then it will fallback to todays date","tags":[{"title":"param","description":"Date string ( preferred: 'yyyy-mm-dd' )","type":{"type":"NameExpression","name":"String"},"name":"date"}]},"Source":"PULSE.CLIENT.RUGBY.TeamRankingsPage.Main.prototype.setDate = function( date )\n{\n    var today;\n\n    if( date )\n    {\n        this.date = PULSE.CLIENT.DateUtil.parseDateTime( date ).format( 'yyyy-mm-dd' );\n    }\n    else\n    {\n        today = PULSE.CLIENT.DateUtil.parseDateTime( new Date() ).format( 'yyyy-mm-dd' );\n        this.date = today;\n    }\n}"},"setSubscriptions":{"Documentation":{"description":"Subscribe to rankings data events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TeamRankingsPage.Main.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.RANKINGS_UPDATE, function( e, params )\n    {\n        var date = that.rankings.getFormattedUpdateDate( 'dd mmmm, yyyy' ),\n            text = 'Updated: ' + date;\n\n        that.$container.find('.lastUpdated').text( text );\n    });\n}"},"getData":{"Documentation":{"description":"Calls to get new rankings data\n    - As rankings data does not make use of an interval, there is no requirement\n      to stop the old date if a previous call has been made","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TeamRankingsPage.Main.prototype.getData = function()\n{\n    this.rankings.getRankingsData( { start: true, params: { date: this.date } } );\n}"}}}},"TeamRankingsInfo":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the full rankings widget"},{"title":"param","description":"Jquery/Dom/Selector for this widget container","type":{"type":"NameExpression","name":"Object"},"name":"container"},{"title":"param","description":"Configuration for this widget from container attrs","type":{"type":"NameExpression","name":"Object"},"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.TeamRankingsInfo = function( container , config )\n{\n    // vars\n    this.$container = $( container );\n    this.config = config;\n\n    this.teamId = this.config[ 'data-team-id' ];\n    this.scope = this.config[ 'data-rankings-scope' ] || 'mru';\n\n    this.$currentRankingsContainer = this.$container.find( '.currentRankings' );\n    this.$rankedMatchesContainers = this.$container.find( '.rankedMatches' );\n\n    this.hasRankings = false;\n    this.rankings = new PULSE.CLIENT.RUGBY.Rankings( this.scope );\n    this.schedule = new PULSE.CLIENT.RUGBY.Schedule();\n\n    this.favouriteCookieName = 'FAVOURITE_TEAM';\n    this.templates = {\n        currentRankings: 'templates/rankings/team-rankings-info-current.html',\n        rankedMatches: 'templates/rankings/team-rankings-info-matches.html'\n    };\n\n    // init\n    this.setSubscriptions();\n    this.getMatchData();\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"Subscribe to rankings data events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TeamRankingsInfo.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.RANKINGS_UPDATE, function()\n    {\n        that.hasRankings = true;\n        that.refreshRankings();\n    } );\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCHEDULE_UPDATE, function()\n    {\n        that.refreshMatches();\n    } );\n}"},"getRankingsData":{"Documentation":{"description":"Calls to get new rankings data\n    - As rankings data does not make use of an interval, there is no requirement\n      to stop the old date if a previous call has been made","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TeamRankingsInfo.prototype.getRankingsData = function()\n{\n    var options = {\n        start: true\n    };\n\n    this.rankings.getRankingsData( options );\n}"},"getMatchData":{"Documentation":{"description":"Retrieves match data for upcoming and complete matches for this.teamId","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TeamRankingsInfo.prototype.getMatchData = function()\n{\n    var nextOptions = {\n            teams: [ this.teamId ],\n            states: [ 'U', 'L' ],\n            sports: [ this.scope ],\n            sort: 'asc'\n        },\n        previousOptions = {\n            teams: [ this.teamId ],\n            states: [ 'C' ],\n            sports: [ this.scope ],\n            sort: 'desc'\n        };\n\n    this.schedule.requestMetaSchedule( {\n        start: true,\n        params: nextOptions\n    } );\n    this.schedule.requestMetaSchedule( {\n        start: true,\n        params: previousOptions\n    } );\n}"},"refreshRankings":{"Documentation":{"description":"Refresh rankings list on DOM","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TeamRankingsInfo.prototype.refreshRankings = function()\n{\n    var model = {\n        entry: this.rankings.getEntryByElement( this.teamId, 'id' ),\n        rankings: this.rankings,\n        date: this.getLastRankingsUpdatedDate()\n    };\n\n    PULSE.CLIENT.Template.publish(\n        this.templates.currentRankings,\n        this.$currentRankingsContainer,\n        model,\n        function() {}\n    );\n}"},"refreshMatches":{"Documentation":{"description":"Refresh next and previous ranked match on DOM","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TeamRankingsInfo.prototype.refreshMatches = function()\n{\n    var that = this,\n        movement = this.hasRankings ? this.getRankingsMovementForTeam() : {},\n        model = {\n            latestMatch: this.schedule.getLatestMatch(),\n            nextMatch: this.schedule.getNextMatch(),\n            difference: movement.difference,\n            direction: movement.direction\n        };\n\n    PULSE.CLIENT.Template.publish(\n        this.templates.rankedMatches,\n        this.$rankedMatchesContainers,\n        model,\n        function() {}\n    );\n}"},"getRankingsMovementForTeam":{"Documentation":{"description":"Returns rankings movement information for this team","tags":[{"title":"return","description":"Object containing values for movement direction and difference","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.TeamRankingsInfo.prototype.getRankingsMovementForTeam = function()\n{\n    var entry = this.rankings.getEntryByElement( this.teamId, 'id' ),\n        direction = this.rankings.getMovementDirection( entry ),\n        difference = this.rankings.getMovementPointsDifference( entry ),\n        differenceString;\n\n    if( difference && direction === 'up' )\n    {\n        differenceString = '+' + difference;\n    }\n    else if( difference && direction === 'down' )\n    {\n        differenceString = '-' + difference;\n    }\n\n    return {\n        direction: direction,\n        difference: differenceString\n    };\n}"},"getLastRankingsUpdatedDate":{"Documentation":{"description":"Returns the date of last Monday - assumes rankings are always updated on Mondays","tags":[{"title":"return","description":"Date object","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.TeamRankingsInfo.prototype.getLastRankingsUpdatedDate = function()\n{\n    var difference, date, today = new Date(); // Today's date\n\n    difference = ( today.getDay() + 6 ) % 7; // Number of days to subtract\n    date = new Date( today - difference * 24*60*60*1000 ); // Do the subtraction\n\n    return date;\n}"}}},"TicketCheckerWidget":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.TicketCheckerWidget"},{"title":"param","description":null,"type":null,"name":"container"},{"title":"param","description":null,"type":null,"name":"config"},{"title":"param","description":null,"type":null,"name":"tournament"}]},"Source":"PULSE.CLIENT.RUGBY.TicketCheckerWidget = function( container, config, tournament )\n{\n    this.$container = $( container );\n    this.config = config;\n    this.tournament = tournament;\n    this.rules = [];\n\n    // if( PULSE.CLIENT.isTest() )\n    // {\n    //     this.url = 'http://dynamic.pulselive.com/test/data/irb/ticket-checker/ticket-checker.js';\n    // }\n    // else\n    // {\n        this.url = 'http://dynamic.pulselive.com/dynamic/data/irb/ticket-checker/ticket-checker.js';\n    // }\n    \n\n    this.$preCheck = this.$container.find( 'div.pre-check' );\n    this.$validEntity = this.$container.find( 'div.valid-entity' );\n    this.$didyoumeanEntity = this.$container.find( 'div.didyoumean-entity' );\n    this.$invalidEntity = this.$container.find( 'div.invalid-entity' );\n\n    this.setEventListeners();\n\n    this.dm = PULSE.CLIENT.getDataManager();\n    this.dm.addFeed( 'ticket-checker', this.url, 0, 'onCheckerData', [ this ] );\n    this.dm.start( this.url );\n}","prototype":{"setRules":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"newRules"}]},"Source":"PULSE.CLIENT.RUGBY.TicketCheckerWidget.prototype.setRules = function( newRules )\n{\n    this.rules = newRules;\n}"},"onData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"PULSE.CLIENT.RUGBY.TicketCheckerWidget.prototype.onData = function( data, id )\n{\n    if( id === 'ticket-checker' )\n    {\n        console.log( data['root']['record'] );\n        this.rules = data['root']['record'];\n    }\n}"},"setEventListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TicketCheckerWidget.prototype.setEventListeners = function()\n{\n    var that = this;\n    this.$preCheck.submit( function( e )\n    {\n        var companyName = $( this ).find( 'input.company-name' ).val();\n        var companySite = $( this ).find( 'input.company-site' ).val();\n\n        if( companyName || companySite )\n        {\n            switch( that.checkValid( companyName, companySite ) )\n            {\n                case 'valid':\n                    that.showValid();\n                    break;\n                case 'partial':\n                    that.showDidYouMean();\n                    break;\n                case 'invalid':\n                    that.showInvalid();\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        e.preventDefault();\n    } );\n\n    this.$container.find( '.back-to-form' ).click( function( e )\n    {\n        that.showForm();\n        e.preventDefault();\n    } );\n}"},"checkValid":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"companyName"},{"title":"param","description":null,"type":null,"name":"companySite"}]},"Source":"PULSE.CLIENT.RUGBY.TicketCheckerWidget.prototype.checkValid = function( companyName, companySite )\n{\n    if( companyName )\n    {\n        return this.checkCompanyName( companyName );\n    }\n\n    if( companySite )\n    {\n        return this.checkCompanySite( companySite );\n    }\n\n    return;\n}"},"checkCompanyName":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"string"}]},"Source":"PULSE.CLIENT.RUGBY.TicketCheckerWidget.prototype.checkCompanyName = function( string )\n{\n    console.log( 'checking company name: ' + string );\n    string = $.trim( string.toLowerCase() );\n\n    for( var i = 0, iLimit = this.rules.length; i < iLimit; i++ )\n    {\n        var companyRule = this.rules[ i ];\n        if( companyRule )\n        {\n            var link = companyRule.Addlfield1 ? companyRule.Addlfield1.split( ' ' )[0] : '#';\n            if( companyRule.CompanyName && companyRule.CompanyName.toLowerCase() === string )\n            {\n                this.setLinkTo( link );\n                this.setSuggestionTo( companyRule.CompanyName );\n                return 'valid';\n            }\n\n            var partialMatches = companyRule.PartialMatchesNames ? companyRule.PartialMatchesNames.split(',') : [];\n            partialMatches = $.map( partialMatches, function( partial )\n            {\n                return $.trim( partial ? partial.toLowerCase() : partial );\n            } );\n\n            var nameSet = FuzzySet( partialMatches.concat( [ companyRule.CompanyName ] ) );\n\n            console.log( 'checking \"' + string + '\" against: ' + partialMatches.join( ', ' ) );\n\n            var match = nameSet.get( string );\n            if( match && match[ 0 ][ 0 ] > 0.7 )\n            {\n                this.setLinkTo( link );\n                this.setSuggestionTo( companyRule.CompanyName );\n                return 'partial';\n            }\n        }\n    }\n    console.log( 'match not found' );\n    return 'invalid';\n}"},"checkCompanySite":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"string"}]},"Source":"PULSE.CLIENT.RUGBY.TicketCheckerWidget.prototype.checkCompanySite = function( string )\n{\n    console.log( 'checking company link: ' + string );\n    string = this.getDomain( $.trim( string.toLowerCase() ) );\n\n    for( var i = 0, iLimit = this.rules.length; i < iLimit; i++ )\n    {\n        var companyRule = this.rules[ i ];\n        if( companyRule && companyRule.CompanyLink )\n        {\n            var link = companyRule.Addlfield1 ? companyRule.Addlfield1.split( ' ' )[0] : '#';\n            if( companyRule.CompanyLink && this.getDomain( companyRule.CompanyLink.toLowerCase() ) === string )\n            {\n                this.setLinkTo( link );\n                this.setSuggestionTo( companyRule.CompanyLink );\n                return 'valid';\n            }\n\n            if( companyRule.PartialMatchesLink )\n            {\n                var possibleLinks = [ companyRule.CompanyLink ].concat( companyRule.PartialMatchesLink );\n\n                var siteSet = FuzzySet( possibleLinks );\n                console.log( 'checking \"' + string + '\" against: ' + possibleLinks.join( ', ' ) );\n\n                var match = siteSet.get( string );\n                if( match && match[ 0 ][ 0 ] > 0.7 )\n                {\n                    console.log( 'match found' );\n                    this.setLinkTo( link );\n                    this.setSuggestionTo( companyRule.CompanyLink );\n                    return 'partial';\n                }\n            }\n        }\n    }\n\n    console.log( 'match not found' );\n    return 'invalid';\n}"},"setLinkTo":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"additionalField"}]},"Source":"PULSE.CLIENT.RUGBY.TicketCheckerWidget.prototype.setLinkTo = function( additionalField )\n{\n    additionalField = additionalField ? $.trim( additionalField ) : additionalField;\n    if( additionalField )\n    {\n        var linkTo = additionalField.split( ' ' )[ 0 ];\n        this.$container.find( '.linkTo' ).attr( 'href', linkTo );\n    }\n}"},"setSuggestionTo":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"string"}]},"Source":"PULSE.CLIENT.RUGBY.TicketCheckerWidget.prototype.setSuggestionTo = function( string )\n{\n    this.$didyoumeanEntity.find( '.suggestion' ).html( string );\n}"},"getDomain":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"url"}]},"Source":"PULSE.CLIENT.RUGBY.TicketCheckerWidget.prototype.getDomain = function( url )\n{\n    var prefix = /^https?:\\/\\//i;\n    var domain = /^[^\\/]+/;\n    url = url.replace( prefix, '' );\n    if( url.charAt( 0 ) === '/' )\n    {\n        url = window.location.hostname + url;\n    }\n\n    var match = url.match( domain );\n    if( match )\n    {\n        return match[ 0 ];\n    }\n}"},"showForm":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TicketCheckerWidget.prototype.showForm = function()\n{\n    this.$validEntity.hide();\n    this.$didyoumeanEntity.hide();\n    this.$invalidEntity.hide();\n    this.$preCheck.show();\n}"},"showValid":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TicketCheckerWidget.prototype.showValid = function()\n{\n    this.$invalidEntity.hide();\n    this.$didyoumeanEntity.hide();\n    this.$preCheck.hide();\n    this.$validEntity.show();\n}"},"showDidYouMean":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TicketCheckerWidget.prototype.showDidYouMean = function()\n{\n    this.$validEntity.hide();\n    this.$invalidEntity.hide();\n    this.$preCheck.hide();\n    this.$didyoumeanEntity.show();\n}"},"showInvalid":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TicketCheckerWidget.prototype.showInvalid = function()\n{\n    this.$validEntity.hide();\n    this.$didyoumeanEntity.hide();\n    this.$preCheck.hide();\n    this.$invalidEntity.show();\n}"},"getDataUrl":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TicketCheckerWidget.prototype.getDataUrl = function()\n{\n    return '';\n}"}}},"TournamentInNumbers":{"Documentation":{"description":"Displays tournament statistics","tags":[{"title":"class","description":null,"type":null,"name":null}]},"Source":"PULSE.CLIENT.RUGBY.TournamentInNumbers = function( container, config, tournament )\n{\n    this.$container = $( container );\n    this.config = config;\n    this.tournament = tournament;\n\n    this.average = false;\n\n    // Get match schedule data for match count\n    if ( this.config[ 'data-average' ] )\n    {\n        this.average = true;\n        if ( !this.tournament.schedule.scheduleLoaded )\n        {\n            this.tournament.schedule.getScheduleData( { start: true } );\n        }\n    }\n\n    // Get tournament statistics\n    if ( !this.tournament.numbersLoaded )\n    {\n        this.tournament.getNumbers( { start: true, interval: 90 } );\n    }\n\n    this.setSubscriptions();\n    this.scrollValues();\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"Subscribe to standings data events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TournamentInNumbers.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.NUMBERS_UPDATE, function( e, params )\n    {\n        if ( params.id === that.tournament.tournamentName )\n        {\n            that.updateTournamentNumbers();\n        }\n    } );\n\n    // Update the list of matches\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCHEDULE_UPDATE, function( e, params )\n    {\n        if ( params.id === that.tournament.tournamentName && that.average )\n        {\n            that.updateMatchCount();\n        }\n    } );\n}"},"scrollValues":{"Documentation":{"description":"Scroll numbers from 0 to their current value","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TournamentInNumbers.prototype.scrollValues = function()\n{\n    var that = this;\n\n    // Animate the in numbers usng jQuery Counter\n    $( '.rugbyNumberRotate', this.$container ).not( '.scrolled' ).each( function()\n    {\n        var $this = $( this ).addClass( 'scrolled' ),\n            initial = $this.text();\n        $(\n            {\n                counter: 0\n            } ).animate(\n            {\n                counter: parseInt( initial.replace( /[,\\s]+/g, '' ) )\n            },\n            {\n                duration: 2400,\n                start: function()\n                {\n\n                    that.$container.data( 'animating', true );\n                },\n                step: function()\n                {\n                    $this.text( PULSE.CLIENT.I18N.Numeral( this.counter ).format() );\n                },\n                complete: function()\n                {\n                    $this.text( initial );\n                    that.updateTournamentNumbers();\n                    that.$container.data( 'animating', false );\n                }\n            } );\n    } );\n}"},"updateTournamentNumbers":{"Documentation":{"description":"Update each tournament number value in the container","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TournamentInNumbers.prototype.updateTournamentNumbers = function()\n{\n    this.numbers = this.tournament.numbers;\n\n    // Don't update while animating\n    if ( !this.numbers || this.$container.data( 'animating' ) )\n    {\n        return;\n    }\n\n    // Update values and averages\n    for ( var stat in this.numbers )\n    {\n        $( '.rugbyEvent' + stat, this.$container ).html( PULSE.CLIENT.I18N.Numeral( this.numbers[ stat ] ).format() );\n        if ( this.average && this.matchCount )\n        {\n            $( '.averageContainer' ).fadeIn();\n            $( '.average' + stat, this.$container ).html( PULSE.CLIENT.I18N.Numeral( ( this.numbers[ stat ] / this.matchCount ).toFixed( 2 ) ).format() ).show();\n        }\n    }\n}"},"updateMatchCount":{"Documentation":{"description":"Update match count","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TournamentInNumbers.prototype.updateMatchCount = function()\n{\n    this.matchCount = this.tournament.schedule.completeMatches.length + this.tournament.schedule.liveMatches.length;\n    $( '.averageMatchesLength', this.$container ).html( this.matchCount );\n\n    if ( this.numbers )\n    {\n        this.updateTournamentNumbers();\n    }\n}"}}},"TournamentCountdown":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for Audio List widget"},{"title":"param","description":"Jquery object or selector string","type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"Object"},{"type":"NameExpression","name":"String"}]},"name":"container"}]},"Source":"PULSE.CLIENT.RUGBY.TournamentCountdown = function( container, config, tournament )\n{\n    this.$container = $( container );\n    this.title = this.$container.data( 'title' );\n    this.tournament = tournament;\n\n    this.$countdownContainer = this.$container.find( '.countdownClock' );\n\n    if ( this.$countdownContainer )\n    {\n        this.branded = this.$countdownContainer.data( 'branded' );\n    }\n\n    this.templates = {\n        countdown : 'templates/tournament/countdown.html'\n    };\n\n    this.tournament.getInformation( { start: true } );//new PULSE.CLIENT.RUGBY.Event( this.tournament.tournamentName )\n    this.tournament.getSchedule( { start: true } );\n\n    this.setSubscriptions();\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"Subscribe to standings data events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TournamentCountdown.prototype.setSubscriptions = function()\n{\n    var that = this,\n        details = false,\n        schedule = false;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.INFORMATION_UPDATE, function()\n    {\n        details = true;\n        if ( details && schedule )\n        {\n            that.publishContainer();\n        }\n    });\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCHEDULE_UPDATE, function( e, params )\n    {\n        schedule = true;\n        if ( details && schedule )\n        {\n            that.publishContainer();\n        }\n    });\n\n}"},"publishContainer":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TournamentCountdown.prototype.publishContainer = function()\n{\n    var that = this;\n\n    var span;\n\n    this.schedule = this.tournament.schedule;\n\n    if ( this.schedule && this.schedule.matches && this.schedule.matches.length > 0 )\n    {\n        if ( this.schedule.matches[ 0 ].status === \"U\" )\n        {\n            this.endTime = this.schedule.matches[ 0 ].time.millis;\n            if (this.title)\n            {\n                span = this.title;\n            }\n            else if ( !this.branded )\n            {\n                span = this.tournament.getTournamentShortName() + ', ' + this.tournament.getTournamentSpan( false, this.endTime );\n            }\n            else\n            {\n                span = this.tournament.getTournamentSpan( true, this.endTime );\n            }\n\n            PULSE.CLIENT.Template.publish(\n                this.templates.countdown,\n                this.$countdownContainer,\n                {   span : span,\n                    tournament : this.tournament }\n            );\n\n            this.$days = this.$countdownContainer.find( '.daysSpan' );\n            this.$hours = this.$countdownContainer.find( '.hoursSpan' );\n            this.$mins = this.$countdownContainer.find( '.minsSpan' );\n            this.$secs = this.$countdownContainer.find( '.secsSpan' );\n\n            this.liveRefresh = setInterval( function()\n            {\n                that.refreshTime();\n            }, 1000 );\n        }\n        else\n        {\n            this.$container.hide();\n        }\n    }\n    else\n    {\n        this.$container.hide();\n    }\n}"},"stopCountdown":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TournamentCountdown.prototype.stopCountdown = function()\n{\n    clearInterval( this.liveRefresh );\n}"},"refreshTime":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TournamentCountdown.prototype.refreshTime = function()\n{\n    var now = new Date().getTime();\n    var start = this.endTime //Date( this.start_date )\n\n    var timeGap = start - now;\n\n    // console.log(time_lasting);\n\n    if( timeGap <= 0)\n    {\n        this.$days.html( '00' );\n        this.$hours.html( '00' );\n        this.$mins.html( '00' );\n        this.$secs.html( '00' );\n        this.stopCountdown();\n        this.$container.hide();\n    }\n    else\n    {\n        this.$days.html( '30' );\n        this.$hours.html( '30' );\n        this.$mins.html( '30' );\n        this.$secs.html( '30' );\n        var days = Math.floor( ( timeGap  / 1000 ) / ( 60 * 60 * 24 ) );\n\n        if ( days < 10 )\n        {\n            this.$days.html( '0' + days );\n        }\n        else\n        {\n            this.$days.html( days );\n        }\n\n        var daySecs = parseInt( days, 10 ) * 24 * 60 * 60;\n        var hours = Math.floor( ( timeGap / 1000 - daySecs ) / ( 60 * 60 ) );\n        if( hours < 10)\n        {\n            this.$hours.html( '0' + hours );\n        }\n        else\n        {\n            this.$hours.html( hours );\n        }\n        var hourSecs = parseInt( hours, 10 ) * ( 60 * 60 );\n        var minutes = Math.floor( ( timeGap / 1000 - daySecs - hourSecs ) / 60 );\n        if( minutes < 10)\n        {\n            this.$mins.html( '0' + minutes );\n        }\n        else\n        {\n            this.$mins.html( minutes );\n        }\n        var minSecs = parseInt( minutes, 10 ) * 60;\n        var seconds = Math.floor( timeGap / 1000 - daySecs - minSecs - hourSecs );\n        if( seconds < 10)\n        {\n            this.$secs.html( '0' + seconds );\n        }\n        else\n        {\n            this.$secs.html( seconds );\n        }\n    }\n}"}}},"TournamentHeaderWidget":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the fixtures widget"}]},"Source":"PULSE.CLIENT.RUGBY.TournamentHeaderWidget = function( container, config, tournament )\n{\n    this.$container = $( container );\n    this.config = config;\n    this.tournament = tournament;\n\n    this.templates = {\n        header: \"templates/tournament/header.html\"\n    };\n\n    this.eventObject = this.tournament.getInformation( { start: true } );//new PULSE.CLIENT.RUGBY.Event( this.tournament.tournamentName )\n\n    this.setSubscriptions();\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"Subscribe to standings data events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TournamentHeaderWidget.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.INFORMATION_UPDATE, function( e, params )\n    {\n        if( params.id === that.tournament.tournamentName )\n        {\n            that.publishHeader();\n        }\n    });\n}"},"convertDate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TournamentHeaderWidget.prototype.convertDate = function()\n{\n    var startDate = PULSE.CLIENT.DateUtil.getUtcDateObject( PULSE.CLIENT.DateUtil.parseDateTime( this.tournament.start.millis ) ),\n        endDate = PULSE.CLIENT.DateUtil.getUtcDateObject( PULSE.CLIENT.DateUtil.parseDateTime( this.tournament.end.millis ) ),\n        dateString = '';\n\n\n    dateString = dateString + startDate.getDate() + ' ' + PULSE.CLIENT.DateUtil.getMonth( startDate, true );\n\n    if ( startDate.getFullYear() != endDate.getFullYear() )\n    {\n        dateString = dateString + ' ' + startDate.getFullYear();\n    }\n\n    dateString = dateString + ' - ';\n\n    dateString = dateString + endDate.getDate() + ' ' + PULSE.CLIENT.DateUtil.getMonth( endDate, true ) + ' ' + endDate.getFullYear();\n\n    return dateString;\n}"},"publishHeader":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TournamentHeaderWidget.prototype.publishHeader = function()\n{\n    var dateString = this.convertDate();\n\n    PULSE.CLIENT.Template.publish(\n        this.templates.header,\n        this.$container,\n        { logo : '', title : this.tournament.label, date : dateString }\n    );\n}"}}},"TournamentMatches":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the fixtures widget"}]},"Source":"PULSE.CLIENT.RUGBY.TournamentMatches = function( $container, config, tournament )\n{\n    this.$container = $container;\n    this.config = config;\n    this.tournament = tournament;\n\n    this.config.templates = {\n        match: \"templates/matches/match.html\",\n        tournament : \"templates/matches/tournament-matches.html\"\n    };\n\n    this.topMatches = new PULSE.CLIENT.RUGBY.TournamentMatchesSummary( this.$container.find( '.latest-next-widget' ), config, tournament );\n    this.matchList = new PULSE.CLIENT.RUGBY.Matches( this.$container, 'all', config, tournament );\n}"},"TournamentPoolsWidget":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the tournament pools widget\n    - The tournament pools widget is designed to list out the teams playing in\n      each pool of a tournament with no points/scores/games played info\n    - The main use case for this is for displaying the pools of said tournament\n      in a pre-tournament state where none of the aforementioned data is applicable."}]},"Source":"PULSE.CLIENT.RUGBY.TournamentPoolsWidget = function( container, config, tournament )\n{\n    this.config = config;\n    this.tournament = tournament;\n    this.$container = $( container );\n    this.tabbed = ( this.$container.attr( 'data-tabbed' ) == 'true' );\n\n    this.$poolsContainer = this.$container.find( '#tournamentPools' );\n\n    this.template = 'templates/tournament/pools' + ( this.tabbed ? '-tabbed' : '' ) + '.html';\n\n    this.standings = undefined;\n    this.urlGenerator = PULSE.CLIENT.RUGBY.getUrlGenerator();\n    this.setSubscriptions();\n\n    if ( this.tabbed )\n    {\n        this.setTabs();\n    }\n\n    if ( this.tournament )\n    {\n        this.tournament.getStandings(\n        {\n            interval: 0,\n            start: true\n        } );\n    }\n    else\n    {\n        console.log( 'No tournament found' );\n    }\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"Subscribes to standings and displays the pools when the data comes","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TournamentPoolsWidget.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.STANDINGS_UPDATE, function()\n    {\n        that.standings = that.tournament.standings;\n        that.refreshPool();\n    } );\n}"},"setTabs":{"Documentation":{"description":"Subscribes to standings and displays the pools when the data comes","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TournamentPoolsWidget.prototype.setTabs = function()\n{\n    var that = this,\n        key;\n\n    this.$container.on( 'click', '[data-pool-key]', function( e )\n    {\n        e.preventDefault();\n        key = $( this ).addClass( ' active ' ).attr( 'data-pool-key' );\n        $( '[data-pool-key]', that.$container ).not( this ).removeClass( 'active' );\n        $( '[data-pool-tab]', that.$container ).hide().filter( '[data-pool-tab=' + key + ']' ).show();\n    } )\n\n    // Show the first\n    $( '[data-pool-key].active', that.$container ).click();\n}"},"generateTeamUrl":{"Documentation":{"description":"Generates the url for each team in the pools","tags":[{"title":"param","description":"Team object","type":{"type":"NameExpression","name":"Object"},"name":"team"},{"title":"return","description":"A url for the given team","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.TournamentPoolsWidget.prototype.generateTeamUrl = function( team )\n{\n    return this.urlGenerator.makeTeamUrl( team );\n}"},"refreshPool":{"Documentation":{"description":"Displays the pool/group information fir the given tournament","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TournamentPoolsWidget.prototype.refreshPool = function()\n{\n    var mapping = {},\n        poolClass = {},\n        pool, i, ii, model, team;\n\n    if ( this.standings.tables )\n    {\n        this.$container.show();\n        // Loop over each of the pools\n        for ( i = 0; i < this.standings.tables.length; i++ )\n        {\n            pool = this.standings.tables[ i ];\n            poolClass[ pool.label ] = pool.label.toLowerCase().replace( /\\s+/g, '-' );\n            mapping[ pool.label ] = [];\n            // Loop over each of the team entries\n            for ( ii = 0; ii < pool.entries.length; ii++ )\n            {\n                team = pool.entries[ ii ].team;\n                // Add additional info\n                team.abbreviation = ( team.abbreviation || '' ).toLowerCase();\n                team.diff = pool.entries[ ii ].pointsFor - pool.entries[ ii ].pointsAgainst;\n                team.played = pool.entries[ ii ].played;\n                team.points = pool.entries[ ii ].points;\n                team.url = this.generateTeamUrl( team );\n                mapping[ pool.label ].push( team );\n            }\n        }\n\n        model = {\n            map: mapping,\n            poolClass: poolClass,\n            i18n:\n            {\n                played: PULSE.I18N.translations[ 'widget.standings.tableheader.matchesplayed.short' ],\n                points: PULSE.I18N.translations[ 'widget.standings.tableheader.points.short' ],\n                team: PULSE.I18N.translations[ 'widget.standings.tableheader.team.long' ]\n            }\n        };\n\n        PULSE.CLIENT.Template.publish(\n            this.template,\n            this.$poolsContainer,\n            model\n        );\n    }\n}"}}},"TournamentMatchesSummary":{"Documentation":{"description":"Tournament Matches Summary, which shows a set number of matches","tags":[{"title":"constructor","description":null,"type":null,"name":null}]},"Source":"PULSE.CLIENT.RUGBY.TournamentMatchesSummary = function( $container, config, tournament )\n{\n    this.$container = $container;\n    this.config = config;\n    this.tournament = tournament;\n    this.matchesNumber = config[ 'data-max-items' ] || 2;\n    this.matchesNumber = this.matchesNumber < 1 ? 1 : this.matchesNumber;\n\n    this.template = 'templates/matches/tournament-match-summary.html';\n\n    this.setSubscriptions();\n    if ( !this.tournament.schedule.scheduleLoaded )\n    {\n        this.tournament.schedule.getScheduleData(\n        {\n            start: this.config[ 'data-start' ]\n        } );;\n    }\n    else\n    {\n        this.update();\n    }\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TournamentMatchesSummary.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCHEDULE_UPDATE, function( e, params )\n    {\n        // Checks to see whether data can be found, otherwise returns no matches\n        if( params.success )\n        {\n            if( that.tournament && params.id === that.tournament.tournamentName )\n            {\n                that.update();\n            }\n        }\n    } );\n}"},"extractMatches":{"Documentation":{"description":"Extracts the most relevant match IDs to show","tags":[{"title":"return","description":"The array of match IDs","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"String"}]}}]},"Source":"PULSE.CLIENT.RUGBY.TournamentMatchesSummary.prototype.extractMatches = function()\n{\n    var matchIds = [];\n\n    if( this.tournament.schedule.liveMatches.length )\n    {\n        // if there are live matches, fills up the array with as many as possible\n        if( this.tournament.schedule.liveMatches.length >= this.matchesNumber )\n        {\n            // if the array is filled, it returns it without carrying on\n            return this.tournament.schedule.liveMatches.slice( 0, this.matchesNumber );\n        }\n        else\n        {\n            matchIds = matchIds.concat( this.tournament.schedule.liveMatches );\n        }\n    }\n\n    var slotsLeft = this.matchesNumber - matchIds.length;\n\n    // base case; ignore latest matches for two matches and show upcoming and complete if available\n    if( this.matchesNumber === 2 )\n    {\n        if( slotsLeft === 2 )\n        {\n            if( this.tournament.schedule.upcomingMatches.length &&\n                this.tournament.schedule.completeMatches.length )\n            {\n                matchIds.push( this.tournament.schedule.completeMatches[ this.tournament.schedule.completeMatches.length - 1 ] );\n                matchIds.push( this.tournament.schedule.upcomingMatches[ 0 ] );\n            }\n        }\n        else if( this.tournament.schedule.completeMatches.length )\n        {\n            matchIds.unshift( this.tournament.schedule.completeMatches[ this.tournament.schedule.completeMatches.length - 1 ] );\n        }\n        else if( this.tournament.schedule.upcomingMatches.length )\n        {\n            matchIds.push( this.tournament.schedule.upcomingMatches[ 0 ] );\n        }\n    }\n    else\n    {\n        // if there are both complete and upcoming matches left, work out the closest ones in time\n        if( this.tournament.schedule.upcomingMatches.length &&\n            this.tournament.schedule.completeMatches.length )\n        {\n            var upcomingMatches = [].concat( this.tournament.schedule.upcomingMatches );\n            var completeMatches = [].concat( this.tournament.schedule.completeMatches );\n\n            // while there are slots left to fill\n            while( slotsLeft )\n            {\n                // first upcoming match is latest\n                var upcomingMatchId = upcomingMatches[ 0 ];\n                // last complete match is latest\n                var completeMatchId = completeMatches[ completeMatches.length - 1 ];\n\n                // determine closest out of the two to current date/time\n                var latestId = this.getLatest( completeMatchId, upcomingMatchId );\n\n                if( latestId === upcomingMatchId )\n                {\n                    upcomingMatches.shift();\n                    matchIds.push( upcomingMatchId ); // upcoming matches added to the end\n                }\n                else\n                {\n                    completeMatches.pop();\n                    matchIds.unshift( completeMatchId ); // complete matches added to the beginning\n                }\n\n                slotsLeft = this.matchesNumber - matchIds.length;\n\n                // if either array runs out of matches, stop iterating\n                if( upcomingMatches.length === 0 || completeMatches.length === 0 )\n                {\n                    break;\n                }\n            }\n\n            // if there are slots left after going through the match IDs, pre or back fill array with matches\n            if( slotsLeft )\n            {\n                if( upcomingMatches.length )\n                {\n                    matchIds = matchIds.concat( upcomingMatches.slice( 0, slotsLeft ) );\n                }\n                else if( completeMatches.length )\n                {\n                    matchIds = completeMatches.slice( 0, slotsLeft ).concat( matchIds );\n                }\n            }\n        }\n        // if only upcoming matches are available, backfill array with as many matches as it can fit\n        // but only do this if there are live matches too - if there are only upcoming matches available,\n        // don't send them through\n        else if( this.tournament.schedule.upcomingMatches.length && slotsLeft != this.matchesNumber )\n        {\n            matchIds = matchIds.concat( this.tournament.schedule.upcomingMatches.slice( 0, slotsLeft ) );\n        }\n        // if only complete matches are available, backfill array with as many matches as it can fit\n        // but only do this if there are live matches too - if there are only complete matches available,\n        // don't send them through\n        else if( this.tournament.schedule.completeMatches.length && slotsLeft != this.matchesNumber )\n        {\n            matchIds = this.tournament.schedule.completeMatches.slice( 0, slotsLeft ).concat( matchIds );\n        }\n    }\n\n    return matchIds;\n}"},"getLatest":{"Documentation":{"description":"Given two match IDs, it returns the one of the match closest in time; it favours upcoming if equally close","tags":[{"title":"param","description":"the first match ID","type":{"type":"NameExpression","name":"String"},"name":"matchId1"},{"title":"param","description":"the second match ID","type":{"type":"NameExpression","name":"String"},"name":"matchId2"},{"title":"return","description":"the ID of the match closest in thime","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.TournamentMatchesSummary.prototype.getLatest = function( matchId1, matchId2 )\n{\n    var match1 = this.tournament.schedule.getMatchById( matchId1 );\n    var match2 = this.tournament.schedule.getMatchById( matchId2 );\n\n    var now = new Date();\n    var match1Date = match1.getDate();\n    var match2Date = match2.getDate();\n\n    if( now - match1Date < match2Date - now )\n    {\n        return matchId1;\n    }\n    else\n    {\n        return matchId2;\n    }\n}"},"update":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TournamentMatchesSummary.prototype.update = function()\n{\n    var matchIds = this.extractMatches();\n\n    if( this.$container[ 0 ] )\n    {\n        var that = this;\n        var html = '';\n        for( var i = 0, iLimit = matchIds.length; i < iLimit; i++ )\n        {\n            var id = matchIds[ i ];\n            var match = that.tournament.schedule.getMatchById( id );\n            html += PULSE.CLIENT.Template.getHtml(\n                this.template,\n                { clazz: this.getWrapperClazz( match ), match: match }\n            );\n        };\n\n        this.$container[ 0 ].innerHTML = html;\n    }\n}"},"getWrapperClazz":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"match"}]},"Source":"PULSE.CLIENT.RUGBY.TournamentMatchesSummary.prototype.getWrapperClazz = function( match )\n{\n    var clazz;\n    switch( match.getMatchStatus() )\n    {\n        case 'L':\n            clazz = 'live-fixture';\n            break;\n        case 'U':\n            clazz = 'next-fixture';\n            break;\n        case 'C':\n            clazz = 'latest-result';\n            break;\n    }\n\n    return clazz;\n}"}}},"TournamentStandingsWidget":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for a tournament standings widget"}]},"Source":"PULSE.CLIENT.RUGBY.TournamentStandingsWidget = function( container, config, tournament )\n{\n\n    this.$container = $( container );\n    this.$tournamentStandingsContainer = this.$container.find( '.tournamentStandings' );\n    this.$standingsFooterContainer = this.$container.find( '.standingsFooter' );\n    this.config = config;\n    this.tournament = tournament;\n\n    this.groupHTML = this.$tournamentStandingsContainer.length ? this.$tournamentStandingsContainer[ 0 ].innerHTML : '';\n    this.$tableHeader = this.$container.find( 'tr.header' );\n    this.headerHTML = this.$tableHeader.length ? this.$tableHeader[ 0 ].innerHTML : '';\n\n    this.templates = {\n        group: 'templates/standings/tournament-group-table.html'\n    };\n\n    this.urlGen = new PULSE.CLIENT.RUGBY.UrlGenerator();\n    this.setSubscriptions();\n    this.tournament.getStandings( { start: true } );\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"Subscribe to standings data events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TournamentStandingsWidget.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.STANDINGS_UPDATE, function()\n    {\n        that.refreshStandingsTables();\n    });\n}"},"refreshStandingsTables":{"Documentation":{"description":"Refreshes standings tables on the DOM","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TournamentStandingsWidget.prototype.refreshStandingsTables = function()\n{\n    this.standings = this.tournament.standings;\n    this.model = this.standings.getStandingsModel();\n\n    this.$tournamentStandingsContainer.empty();\n    var groupHTML = '';\n    for( var i = 0, iLimit = this.model.standings.length; i < iLimit; i++ )\n    {\n        groupHTML += this.groupHTML;\n    }\n    this.$tournamentStandingsContainer.html( groupHTML );\n    var $groups = this.$tournamentStandingsContainer.find( '.groupContainer' );\n\n    var dataAvailable = this.checkHasData(),\n        i;\n\n    for( i = 0; i < this.model.standings.length; i++ )\n    {\n        var record = this.model.standings[ i ];\n        var label = '';\n        if ( record.label )\n        {\n            label = record.label.replace(/\\s/g, '-');\n            label = label.toLowerCase();\n        }\n\n        var $group = $groups.eq( i ).addClass( 'pool-' + ( i + 1 ) );\n        $group.find( '.subHeader' ).addClass( label ).text( record.label );\n\n        var groupHTML = PULSE.CLIENT.Template.getHtml(\n            this.templates.group,\n            {\n                standings: record,\n                dataAvailable: dataAvailable,\n                label: label,\n                urlGen: this.urlGen\n            }\n        );\n\n        var $table = $group.find( 'table' )\n        if( $table.length )\n        {\n            $table[ 0 ].innerHTML = this.headerHTML + groupHTML;\n        }\n    }\n\n    for( var column in dataAvailable )\n    {\n        this.$container.find( '.' + column ).toggle( dataAvailable[ column ] );\n    }\n\n    this.$tournamentStandingsContainer.show();\n}"},"checkHasData":{"Documentation":{"description":"Checks if standings data exists","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TournamentStandingsWidget.prototype.checkHasData = function()\n{\n    var dataAvailable = {\n            bonusPoints: true,\n            drawn: true,\n            label: true,\n            lost: true,\n            played: true,\n            points: true,\n            pointsAgainst: true,\n            pointsDifference: true,\n            pointsFor: true,\n            position: true,\n            triesFor : true,\n            triesAgainst : true,\n            won : true\n        },\n    i, j, key;\n\n    for( i = 0; i < this.model.standings.length; i++ )\n    {\n        for( j = 0; j < this.model.standings[ i ].standings.length; j++ )\n        {\n            for( key in dataAvailable )\n            {\n                if( !( this.model.standings[ i ].standings[ j ].hasOwnProperty( key ) ) )\n                {\n                    dataAvailable[ key ] = false;\n                }\n            }\n        }\n    }\n    return dataAvailable;\n}"}}},"Trophytourmap":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for Trophy Tour Map widget\n    - This widget should list out all events for trophy tour and display the map to link to them.\n(For now the map is just a click through to go to articles)"},{"title":"param","description":"Widget container div","type":{"type":"NameExpression","name":"Object"},"name":"container"},{"title":"param","description":"Widget configuration object","type":{"type":"NameExpression","name":"Object"},"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.Trophytourmap = function( container, config )\n{\n    this.$container = $( container );\n    this.config = config;\n\n    this.setListeners();\n}","prototype":{"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Trophytourmap.prototype.setListeners = function()\n{\n\tthis.mapHtml = this.$container.find('.venue-view-selector .map');\n\tthis.gridHtml = this.$container.find('.venue-view-selector .grid');\n\n\tthis.gridHtml.click(function( e ) {\n\t\t$('.trophyMapContainer').hide();\n\t\t$('.region-grid').show();\n\t\te.preventDefault();\n\t});\n\n\tthis.mapHtml.click(function(e) {\n\t\t$('.trophyMapContainer').show();\n\t\t$('.region-grid').hide();\n\t\te.preventDefault();\n\t});\n\n\tthis.attachBubbles();\n}"},"attachBubbles":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Trophytourmap.prototype.attachBubbles = function()\n{\n\t// var that = this;\n\tvar bubble = this.$container.find(\"#trophy_bubble\");\n\tvar that = this;\n\n\tthis.$container.find(\".map_pieces\").mouseover(function( e ){\n\t\t// console.log(e.clientX);\n\t\t// console.log(e.clientY);\n\t\t// var bubble = that.$container.find(\"#trophy_bubble\");\n\t\tvar x = e.pageX - that.$container.find('.trophyMapContainer').offset().left\n\t\tvar y = e.pageY - that.$container.find('.trophyMapContainer').offset().top\n\t\tbubble.html($(this).attr(\"data-name\"));\n\t\tbubble.css(\"top\",y);\n\t\tbubble.css(\"left\",x);\n\t\tbubble.show();\n\t});\n\n\tthis.$container.find(\".map_pieces\").mouseout(function(){\n\t\tbubble.hide();\n\t});\n\n\tthis.$container.find(\".map_pieces\").click(function(){\n\t\twindow.location.href = $(this).attr(\"data-article\");\n\t});\n}"}}},"TwitterListWidget":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.TwitterListWidget"},{"title":"param","description":null,"type":null,"name":"container"},{"title":"param","description":null,"type":null,"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.TwitterListWidget = function( container, config )\n{\n    this.$container = $( container );\n    this.config = config;\n\n    var that = this;\n\n    this.list = new PULSE.CLIENT.TwitterFeed( this.$container, {\n        account: this.config[ 'data-feed-name' ],\n        fileName: this.config[ 'data-feed-name' ],\n        start: true,\n        callback: function() { that.$container.show(); }\n    }, true );\n}"},"UnionInfo":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the union info widget"}]},"Source":"PULSE.CLIENT.RUGBY.UnionInfo = function( container, config )\n{\n    this.config = config;\n    this.$container = $( container );\n    this.dm = PULSE.CLIENT.JqueryDataManager();\n    this.urlGenerator = new PULSE.CLIENT.RUGBY.UrlGenerator();\n    this.unionId = this.config[ 'data-union-id' ];\n    this.templates = {\n        table: 'templates/union/info.html'\n    };\n\n    this.getData();\n}","prototype":{"getData":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.UnionInfo.prototype.getData = function()\n{\n    var id = 'union-info',\n        url = this.urlGenerator.makeDataUrl( [ 'union', this.unionId ], { language: PULSE.CLIENT.LANGUAGE } ),\n        interval = 0,\n        callback = undefined,\n        targets = [ this ];\n\n    this.dm.addFeed( id, url, interval, callback, targets );\n    this.dm.start( url );\n}"},"onData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"PULSE.CLIENT.RUGBY.UnionInfo.prototype.onData = function( data, id )\n{\n    this.data = data;\n    this.refreshTable();\n}"},"refreshTable":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.UnionInfo.prototype.refreshTable = function()\n{\n    var model = this.data;\n\n    PULSE.CLIENT.Template.publish(\n            this.templates.table,\n            this.$container,\n            model\n        );\n}"}}},"TournamentTeams":{"Main":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for Tournament Teams list widget\n    - This widget should list out all teams playing and generate links to individual\n        team pages"},{"title":"param","description":"Widget container div","type":{"type":"NameExpression","name":"Object"},"name":"container"},{"title":"param","description":"Widget configuration object","type":{"type":"NameExpression","name":"Object"},"name":"config"},{"title":"param","description":"Tournament scope for this instance","type":{"type":"NameExpression","name":"Object"},"name":"tournament"}]},"Source":"PULSE.CLIENT.RUGBY.TournamentTeams.Main = function( container, config, tournament )\n{\n    this.$container = $( container );\n    this.config = config;\n    this.tournament = tournament;\n    this.$tableContainer = this.$container.find( '.teams' );\n    this.templates = {\n        standingsTableStage: 'templates/tournament/teams.html'\n    };\n\n    this.teams = {};\n\n    this.setSubscriptions();\n    this.getData();\n}","prototype":{"getData":{"Documentation":{"description":"Request schedule data\n    - This widget is currently making use of schedule data rather than squad list\n        data because at the time of writing this schedule data is available in\n        advance of squad list data for upcoming tournaments","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TournamentTeams.Main.prototype.getData = function()\n{\n    this.tournament.getSchedule( { start: true } );\n}"},"setSubscriptions":{"Documentation":{"description":"Subscribe to data events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TournamentTeams.Main.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    $( 'body' ).on( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCHEDULE_UPDATE, function( e, params )\n    {\n        if( params.id == that.tournament.tournamentName )\n        {\n            that.refreshTeamsList();\n        }\n    } );\n}"},"refreshTeamsList":{"Documentation":{"description":"Refresh teams on DOM","tags":[]},"Source":"PULSE.CLIENT.RUGBY.TournamentTeams.Main.prototype.refreshTeamsList = function()\n{\n    var that = this,\n        model = {\n            teams: this.tournament.schedule.getTeamObjectsFromSchedule(),\n            tournament: this.tournament\n        };\n\n    PULSE.CLIENT.Template.publish(\n            this.templates.standingsTableStage,\n            this.$tableContainer,\n            model,\n            function(){}\n        );\n}"}}}},"TwitterTrending":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.TwitterTrending"},{"title":"param","description":null,"type":null,"name":"container"},{"title":"param","description":null,"type":null,"name":"config"},{"title":"param","description":null,"type":null,"name":"tournament"}]},"Source":"PULSE.CLIENT.RUGBY.TwitterTrending = function (container, config, tournament)\n{\n    this.twitter = PULSE.CLIENT.getTwitterInstance();\n    this.setSubscriptions();\n    //this.tournament.getSquads( { start: true } );\n    this.twitter.getRankedTopics('ipl2013buzz', {start: true, fileName: 'ipl2013buzz'});\n\n        //console.log('yay');\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"[setSubscriptions description]","tags":[{"title":"param","description":null,"type":{"type":"ArrayType","elements":[{"type":"NameExpression","name":"type"}]},"name":"first_argument"}]},"Source":"PULSE.CLIENT.RUGBY.TwitterTrending.prototype.setSubscriptions = function(first_argument)\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe('twitter/trending', function()\n    {\n        //console.log( that.tournament.scheduleData );\n        console.log(that);\n    });\n}"}}},"UnionHeader":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the union info widget"}]},"Source":"PULSE.CLIENT.RUGBY.UnionHeader = function( container, config )\n{\n    this.config = config;\n    this.$container = $( container );\n    this.dm = PULSE.CLIENT.JqueryDataManager();\n    this.urlGenerator = new PULSE.CLIENT.RUGBY.UrlGenerator();\n    this.unionId = this.config[ 'data-union-id' ];\n    this.templates = {\n        table: 'templates/union/info.html'\n    };\n\n    this.getData();\n}","prototype":{"getData":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.UnionHeader.prototype.getData = function()\n{\n    var id = 'union-info',\n        url = this.urlGenerator.makeDataUrl( [ 'union', this.unionId ], { language: PULSE.CLIENT.LANGUAGE } ),\n        interval = 0,\n        callback = undefined,\n        targets = [ this ];\n\n    this.dm.addFeed( id, url, interval, callback, targets );\n    this.dm.start( url );\n}"},"onData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"PULSE.CLIENT.RUGBY.UnionHeader.prototype.onData = function( data, id )\n{\n    this.data = data;\n    this.$container.find( '.memberUnionLogo' ).addClass( this.data.name );\n    this.$container.find( '.teamName' ).text( this.data.name );\n}"}}},"UnionMatches":{"Main":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the tournament pools widget"}]},"Source":"PULSE.CLIENT.RUGBY.UnionMatches.Main = function( container, config )\n{\n\tthis.$container = $( container );\n\tthis.config = config;\n\tthis.dm = new PULSE.CLIENT.JqueryDataManager();\n\tthis.urlGenerator = new PULSE.CLIENT.RUGBY.UrlGenerator();\n\n\tthis.UNION_ID = this.config[ 'data-union-id' ];\n\tthis.COUNTRY_ID = PULSE.CLIENT.RUGBY.UNION_LOOK_UP[ this.UNION_ID ];\n\n\tthis.getCountryData();\n}","prototype":{"getCountryData":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.UnionMatches.Main.prototype.getCountryData = function()\n{\n\tvar id = this.COUNTRY_ID,\n\t\tpathArray = [ 'country', this.COUNTRY_ID ],\n\t\tparams = { types: '5,6,9,10,11,12,13,14', language: PULSE.CLIENT.LANGUAGE },\n        url = this.urlGenerator.makeDataUrl( pathArray, params ),\n        interval = 0,\n        callback = undefined,\n        targets = [ this ];\n\n    this.dm.addFeed( id, url, interval, callback, targets );\n    this.dm.start( url );\n}"},"onData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"PULSE.CLIENT.RUGBY.UnionMatches.Main.prototype.onData = function( data, id )\n{\n\tif( id === this.COUNTRY_ID )\n\t{\n\t\tthis.data = data.countries;\n\t\tthis.refreshMatches();\n\t}\n}"},"refreshMatches":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.UnionMatches.Main.prototype.refreshMatches = function()\n{\n\tvar teamIds = [],\n\t\tteamIdsString;\n\n\tfor( var i = 0; i < this.data[0].teams.length; i++ )\n\t{\n\t\tteamIds.push( this.data[0].teams[ i ].id );\n\t}\n\n\tteamIdsString = teamIds.join( ',' );\n\n    this.config.unionId = this.UNION_ID\n\tthis.config[ 'data-team-ids' ] = teamIdsString;\n\tthis.matchesController = new PULSE.CLIENT.RUGBY.UnionMatches.Matches( this.$container, this.config );\n}"}}},"Matches":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the tournament pools widget"}]},"Source":"PULSE.CLIENT.RUGBY.UnionMatches.Matches = function( container, config )\n{\n    this.config = config;\n    this.$container = $( container );\n\n    this.$matchesToggle = this.$container.find( '.toggle' );\n    this.$matchBoxes = this.$container.find( '#matchBoxes' );\n\n    this.teamIds = this.config[ 'data-team-ids' ];\n    this.schedule = undefined;\n    this.unionId = this.config.unionId;\n\n    this.toggleMap = {};\n\n    this.templates = {\n        'Fixtures' : 'templates/union/fixture.html',\n        'Results' : 'templates/union/result.html'\n    };\n\n    this.toggle = 'Fixtures';\n\n    this.schedule = new PULSE.CLIENT.RUGBY.Schedule();\n    this.setListeners();\n    this.setSubscriptions();\n    this.getData();\n}","prototype":{"getData":{"Documentation":{"description":"Get matches data","tags":[]},"Source":"PULSE.CLIENT.RUGBY.UnionMatches.Matches.prototype.getData = function()\n{\n    var today = ( new Date() ).format( 'yyyy-mm-dd' ),\n            scheduleRequestOptions = {\n                startDate: today,\n                states: [ 'U', 'L' ],\n                teams: this.teamIds\n             };\n\n    this.schedule.getScheduleData( { start: true, params: scheduleRequestOptions } );\n}"},"setSubscriptions":{"Documentation":{"description":"Subscribes to standings and displays the pools when the data comes","tags":[]},"Source":"PULSE.CLIENT.RUGBY.UnionMatches.Matches.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCHEDULE_UPDATE, function( e, params )\n    {\n\n        if (! ( that.toggle in that.toggleMap ) )\n        {\n            that.toggleMap[ that.toggle ] = that.schedule.getMatchModelsMappingByEvent();\n        }\n\n        that.publishMatches();\n\n    });\n}"},"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.UnionMatches.Matches.prototype.setListeners = function()\n{\n    var that = this;\n\n    // If the user searches a new term, then the window is refreshed with the new term\n    // as a url parameter - in the form [ url ]?s=[ new term ]\n    this.$matchesToggle.on( 'click', 'li', function( e, params )\n    {\n        var listItems = that.$matchesToggle.find( 'li' );\n\n        that.toggle = $( this ).text();\n\n        for ( var i = 0; i < listItems.length; i++ )\n        {\n            $( listItems[ i ] ).removeClass( 'active' );\n        }\n\n        $( listItems[ $( this ).index() ] ).addClass( 'active' );\n\n        if (! ( that.toggle in that.toggleMap ) )\n        {\n            that.schedule = new PULSE.CLIENT.RUGBY.Schedule();\n\n            var today = ( new Date() ).format( 'yyyy-mm-dd' ),\n                resultsRequestOptions = {\n                endDate: today,\n                states: [ 'C' ],\n                teams: that.teamIds,\n                sort : 'desc'\n            };\n\n            that.schedule.getScheduleData( { start: true, params: resultsRequestOptions } );\n        }\n        else\n        {\n            that.publishMatches();\n        }\n    } );\n}"},"getMatchLink":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"match"}]},"Source":"PULSE.CLIENT.RUGBY.UnionMatches.Matches.prototype.getMatchLink = function( match )\n{\n    return '/match/' + match.matchId;\n}"},"publishMatches":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.UnionMatches.Matches.prototype.publishMatches = function ()\n{\n    var config, key, match, monthNum, monthDay;\n\n    if ( this.toggle.indexOf( 'Results' ) > -1 )\n    {\n        this.$matchBoxes.html( '<p>Latest 10 Results</p>' );\n    }\n    else\n    {\n        this.$matchBoxes.html( '<p>Next 10 Fixtures</p>' );\n    }\n\n    var keys =  _.keys( this.toggleMap[ this.toggle ] );\n    if( this.toggle.indexOf( 'Results' ) > -1 )\n    {\n        keys.reverse();\n    }\n\n    for( var j = 0; j < keys.length; j++ )\n    {\n        var key = keys[ j ];\n        for( i = 0; i < this.toggleMap[ this.toggle ][ key ].length; i++ )\n        {\n            match = this.toggleMap[ this.toggle ][ key ][ i ];\n\n            if ( match.date && match.date.monthNum && match.date.monthDay )\n            {\n                monthNum = match.date.monthNum;\n                monthDay = match.date.monthDay;\n\n                if ( monthNum < 10 )\n                {\n                    monthNum = '0' + monthNum;\n                }\n\n                if ( monthDay < 10 )\n                {\n                    monthDay = '0' + monthDay;\n                }\n\n                match.dateShow = monthDay + '/' + monthNum;\n\n            }\n\n            if( i === 0 )\n            {\n                config = { match : match, label : key, link : this.getMatchLink( match ) };\n            }\n            else\n            {\n                config = { match : match, link : this.getMatchLink( match ) };\n            }\n\n            PULSE.CLIENT.Template.append(\n                this.templates[ this.toggle ],\n                this.$matchBoxes,\n                config\n            );\n        }\n    }\n\n    if ( this.toggle.indexOf( 'Results' ) > -1 )\n    {\n        this.$matchBoxes.append( '<div class=\"allResultsBtn\"><a href=\"/results?union=' + this.unionId + '\" class=\"button green\">All Results</a></div>' );\n    }\n    else\n    {\n        this.$matchBoxes.append( '<div class=\"allResultsBtn\"><a href=\"/fixtures?union=' + this.unionId + '\" class=\"button green\">All Fixtures</a></div>' );\n    }\n\n}"}}}},"UserProfileWidget":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the user profile widget"}]},"Source":"PULSE.CLIENT.RUGBY.UserProfileWidget = function( container, config )\n{\n    this.$container = $( container );\n    this.config = config;\n    this.bindEvents();\n    this.logs = false;\n}","prototype":{"bindEvents":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.UserProfileWidget.prototype.bindEvents = function()\n{\n    var that = this;\n\n    this.$logoutBtn = this.$container.find( '.logoutButtom' );\n    this.$changePassword = this.$container.find( '.profileInfo .password' );\n    this.$loginBtn = this.$container.find('.profile.login');\n    this.$profileBtn = this.$container.find('.profile');\n\n    this.$logoutBtn.on( 'click', function()\n    {\n        var callback = function( data, textStatus, xhr )\n        {\n            location.href = window.location.origin + \"/media/releases\";\n        }\n        PULSE.CLIENT.RUGBY.UserProfileWidget.request( 'logout', null, callback, null, 'POST' );\n    } );\n\n    this.$loginBtn.on( 'click', function()\n    {\n        location.href = window.location.origin + \"/media/releases\";\n    } );\n\n    this.$changePassword.on( 'click', function()\n    {\n        location.href = window.location.origin + $( this ).attr( \"href\" );\n    } );\n\n    this.$profileBtn.on( 'click', function()\n    {\n        $( this ).parent().toggleClass( 'active' );\n    } );\n}","callback":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"textStatus"},{"title":"param","description":null,"type":null,"name":"xhr"}]},"Source":"var callback = function( data, textStatus, xhr )\n        {\n            location.href = window.location.origin + \"/media/releases\";\n        }"}}},"request":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"action"},{"title":"param","description":null,"type":null,"name":"serialisedData"},{"title":"param","description":null,"type":null,"name":"success"},{"title":"param","description":null,"type":null,"name":"error"},{"title":"param","description":null,"type":null,"name":"requestMethod"}]},"Source":"PULSE.CLIENT.RUGBY.UserProfileWidget.request = function( action, serialisedData, success, error, requestMethod )\n{\n    var that = this;\n    var urlFactory = PULSE.CLIENT.RUGBY.getUrlGenerator();\n\n    var requestUrl = urlFactory.getWebAuthUrl( 'https' ) + action + \"?\" + serialisedData;\n    that.log( \"REQUEST URL\", requestUrl );\n\n    $.ajax(\n    {\n        url: requestUrl,\n        type: requestMethod || \"GET\",\n        dataType: \"json\",\n        success: success,\n        error: error\n    } );\n}"},"log":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"type"},{"title":"param","description":null,"type":null,"name":"message"}]},"Source":"PULSE.CLIENT.RUGBY.UserProfileWidget.log = function( type, message )\n{\n    if ( this.logs )\n    {\n        if ( ( typeof type == \"string\" ) && ( typeof message == \"string\" ) )\n        {\n            console.log( type + \" : \" + message );\n        }\n        else\n        {\n            console.log( message );\n        }\n    }\n}"}},"UnionRankings":{"Main":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the tournament pools widget"}]},"Source":"PULSE.CLIENT.RUGBY.UnionRankings.Main = function( container, config )\n{\n    // vars\n    this.$container = $( container );\n    this.config = config;\n    this.dm = new PULSE.CLIENT.JqueryDataManager();\n    this.urlGenerator = new PULSE.CLIENT.RUGBY.UrlGenerator();\n    \n    this.rankings = { 'mru': {} };\n    this.UNION_ID = this.config[ 'data-union-id' ];\n    this.COUNTRY_ID = PULSE.CLIENT.RUGBY.UNION_LOOK_UP[ this.UNION_ID ];\n\n    // init\n    this.setSubscriptions();\n    this.getRankingsData();\n    this.getCountryData();\n}","prototype":{"getCountryData":{"Documentation":{"description":"Get data for teams associated with the country associated with this union","tags":[]},"Source":"PULSE.CLIENT.RUGBY.UnionRankings.Main.prototype.getCountryData = function()\n{\n    var id = 'country-' + this.COUNTRY_ID,\n        pathArray = [ 'country', this.COUNTRY_ID ],\n        params = { types: '5,6,9,10,11,12,13,14', language: PULSE.CLIENT.LANGUAGE },\n        url = this.urlGenerator.makeDataUrl( pathArray, params ),\n        interval = 0,\n        callback = undefined,\n        targets = [ this ];\n\n    this.dm.addFeed( id, url, interval, callback, targets );\n    this.dm.start( url );\n}"},"getRankingsData":{"Documentation":{"description":"Get rankings data for each supported rankings type","tags":[]},"Source":"PULSE.CLIENT.RUGBY.UnionRankings.Main.prototype.getRankingsData = function()\n{\n    var type;\n\n    for( type in this.rankings )\n    {\n        this.rankings[ type ] = new PULSE.CLIENT.RUGBY.Rankings( type );\n        this.rankings[ type ].getRankingsData( { start: true } );\n    }\n}"},"onData":{"Documentation":{"description":"Receive and store the teams data for a given country","tags":[]},"Source":"PULSE.CLIENT.RUGBY.UnionRankings.Main.prototype.onData = function( data, id )\n{\n    if( id === this.COUNTRY_ID )\n    {\n        this.data = data.countries;\n        this.refreshRankingsTable();\n    }\n}"},"setSubscriptions":{"Documentation":{"description":"Subsribe the rankings data events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.UnionRankings.Main.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    $( 'body' ).on( PULSE.CLIENT.RUGBY.DATA_EVENTS.RANKINGS_UPDATE, function( e, params )\n    {\n        that.refreshRankingsTable();\n    } );\n}"},"getTeamEntry":{"Documentation":{"description":"Store each team id assoicated with the country associated with this union","tags":[]},"Source":"PULSE.CLIENT.RUGBY.UnionRankings.Main.prototype.getTeamEntry = function()\n{\n    var i, entry, type;\n\n    for( i = 0; i < this.data[0].teams.length; i++ )\n    {\n        for( type in this.rankings )\n        {\n            entry = this.rankings[ type ].getTeamEntryById(  this.data[0].teams[ i ].id );\n            if( entry )\n            {\n                return entry;\n            }\n        }\n    }\n}"},"refreshRankingsTable":{"Documentation":{"description":"Refresh the rankings table","tags":[]},"Source":"PULSE.CLIENT.RUGBY.UnionRankings.Main.prototype.refreshRankingsTable = function()\n{\n    var model = this.getTeamEntry();\n\n    $( '.mensRankingIdentifier' ).html( model.pos );\n}"}}}},"VideoFeatured":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.VideoFeatured"},{"title":"param","description":null,"type":null,"name":"container"}]},"Source":"PULSE.CLIENT.RUGBY.VideoFeatured = function( container )\n{\n\n    this.urlGen = new PULSE.CLIENT.RUGBY.getUrlGenerator( { 'type' : 'video' } );\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n\n    var pageOptions = {\n        'container' : container,\n        'forwardContainer' : '.next',\n        'backwardContainer' : '.prev',\n        'template' : 'templates/content/video-list.html',\n        'displayMoreContainer' : '.featuredList'\n    };\n\n    var mediaOptions =\n    {\n        container: container,\n        type: \"list\",//\"player\"\n        link: '.videoThumb', //LIST (data-mediaid is on this link always)\n        link_click : '.videoThumb a',\n        player_scope: \"primary\", //whatever name\n        link_time: '.duration', //inside link container\n        link_title: '.title', //inside link container\n        link_date: '.datePosted' //inside link container\n    };\n    this.playlistSlider = new PULSE.CLIENT.UI.PlaylistSlider(pageOptions);\n\n    var mediaList = new PULSE.CLIENT.MediaList( mediaOptions );\n\n    this.setListeners();\n}","prototype":{"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.VideoFeatured.prototype.setListeners = function()\n{\n    var that = this;\n\n    $( 'body' ).on( 'playlist/get', function( e, params )\n    {\n        that.getMoreContent( params );\n    });\n}"},"getMoreContent":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.VideoFeatured.prototype.getMoreContent = function( data )\n{\n    this.feeds = {};\n\n    this.feeds.contentUrl = this.urlGen.makeContentUrl( PULSE.CLIENT.CMS_ACCOUNT, data.type, PULSE.CLIENT.LANGUAGE, data.id);//seperate[ 0 ] );\n\n    this.feeds.feedContent = data.type + '-' + PULSE.CLIENT.LANGUAGE + '/'+ data.id;\n    this.feeds.contentInterval = 360;\n    this.feeds.contentCallback = 'on' + data.type;\n\n    this.dm.addFeed( this.feeds.feedContent, this.feeds.contentUrl,\n        this.feeds.contentInterval, this.feeds.conentCallback, [ this ] );\n\n    this.dm.start( this.feeds.contentUrl );\n}"},"onData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.VideoFeatured.prototype.onData = function( data )\n{\n    this.playlistSlider.setData( data );\n}"},"onError":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.VideoFeatured.prototype.onError = function( data )\n{\n    var error = { 'error' : true };\n    this.playlistSlider.setData( error );\n}"}}},"VenueList":{"Main":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.VenueList.Main"},{"title":"param","description":null,"type":null,"name":"$container"},{"title":"param","description":null,"type":null,"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.VenueList.Main = function( $container, config )\n{\n    this.$container = $container;\n    this.config = config || {};\n    this.$tabsContainer = this.$container.find( '.venue-tabs' );\n    this.setTabs();\n\n    this.$venues = this.$container.find( '.stadium-grid .venue-item' );\n    this.coordinates = $.map( this.$venues, function( venue )\n    {\n        var $venue = $( venue );\n        var latitude = $venue.data( 'latitude' );\n        var longitude = $venue.data( 'longitude' );\n        var label = $venue.html();\n\n        if( latitude && longitude )\n        {\n            return { label: label, latitude: latitude, longitude: longitude };\n        }\n        else\n        {\n            return undefined;\n        }\n    } );\n\n    this.coordinates = _.compact( this.coordinates );\n\n    this.map = new PULSE.CLIENT.GoogleMap( this.$container.find( '.map-container' ), {\n        markers: this.coordinates\n    } );\n}","prototype":{"setTabs":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.VenueList.Main.prototype.setTabs = function()\n{\n    var activeTab = 0;\n    if( this.config[ 'data-tab' ] )\n    {\n        var tabNumber = parseInt( this.config[ 'data-tab' ], 10 );\n        if( !isNaN( tabNumber ) && tabNumber < this.$venueList.children().length )\n        {\n            activeTab = tabNumber;\n        }\n    }\n\n    var that = this;\n    this.tabToggle = new PULSE.CLIENT.UI.ToggleNav( {\n        activeTab: activeTab,\n        navigationContainer: this.$container.find('.venue-view-selector'),\n        contentContainer: this.$tabsContainer,\n        callback: function( selectedTab )\n        {\n            that.activeTab = selectedTab;\n            that.initialiseMap();\n        }\n    } );\n}"},"initialiseMap":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.VenueList.Main.prototype.initialiseMap = function()\n{\n    if( this.$tabsContainer.children().eq( this.activeTab ).hasClass( 'stadium-map' ) && !this.mapInitialised )\n    {\n        this.mapInitialised = true;\n        this.map.initialise();\n    }\n}"}}}},"VideoList":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.VideoList"},{"title":"param","description":null,"type":null,"name":"container"}]},"Source":"PULSE.CLIENT.RUGBY.VideoList = function( container )\n{\n    this.$container = $( container );\n\n    this.urlGen = new PULSE.CLIENT.RUGBY.getUrlGenerator( { 'type' : 'video' } );\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n\n    this.paginationId = 'videoList' + Math.random();\n\n    var pageOptions = {\n        'container' : container,\n        'forwardContainer' : '.next',\n        'backwardContainer' : '.prev',\n        'currentNumberContainer' : '.paginationValue',\n        'maxNumberContainer' : '.maxPages',\n        'template' : 'templates/content/video-list.html',\n        'displayMoreContainer' : '.video',\n        'paginationId' : this.paginationId\n    };\n\n     var mediaOptions = {\n        container: container,\n        type: \"list\",//\"player\"\n        link: '.videoThumb', //LIST (data-mediaid is on this link always)\n        link_click : '.videoThumb a',\n        player_scope: \"primary\", //whatever name\n        link_time: '.duration', //inside link container\n        link_title: '.title', //inside link container\n        link_date: '.datePosted' //inside link container\n    };\n\n    var mediaList = new PULSE.CLIENT.MediaList( mediaOptions );\n\n    var showOptions = {\n        'container' : container,\n        'showMoreContainer' : '#showMore',\n        'template' : 'templates/content/news-list.html',\n        'displayMoreContainer' : '.newsList'\n    };\n\n    this.setListeners();\n\n    var paginationContainer = this.$container.find( '.paginationValue' );\n\n    if( paginationContainer.length > 0 )\n    {\n        this.moreContent = new PULSE.CLIENT.UI.Pagination( pageOptions );\n    }\n    else\n    {\n        this.moreContent = new PULSE.CLIENT.UI.ShowMore( showOptions );\n    }\n}","prototype":{"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.VideoList.prototype.setListeners = function()\n{\n    var that = this;\n\n    PULSE.CLIENT.subscribe( 'content/get', function( e, params )\n    {\n        if ( params.id === that.paginationId )\n        {\n            that.getMoreContent();\n        }\n    });\n}"},"getMoreContent":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.VideoList.prototype.getMoreContent = function()\n{\n    this.feeds = {};\n\n    this.feeds.contentUrl = this.urlGen.makeContentQuery( PULSE.CLIENT.CMS_ACCOUNT, PULSE.CLIENT.LANGUAGE, { \"pageSize\" : this.moreContent.pageSize, \"page\" : this.moreContent.pageNum, \"tagNames\" : this.moreContent.contentTags, \"references\" : this.moreContent.references } );\n\n    this.feeds.feedContent = 'videoList';\n    this.feeds.contentInterval = 360;\n    this.feeds.contentCallback = 'on' + this.moreContent.contentType;\n\n    this.dm.addFeed( this.feeds.feedContent, this.feeds.contentUrl,\n        this.feeds.contentInterval, this.feeds.conentCallback, [ this ] );\n\n    this.dm.start( this.feeds.contentUrl );\n}"},"onData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.VideoList.prototype.onData = function( data )\n{\n    this.moreContent.setData( data );\n}"}}},"WorldSeriesStandingsStage":{"Main":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for the series series standing stage table"},{"title":"param","description":"Widget container","type":{"type":"NameExpression","name":"Object"},"name":"container"},{"title":"param","description":"Widget configuration objects","type":{"type":"NameExpression","name":"Object"},"name":"config"},{"title":"param","description":"Tournament scope object","type":{"type":"NameExpression","name":"Object"},"name":"tournament"}]},"Source":"PULSE.CLIENT.RUGBY.WorldSeriesStandingsStage.Main = function( container, config, tournament )\n{\n    this.$container = $( container );\n    this.config = config;\n    this.tournament = tournament;\n    this.$tableContainer = this.$container.find( '.tournamentStandings' );\n    this.templates = {\n        standingsTableStage: 'templates/sevens/standings-stage.html'\n    };\n\n    this.teams = {};\n\n    this.setSubscriptions();\n    this.getData();\n}","prototype":{"getData":{"Documentation":{"description":"Get schedule data for this tournament","tags":[]},"Source":"PULSE.CLIENT.RUGBY.WorldSeriesStandingsStage.Main.prototype.getData = function()\n{\n    this.tournament.getSchedule( { start: true } );\n}"},"setSubscriptions":{"Documentation":{"description":"Subscribe to schedule data events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.WorldSeriesStandingsStage.Main.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    $( 'body' ).on( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCHEDULE_UPDATE, function( e, params )\n    {\n        if( params.id == that.tournament.tournamentName )\n        {\n            that.setTeams();\n            that.derivePointsFromSchedules();\n            that.refreshStandingsTable();\n        }\n    } );\n}"},"setTeams":{"Documentation":{"description":"Gets teams for schedule","tags":[]},"Source":"PULSE.CLIENT.RUGBY.WorldSeriesStandingsStage.Main.prototype.setTeams = function()\n{\n    var j, teams = this.tournament.schedule.getTeamListFromSchedule();\n\n    for( j = 0; j < teams.length; j++ )\n    {\n        if( !this.teams[ teams[ j ] ] )\n        {\n            this.teams[ teams[ j ] ] = {};\n        }\n    }\n}"},"derivePointsFromSchedules":{"Documentation":{"description":"Determine the points achieved by each team for this stage of the tournament","tags":[]},"Source":"PULSE.CLIENT.RUGBY.WorldSeriesStandingsStage.Main.prototype.derivePointsFromSchedules = function()\n{\n    var j, matchId, match, eventType, winner, loser, winningPoints, losingPoints;\n\n    if( !this.tournament.schedule.completeMatches.length )\n    {\n        return;\n    }\n\n    for( j = this.tournament.schedule.matches.length -1; j >= 0; j-- )\n    {\n        matchId = this.tournament.schedule.matches[ j ].matchId;\n        match = this.tournament.schedule.matchMap[ matchId ];\n        eventType = this.tournament.sport || 'mrs';\n\n        if( match.getMatchStatus() === 'C' )\n        {\n            winner = match.teams[ match.outcome === 'A' ? 0 : 1 ];\n            loser = match.teams[ match.outcome === 'A' ? 1 : 0 ];\n        }\n\n        // Assign the points based on the context of this match in the tournament\n        if( winner )\n        {\n            switch( match.eventPhase )\n            {\n                case 'Cup Final':\n                        winningPoints = eventType == 'mrs' ? 22 : 20;\n                        losingPoints = eventType == 'mrs' ? 19 : 18;\n                        break;\n                    case '3rd Place Play-Off':\n                    case 'Bronzefinal':\n                        winningPoints = eventType == 'mrs' ? 17 : 16;\n                        losingPoints = eventType == 'mrs' ? 15 : 14;\n                        break;\n                    case 'Plate Final':\n                        winningPoints = eventType == 'mrs' ? 13 : 12;\n                        losingPoints = eventType == 'mrs' ? 12 : 10;\n                        break;\n                    case '7th Place Play-Off':\n                        winningPoints = 8;\n                        losingPoints = 6;\n                        break;\n                    case 'Plate Semi Finals':\n                        losingPoints = 10;\n                        break;\n                    case 'Bowl Final':\n                        winningPoints = eventType == 'mrs' ? 8 : 4;\n                        losingPoints = eventType == 'mrs' ? 7 : 3;\n                        break;\n                    case 'Bowl Semi Finals':\n                        losingPoints = 5;\n                        break;\n                    case 'Shield Final':\n                        winningPoints = 3;\n                        losingPoints = 2;\n                        break;\n                    case '11th Place Play-Off':\n                        winningPoints = 2;\n                        losingPoints = 1;\n                        break;\n                    case 'Shield Semi Finals':\n                        losingPoints = 1;\n                        break;\n                    default:\n                        winningPoints = 0;\n                        losingPoints = 0;\n                        break;\n            }\n\n            // Add points to team\n            this.teams[ winner.name ][ 0 ] = this.teams[ winner.name ][ 0 ] || winningPoints;\n            this.teams[ loser.name ][ 0 ] = this.teams[ loser.name ][ 0 ] || losingPoints;\n\n            // Add team data to team\n            this.teams[ winner.name ].team = winner;\n            this.teams[ loser.name ].team = loser;\n        }\n\n    }\n}"},"getSortedTeams":{"Documentation":{"description":"Sort teams by the total points they won for this stage","tags":[]},"Source":"PULSE.CLIENT.RUGBY.WorldSeriesStandingsStage.Main.prototype.getSortedTeams = function()\n{\n    var that = this,\n        teamList = _.keys( this.teams ),\n        teamEntriesArray = [],\n        key;\n\n    for( key in this.teams )\n    {\n        teamEntriesArray.push( this.teams[ key ] );\n    }\n\n    return _.sortBy( teamEntriesArray, function( entry ) { return entry[0]; } ).reverse();\n}"},"refreshStandingsTable":{"Documentation":{"description":"Refresh standings table on DOM","tags":[]},"Source":"PULSE.CLIENT.RUGBY.WorldSeriesStandingsStage.Main.prototype.refreshStandingsTable = function()\n{\n    var that = this,\n        model = { teams: this.getSortedTeams(), tournament: this.tournament };\n\n    PULSE.CLIENT.Template.publish(\n            this.templates.standingsTableStage,\n            this.$tableContainer,\n            model,\n            function()\n            {\n                if( that.tournament.schedule.matches.length &&\n                    !that.tournament.schedule.upcomingMatches.length &&\n                    !that.tournament.schedule.liveMatches.length )\n                {\n                    that.$container.show();\n                }\n            }\n        );\n}"}}}},"WorldSeriesStandingsSummary":{"Main":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for Men's Sevens World Series Standings widget\n    - This widget is unique and makes use of a specialised world series standings\n        data feed."},{"title":"param","description":"DOM Container","type":{"type":"NameExpression","name":"Object"},"name":"container"},{"title":"param","description":"Widget config","type":{"type":"NameExpression","name":"Object"},"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.WorldSeriesStandingsSummary.Main = function( container, config, tournament )\n{\n    this.$container = $( container );\n    this.$tableContainer = this.$container.find( '.playerStats' );\n    this.config = config;\n    this.tournament = tournament;\n    this.urlGenerator = new PULSE.CLIENT.RUGBY.UrlGenerator();\n    this.dm = new PULSE.CLIENT.JqueryDataManager();\n    this.templates = {\n        statsTable: 'templates/sevens/standings-summary.html'\n    };\n    this.seriesId = this.config[ 'data-series' ] || 18; // series\n    this.limit = this.config['data-max-entries'] || 5;\n\n    this.teamId = config[ 'data-team-id' ];\n\n    this.getData();\n}","prototype":{"getData":{"Documentation":{"description":"Call to get the world series stats for this.statType","tags":[]},"Source":"PULSE.CLIENT.RUGBY.WorldSeriesStandingsSummary.Main.prototype.getData = function()\n{\n    var id = this.widgetType,\n        pathArray = [ 'sevens', 'series', 'points', 'table' ],\n        params = {\n            'page': '0',\n            'pageSize': '50',\n            'series': this.seriesId,\n            'language': PULSE.CLIENT.LANGUAGE\n        }, // both series and event params are being passed until the event param has been deprecated in favour of series\n        url = this.urlGenerator.makeDataUrl( pathArray, params ),\n        interval = 0,\n        callback;\n\n    this.dm.addFeed( id, url, interval, callback, [ this ] );\n    this.dm.start( url );\n}"},"onData":{"Documentation":{"description":"OnData function for receiving World Series Standings data","tags":[]},"Source":"PULSE.CLIENT.RUGBY.WorldSeriesStandingsSummary.Main.prototype.onData = function( data, id )\n{\n    if( id === this.widgetType )\n    {\n        this.data = data;\n        this.refreshStandingsTable();\n    }\n}"},"getStandingsNearby":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"entries"}]},"Source":"PULSE.CLIENT.RUGBY.WorldSeriesStandingsSummary.Main.prototype.getStandingsNearby = function( entries )\n{\n    var out = [], id, low, high, id;\n\n    var newLimit = Math.floor( ( this.limit - 1 ) / 2 );\n\n    for( i = 0; i < entries.length; i++ )\n    {\n        if( entries[ i ].teamDetail.id === parseInt( this.teamId ) )\n        {\n            id = i;\n        }\n    }\n\n    low = id - parseInt( newLimit, undefined );\n\n    if( low < 0 )\n    {\n        low = 0;\n    }\n\n    high = id + parseInt( newLimit, undefined );\n\n    if( high + 1 > entries.length )\n    {\n        high = entries.length - 1;\n    }\n    for( i = low; i < high + 1; i++ )\n    {\n        out.push( entries[ i ] );\n    }\n    return out;\n}"},"refreshStandingsTable":{"Documentation":{"description":"Refresh the standings table on the DOM","tags":[]},"Source":"PULSE.CLIENT.RUGBY.WorldSeriesStandingsSummary.Main.prototype.refreshStandingsTable = function()\n{\n    var model = this.data;\n\n    model.seriesPointEntry.sort( function( a, b )\n    {\n        abbrA = a.position, abbrB = b.position;\n        if( abbrA < abbrB ) //sort abbreviation ascending\n        {\n            return -1;\n        }\n        else\n        {\n            return 1;\n        }\n       return 0; //default return value (no sorting)\n   } );\n\n    if ( this.teamId && model.seriesPointEntry.length > 0 )\n    {\n        model.seriesPointEntry = this.getStandingsNearby( model.seriesPointEntry );\n    }\n\n    if ( this.limit > model.seriesPointEntry.length )\n    {\n        model.max = model.seriesPointEntry.length;\n    }\n    else\n    {\n        model.max = this.limit;\n    }\n\n    PULSE.CLIENT.Template.publish(\n            this.templates.statsTable,\n            this.$tableContainer,\n            model\n        );\n}"}}}},"WorldSeriesStandingsFull":{"Main":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for Men's Sevens World Series Standings widget\n    - This widget is unique as the Series standings are currently not available\n        as a data feed.\n    - The widget works by referencing the schedule for each tournament leg of\n        the current season of the 7s world series ( eventgroup: 45 ) and adding\n        the points for each team in this leg."},{"title":"param","description":"DOM Container","type":{"type":"NameExpression","name":"Object"},"name":"container"},{"title":"param","description":"Widget config","type":{"type":"NameExpression","name":"Object"},"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.WorldSeriesStandingsFull.Main = function( container, config )\n{\n    this.$container = $( container );\n    this.config = config;\n    this.urlGenerator = new PULSE.CLIENT.RUGBY.UrlGenerator();\n    this.dm = new PULSE.CLIENT.JqueryDataManager();\n\n    this.EVENT_GROUP = this.config[ 'data-event-group' ] || 45; // Use to determine if men/women/jnrs...\n\n    this.getEventGroupData();\n}","prototype":{"getEventGroupData":{"Documentation":{"description":"Make request to get event group data for this sevens site","tags":[]},"Source":"PULSE.CLIENT.RUGBY.WorldSeriesStandingsFull.Main.prototype.getEventGroupData = function()\n{\n    var id = 'world-series-events',\n        url = this.urlGenerator.makeDataUrl( [ 'event'], this.getParams() ),\n        interval = 0,\n        callback,\n        targets = [ this ];\n\n    this.dm.addFeed( id, url, interval, callback, targets );\n    this.dm.start( url );\n}"},"getParams":{"Documentation":{"description":"Returns the default params for getting the current season of 7s world series\nevents","tags":[{"title":"return","description":"[description]","type":{"type":"ArrayType","elements":[{"type":"NameExpression","name":"type"}]}}]},"Source":"PULSE.CLIENT.RUGBY.WorldSeriesStandingsFull.Main.prototype.getParams = function()\n{\n    var today = PULSE.CLIENT.DateUtil.parseDateTime( new Date() ),\n        month = today.getMonth() + 1,\n        startYear = month >= 9 ? today.getFullYear() : today.getFullYear() -1,\n        endYear = month >= 9 ? today.getFullYear() + 1 : today.getFullYear(),\n        startDateString = startYear + '-10-01',\n        endDateString = endYear + '-10-01',\n        params = {\n            startDate: startDateString,\n            endDate: endDateString,\n            pageSize: 9, // number of events in series\n            eventGroups: this.EVENT_GROUP,\n            language: PULSE.CLIENT.LANGUAGE\n        };\n\n    return params;\n}"},"onData":{"Documentation":{"description":"Called by the data manager on receiving eventgroup data","tags":[{"title":"param","description":"Response body","type":{"type":"NameExpression","name":"Object"},"name":"data"},{"title":"param","description":"Feed id","type":{"type":"NameExpression","name":"Object"},"name":"id"}]},"Source":"PULSE.CLIENT.RUGBY.WorldSeriesStandingsFull.Main.prototype.onData = function( data, id )\n{\n    this.eventGroupData = data;\n\n    this.data = data;\n    this.scheduleController = new PULSE.CLIENT.RUGBY.WorldSeriesStandingsFull.ScheduleController( this.$container, this.config, this.data );\n}"}}},"ScheduleController":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.WorldSeriesStandingsFull.ScheduleController"},{"title":"param","description":null,"type":null,"name":"container"},{"title":"param","description":null,"type":null,"name":"config"},{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.WorldSeriesStandingsFull.ScheduleController = function( container, config, data )\n{\n    this.$container = $( container );\n    this.config = config;\n    this.urlGenerator = new PULSE.CLIENT.RUGBY.UrlGenerator();\n    this.dm = new PULSE.CLIENT.JqueryDataManager();\n    this.legs = data && data.content;\n    this.$tableContainer = this.$container.find( '.tournamentStandings' );\n    this.templates = {\n        standingsTableWomens: 'templates/sevens/standings-full-womens.html',\n        standingsTableMens : 'templates/sevens/standings-full-mens.html'\n    };\n\n    this.EVENT_GROUP = this.config[ 'data-event-group' ] || 45;\n    this.SERIES = this.config[ 'data-series' ]\n\n    if ( parseInt( this.EVENT_GROUP ) === 115 )\n    {\n        this.template = this.templates.standingsTableWomens;\n    }\n    else\n    {\n        this.template = this.templates.standingsTableMens;\n    }\n\n    this.teams = {};\n\n    this.setSubscriptions();\n    this.getData();\n    this.getSeriesTableData();\n}","prototype":{"getData":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.WorldSeriesStandingsFull.ScheduleController.prototype.getData = function()\n{\n    var i, leg, id, url, interval, callback, targets;\n\n    for( i = 0; i < this.legs.length; i++ )\n    {\n        leg = this.legs[ i ];\n        leg.tournament = window.WidgetController.getTournamentByName( leg.id );\n        leg.schedule = new PULSE.CLIENT.RUGBY.Schedule( leg.tournament );\n        leg.schedule.getScheduleData( { start: true } );\n    }\n}"},"getSeriesTableData":{"Documentation":{"description":"Call to get the world series stats for this.statType","tags":[]},"Source":"PULSE.CLIENT.RUGBY.WorldSeriesStandingsFull.ScheduleController.prototype.getSeriesTableData = function()\n{\n    this.SERIES_DATA_ID = 'series-points-table';\n    var pathArray = [ 'sevens', 'series', 'points', 'table' ],\n        params = {\n            'page': '0',\n            'pageSize': '50',\n            'series': this.SERIES,\n            'language': PULSE.CLIENT.LANGUAGE\n        }, // both series and event params are being passed until the event param has been deprecated in favour of series\n        url = this.urlGenerator.makeDataUrl( pathArray, params ),\n        interval = 0,\n        callback;\n\n    this.dm.addFeed( this.SERIES_DATA_ID, url, interval, callback, [ this ] );\n    this.dm.start( url );\n}"},"setSubscriptions":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.WorldSeriesStandingsFull.ScheduleController.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    $( 'body' ).on( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCHEDULE_UPDATE, function( e, params )\n    {\n        that.hasData = true;\n        that.setTeams();\n        that.derivePointsFromSchedules();\n        that.calculateTotals();\n        that.refreshStandingsTable();\n    } );\n}"},"onData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"PULSE.CLIENT.RUGBY.WorldSeriesStandingsFull.ScheduleController.prototype.onData = function( data, id )\n{\n    if( id === this.SERIES_DATA_ID && data )\n    {\n        this.canSort = true;\n        this.seriesPoints = data.seriesPointEntry || [];\n        this.refreshStandingsTable();\n    }\n}"},"setTeams":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.WorldSeriesStandingsFull.ScheduleController.prototype.setTeams = function()\n{\n    var i, leg, teams;\n\n    for( i = 0; i < this.legs.length; i++ )\n    {\n        leg = this.legs[ i ];\n\n        teams = leg.schedule.getTeamListFromSchedule();\n\n        for( j = 0; j < teams.length; j++ )\n        {\n            if( !this.teams[ teams[ j ] ] )\n            {\n                this.teams[ teams[ j ] ] = {};\n            }\n        }\n    }\n}"},"derivePointsFromSchedules":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.WorldSeriesStandingsFull.ScheduleController.prototype.derivePointsFromSchedules = function()\n{\n    var i, leg, j, matchId, match, winner, loser, winningPoints, losingPoints;\n\n    for( i = 0; i < this.legs.length; i++ )\n    {\n        leg = this.legs[ i ];\n\n        if( leg.schedule.completeMatches.length != leg.schedule.matches.length )\n        {\n            continue;\n        }\n\n        for( j = leg.schedule.matches.length -1; j >= 0; j-- )\n        {\n            matchId = leg.schedule.matches[ j ].matchId;\n            match = leg.schedule.matchMap[ matchId ];\n\n            if( match.getMatchStatus() === 'C' )\n            {\n                winner = match.teams[ match.outcome === 'A' ? 0 : 1 ];\n                loser = match.teams[ match.outcome === 'A' ? 1 : 0 ];\n            }\n\n            if( winner )\n            {\n                switch( match.eventPhase )\n                {\n                    case 'Cup Final':\n                        winningPoints = this.EVENT_GROUP == 45 ? 22 : 20;\n                        losingPoints = this.EVENT_GROUP == 45 ? 19 : 18;\n                        break;\n                    case '3rd Place Play-Off':\n                    case 'Bronzefinal':\n                        winningPoints = this.EVENT_GROUP == 45 ? 17 : 16;\n                        losingPoints = this.EVENT_GROUP == 45 ? 15 : 14;\n                        break;\n                    case 'Plate Final':\n                        winningPoints = this.EVENT_GROUP == 45 ? 13 : 12;\n                        losingPoints = this.EVENT_GROUP == 45 ? 12 : 10;\n                        break;\n                    case '7th Place Play-Off':\n                        winningPoints = 8;\n                        losingPoints = 6;\n                        break;\n                    case 'Plate Semi Finals':\n                        losingPoints = 10;\n                        break;\n                    case 'Bowl Final':\n                        winningPoints = this.EVENT_GROUP == 45 ? 8 : 4;\n                        losingPoints = this.EVENT_GROUP == 45 ? 7 : 3;\n                        break;\n                    case 'Bowl Semi Finals':\n                        losingPoints = 5;\n                        break;\n                    case 'Shield Final':\n                        winningPoints = 3;\n                        losingPoints = 2;\n                        break;\n                    case '11th Place Play-Off':\n                        winningPoints = 2;\n                        losingPoints = 1;\n                        break;\n                    case 'Shield Semi Finals':\n                        losingPoints = 1;\n                        break;\n                    default:\n                        winningPoints = 0;\n                        losingPoints = 0;\n                        break;\n                }\n\n                // Add points to team\n                this.teams[ winner.name ][ i ] = this.teams[ winner.name ][ i ] || winningPoints;\n                this.teams[ loser.name ][ i ] = this.teams[ loser.name ][ i ] || losingPoints;\n\n                this.teams[ winner.name ].team = winner;\n                this.teams[ loser.name ].team = loser;\n            }\n\n        }\n    }\n}"},"calculateTotals":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.WorldSeriesStandingsFull.ScheduleController.prototype.calculateTotals = function()\n{\n    var key, team, j;\n\n    for( key in this.teams )\n    {\n        team = this.teams[ key ];\n        team.total = 0;\n\n        for( j = 0; j < this.legs.length; j++ )\n        {\n            if( team[ j ] )\n            {\n                team.total += team[ j ];\n            }\n        }\n    }\n}"},"getSortedTeams":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.WorldSeriesStandingsFull.ScheduleController.prototype.getSortedTeams = function()\n{\n    this.seriesPoints.sort( function( a, b )\n    {\n        return a.position - b.position;\n    } );\n\n    var that = this,\n        teamList = _.keys( this.teams ),\n        teamEntriesArray = [],\n        key;\n\n    for( var i = 0, iLimit = this.seriesPoints.length; i < iLimit; i++ )\n    {\n        var seriesTeam = this.seriesPoints[ i ];\n        var standing = this.teams[ seriesTeam.teamDetail.naming[0].name ];\n        if( standing )\n        {\n            teamEntriesArray.push( standing );\n        }\n    }\n\n    return teamEntriesArray;\n\n}"},"refreshStandingsTable":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.WorldSeriesStandingsFull.ScheduleController.prototype.refreshStandingsTable = function()\n{\n    if( this.hasData && this.canSort )\n    {\n        var model = { teams: this.getSortedTeams(), legs: this.legs };\n\n        console.log( model );\n\n        PULSE.CLIENT.Template.publish(\n            this.template,\n            this.$tableContainer,\n            model\n        );\n    }\n}"}}}},"Content":{"Documentation":{"description":"Retrieves and receives content.","tags":[{"title":"constructor","description":null,"type":null,"name":null},{"title":"param","description":"the CMS account","type":{"type":"NameExpression","name":"String"},"name":"account"},{"title":"param","description":"the type of content","type":{"type":"NameExpression","name":"String"},"name":"type"},{"title":"param","description":"the language","type":{"type":"NameExpression","name":"String"},"name":"language"},{"title":"param","description":"the ID of the content","type":{"type":"NameExpression","name":"Number"},"name":"id"}]},"Source":"PULSE.CLIENT.RUGBY.Content = function( account, type, language, id )\n{\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n    this.urlGen = PULSE.CLIENT.RUGBY.getUrlGenerator();\n\n    this.id = id;\n\n    this.getData( account, type, language, id );\n}","prototype":{"getData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"account"},{"title":"param","description":null,"type":null,"name":"type"},{"title":"param","description":null,"type":null,"name":"language"},{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"PULSE.CLIENT.RUGBY.Content.prototype.getData = function( account, type, language, id )\n{\n    this.feeds = {};\n\n    this.feeds.contentUrl = this.urlGen.makeContentUrl( account, type, language, id );\n\n    console.log( this.feeds.contentUrl );\n    this.feeds.feedContent = 'content-' + type;\n    this.feeds.contentInterval = 360;\n    this.feeds.contentCallback = 'on' + type;\n\n    this.dm.addFeed( this.feeds.feedContent, this.feeds.contentUrl,\n        this.feeds.contentInterval, this.feeds.conentCallback, [ this ] );\n\n    this.dm.start( this.feeds.contentUrl );\n}"},"onData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.Content.prototype.onData = function( data )\n{\n    if( data )\n    {\n        for( prop in data )\n        {\n            this[ prop ] = data[ prop ];\n        }\n\n        PULSE.CLIENT.notify( PULSE.CLIENT.RUGBY.CONTENT_EVENTS.CONTENT_UPDATE, {\n            id: that.id,\n            success: true\n        } );\n    }\n}"}}},"Countries":{"Documentation":{"description":"Countries data retrieval, receiving and storage.","tags":[{"title":"constructor","description":null,"type":null,"name":null},{"title":"param","description":"array of strings","type":{"type":"NameExpression","name":"Array"},"name":"types"},{"title":"param","description":"array of fixtures","type":{"type":"NameExpression","name":"Array"},"name":"fixtures"},{"title":"param","description":"array of sport names, e.g., \"mru\" etc.","type":{"type":"NameExpression","name":"Array"},"name":"sports"}]},"Source":"PULSE.CLIENT.RUGBY.Countries = function( types, fixtures, sports )\n{\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n    this.urlGen = PULSE.CLIENT.RUGBY.getUrlGenerator();\n\n    this.countries = [];\n\n    if( types && types.length > 0 )\n    {\n        this.types = types.join( ',' );\n    }\n\n    if( sports && sports.length > 0 )\n    {\n        this.sports = sports.join( ',' );\n    }\n\n    this.page = 0;\n    this.pageSize = 100;\n\n    this.getData();\n}","prototype":{"getData":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Countries.prototype.getData = function()\n{\n    var params = {\n        types : this.types,\n        sports : this.sports,\n        pageSize : this.pageSize,\n        page : this.page,\n        language: PULSE.CLIENT.LANGUAGE\n    };\n\n    this.feeds = {};\n    this.feeds.contentUrl = this.urlGen.makeDataUrl( [ 'country' ], params );\n\n    this.feeds.feedContent = 'country';\n    this.feeds.contentInterval = 360;\n    this.feeds.contentCallback = 'onCountry';\n\n    this.dm.addFeed( this.feeds.feedContent, this.feeds.contentUrl,\n        this.feeds.contentInterval, this.feeds.conentCallback, [ this ] );\n\n    this.dm.start( this.feeds.contentUrl );\n}"},"onData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.Countries.prototype.onData = function( data )\n{\n    if( data )\n    {\n\n        for( var i = 0; i < data.content.countries.length; i++ )\n        {\n            var countryObject = { name : data.content.countries[ i ].name, id : data.content.countries[ i ].id };\n\n            var teamIds = [];\n            if( data.content.countries[ i ].teams )\n            {\n                for( var j = 0; j < data.content.countries[ i ].teams.length; j++ )\n                {\n                    teamIds.push( data.content.countries[ i ].teams[ j ].id );\n                }\n            }\n            countryObject[ 'teams' ] = teamIds.join( ',' );\n\n            if ( teamIds.length > 0 )\n            {\n                this.countries[ data.content.countries[ i ].id ] = countryObject;\n            }\n        }\n\n        this.numPages = data.pageInfo.numPages;\n\n        if( this.page < this.numPages - 1 )\n        {\n            this.page = this.page + 1;\n            this.getData();\n        }\n        else\n        {\n            PULSE.CLIENT.notify( PULSE.CLIENT.RUGBY.DATA_EVENTS.COUNTRIES_UPDATE, {\n                id: that.id,\n                success: true\n            } );\n\n        }\n\n        // for( prop in data )\n        // {\n        //     this[ prop ] = data[ prop ];\n        // }\n    }\n}"},"getCountryById":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"countryId"}]},"Source":"PULSE.CLIENT.RUGBY.Countries.prototype.getCountryById = function( countryId )\n{    if ( countryId in this.countries )\n    {\n        return this.countries[ countryId ];\n    }\n}"},"getCountriesByIds":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"ids"}]},"Source":"PULSE.CLIENT.RUGBY.Countries.prototype.getCountriesByIds = function ( ids )\n{\n    var returnCountries = [];\n    for( var i = 0; i < ids.length; i++ )\n    {\n        if ( ids[ i ] in this.countries )\n        {\n            returnCountries.push( this.getCountryById( ids[ i ] ) );\n        }\n    }\n\n    return returnCountries;\n}"}}},"EventGroup":{"Documentation":{"description":"Event Group data handler","tags":[{"title":"constructor","description":null,"type":null,"name":null}]},"Source":"PULSE.CLIENT.RUGBY.EventGroup = function( eventGroup, config )\n{\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n    this.urlGen = new PULSE.CLIENT.RUGBY.getUrlGenerator();\n\n    this.eventGroup = eventGroup;\n    this.pageNum = 0;\n    this.pageSize = 0;\n\n    this.pastEvents = false;\n\n    if ( config )\n    {\n        if ( config.pageSize )\n        {\n            this.pageSize = config.pageSize;\n        }\n        if ( config.pageNum )\n        {\n            this.pageNum = config.pageNum;\n        }\n        if ( config.pastEvents )\n        {\n            this.pastEvents = config.pastEvents;\n        }\n    }\n\n    this.events = [];\n    this.matchMap = {};\n}","prototype":{"getSingleEvent":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"eventId"}]},"Source":"PULSE.CLIENT.RUGBY.EventGroup.prototype.getSingleEvent = function( eventId )\n{\n    this.feeds = {};\n    var language = PULSE.CLIENT.LANGUAGE;\n\n    this.feeds.eventUrl = this.urlGen.makeEventUrl( PULSE.CLIENT.CMS_ACCOUNT, eventId, language );\n\n    this.feeds.feedEvent = 'event';\n    this.feeds.eventInterval = 0;\n    this.feeds.eventCallback = 'onEvent';\n\n    this.dm.addFeed( this.feeds.feedEvent, this.feeds.eventUrl,\n        this.feeds.eventInterval, this.feeds.eventCallback, [ this ] );\n\n    this.dm.start( this.feeds.eventUrl );\n}"},"getEventGroup":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.EventGroup.prototype.getEventGroup = function()\n{\n    this.feeds = {};\n\n    this.feeds.eventUrl = this.urlGen.makeEventGroupUrl( PULSE.CLIENT.CMS_ACCOUNT, this.eventGroup )\n\n    this.feeds.feedEvent = 'event';\n    this.feeds.eventInterval = 0;\n    this.feeds.eventCallback = 'onEvent';\n\n    this.dm.addFeed( this.feeds.feedEvent, this.feeds.eventUrl,\n        this.feeds.eventInterval, this.feeds.eventCallback, [ this ] );\n\n    this.dm.start( this.feeds.eventUrl );\n}"},"getEvents":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.EventGroup.prototype.getEvents = function( config )\n{\n    this.feeds = {};\n\n    var pageSize = this.pageSize,\n        pageNum = this.pageNum;\n\n    if ( config )\n    {\n        if ( config.pageSize )\n        {\n            pageSize = config.pageSize;\n        }\n        if ( config.pageNum )\n        {\n            pageNum = config.pageNum;\n        }\n    }\n\n    this.feeds.eventUrl = this.urlGen.makeEventGroupUrl( PULSE.CLIENT.CMS_ACCOUNT, this.eventGroup, 'events', PULSE.CLIENT.LANGUAGE, {\n        \"pageSize\" : pageSize,\n        \"page\" : pageNum\n    } );\n\n    this.feeds.feedEvent = 'eventList';\n    this.feeds.eventInterval = 0;\n    this.feeds.eventCallback = 'onEventList';\n\n    this.dm.addFeed( this.feeds.feedEvent, this.feeds.eventUrl,\n        this.feeds.eventInterval, this.feeds.eventCallback, [ this ] );\n\n    this.dm.start( this.feeds.eventUrl );\n}"},"searchEvents":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.EventGroup.prototype.searchEvents = function( config )\n{\n    this.feeds = {};\n\n    var radius,\n        city,\n        startDate,\n        endDate,\n        categories,\n        latitude,\n        longitude,\n        references,\n        pageSize = this.pageSize,\n        pageNum = this.pageNum;\n\n    if ( config )\n    {\n        if ( config.longitude && config.lat )\n        {\n            latitude = config.lat.toString();\n            longitude = config.longitude.toString();\n        }\n        if ( config.radius )\n        {\n            radius = config.radius.toString();\n        }\n        if ( config.city )\n        {\n            city = config.city;\n        }\n        if ( config.date )\n        {\n            startDate = config.date;\n            endDate = startDate + 86400000;\n        }\n        else if( config.startDate || config.endDate )\n        {\n            startDate = config.startDate;\n            endDate = config.endDate;\n        }\n        else\n        {\n            if ( !this.pastEvents )\n            {\n                var today = new Date();\n                startDate = today.getTime();\n            }\n        }\n        if ( config.categories )\n        {\n            categories = config.categories;\n        }\n        if( config.teams )\n        {\n            var refs = $.map( config.teams, function( teamId ) { return 'rugby_team:' + teamId; } );\n            references = ( references ? references + ',' : '' ) + refs.join( ',' );\n        }\n        if ( config.pageSize )\n        {\n            pageSize = config.pageSize;\n        }\n        if ( config.pageNum )\n        {\n            pageNum = config.pageNum;\n        }\n    }\n\n    this.feeds.eventUrl = this.urlGen.makeEventGroupUrl( PULSE.CLIENT.CMS_ACCOUNT, this.eventGroup, 'events', PULSE.CLIENT.LANGUAGE, {\n        \"pageSize\" : pageSize,\n        \"page\" : pageNum,\n        \"radius\" : radius,\n        \"city\" : city,\n        \"startDate\" : startDate,\n        \"endDate\" : endDate,\n        \"categories\" : categories,\n        \"references\": references,\n        \"latitude\" : latitude,\n        \"longitude\" : longitude,\n        \"highlightFirst\" : true,\n        \"onlyRestrictedEvents\": config.onlyRestrictedEvents || false\n    } );\n\n    this.feeds.feedEvent = 'eventList';\n    this.feeds.eventInterval = 0;\n    this.feeds.eventCallback = 'onEventList';\n\n    this.dm.addFeed( this.feeds.feedEvent, this.feeds.eventUrl,\n        this.feeds.eventInterval, this.feeds.eventCallback, [ this ] );\n\n    this.dm.start( this.feeds.eventUrl );\n}"},"onData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"PULSE.CLIENT.RUGBY.EventGroup.prototype.onData = function( data, id )\n{\n    if( data )\n    {\n        if ( data.content || data.pagedResult || data.eventResponse )\n        {\n            if ( data.pagedResult )\n            {\n                data.content = data.pagedResult.content;\n                this.pageInfo = data.pagedResult.pageInfo;\n            }\n\n            if ( data.pageInfo )\n            {\n                this.pageInfo = data.pageInfo;\n            }\n\n            if ( data.content )\n            {\n                if ( data.content.featuredEvents )\n                {\n                    this.featuredEvents = data.content.featuredEvents;\n                }\n                if ( data.content.searchResults )\n                {\n                    this.events = data.content.searchResults;\n                }\n                else\n                {\n                    this.events = data.content;\n                }\n            }\n            else if ( data.eventResponseList )\n            {\n                this.events = data.eventResponseList\n            }\n            else if ( data.eventResponse )\n            {\n                this.events = [ data.eventResponse ];\n            }\n\n            this.getEventsModel();\n        }\n        else if ( data.eventGroupResponse )\n        {\n            this.eventGroupData = data.eventGroupResponse;\n            this.getEventGroupModel();\n        }\n    }\n}"},"onError":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"PULSE.CLIENT.RUGBY.EventGroup.prototype.onError = function( id )\n{\n    PULSE.CLIENT.Log( 'error retrieving feed: ' + id );\n}"},"getEventGroupModel":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.EventGroup.prototype.getEventGroupModel = function()\n{\n    for ( var key in this.eventGroupData )\n    {\n        this[ key ] = this.eventGroupData[ key ];\n    }\n\n    PULSE.CLIENT.notify( 'eventGroup/group', { success: true,\n                                            eventGroup : this.eventGroup } );\n}"},"stripHtml":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"html"}]},"Source":"PULSE.CLIENT.RUGBY.EventGroup.prototype.stripHtml = function( html )\n{\n   var tmp = document.createElement(\"DIV\");\n   tmp.innerHTML = html;\n   return tmp.textContent || tmp.innerText || \"\";\n}"},"getEventModelForEvent":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"thisEvent"}]},"Source":"PULSE.CLIENT.RUGBY.EventGroup.prototype.getEventModelForEvent = function( thisEvent )\n{\n    var model = {};\n\n    for ( var key in thisEvent )\n    {\n        model[ key ] = thisEvent[ key ];\n    }\n\n    if ( model.coordinates && model.coordinates.length > 0 )\n    {\n        model.coordinates = { longitude : model.coordinates[ 1 ], lat : model.coordinates[ 0 ] };\n    }\n\n\n    if ( model.details )\n    {\n        for ( var j = 0; j < model.details.length; j++ )\n        {\n            if ( model.details[ j ].sectionText && model.details[ j ].sectionTitle && model.details[ j ].sectionTitle.length > 0 && model.details[ j ].sectionText.length > 0 )\n            {\n                var sectionText = this.stripHtml( model.details[ j ].sectionText );\n                sectionText = sectionText.replace(/^[.\\s]+|[.\\s]+$/g, \"\");\n                sectionText = sectionText.replace(/\\s{2,}/g, '</br></br>');\n                var sectionTitle = model.details[ j ].sectionTitle.replace(/^[.\\s]+|[.\\s]+$/g, \"\");\n                model[ sectionTitle ] = sectionText;\n            }\n        }\n    }\n\n    if ( model.contactDetails )\n    {\n        for ( key in model.contactDetails )\n        {\n            var detail = model.contactDetails[ key ];\n            if ( detail && detail.length > 0 )\n            {\n                model.contactDetails[ key ] = detail.replace(/^(https?|http):\\/\\//, '');\n            }\n        }\n    }\n\n    var types = [];\n    if ( model.categories )\n    {\n        for ( var j = 0; j < model.categories.length; j++ )\n        {\n            types.push( model.categories[ j ].title );\n        }\n    }\n    model.types = types;\n\n    if ( model.dates )\n    {\n        for ( var j = 0; j < model.dates.length; j++ )\n        {\n            var startDate = model.dates[ j ].startDate,\n                endDate = model.dates[ j ].endDate\n            if ( startDate && endDate )\n            {\n                var sDate = PULSE.CLIENT.DateUtil.getUtcDateObject( PULSE.CLIENT.DateUtil.parseDateTime( startDate ) ),\n                    eDate = PULSE.CLIENT.DateUtil.getUtcDateObject( PULSE.CLIENT.DateUtil.parseDateTime( endDate ) );\n\n                if ( sDate.getDate() == eDate.getDate() )\n                {\n                    model.dates[ j ].sameDay = true;\n                    if ( sDate.getTime() == eDate.getTime() )\n                    {\n                       model.dates[ j ].sameTime = true;\n                    }\n                }\n            }\n        }\n\n        model.dates.sort( function( a, b ) {\n            var abbrA = a.startDate, abbrB = b.startDate;\n            if( abbrA < abbrB ) //sort date earliest\n            {\n                 return -1;\n            }\n            else\n            {\n                 return 1;\n            }\n             return 0; //default return value (no sorting)\n        } );\n\n    }\n    return model;\n}"},"getEventsModel":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.EventGroup.prototype.getEventsModel = function()\n{\n    var eventIds = [],\n        featuredIds = [],\n        nonfeatured = [];\n\n    if ( this.featuredEvents && this.featuredEvents.length > 0 )\n    {\n        for ( var i = 0; i < this.featuredEvents.length; i++ )\n        {\n            this.featuredEvents[ i ] = this.getEventModelForEvent( this.featuredEvents[ i ] );\n            if  ( !( this.featuredEvents[ i ].id in this.matchMap ) )\n            {\n                this.matchMap[ this.featuredEvents[ i ].id ] = this.featuredEvents[ i ];\n            }\n            featuredIds.push( this.featuredEvents[ i ].id );\n        }\n    }\n\n    if ( this.events && this.events.length > 0 )\n    {\n        for ( var i = 0; i < this.events.length; i++ )\n        {\n            this.events[ i ] = this.getEventModelForEvent( this.events[ i ] );\n            if  ( !( this.events[ i ].id in this.matchMap ) )\n            {\n                this.matchMap[ this.events[ i ].id ] = this.events[ i ];\n            }\n            eventIds.push( this.events[ i ].id );\n        }\n    }\n\n    if ( this.featuredEvents && this.events && this.featuredEvents.length > 0 && this.events.length > 0 )\n    {\n        for ( var i = 0; i < this.events.length; i++ )\n        {\n            if ( $.inArray( this.events[ i ].id, featuredIds ) < 0 )\n            {\n                nonfeatured.push( this.events[ i ] );\n            }\n        }\n        this.events = this.featuredEvents.concat( nonfeatured );\n    }\n\n\n    PULSE.CLIENT.notify( 'eventGroup/events', { success: true,\n                                            eventGroup : this.eventGroup,\n                                            events : eventIds,\n                                            featured : featuredIds,\n                                            pageInfo : this.pageInfo } );\n}"},"getEvent":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"eventId"}]},"Source":"PULSE.CLIENT.RUGBY.EventGroup.prototype.getEvent = function( eventId )\n{\n    if ( this.matchMap && eventId )\n    {\n        return this.matchMap[ eventId ]\n    }\n    else\n    {\n        return undefined;\n    }\n}"}}},"HeadToHead":{"prototype":{"getHeadToHeadData":{"Documentation":{"description":"Used to directly request head to head stats data","tags":[{"title":"param","description":"Id of the first team","type":{"type":"NameExpression","name":"Int"},"name":"team1"},{"title":"param","description":"Id of the second team","type":{"type":"NameExpression","name":"String"},"name":"team2"},{"title":"param","description":"Optional configurations for the feed","type":{"type":"NameExpression","name":"Object"},"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.HeadToHead.prototype.getHeadToHeadData = function( team1, team2, config )\n{\n    var pathArray = [ 'stats', 'team', team1, 'hth', team2 ];\n\n    if ( !config )\n    {\n        config = {};\n    }\n\n    this.feeds.statsUrl = this.urlGenerator.makeDataUrl( pathArray, { language : PULSE.CLIENT.LANGUAGE } );\n    this.feeds.feedStats = 'headToHead';\n    this.feeds.statsInterval = config.interval || 0;\n    this.feeds.statsCallback = config.callback || 'onHeadToHeadStats';\n\n    this.dm.addFeed( this.feeds.feedStats, this.feeds.statsUrl,\n        this.feeds.statsInterval, this.feeds.statsCallback, [ this ] );\n\n    this.dm.start( this.feeds.statsUrl );\n\n}"},"onData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.HeadToHead.prototype.onData"},{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"PULSE.CLIENT.RUGBY.HeadToHead.prototype.onData = function( data, id )\n{\n    if( id === this.feeds.feedStats )\n    {\n        var params = this.setStats( data );\n        params.success = true;\n        PULSE.CLIENT.notify( PULSE.CLIENT.RUGBY.DATA_HEADTOHEAD.STATS_UPDATE, params );\n    }\n}"},"setStats":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.HeadToHead.prototype.setStats = function( data )\n{\n    var teams = [], team1, team2;\n\n    if ( data && data.teams )\n    {\n        for ( var i = 0; i < data.teams.length; i++ )\n        {\n            var thisTeam = data.teams[ i ].team;\n            if ( thisTeam )\n            {\n                teams.push( { id : thisTeam.id, stats : data.teams[ i ] } );\n            }\n        }\n\n        if ( teams.length > 0 )\n        {\n            team1 = teams[ 0 ].id;\n        }\n\n        if ( teams.length > 1 )\n        {\n            team2 = teams[ 1 ].id\n        }\n\n\n        if ( data.matches && data.matches.length > 0 )\n        {\n            data.matches.reverse();\n            for ( var i = 0; i < data.matches.length; i++ )\n            {\n                var thisData = data.matches[ i ];\n                data.matches[ i ] = new PULSE.CLIENT.RUGBY.Match( null, data.matches[ i ].matchId );\n                data.matches[ i ].setScheduleData( thisData );\n            }\n        }\n\n        for ( var i = 0; i < data.teams.length; i++ )\n        {\n            var thisTeam = data.teams[ i ].team;\n            if ( ! this.teams[ thisTeam.id ] )\n            {\n                this.teams[ thisTeam.id ] = {};\n            }\n            this.teams[ thisTeam.id ].team = thisTeam;\n            if ( ! this.teams[ thisTeam.id ].headToHead )\n            {\n                this.teams[ thisTeam.id ].headToHead = {};\n            }\n\n            var opposingId = team1\n            var oppIndex = i - 1;\n            if ( thisTeam.id === team1 )\n            {\n                opposingId = team2;\n                oppIndex = i + 1;\n            }\n\n            this.teams[ thisTeam.id ].headToHead[ opposingId ] = {};\n            this.teams[ thisTeam.id ].headToHead[ opposingId ].matches = data.matches;\n            this.teams[ thisTeam.id ].headToHead[ opposingId ].stats = {};\n            this.teams[ thisTeam.id ].headToHead[ opposingId ].stats[ thisTeam.id ] = teams[ i ].stats;\n            this.teams[ thisTeam.id ].headToHead[ opposingId ].stats[ opposingId ] = teams[ oppIndex ].stats;\n            this.teams[ thisTeam.id ].headToHead[ opposingId ].stats.draws = data.draws;\n        }\n    }\n\n    return {\n        team1: team1,\n        team2: team2\n    };\n}"},"findHeadToHead":{"Documentation":{"description":"Tries to find head to head stats given two teams","tags":[{"title":"param","description":"TeamId of team1","type":{"type":"NameExpression","name":"String"},"name":"team1"},{"title":"param","description":"TeamId of team2","type":{"type":"NameExpression","name":"String"},"name":"team2"},{"title":"return","description":"Returns a list of stats for the matches between two teams","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.HeadToHead.prototype.findHeadToHead = function( team1, team2 )\n{\n    if ( this.teams && this.teams[ team1 ] && this.teams[ team1 ].headToHead && this.teams[ team1 ].headToHead[ team2 ] )\n    {\n        return this.teams[ team1 ].headToHead[ team2 ];\n    }\n    return undefined;\n}"},"getMatchesPlayed":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.HeadToHead.prototype.getMatchesPlayed"},{"title":"param","description":null,"type":null,"name":"team1"},{"title":"param","description":null,"type":null,"name":"team2"},{"title":"param","description":null,"type":null,"name":"stat"}]},"Source":"PULSE.CLIENT.RUGBY.HeadToHead.prototype.getMatchesPlayed = function( team1, team2, stat )\n{\n    var thisHeadToHead = this.findHeadToHead( team1, team2 );\n\n    return thisHeadToHead.matches;\n}"},"getDraws":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"team1"},{"title":"param","description":null,"type":null,"name":"team2"},{"title":"param","description":null,"type":null,"name":"stat"}]},"Source":"PULSE.CLIENT.RUGBY.HeadToHead.prototype.getDraws = function( team1, team2, stat )\n{\n    var thisHeadToHead = this.findHeadToHead( team1, team2 );\n\n    if ( thisHeadToHead.stats )\n    {\n        return thisHeadToHead.stats.draws;\n    }\n    return 0;\n}"},"getStat":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"team1"},{"title":"param","description":null,"type":null,"name":"team2"},{"title":"param","description":null,"type":null,"name":"stat"}]},"Source":"PULSE.CLIENT.RUGBY.HeadToHead.prototype.getStat = function( team1, team2, stat )\n{\n    var thisHeadToHead = this.findHeadToHead( team1, team2 );\n\n    if ( thisHeadToHead && thisHeadToHead.stats[ team1 ] && thisHeadToHead.stats[ team1 ][ stat ] )\n    {\n        return thisHeadToHead.stats[ team1 ][ stat ];\n    }\n\n    return 0;\n}"},"getStatComparisonModel":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"team1"},{"title":"param","description":null,"type":null,"name":"team2"},{"title":"param","description":null,"type":null,"name":"stat"}]},"Source":"PULSE.CLIENT.RUGBY.HeadToHead.prototype.getStatComparisonModel = function( team1, team2, stat )\n{\n    var thisHeadToHead = this.findHeadToHead( team1, team2 );\n    var statsModel = {};\n\n    if ( thisHeadToHead && thisHeadToHead.stats[ team1 ] && thisHeadToHead.stats[ team1 ][ stat ] )\n    {\n        statsModel.stats = [ thisHeadToHead.stats[ team1 ][ stat ], thisHeadToHead.stats[ team2 ][ stat ] ];\n\n        var largerIndex = -1;\n        if ( parseInt( statsModel.stats[ 0 ] ) > parseInt( statsModel.stats[ 1 ] ) )\n        {\n            largerIndex = 0\n        }\n        else if ( parseInt( statsModel.stats[ 1 ] ) > parseInt( statsModel.stats[ 0 ] ) )\n        {\n            largerIndex = 1;\n        }\n\n        statsModel.largerIndex = largerIndex;\n    }\n\n    return statsModel;\n}"}},"Documentation":{"description":"Constructor for the head to head object","tags":[{"title":"param","description":"Tournament","type":{"type":"NameExpression","name":"Object"},"name":"tournament"}]},"Source":"PULSE.CLIENT.RUGBY.HeadToHead = function( tournament )\n{\n    this.urlGenerator = PULSE.CLIENT.RUGBY.getUrlGenerator();\n    this.feeds = {};\n    this.teams = {};\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n    this.tournament = tournament || window.WidgetController.getTournamentByName( 'Other' );\n}"},"LiveBlog":{"Documentation":{"description":"Live Blog Data Handler","tags":[{"title":"constructor","description":null,"type":null,"name":null},{"title":"param","description":"the ID of the live blog","type":{"type":"NameExpression","name":"Number"},"name":"id"},{"title":"param","description":"either the jQuery object of the container or the string selector","type":{"type":"NameExpression","name":"Object"},"name":"container"},{"title":"param","description":"configuration specifics","type":{"type":"NameExpression","name":"Object"},"name":"config"},{"title":"param","description":"[\"data-max-entries\"] - number of items to retrieve at any one time","type":{"type":"NameExpression","name":"Object"},"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlog = function( id, container, config )\n{\n    this.$container = $( container );\n    this.maxEnties = config.maxEntries || 50;\n    this.refreshInterval = config.refreshInterval || 30;\n    this.order = config.order;\n    this.id = id;\n\n    this.HEADER_UPDATE_EVENT = PULSE.CLIENT.RUGBY.LIVE_BLOG_EVENTS.HEADER_UPDATE;\n    this.STATUS_UPDATE_EVENT = PULSE.CLIENT.RUGBY.LIVE_BLOG_EVENTS.STATUS_UPDATE;\n    this.ENTRIES_UPDATE_EVENT = PULSE.CLIENT.RUGBY.LIVE_BLOG_EVENTS.ENTRIES_UPDATE;\n    this.ENTRIES_ADD_EVENT = PULSE.CLIENT.RUGBY.LIVE_BLOG_EVENTS.ENTRIES_ADD;\n    this.NO_DATA_EVENT = PULSE.CLIENT.RUGBY.LIVE_BLOG_EVENTS.NO_DATA;\n    this.ERROR_EVENT = PULSE.CLIENT.RUGBY.LIVE_BLOG_EVENTS.ERROR;\n\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n    this.urlGenerator = PULSE.CLIENT.RUGBY.getUrlGenerator();\n\n    this.lastUpdateTime = +new Date();\n    this.header = undefined;\n    this.entries = [];\n}","prototype":{"getHeader":{"Documentation":{"description":"Get the header object data","tags":[{"title":"return","description":"the data from the API, or empty object","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlog.prototype.getHeader = function()\n{\n    return this.header;\n}"},"getEntries":{"Documentation":{"description":"Retrieval of the entry array data","tags":[{"title":"public","description":null,"type":null},{"title":"param","description":"\"asc\" or \"desc\", \"desc\" by default","type":{"type":"NameExpression","name":"String"},"name":"order"},{"title":"return","description":"the entries","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlog.prototype.getEntries = function( order )\n{\n    var array = [];\n    if( order === 'asc' )\n    {\n        for( var i = this.entries.length - 1 ; i >= 0; i-- )\n        {\n            array.push( this.entries[i] );\n        }\n        return array;\n    }\n\n    return this.entries;\n}"},"getEntryById":{"Documentation":{"description":"Retrieval of an entry data object by ID","tags":[{"title":"public","description":null,"type":null},{"title":"param","description":null,"type":{"type":"NameExpression","name":"String"},"name":"id"},{"title":"return","description":"the data for that specific entry, or nil, if it doesn't exist","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlog.prototype.getEntryById = function( id )\n{\n    for( var i = 0, iLimit = this.entries.length; i < iLimit; i++ )\n    {\n        entry = this.entries[ i ];\n        if( id && entry.getId() == id )\n        {\n            return entry;\n        }\n    }\n}"},"getEntryNeighbours":{"Documentation":{"description":"Get the next and previous entry objects for a specific entry","tags":[{"title":"param","description":null,"type":{"type":"NameExpression","name":"String"},"name":"id"},{"title":"return","description":null,"type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlog.prototype.getEntryNeighbours = function( entry )\n{\n    var neighbours = {\n        prev: undefined,\n        next: undefined\n    };\n\n    for( var i = 0, iLimit = this.entries.length; i < iLimit; i++ )\n    {\n        if( this.entries[ i ].getId() == entry.getId() )\n        {\n            if( this.entries[ i - 1 ] )\n            {\n                neighbours.prev = this.entries[ i - 1 ];\n            }\n            if( this.entries[ i + 1 ] )\n            {\n                neighbours.next = this.entries[ i + 1 ];\n            }\n        }\n    }\n    return neighbours;\n}"},"getEntriesAbove":{"Documentation":{"description":"Get all entries 'newer' position-wise than a particular position","tags":[{"title":"param","description":"the entry position","type":{"type":"NameExpression","name":"Number"},"name":"position"},{"title":"return","description":"all entries that are above that position","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"Entry"}]}}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlog.prototype.getEntriesAbove = function( position )\n{\n    var entries = [];\n    for( var i = 0, iLimit = this.entries.length; i < iLimit; i++ )\n    {\n        if( this.entries[ i ].getPosition() > position )\n        {\n            entries.push( this.entries[ i ] );\n        }\n    }\n\n    return entries;\n}"},"getBlogData":{"Documentation":{"description":"Send a request for the blog data","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LiveBlog.prototype.getBlogData = function()\n{\n    this.active = true;\n    this.getData( 'all', true );\n}"},"requestUpdatedData":{"Documentation":{"description":"Send a call to the data manager to get newest data changes","tags":[{"title":"public","description":null,"type":null},{"title":"return","description":null,"type":{"type":"NameExpression","name":"nil"}}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlog.prototype.requestUpdatedData = function( lastUpdated )\n{\n    var feedId = this.id + '-update';\n    var url = this.urlGenerator.makeNewerThanLiveBlogUrl( this.id, lastUpdated, this.maxEntries );\n\n    this.dm.addFeed( feedId, url, 0, 'onLiveBlog', [ this ] );\n    this.dm.start( url );\n}"},"loadMore":{"Documentation":{"description":"Send a call to the data manager to get newest data changes","tags":[{"title":"public","description":null,"type":null},{"title":"return","description":null,"type":{"type":"NameExpression","name":"nil"}}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlog.prototype.loadMore = function()\n{\n    this.getData( this.order === 'descending' ? 'below' : 'above', true );\n}"},"setOrder":{"Documentation":{"description":"Set the order of the entries: ascending/descending","tags":[{"title":"public","description":null,"type":null},{"title":"return","description":null,"type":{"type":"NameExpression","name":"nil"}}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlog.prototype.setOrder = function( direction )\n{\n    if( this.order !== direction )\n    {\n        this.order = direction;\n\n        this.entries = [];\n\n        this.getData( 'all', true );\n    }\n}"},"activate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LiveBlog.prototype.activate = function()\n{\n    this.active = true;\n    this.initUpdate();\n}"},"deactivate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LiveBlog.prototype.deactivate = function()\n{\n    this.active = false;\n    this.cancelUpdate();\n}"},"getData":{"Documentation":{"description":"Send a call to the data manager for live blog data","tags":[{"title":"private","description":null,"type":null},{"title":"param","description":"all for initial load, updates for changes and old for retroactive retrieval","type":{"type":"NameExpression","name":"String"},"name":"type"},{"title":"param","description":"whether to start the data retrieval immediately or not","type":{"type":"NameExpression","name":"Boolean"},"name":"start"},{"title":"return","description":null,"type":{"type":"NameExpression","name":"nil"}}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlog.prototype.getData = function( type, start, config )\n{\n    var lastPosition = this.entries.length ? _.last( this.entries ).getPosition() : undefined;\n    var feedId = config && config.id ? config.id : this.id + '-' + type;\n    var interval = config && config.interval ? config.interval : 0;\n\n    switch( type )\n    {\n        case 'above':\n            var url = this.urlGenerator.makeAbovePositionBlogUrl( this.id, lastPosition, this.maxEntries, { direction: this.order } );\n            break;\n        case 'below':\n            var url = this.urlGenerator.makeBelowPositionBlogUrl( this.id, lastPosition, this.maxEntries, { direction: this.order } );\n            break;\n        case 'blogs':\n            var url = this.urlGenerator.makeLiveBlogsQueryUrl( { blogId: this.id } );\n            break;\n        default:\n            var url = this.urlGenerator.makeLiveBlogUrl( this.id, this.maxEntries, { direction: this.order } );\n            break;\n    }\n\n    this.dm.addFeed( feedId, url, interval, 'onLiveBlog', [ this ] );\n\n    if( start )\n    {\n        this.dm.start( url );\n    }\n}"},"stopData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"type"}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlog.prototype.stopData = function( type )\n{\n    switch( type )\n    {\n        case 'above':\n            var url = this.urlGenerator.makeAbovePositionBlogUrl( this.id, lastPosition, this.maxEntries, { direction: this.order } );\n            break;\n        case 'below':\n            var url = this.urlGenerator.makeBelowPositionBlogUrl( this.id, lastPosition, this.maxEntries, { direction: this.order } );\n            break;\n        case 'blogs':\n            var url = this.urlGenerator.makeLiveBlogsQueryUrl( { blogId: this.id } );\n            break;\n        default:\n            var url = this.urlGenerator.makeLiveBlogUrl( this.id, this.maxEntries, { direction: this.order } );\n            break;\n    }\n\n     this.dm.stop( url );\n}"},"onData":{"Documentation":{"description":"Data manager calls this once it receives data without errors","tags":[{"title":"private","description":null,"type":null},{"title":"param","description":"payload","type":{"type":"NameExpression","name":"Object"},"name":"data"},{"title":"param","description":"the given ID of the feed","type":{"type":"NameExpression","name":"String"},"name":"id"},{"title":"return","description":null,"type":{"type":"NameExpression","name":"nil"}}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlog.prototype.onData = function( data, id )\n{\n    if( id === this.id + '-blogs' )\n    {\n        if( data && data.content && data.content.length &&\n            data.content[ 0 ].status && this.status != data.content[ 0 ].status )\n        {\n            this.status = data.content[ 0 ].status;\n            this.$container.trigger( this.STATUS_UPDATE_EVENT, {\n                status: this.status,\n                id: this.id\n            } );\n\n            if( this.status === 'CLOSED' )\n            {\n                this.stopData( 'blogs' );\n            }\n        }\n    }\n    else if( id.startsWith( this.id ) )\n    {\n        if( _.isArray( data ) )\n        {\n            var dataEntries = data;\n            data = {};\n            data.entries = dataEntries;\n        }\n\n        if( data.status )\n        {\n            if( !this.status )\n            {\n                this.status = data.status;\n\n                if( this.status !== 'CLOSED' )\n                {\n                    this.getData( 'blogs', true, { interval: 60 } );\n                }\n            }\n\n            if( this.status && this.status != data.status )\n            {\n                this.status = data.status;\n                this.$container.trigger( this.STATUS_UPDATE_EVENT, { status: data.id } );\n\n                if( this.status === 'CLOSED' )\n                {\n                    this.stopData( 'blogs' );\n                }\n            }\n        }\n\n        if( data.entries && data.entries.length )\n        {\n            // var top = id != this.id + '-old';\n\n            data.entries.sort( this.order === 'descending' ? this.sortDescending : this.sortAscending );\n\n            var entries = this.separateEntries( data.entries );\n\n            this.entries = entries.created.concat( this.entries );\n\n            this.entries.sort( this.order === 'descending' ? this.sortDescending : this.sortAscending );\n\n            if( entries.created.length )\n            {\n                this.$container.trigger( this.ENTRIES_ADD_EVENT, { id: this.id, entries: entries.created } );\n            }\n            if( entries.updated.length )\n            {\n                this.$container.trigger( this.ENTRIES_UPDATE_EVENT, { id: this.id, entries: entries.updated } );\n            }\n        }\n        else\n        {\n            this.$container.trigger( this.NO_DATA_EVENT, { id: this.id } );\n        }\n\n        if( data.header )\n        {\n            if( !this.header )\n            {\n                this.header = new PULSE.CLIENT.RUGBY.LiveBlogHeader( this, data.header );\n                this.$container.trigger( this.HEADER_UPDATE_EVENT, { id: this.id } );\n            }\n            else if( data.header.updateTime != this.header.getUpdateTime() )\n            {\n                this.header.update( data.header );\n                this.$container.trigger( this.HEADER_UPDATE_EVENT, { id: this.id } );\n            }\n        }\n\n        this.initUpdate();\n    }\n}"},"initUpdate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LiveBlog.prototype.initUpdate = function()\n{\n    if( !this.updateStarted && this.active )\n    {\n        var that = this;\n        this.updateInterval = setInterval( function()\n        {\n            that.requestUpdatedData( that.getLatestUpdateTime() );\n            that.updateStarted = true;\n        }, this.refreshInterval * 1000 );\n    }\n}"},"cancelUpdate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.LiveBlog.prototype.cancelUpdate = function()\n{\n    this.updateStarted = false;\n    if( this.updateInterval )\n    {\n        clearInterval( this.updateInterval );\n    }\n}"},"sortAscending":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"a"},{"title":"param","description":null,"type":null,"name":"b"}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlog.prototype.sortAscending = function( a, b )\n{\n    return a.position - b.position;\n}"},"sortDescending":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"a"},{"title":"param","description":null,"type":null,"name":"b"}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlog.prototype.sortDescending = function( a, b )\n{\n    return b.position - a.position;\n}"},"onError":{"Documentation":{"description":"Data manager calls this when retrieving the feed causes an error (feed doesn't exist, 500 etc.)","tags":[{"title":"private","description":null,"type":null},{"title":"param","description":" the ID of the feed request","type":{"type":"NameExpression","name":"String"},"name":"id"},{"title":"return","description":null,"type":{"type":"NameExpression","name":"nil"}}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlog.prototype.onError = function( id )\n{\n    if( id == this.id && data )\n    {\n        this.$container.trigger( this.ERROR_EVENT, { id: this.id } );\n    }\n}"},"separateEntries":{"Documentation":{"description":"Splits out entries into entries which are already recorded in the system and new ones","tags":[{"title":"private","description":null,"type":null},{"title":"param","description":"the array of entries from the data manager payload","type":{"type":"NameExpression","name":"Array"},"name":"entries"},{"title":"return","description":"an object with two arrays: new and updated.","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlog.prototype.separateEntries = function( entries )\n{\n    var result = {\n        created: [],\n        updated: [],\n        deleted: []\n    };\n\n    for( var i = 0, iLimit = entries.length; i < iLimit; i++ )\n    {\n        var entry = entries[ i ];\n        existingEntry = this.getEntryById( entry.id );\n\n        if( existingEntry )\n        {\n            existingEntry.update( entry );\n            result.updated.push( existingEntry );\n        }\n        else\n        {\n            if( entry.visible )\n            {\n                newEntry = new PULSE.CLIENT.RUGBY.LiveBlogEntry( this, entry );\n                result.created.push( newEntry );\n            }\n        }\n    }\n\n    return result;\n}"},"needToSortEntries":{"Documentation":{"description":"Checks that entries are in order of position","tags":[{"title":"private","description":null,"type":null},{"title":"return","description":null,"type":{"type":"NameExpression","name":"Boolean"}}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlog.prototype.needToSortEntries = function()\n{\n    for( var i = 0, iLimit = this.entries.length - 1; i < iLimit; i++ )\n    {\n        entry = this.entries[ i ];\n        nextEntry = this.entries[ i + 1 ];\n\n        if( entry.position < nextEntry.position )\n        {\n            return true;\n        }\n    }\n    return false;\n}"},"getLatestUpdateTime":{"Documentation":{"description":"Gets the most recent updateTime timestamp from both the header and all entries received\nIf there's no data, it uses the timestamp of the instantiation of the blog","tags":[{"title":"private","description":null,"type":null},{"title":"return","description":"the newest updateTime","type":{"type":"NameExpression","name":"Number"}}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlog.prototype.getLatestUpdateTime = function()\n{\n    if( this.header )\n    {\n        var updateTime = this.header.getUpdateTime();\n        if ( this.entries && this.entries.length > 0 )\n        {\n            updateTime = 0;\n            for( var i = 0, iLimit = this.entries.length; i < iLimit; i++ )\n            {\n                var entry = this.entries[ i ];\n                if( updateTime < entry.getTimestamp() )\n                {\n                    updateTime = entry.getTimestamp();\n                }\n            }\n        }\n\n        return updateTime;\n    }\n\n    return this.lastUpdateTime;\n}"},"convertToDate":{"Documentation":{"description":"Utility function to convert the date type returned by the API to a JS Date object","tags":[{"title":"private","description":null,"type":null},{"title":"param","description":"(may change)","type":{"type":"NameExpression","name":"Number"},"name":"entryUpdateTime"},{"title":"return","description":null,"type":{"type":"NameExpression","name":"Date"}}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlog.prototype.convertToDate = function( entryTimestamp )\n{\n    return PULSE.CLIENT.DateUtil.parseDateTime( entryTimestamp );\n}"}}},"LiveBlogEntry":{"Documentation":{"description":"Live Blog Entry Data Handler","tags":[{"title":"constructor","description":null,"type":null,"name":null},{"title":"param","description":"instance of its parent","type":{"type":"NameExpression","name":"Object"},"name":"liveBlog"},{"title":"param","description":"API-given data representing a blog entry","type":{"type":"NameExpression","name":"Object"},"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogEntry = function( liveBlog, data )\n{\n    if( !liveBlog || !data || !data.id )\n    {\n        console.log( \"WARNING: trying to initialise a live blog entry without a blog instance or data\" );\n        return;\n    }\n\n    this.blog = liveBlog;\n    this.update( data );\n}","prototype":{"getId":{"Documentation":{"description":"Get the unique ID of the entry","tags":[{"title":"public","description":null,"type":null},{"title":"return","description":null,"type":{"type":"NameExpression","name":"Number"}}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogEntry.prototype.getId = function()\n{\n    return this.id;\n}"},"getUpdateTime":{"Documentation":{"description":"Get the time the entry was last updated","tags":[{"title":"public","description":null,"type":null},{"title":"return","description":null,"type":{"type":"NameExpression","name":"Number"}}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogEntry.prototype.getUpdateTime = function()\n{\n    return this.updateTime;\n}"},"getTimestamp":{"Documentation":{"description":"Get the time the entry was last updated","tags":[{"title":"public","description":null,"type":null},{"title":"return","description":null,"type":{"type":"NameExpression","name":"Number"}}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogEntry.prototype.getTimestamp = function()\n{\n    return this.timestamp;\n}"},"getPosition":{"Documentation":{"description":"Get the position of an entry in relation to other entries","tags":[{"title":"public","description":null,"type":null},{"title":"return","description":null,"type":{"type":"NameExpression","name":"Number"}}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogEntry.prototype.getPosition = function()\n{\n    return this.position;\n}"},"getType":{"Documentation":{"description":"Get the type of the entry","tags":[{"title":"public","description":null,"type":null},{"title":"return","description":null,"type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogEntry.prototype.getType = function()\n{\n    return this.type;\n}"},"isVisible":{"Documentation":{"description":"Whether an entry is visible or not","tags":[{"title":"public","description":null,"type":null},{"title":"return","description":null,"type":{"type":"NameExpression","name":"Boolean"}}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogEntry.prototype.isVisible = function()\n{\n    return this.visible;\n}"},"getData":{"Documentation":{"description":"Retrieve the data model for the entry","tags":[{"title":"public","description":null,"type":null},{"title":"return","description":null,"type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogEntry.prototype.getData = function( dateFormat, timeFormat )\n{\n    var date = PULSE.CLIENT.DateUtil.parseDateTime( this.timestamp );\n\n    return {\n        \"id\": this.id,\n        \"type\": this.type,\n        \"position\": this.position,\n        \"title\": this.title,\n        \"subtitle\": this.subtitle,\n        \"comment\": this.comment,\n        \"updateTime\": this.updateTime,\n        \"language\": this.language,\n        \"visible\": this.visible,\n        \"icon\": this.icon,\n        \"timestamp\": this.timestamp,\n        \"displayTime\": {\n            \"date\": moment( date ).format( dateFormat || 'llll' ),\n            \"time\": moment( date ).format( timeFormat || 'LT' )\n        },\n\n        \"properties\": this.properties,\n        \"references\": this.references\n    };\n}"},"update":{"Documentation":{"description":"Replace entry core data with new data","tags":[{"title":"public","description":null,"type":null},{"title":"param","description":null,"type":{"type":"NameExpression","name":"Object"},"name":"data"},{"title":"return","description":null,"type":{"type":"NameExpression","name":"nil"}}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogEntry.prototype.update = function( data )\n{\n    this.id = data.id;\n    this.type = data.type;\n    this.position = data.position;\n    this.title = data.title;\n    this.subtitle = data.subtitle;\n    this.comment = data.comment;\n    this.position = data.position;\n    this.updateTime = data.updateTime;\n    this.language = data.language;\n    this.icon = data.icon;\n    this.visible = data.visible;\n    this.timestamp = data.timestamp;\n\n    this.properties = data.properties;\n    this.references = data.references;\n}"}}},"LiveBlogHeader":{"Documentation":{"description":"Live Blog Header Data Handler","tags":[{"title":"constructor","description":null,"type":null,"name":null},{"title":"param","description":"instance of its parent","type":{"type":"NameExpression","name":"Object"},"name":"liveBlog"},{"title":"param","description":"API-given data representing a blog header","type":{"type":"NameExpression","name":"Object"},"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogHeader = function( liveBlog, data )\n{\n    if( !liveBlog || !data || !data.id )\n    {\n        console.log( \"WARNING: trying to initialise a live blog header without a blog instance or data\" );\n        return;\n    }\n\n    this.blog = liveBlog;\n    this.update( data );\n}","prototype":{"getId":{"Documentation":{"description":"Get the unique ID of the header","tags":[{"title":"public","description":null,"type":null},{"title":"return","description":null,"type":{"type":"NameExpression","name":"Number"}}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogHeader.prototype.getId = function()\n{\n    return this.id;\n}"},"getUpdateTime":{"Documentation":{"description":"Get the time the header was last updated","tags":[{"title":"public","description":null,"type":null},{"title":"return","description":null,"type":{"type":"NameExpression","name":"Number"}}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogHeader.prototype.getUpdateTime = function()\n{\n    return this.updateTime;\n}"},"getStreamingMedia":{"Documentation":{"description":"Get streaming media objects list","tags":[{"title":"public","description":null,"type":null},{"title":"return","description":null,"type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"Object"}]}}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogHeader.prototype.getStreamingMedia = function()\n{\n    return this.streamingMedia;\n}"},"getData":{"Documentation":{"description":"Retrieve the data model for the header","tags":[{"title":"public","description":null,"type":null},{"title":"return","description":null,"type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogHeader.prototype.getData = function()\n{\n    return {\n        \"id\": this.id,\n        \"title\": this.title,\n        \"subtitle\": this.subtitle,\n        \"updateTime\": this.updateTime,\n\n        \"leadMedia\": this.leadMedia,\n\n        \"streamingMedia\": this.streamingMedia,\n        \"headerEvents\": this.headerEvents,\n        \"keyEvents\": this.keyEvents\n    };\n}"},"update":{"Documentation":{"description":"Replace header core data with new data","tags":[{"title":"public","description":null,"type":null},{"title":"param","description":null,"type":{"type":"NameExpression","name":"Object"},"name":"data"},{"title":"return","description":null,"type":{"type":"NameExpression","name":"nil"}}]},"Source":"PULSE.CLIENT.RUGBY.LiveBlogHeader.prototype.update = function( data )\n{\n    this.id = data.id;\n    this.title = data.title;\n    this.subtitle = data.subtitle;\n    this.updateTime = data.updateTime;\n    this.language = data.language;\n\n    this.leadMedia = data.leadMedia;\n\n    this.streamingMedia = data.streamingMedia || [];\n    this.headerEvents = data.headerEvents || [];\n    this.keyEvents = data.keyEvents || [];\n}"}}},"Match":{"prototype":{"prepareScoringData":{"Documentation":{"description":"Used to call to get scoring data, if the feed has already been started then\nfilter out feeds that do not make any higher prioritisations\n    - e.g. a feed with a more frequent interval will pass through","tags":[{"title":"param","description":"Scoring request config","type":{"type":"NameExpression","name":"Object"},"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.prepareScoringData = function( config )\n{\n    if( !this.scoringLoaded ||\n        config.forceLoad ||\n        config.id && config.id !== this.feeds.feedScoring ||\n        !this.feeds.scoringInterval ||\n        config.interval && config.interval < this.feeds.scoringInterval ||\n        config.callback && config.callback !== this.feeds.scoringCallback ||\n        config.start && config.start === false )\n    {\n        this.getScoringData( config );\n    }\n    else\n    {\n        // May want to include logic to notify widgets if the match already has\n        //   some scoring data scoring: this.hasScoring > notify()\n    }\n}"},"getScoringData":{"Documentation":{"description":"Used to directly request scoring data\n    - prefer use of prepareScoringData","tags":[{"title":"param","description":"Scoring request config","type":{"type":"NameExpression","name":"Object"},"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getScoringData = function( config )\n{\n    var pathArray = [ 'match', this.matchId, 'summary' ];\n\n    if( !this.feeds.matchLoaded )\n    {\n        this.feeds.scoringUrl = this.urlGenerator.makeDataUrl( pathArray, { language: PULSE.CLIENT.LANGUAGE } );\n        this.feeds.feedScoring = config.id || 'match-' + this.matchId;\n        this.feeds.scoringInterval = config.interval || 30;\n        this.feeds.scoringCallback = config.callback || 'onMatch';\n\n        this.dm.addFeed( this.feeds.feedScoring, this.feeds.scoringUrl,\n            this.feeds.scoringInterval, this.feeds.scoringCallback, [ this ] );\n\n        if( config.start || config && typeof config === 'boolean' )\n        {\n            this.dm.start( this.feeds.scoringUrl );\n        }\n\n        this.scoringLoaded = true;\n    }\n}"},"stopScoringFeed":{"Documentation":{"description":"Stop scoring feed","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.stopScoringFeed = function()\n{\n    this.dm.stop( this.scoringUrl );\n}"},"prepareTimelineData":{"Documentation":{"description":"Used to call to get timeline data, if the feed has already been started then\nfilter out feeds that do not make any higher prioritisations\n    - e.g. a feed with a more frequent interval will pass through","tags":[{"title":"param","description":"Scoring request config","type":{"type":"NameExpression","name":"Object"},"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.prepareTimelineData = function( config )\n{\n    if( !this.timelineLoaded ||\n        !config ||\n        !config.id || config.id !== this.feeds.feedTimeline &&\n        !config.interval || config.interval < this.feeds.timelineInterval &&\n        !config.callback || config.callback !== this.feeds.timelineCallback &&\n        !config.start )\n    {\n        this.getTimelineData( config );\n    }\n}"},"getTimelineData":{"Documentation":{"description":"Used to directly request scoring data\n    - prefer use of prepareTimelineData","tags":[{"title":"param","description":"Scoring request config","type":{"type":"NameExpression","name":"Object"},"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getTimelineData = function( config )\n{\n    var pathArray = [ 'match', this.matchId, 'timeline' ];\n\n    if( !this.feeds.matchScoringLoaded )\n    {\n        this.feeds.timelineUrl = this.urlGenerator.makeDataUrl( pathArray, { language: PULSE.CLIENT.LANGUAGE } );\n        this.feeds.feedTimeline = config.id || 'timeline-' + this.matchId;\n        this.feeds.timelineInterval = config.interval || 30;\n        this.feeds.timelineCallback = config.callback || 'onMatchTimeline';\n\n        this.dm.addFeed( this.feeds.feedTimeline, this.feeds.timelineUrl,\n            this.feeds.timelineInterval, this.feeds.timelineCallback, [ this ] );\n\n        if( config.start || config && typeof config === 'boolean' )\n        {\n            this.dm.start( this.feeds.timelineUrl );\n        }\n\n        this.timelineLoaded = true;\n    }\n}"},"prepareStatsData":{"Documentation":{"description":"Used to call to get stats data, if the feed has already been started then\nfilter out feeds that do not make any higher prioritisations\n    - e.g. a feed with a more frequent interval will pass through","tags":[{"title":"param","description":"Scoring request config","type":{"type":"NameExpression","name":"Object"},"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.prepareStatsData = function( config )\n{\n    if( !this.statsLoaded ||\n        config.forceLoad ||\n        config.id && config.id !== this.feeds.feedStats ||\n        !this.feeds.statsInterval ||\n        config.interval && config.interval < this.feeds.statsInterval ||\n        config.callback && config.callback !== this.feeds.statsCallback ||\n        config.start && config.start === false )\n    {\n        this.getStatsData( config );\n    }\n    else\n    {\n        // May want to include logic to notify widgets if the match already has\n        //   some scoring data scoring: this.hasScoring > notify()\n    }\n}"},"getStatsData":{"Documentation":{"description":"Used to directly request scoring data\n    - prefer use of prepareScoringData","tags":[{"title":"param","description":"Scoring request config","type":{"type":"NameExpression","name":"Object"},"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getStatsData = function( config )\n{\n    var pathArray = [ 'match', this.matchId, 'stats' ];\n\n    if( !this.feeds.statsLoaded )\n    {\n        this.feeds.statsUrl = this.urlGenerator.makeDataUrl( pathArray, { language: PULSE.CLIENT.LANGUAGE } );\n        this.feeds.feedStats = config.id || 'stats-' + this.matchId;\n        this.feeds.statsInterval = config.interval || 30;\n        this.feeds.statsCallback = config.callback || 'onMatchStats';\n\n        this.dm.addFeed( this.feeds.feedStats, this.feeds.statsUrl,\n            this.feeds.statsInterval, this.feeds.statsCallback, [ this ] );\n\n        if( config.start || config && typeof config === 'boolean' )\n        {\n            this.dm.start( this.feeds.statsUrl );\n        }\n\n        this.statsLoaded = true;\n    }\n}"},"getMatchStatus":{"Documentation":{"description":"Returns the current status of a given match\n    - will use scoring data if available as it is refreshed more often\n    - will fallback to schedule data if no scoring is available","tags":[{"title":"return","description":"Match status string","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getMatchStatus = function()\n{\n    var matchStatus;\n\n    if( this.status )\n    {\n        switch( this.status )\n        {\n            case 'U':\n            case 'UP':\n                matchStatus = 'U';\n                break;\n            case 'C':\n                matchStatus = 'C';\n                break;\n            default:\n                // Default covers L1, LHT, L2, LFT, L3, LB, L4, LXD, LK, LS, LD, LSD, LT1, LT2, L5, L6\n                matchStatus = 'L';\n                break;\n        }\n    }\n\n    return matchStatus;\n}"},"hasScoringData":{"Documentation":{"description":"Check if match has received scoring data","tags":[{"title":"return","description":"True if scoring data exists","type":{"type":"NameExpression","name":"Boolean"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.hasScoringData = function()\n{\n    if( this.feeds.scoringData )\n    {\n        return true;\n    }\n    return false;\n}"},"hasScheduleData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.Match.prototype.hasScheduleData"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.hasScheduleData = function()\n{\n    if( this.feeds.scheduleData )\n    {\n        return true;\n    }\n    return false;\n}"},"hasTimelineData":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.hasTimelineData = function()\n{\n    if( this.feeds.timelineData )\n    {\n        return true;\n    }\n    return false;\n}"},"hasStatsData":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.hasStatsData = function()\n{\n    if( this.feeds.statsData )\n    {\n        return true;\n    }\n    return false;\n}"},"hasTeamWithId":{"Documentation":{"description":"Given a teamId, returns whether the team is in this match","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.hasTeamWithId = function( teamId )\n{\n    if( !teamId || teamId === -1 )\n    {\n        return false;\n    }\n\n    if( +teamId === this.getTeamIdAtIndex(0) || +teamId === this.getTeamIdAtIndex(1) )\n    {\n        return true;\n    }\n}"},"hasVenueWithId":{"Documentation":{"description":"Given a venueId, returns whether the match is at that venue","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.hasVenueWithId = function( venueId )\n{\n    if( !venueId || venueId === -1 )\n    {\n        return false;\n    }\n\n    var thisVenueId = this.venue.id;\n\n    if( +venueId === thisVenueId )\n    {\n        return true;\n    }\n}"},"getTeamIdAtIndex":{"Documentation":{"description":"Returns the team id for team playing in this match at a given index","tags":[{"title":"param","description":"Index of team to return","type":{"type":"NameExpression","name":"Number"},"name":"index"},{"title":"return","description":"Unique team id","type":{"type":"NameExpression","name":"Number"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getTeamIdAtIndex = function( index )\n{\n    var id = -1,\n        team;\n\n    if( this.teams )\n    {\n        team = this.teams[ index ];\n        id = team ? team.id : -1;\n    }\n\n    return id;\n}"},"getMatchType":{"Documentation":{"description":"Returns the match type for this tournament from either the scoring data or\nthe tournament if it has received schedule data","tags":[{"title":"return","description":"Match type string e.g. 'mru', 'wru', 'mrs', etc.","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getMatchType = function()\n{\n    if( this.event )\n    {\n        return this.event.sport;\n    }\n}"},"getGroupName":{"Documentation":{"description":"Returns the name of a group","tags":[{"title":"return","description":"Group name","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getGroupName = function()\n{\n    var eventPhase = this.eventPhase || '',\n        groupName;\n\n    if( typeof eventPhase === 'string' &&\n        eventPhase.length > 0 &&\n        eventPhase.indexOf( 'Pool' ) > -1 ||\n        eventPhase.indexOf( 'Group' ) > -1 )\n    {\n        groupName = eventPhase;\n    }\n\n    return groupName;\n}"},"getDateString":{"Documentation":{"description":"Returns a date string formatted as: 'YYYY-MM-DDT00:00:00+00'","tags":[{"title":"return","description":"Date string","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getDateString = function()\n{\n    var matchDate = new Date( this.time.millis );\n    return moment( matchDate ).format();\n}"},"getDate":{"Documentation":{"description":"Returns a date object based on the match's date string","tags":[{"title":"return","description":"the match date object","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getDate = function()\n{\n    return new Date( this.time.millis );\n}"},"getFormattedMatchDate":{"Documentation":{"description":"Returns the match date in a given timeformat","tags":[{"title":"return","description":"Javascript date object","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getFormattedMatchDate = function( dateFormat )\n{\n    var date = this.getDate();\n\n    if( date )\n    {\n        return moment( date ).format( dateFormat || 'llll' );\n    }\n}"},"getFormattedMatchDateLocalToVenue":{"Documentation":{"description":"Returns a formatted match date at a given gmt offset. If no offset is passed\n  as a parameter then the date will be localised to the venue of this match.","tags":[{"title":"param","description":"Date format string","type":{"type":"NameExpression","name":"String"},"name":"dateFormat"},{"title":"return","description":"Date object","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getFormattedMatchDateLocalToVenue = function( dateFormatString, customTimezoneOffset, additionalOffset )\n{\n    var date = this.getDate(),\n        offset = customTimezoneOffset || this.time.gmtOffset || 0,\n        offsetAnother = additionalOffset || 0,\n        offsetDate = new Date( date.getTime() + ( 3600000 * offset ) + ( 3600000 * offsetAnother ) ),\n        utcDate = PULSE.CLIENT.DateUtil.getUtcDateObject( offsetDate );\n\n    if( date )\n    {\n        return moment( date ).utc().add( offset + offsetAnother, 'hours' ).format( dateFormatString || 'llll' );\n    }\n}"},"getFormattedMatchTime":{"Documentation":{"description":"Returns the match start time in a specified offset - +00 by default","tags":[{"title":"param","description":"Time format string","type":{"type":"NameExpression","name":"String"},"name":"timeFormat"},{"title":"param","description":"UTC offset","type":{"type":"NameExpression","name":"String"},"name":"timezoneOffset"},{"title":"return","description":"Formatted time string","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getFormattedMatchTime = function( timeFormat, customTimezoneOffset )\n{\n    var date = this.getDate(),\n        offset = customTimezoneOffset || this.time.gmtOffset || 0;\n\n    if( date )\n    {\n        return moment( date ).utc().add( offset, 'hours' ).format( timeformat || 'LT' );\n    }\n}"},"getTeams":{"Documentation":{"description":"Returns the teams in the groups","tags":[{"title":"return","description":"Team objects from tournament","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getTeams = function()\n{\n    var teams = [],\n        i, teamId, team;\n\n    for( i = 0; i < 2; i++ )\n    {\n        teamId = this.getTeamIdAtIndex( i );\n        team = this.tournament.teams[ teamId ];\n\n        // Check that team has been set else create empty team\n        team = team ? team : { name: PULSE.I18N.lookup( 'label.team.placeholder' ), id: -1, abbreviation: PULSE.I18N.lookup( 'label.team.placeholder' ) };\n\n        teams.push( team );\n    }\n\n    return teams;\n}"},"getTeamAbbrAtIndex":{"Documentation":{"description":"Returns the abbreviation for a team at a given index\n    - If no abbreviation for said team exists then the first three letters of\n      the name are returned.","tags":[{"title":"return","description":"[description]","type":{"type":"ArrayType","elements":[{"type":"NameExpression","name":"type"}]}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getTeamAbbrAtIndex = function( index )\n{\n    var team = this.teams[ index ];\n\n    if( team.abbreviation )\n    {\n        return team.abbreviation.toUpperCase();\n    }\n    else if( team && team.name && team.id > 0 )\n    {\n        return team.name.substring( 0, 3 ).toUpperCase();\n    }\n    else\n    {\n        return PULSE.I18N.lookup( 'label.team.placeholder' );\n    }\n}"},"getIndexOfWinningTeam":{"Documentation":{"description":"Determine the index of the current winning team. Returns undefined if neither\nteam is ahead","tags":[{"title":"return","description":"Index of current winner","type":{"type":"NameExpression","name":"Number"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getIndexOfWinningTeam = function()\n{\n    var leader,\n        scores = this.scores;\n\n    if( scores && scores[0] > scores[1] )\n    {\n        leader = 0;\n    }\n    else if( scores && scores[1] > scores[0] )\n    {\n        leader = 1;\n    }\n\n    if ( leader != 0 && leader != 1 )\n    {\n        var kc = this.getKickingCompetitionScore();\n        if ( kc && kc.length > 1 )\n        {\n            if ( kc[ 0 ] > kc[ 1 ] )\n            {\n                leader = 0;\n            }\n            else\n            {\n                leader = 1;\n            }\n        }\n    }\n\n    return leader;\n}"},"getSummary":{"Documentation":{"description":"Returns a constructed string to describe the current state of the match","tags":[{"title":"return","description":"String describing the current state of the match","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getSummary = function()\n{\n    var status = this.getMatchStatus(),\n        summary, leader, nonLeader;\n\n    if( status === 'U' )\n    {\n        summary = this.description + ': ' + this.getTeams()[0].name + ' ' + PULSE.I18N.lookup( 'widget.scoreboard.versus.tiny' ) + ' ' + this.getTeams()[1].name;\n    }\n    else if( status === 'L' )\n    {\n        leader = this.getIndexOfWinningTeam();\n        if( leader )\n        {\n            nonLeader = leader === 0 ? 1 : 0;\n            summary = this.getTeams()[ leader ].name + ' leads ' + this.getTeams()[ nonLeader ].name + ' ' + this.scores[ leader ] + ' - ' + this.scores[ nonLeader ];\n        }\n        else\n        {\n            summary = this.getTeams()[0].name + ' ' + this.scores[0] + ' - ' + this.scores[1] + ' ' + this.getTeams()[1].name;\n        }\n    }\n    else if( status === 'C' )\n    {\n        summary = this.getOutcomeString();\n    }\n\n    return summary;\n}"},"getAttendance":{"Documentation":{"description":"Returns commafied string for attendance number","tags":[{"title":"return","description":"Commafied string of attendance","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getAttendance = function()\n{\n    if(this.attendance)\n    {\n        return PULSE.CLIENT.Util.commafy(this.attendance);\n    }\n}"},"getOutcomeString":{"Documentation":{"description":"Returns a string explaining the outcome of the match","tags":[{"title":"return","description":"String explaining match outcome","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getOutcomeString = function()\n{\n    switch( this.outcome )\n    {\n        case \"A\":\n            return this.teams[0].name + ' won ' + this.scores[0] + ' - ' + this.scores[1];\n        case \"B\":\n            return this.teams[1].name + ' won ' + this.scores[1] + ' - ' + this.scores[0];\n        case \"D\":\n            return 'Match Drawn ' + this.scores[0] + ' - ' + this.scores[1];\n        default:\n            return '';\n    }\n}"},"getPositionFromNumber":{"Documentation":{"description":"Returns a human readable string describing the given player position of a number\n    - Function ignores region specific variations e.g. 'left' & 'right' flankers\n      in France\n    - Returns an empty string for 7s matches","tags":[{"title":"param","description":"Player number","type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"Number"},{"type":"NameExpression","name":"String"}]},"name":"number"},{"title":"return","description":"Descriptive position name","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getPositionFromNumber = function( number )\n{\n\n    var val = parseInt( number, undefined ),\n        matchType = this.getMatchType();\n\n    if( matchType === 'mru' || matchType === 'wru' )\n    {\n        switch( val )\n        {\n            case 15:\n                return 'Full Back';\n            case 14:\n                return 'Right Wing';\n            case 13:\n                return 'Outside Centre';\n            case 12:\n                return 'Inside Centre';\n            case 11:\n                return 'Left Wing';\n            case 10:\n                return 'Fly Half';\n            case 9:\n                return 'Scrum Half';\n            case 1:\n                return 'Loose-head Prop';\n            case 2:\n                return 'Hooker';\n            case 3:\n                return 'Tight-head Prop';\n            case 4:\n            case 5:\n                return 'Second Row';\n            case 6:\n                return 'Blind-side Flanker';\n            case 7:\n                return 'Open-side Flanker';\n            case 8:\n                return 'Number 8';\n            default:\n                return 'Replacement';\n        }\n    }\n\n    // Return an empty string for 7s as shirt numbers are not guaranteed to match\n    // team positions - some position data may come with team list data but have\n    // yet to see examples of this...\n    return '';\n}"},"getPostionByCode":{"Documentation":{"description":"Returns a human readable string to describe a given player code","tags":[{"title":"param","description":"Position code string","type":{"type":"NameExpression","name":"String"},"name":"code"},{"title":"return","description":"Position description","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getPostionByCode = function( code )\n{\n    switch( code )\n    {\n        case '1/2':\n            return PULSE.I18N.lookup( 'label.player.position.halfback' );\n        case '3/4':\n            return PULSE.I18N.lookup( 'label.player.position.threequarters' );\n        case '5/8':\n            return PULSE.I18N.lookup( 'label.player.position.fiveeights' );\n        case 'Bck':\n            return PULSE.I18N.lookup( 'label.player.position.back' );\n        case 'Fwd':\n        case 'For':\n            return PULSE.I18N.lookup( 'label.player.position.forward' );\n        case 'HK':\n            return PULSE.I18N.lookup( 'label.player.position.hooker' );\n        case 'N8':\n            return PULSE.I18N.lookup( 'label.player.position.number8' );\n        case 'PR':\n            return PULSE.I18N.lookup( 'label.player.position.prop' );\n        case 'BR':\n            return PULSE.I18N.lookup( 'label.player.position.backrow' );\n        case 'CE':\n            return PULSE.I18N.lookup( 'label.player.position.centre' );\n        case 'FB':\n            return PULSE.I18N.lookup( 'label.player.position.fullback' );\n        case 'FH':\n            return PULSE.I18N.lookup( 'label.player.position.flyhalf' );\n        case 'FL':\n            return PULSE.I18N.lookup( 'label.player.position.flanker' );\n        case 'SH':\n            return PULSE.I18N.lookup( 'label.player.position.scrumhalf' );\n        case 'SR':\n            return PULSE.I18N.lookup( 'label.player.position.secondrow' );\n        case 'UB':\n            return PULSE.I18N.lookup( 'label.player.position.utilityback' );\n        case 'UF':\n            return PULSE.I18N.lookup( 'label.player.position.utilityforward' );\n        case 'WI':\n            return PULSE.I18N.lookup( 'label.player.position.wing' );\n        default:\n            return code;\n    }\n}"},"getMatchStatusDescription":{"Documentation":{"description":"Returns the description of a given match status code e.g. 'LHT' = 'Half Time'","tags":[{"title":"return","description":"Match status description string","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getMatchStatusDescription = function()\n{\n    switch( this.status )\n    {\n        case 'U':\n            return PULSE.I18N.lookup( 'label.rugby.matchstatus.prematch.long' );\n        case 'L':\n            return PULSE.I18N.lookup( 'label.rugby.matchstatus.live.long' );\n        case 'L1':\n            return PULSE.I18N.lookup( 'label.rugby.matchstatus.firstthalf.long' );\n        case 'LHT':\n            return PULSE.I18N.lookup( 'label.rugby.matchstatus.halftime.long' );\n        case 'L2':\n            return PULSE.I18N.lookup( 'label.rugby.matchstatus.secondhalf.long' );\n        case 'LFT':\n            return PULSE.I18N.lookup( 'label.rugby.matchstatus.fulltime.long' );\n        case 'C':\n            return PULSE.I18N.lookup( 'label.rugby.matchstatus.complete.long' );\n        case 'L3': // 1st half:\n            return PULSE.I18N.lookup( 'label.rugby.matchstatus.extratime.firsthalf.long' );\n        case 'LB': // half time\n            return PULSE.I18N.lookup( 'label.rugby.matchstatus.extratime.halftime.long' );\n        case 'L4': // 2nd half\n            return PULSE.I18N.lookup( 'label.rugby.matchstatus.extratime.secondhalf.long' );\n        case 'L5': // 3rd half (!?)\n        case 'L6': // 4th half (!?)\n            return PULSE.I18N.lookup( 'label.rugby.matchstatus.extratime.long' );\n        case 'LXD':\n        case 'LSD':\n            return PULSE.I18N.lookup( 'label.rugby.matchstatus.suddendeath.long' );\n        case 'LK':\n            return PULSE.I18N.lookup( 'label.rugby.matchstatus.kickingcomp.long' );\n        case 'UP':\n        case 'LS':\n        case 'LD':\n            return PULSE.I18N.lookup( 'label.rugby.matchstatus.matchdelayed.long' );\n        case 'LT1':\n        case 'LT2':\n            return PULSE.I18N.lookup( 'label.rugby.matchstatus.teamsout.long' );\n        default:\n            return this.status;\n    }\n}"},"isSecondHalf":{"Documentation":{"description":"Returns true if the match is in the second half","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.isSecondHalf = function()\n{\n    switch( this.status )\n    {\n        case 'LHT':\n        case 'L2':\n        case 'LFT':\n        case 'L4': // 2nd half\n        case 'L5': // 3rd half (!?)\n        case 'L6': // 4th half (!?)\n        case 'LXD':\n        case 'LSD':\n        case 'LK':\n            return true;\n            break;\n        default:\n            return false;\n            break;\n    }\n}"},"getTitle":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getTitle = function()\n{\n    var title = '';\n\n    if( this.events && this.events.length > 0 )\n    {\n        if( this.events[0].label && this.eventPhase )\n        {\n           title = this.events[0].label + ', ';\n        }\n        else if( this.events[0].label )\n        {\n            title = this.events[0].label;\n        }\n     }\n\n    if( this.eventPhase )\n    {\n        title = this.eventPhase;\n    }\n\n    return title;\n}"},"getMatchBetween":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getMatchBetween = function()\n{\n    var matchBetween = '';\n\n    if( this.teams[0] && this.teams[0].name ) {\n        matchBetween = matchBetween + this.teams[0].name + ' ' + PULSE.I18N.lookup( 'widget.scoreboard.versus.tiny' ) + ' ';\n    } else {\n        matchBetween = matchBetween + PULSE.I18N.lookup( 'label.team.placeholder' ) + ' ' + PULSE.I18N.lookup( 'widget.scoreboard.versus.tiny' ) + ' ';\n    }\n\n    if( this.teams[1] && this.teams[1].name ) {\n        matchBetween = matchBetween + this.teams[1].name;\n    } else {\n        matchBetween = matchBetween + PULSE.I18N.lookup( 'label.team.placeholder' );\n    }\n\n    return matchBetween;\n}"},"getVenue":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getVenue = function()\n{\n    var venue = '';\n\n    if( this.venue )\n    {\n        if( this.venue.name )\n        {\n            venue = venue + this.venue.name;\n            if( this.venue.name && this.venue.city )\n            {\n                venue = venue + ', ';\n            }\n        }\n\n        if( this.venue.city )\n        {\n            venue = venue + this.venue.city;\n        }\n\n    }\n    return venue;\n}"},"getMatchDuration":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getMatchDuration = function()\n{\n    var sport,\n        timeDiff = 80;\n\n    if( this.events && this.events.length > 0 ) {\n        if( this.events[ 0 ].sport )\n        {\n            sport = this.events[ 0 ].sport;\n\n            switch (sport) {\n                case 'mrs':\n                case 'wrs':\n                case 'mjs':\n                case 'wjs':\n                    timeDiff = 15;\n                    break;\n                default:\n                    timeDiff = 80;\n                    break;\n            }\n        }\n    }\n    return timeDiff;\n}"},"generateCalendarEvent":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"label"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.generateCalendarEvent = function( label )\n{\n    var location, details, icsContent, link, sport,\n        matchBetween = this.getMatchBetween(),\n        matchTitle = this.getTitle(),\n        timeDiff = this.getMatchDuration(),\n        startTime = this.getFormattedMatchDateLocalToVenue( 'YYYYMMDD' ) + 'T' + this.getFormattedMatchDateLocalToVenue( 'hhmm' ) + '00',\n        endTime = this.getFormattedMatchDateLocalToVenue( 'YYYYMMDD', false, ( timeDiff / 60 ) ) + 'T' + this.getFormattedMatchDateLocalToVenue( 'hhmm', false, ( timeDiff / 60 ) ) + '00',\n        title = this.getMatchBetween();\n\n    if( matchTitle && ( matchTitle.length > 0 ) )\n    {\n        title = title + ' - ' + matchTitle;\n        details = matchTitle;\n    }\n\n    if( label )\n    {\n        title = label + ': ' + title;\n    }\n\n    if(this.description)\n    {\n        if( details && details.length > 0 )\n        {\n            details = details + ', ' + this.description;\n        }\n    }\n\n    location = this.getVenue();\n    //details = \"MAtch of ruggers\";\n    icsContent = 'BEGIN:VEVENT\\r\\nDTEND:'  + endTime + '\\r\\nUID:'  + this.matchId + '\\r\\nDTSTAMP:20120315T170000Z\\r\\nSUMMARY:' + title +'\\r\\nLOCATION:' + location + '\\r\\nDESCRIPTION:' + details + '\\r\\nDTSTART:' + startTime + '\\r\\nEND:VEVENT\\r\\n';\n\n    return icsContent;\n}"},"getCalendarLink":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"label"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getCalendarLink = function( label )\n{\n    var icsContent = escape( 'BEGIN:VCALENDAR\\r\\nVERSION:2.0\\r\\nPRODID:-//hacksw/handcal//NONSGML v1.0//EN\\r\\nCALSCALE:GREGORIAN\\r\\n' + this.generateCalendarEvent( label ) +'END:VCALENDAR\\r\\n' ),\n        link = 'data:text/calendar;charset=utf8,'+ icsContent;\n\n    return link;\n}"},"getTeamStat":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"index"},{"title":"param","description":null,"type":null,"name":"stat"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getTeamStat = function( index, stat )\n{\n    if ( this.stats )\n    {\n        if ( this.stats.teamStats )\n        {\n            if( this.stats.teamStats[ index ] )\n            {\n                if( this.stats.teamStats[ index ][ stat ] )\n                {\n                    return this.stats.teamStats[ index ][ stat ];\n                }\n            }\n        }\n    }\n    return 0;\n}"},"getPlayerById":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"playerId"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getPlayerById = function( playerId )\n{\n    if( this.teams && this.teams.length )\n    {\n        for( var i = 0, iLimit = this.teams.length; i < iLimit; i++ )\n        {\n            var team = this.teams[ i ];\n            if( team.teamList && team.teamList.list )\n            {\n                for( var j = 0, jLimit = team.teamList.list.length; j < jLimit; j++ )\n                {\n                    var player = team.teamList.list[ j ];\n                    var id = player.player ? player.player.id : player.id;\n                    if( id.toString() === playerId.toString() )\n                    {\n                        return player;\n                    }\n                }\n            }\n        }\n    }\n}"},"getPlayerStat":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"id"},{"title":"param","description":null,"type":null,"name":"stat"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getPlayerStat = function( id, stat )\n{\n    if ( this.stats )\n    {\n        if ( this.stats.playerStats )\n        {\n            if( this.stats.playerStats[ id ] )\n            {\n                if ( this.stats.playerStats[ id ][ stat ] )\n                {\n                    return this.stats.playerStats[ id ][ stat ];\n                }\n            }\n        }\n    }\n    return 0;\n}"},"getHashTag":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getHashTag = function()\n{\n    var team1 = this.teams[ 0 ];\n    var team2 = this.teams[ 1 ];\n\n    if( team1 && team1.id > 0 && team2 && team2.id > 0 )\n    {\n        return '#' + team1.abbreviation + 'v' + team2.abbreviation;\n    }\n    return '';\n}"},"getDisciplinaryCardsByTeamIndex":{"Documentation":{"description":"Given a team index, it returns the disciplinary cards for that team, in the order they were\nreceived, complete with the players who received them","tags":[{"title":"param","description":"the index of the team","type":{"type":"NameExpression","name":"Number"},"name":"teamIndex"},{"title":"return","description":"the array of card objects, exteded to include the player object","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"Object"}]}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getDisciplinaryCardsByTeamIndex = function( teamIndex )\n{\n    if( this.teams && this.teams[ teamIndex ] && this.teams[ teamIndex ].disciplinary )\n    {\n        var redCards = this.teams[ teamIndex ].disciplinary[ 'RC' ] || [];\n        var yellowCards = this.teams[ teamIndex ].disciplinary[ 'YC' ] || [];\n\n        var cards = [].concat( redCards, yellowCards );\n\n        cards.sort( function( a, b )\n        {\n            return a.time.secs - b.time.secs;\n        } );\n\n        var that = this;\n        return $.map( cards, function( card )\n        {\n            return $.extend( card, { player: that.getPlayerById( card.playerId ) } );\n        } );\n    }\n    else\n    {\n        return [];\n    }\n}"},"getPlayerCardsMap":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getPlayerCardsMap = function()\n{\n    var cardMap  = {};\n    if( this.teams && this.teams.length > 0 )\n    {\n        for ( var i = 0; i < this.teams.length; i++ )\n        {\n            if ( this.teams[ i ] && this.teams[ i ].disciplinary )\n            {\n                for ( var key in this.teams[ i ].disciplinary )\n                {\n                    var cards = this.teams[ i ].disciplinary[ key ];\n                    if ( cards )\n                    {\n                        for ( var j = 0; j < cards.length; j++ )\n                        {\n                            if ( ( ! cardMap[ cards[ j ].playerId ] ) || ( key === 'RC' ) )\n                            {\n                                cardMap[ cards[ j ].playerId ] = key;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return cardMap;\n}"},"getPlayerMapForLineUp":{"Documentation":{"description":"Creates a player map for the lineup of the two teams","tags":[{"title":"return","description":"Map of player ids to a player lineup object","type":{"type":"NameExpression","name":"Map"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getPlayerMapForLineUp = function()\n{\n    var map = {};\n    if ( this.teams[0].teamList &&\n        this.teams[0].teamList.list &&\n        this.teams[1].teamList &&\n        this.teams[1].teamList.list )\n    {\n        for ( var i = 0; i < this.teams.length; i++ )\n        {\n            for ( var j = 0; j < this.teams[ i ].teamList.list.length; j++ )\n            {\n                map[ this.teams[ i ].teamList.list[ j ].id ] = this.teams[ i ].teamList.list[ j ];\n            }\n        }\n    }\n    return map;\n}"},"getOfficial":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"officialId"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getOfficial = function( officialId )\n{\n    if ( this.officials && this.officials.length > 0 )\n    {\n        for ( var i = 0; i < this.officials.length; i++ )\n        {\n            if ( this.officials[ i ] && this.officials[ i ].official && this.officials[ i ].official.id === parseInt( officialId ) )\n            {\n                return this.officials[ i ];\n            }\n        }\n    }\n    return undefined;\n}"},"getMascot":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"mascotId"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getMascot = function( mascotId )\n{\n    if ( this.mascots && this.mascots.length > 0 )\n    {\n        for ( var i = 0; i < this.mascots.length; i++ )\n        {\n            if ( this.mascots[ i ] && this.mascots[ i ].length > 0 )\n            {\n                for ( var j = 0; j < this.mascots[ i ].length; j++ )\n                {\n                    if ( this.mascots[ i ][ j ] && this.mascots[ i ][ j ].id === parseInt( mascotId ) )\n                    {\n                        return this.mascots[ i ][ j ];\n                    }\n                }\n            }\n\n        }\n    }\n    return undefined;\n}"},"getTeamByIndex":{"Documentation":{"description":"Return a team object given an index","tags":[{"title":"param","description":"Index of team in match","type":{"type":"NameExpression","name":"Int"},"name":"index"},{"title":"return","description":"Team object","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getTeamByIndex = function( index )\n{\n    if( this.teams && this.teams[ index ] )\n    {\n        return this.teams[ index ];\n    }\n\n    return undefined;\n}"},"getPlayerUrl":{"Documentation":{"description":"Return player url for a given playerId and teamIndex","tags":[{"title":"param","description":"Id of player","type":{"type":"NameExpression","name":"Int"},"name":"playerId"},{"title":"param","description":"Index of team in match","type":{"type":"NameExpression","name":"Int"},"name":"teamIndex"},{"title":"return","description":"Player URL","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getPlayerUrl = function( playerId, teamIndex )\n{\n    var team;\n    if( typeof teamIndex !== 'undefined' )\n    {\n        team = this.getTeamByIndex( teamIndex );\n    }\n    else\n    {\n        team = this.getTeamByPlayerId( playerId );\n    }\n\n    var player = this.getPlayerById( playerId );\n    if( team && player )\n    {\n        return this.urlGenerator.makeTeamUrl( team, player );\n    }\n    else\n    {\n        return '';\n    }\n}"},"getTeamUrl":{"Documentation":{"description":"Return a team url for a given teamIndex","tags":[{"title":"param","description":"Index of team in match","type":{"type":"NameExpression","name":"Int"},"name":"teamIndex"},{"title":"return","description":"Team URL","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getTeamUrl = function( teamIndex )\n{\n    var team = this.getTeamByIndex( teamIndex );\n    if( team )\n    {\n        return this.urlGenerator.makeTeamUrl( team );\n    }\n    else\n    {\n        return '';\n    }\n}"},"getTeamIndexByPlayerId":{"Documentation":{"description":"Return a team object given a player id","tags":[{"title":"param","description":"Id of a player in the match","type":{"type":"NameExpression","name":"Int"},"name":"playerId"},{"title":"return","description":"Team object","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getTeamIndexByPlayerId = function( playerId )\n{\n    if( this.teams && this.teams.length > 0 && playerId )\n    {\n        for ( var i = 0; i < this.teams.length; i++ )\n        {\n            if ( this.teams[ i ] && this.teams[ i ].teamList && this.teams[ i ].teamList.list )\n            {\n                var list = this.teams[ i ].teamList.list;\n                for ( var j = 0; j < list.length; j++ )\n                {\n                    if ( list[ j ] && list[ j ].id === parseInt( playerId ) )\n                    {\n                        return i;\n                    }\n                }\n            }\n        }\n    }\n\n    return undefined;\n}"},"getTeamByPlayerId":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"playerId"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getTeamByPlayerId = function( playerId )\n{\n    var index = this.getTeamIndexByPlayerId( playerId );\n    if( typeof index !== 'undefined' )\n    {\n        return this.getTeamByIndex( index );\n    }\n}"},"getMatchInfo":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getMatchInfo = function()\n{\n    var label = '';\n\n    if ( ( this.events && this.events.length > 0 && this.events[ 0 ].label ) && ( this.eventPhase || this.description) ) {\n        label = this.events[ 0 ].label + ', ';\n    } else if ( this.events && this.events.length > 0 && this.events[ 0 ].label ) {\n        label = this.events[ 0 ].label;\n    }\n\n    if ( this.eventPhase && this.description ) {\n        label = label + this.eventPhase + ', ';\n    } else if (this.eventPhase) {\n        label = label + this.eventPhase;\n    }\n\n    if ( this.description ) {\n        label = label + this.description;\n    }\n\n    return label;\n}"},"getIndexByTeamId":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"teamId"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getIndexByTeamId = function( teamId )\n{\n    var index = -1\n    if( this.teams )\n    {\n        for ( var i = 0; i < this.teams.length; i++ )\n        {\n            if ( this.teams[ i ].id === teamId )\n            {\n                return i;\n            }\n        }\n    }\n\n    return id;\n}"},"getOutcomeForTeamId":{"Documentation":{"description":"Determine if a team is winning, losing or drawing depending on a team id.","tags":[{"title":"param","description":"Id of the team","type":{"type":"NameExpression","name":"Int"},"name":"teamId"},{"title":"return","description":"1 - winning, 0 - drawing, -1 - losing","type":{"type":"NameExpression","name":"Number"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getOutcomeForTeamId = function( teamId )\n{\n    var winningTeam = this.getIndexOfWinningTeam();\n    var teamIndex = this.getIndexByTeamId( teamId );\n\n    if ( winningTeam != 0 && winningTeam != 1 )\n    {\n        return 0;\n    }\n    if ( winningTeam === teamIndex )\n    {\n        return 1;\n    }\n    else\n    {\n        return -1;\n    }\n\n    return leader;\n}"},"getTopPlayers":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"metric"},{"title":"param","description":null,"type":null,"name":"limit"},{"title":"param","description":null,"type":null,"name":"higherFirst"},{"title":"param","description":null,"type":null,"name":"equalConfig"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getTopPlayers = function( metric, limit, higherFirst, equalConfig )\n{\n    var allPlayers = [];\n    equalConfig = equalConfig || {};\n\n    if( this.stats && this.stats.playerStats && limit !== 0 )\n    {\n        for( var playerId in this.stats.playerStats )\n        {\n            var playerStats = this.stats.playerStats[ playerId ];\n            if( playerStats[ metric ] )\n            {\n                allPlayers.push( {\n                    player: this.getPlayerById( playerId ),\n                    stats: playerStats,\n                    stat : playerStats[ metric ]\n                } );\n            }\n        }\n\n        allPlayers.sort( function( p1, p2 )\n        {\n            var p1Stat = p1.stats[ metric ] || 0;\n            var p2Stat = p2.stats[ metric ] || 0;\n\n            if( p1Stat === p2Stat )\n            {\n                if( equalConfig.metric )\n                {\n                    var p1SecondStat = p1.stats[ equalConfig.metric ] || 0;\n                    var p2SecondStat = p2.stats[ equalConfig.metric ] || 0;\n\n                    if( equalConfig.higherFirst )\n                    {\n                        return p1SecondStat - p2SecondStat;\n                    }\n                    else\n                    {\n                        return p2SecondStat - p1SecondStat;\n                    }\n                }\n                else\n                {\n                    var p1Name = p1.player.getLastName();\n                    var p2Name = p2.player.getLastName();\n\n                    if( p1Name > p2Name )\n                    {\n                        return 1;\n                    }\n                    else if( p1Name < p2Name )\n                    {\n                        return -1;\n                    }\n                    else\n                    {\n                        return 0;\n                    }\n                }\n\n            }\n            else\n            {\n                if( higherFirst )\n                {\n                    return p1Stat - p2Stat;\n                }\n                else\n                {\n                    return p2Stat - p1Stat;\n                }\n            }\n        } );\n    }\n\n    return allPlayers.slice( 0, limit || allPlayers.length );\n}"},"getKickingCompetitionScore":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getKickingCompetitionScore = function()\n{\n    var scores = [];\n    if ( this.kc && this.kc.length > 0 )\n    {\n        for( var i = 0; i < this.kc.length; i++ )\n        {\n            if ( this.kc[ i ] && this.kc[ i ].length > 0 )\n            {\n                var score = 0;\n                for ( var j = 0; j < this.kc[ i ].length; j++ )\n                {\n                    if ( this.kc[ i ][ j ] )\n                    {\n                        score = score + 1;\n                    }\n                }\n                scores.push( score );\n            }\n\n        }\n    }\n    return scores;\n}"},"playerOnPitch":{"Documentation":{"description":"Determine if a player is on the pitch based on the player's starting status and substitution events","tags":[{"title":"param","description":"Id of the player","type":{"type":"NameExpression","name":"Int"},"name":"playerId"},{"title":"param","description":"Boolean whether the player started on or off the pitch","type":{"type":"NameExpression","name":"Boolean"},"name":"startOn"},{"title":"param","description":"Mapping of playerIds to subs off events","type":{"type":"NameExpression","name":"Object"},"name":"subsOff"},{"title":"param","description":"Mapping of playerIds to subs on events","type":{"type":"NameExpression","name":"Object"},"name":"subsOn"},{"title":"return","description":"Boolean whether the player is on or off the pitch","type":{"type":"NameExpression","name":"Boolean"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.playerOnPitch = function( playerId, startOn, subsOff, subsOn )\n{\n    var onTime = -1;\n    var offTime = -1;\n    if ( !subsOff )\n    {\n        subsOff = this.match.getPlayerMapFromEventArray( this.match.filterTimeline( { 'type' : 'Sub Off' } ) );\n    }\n    if ( !subsOn )\n    {\n        subsOn = this.match.getPlayerMapFromEventArray( this.match.filterTimeline( { 'type' : 'Sub On' } ) );\n    }\n\n    if ( subsOn[ playerId ] && subsOn[ playerId ].length > 0 )\n    {\n        for ( var i = 0; i < subsOn[ playerId ].length; i++ )\n        {\n            if ( subsOn[ playerId ][ i ] && subsOn[ playerId ][ i ].time && subsOn[ playerId ][ i ].time.secs )\n            {\n                if ( subsOn[ playerId ][ i ].time.secs > onTime )\n                {\n                    onTime = subsOn[ playerId ][ i ].time.secs;\n                }\n            }\n        }\n    }\n\n    if ( subsOff[ playerId ] && subsOff[ playerId ].length > 0 )\n    {\n        for ( var i = 0; i < subsOff[ playerId ].length; i++ )\n        {\n            if ( subsOff[ playerId ][ i ] && subsOff[ playerId ][ i ].time && subsOff[ playerId ][ i ].time.secs )\n            {\n                if ( subsOff[ playerId ][ i ].time.secs > offTime )\n                {\n                    offTime = subsOff[ playerId ][ i ].time.secs;\n                }\n            }\n        }\n    }\n\n    if ( onTime < 0 && offTime < 0 )\n    {\n        return startOn;\n    }\n\n    if ( onTime > offTime )\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}"},"setDefaults":{"Documentation":{"description":"Stores default values to be replaced by json response on retrieval\n    - Can also be used to get an idea of what the model structure from a\n      presentation point of view","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.setDefaults = function()\n{\n    // General vars\n    this.matchId = this.matchId;\n    this.matchType = undefined;\n    this.events = [];\n    this.date = undefined; // may need to remove and use get getFormattedMatchDate|LocalToVenue to adapt to timezone usage...\n    this.description = undefined;\n    this.summary = undefined; // Constructed using 'match' object from any file\n    this.eventPhase = undefined;\n    this.groupName = undefined; // Deduced by pattern matching eventPhase\n    this.status = undefined;\n    this.attendance = undefined; // Use getter to retrieve commafied string\n\n    this.venue = {};\n    this.teams = [ {}, {} ]; // Stores teams from schedule data, teamLists and scoring by team from match.js\n    this.time = {};\n    this.scores = [];\n    this.timeline = [];\n\n    // Post match\n    this.outcome = undefined;\n    this.outcomeString = undefined;\n}"},"registerInTournament":{"Documentation":{"description":"Registers this match in the tournament scheudle as being either upcoming/live/complete","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.registerInTournament = function()\n{\n    if( this.tournament && this.tournament.schedule )\n    {\n        if( this.getMatchStatus() === 'U' )\n        {\n            // Add the match to the tournament's list of upcoming matches\n            this.tournament.schedule.registerMatchAs( 'upcoming', this.matchId );\n        }\n\n        if( this.getMatchStatus() === 'L' && !this.scoringLoaded )\n        {\n            // Remove the match from the tournament's list of upcoming matches\n            this.tournament.schedule.unregisterMatchAs( 'upcoming', this.matchId );\n            // Add the match to the tournament's list of current live matches\n            this.tournament.schedule.registerMatchAs( 'live', this.matchId );\n\n            //this.prepareScoringData( { start: true, interval: 1000 } );\n            this.scoringLoaded = true;\n        }\n\n        if( this.getMatchStatus() === 'C' && !this.scoringLoaded )\n        {\n            // Remove the match from the tournament's list of current live matches\n            this.tournament.schedule.unregisterMatchAs( 'live', this.matchId );\n            // Add the match to the tournament's list of complete matches\n            this.tournament.schedule.registerMatchAs( 'complete', this.matchId );\n            this.stopScoringFeed();\n        }\n\n        // Add this match to the schedule if it doesn't currently exist\n        if( !this.tournament.schedule.matchMap[ this.matchId ] )\n        {\n            this.tournament.schedule.matchMap[ this.matchId ] = this;\n        }\n    }\n}"},"setScheduleData":{"Documentation":{"description":"Used to store match schedule data from the 'match' object of any match scoped\njson file or tournament schedule file.","tags":[{"title":"param","description":"Match schedule data","type":{"type":"NameExpression","name":"Object"},"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.setScheduleData = function( data )\n{\n    var prop, i;\n\n    for ( prop in data )\n    {\n        if( prop === 'teams' )\n        // Do not set teams in the same way incase of overwriting teamLists and scoring\n        {\n            for( i = 0; i < data.teams.length; i++ )\n            {\n                $.extend( this.teams[i], data.teams[i] );\n            }\n        }\n        else if ( prop === 'clock' )\n        {\n            if ( this.clock )\n            {\n                if ( data.clock && data.clock.secs > this.clock.secs )\n                {\n                    this.clock = data.clock;\n                }\n            }\n            else\n            {\n                this.clock = data.clock;\n            }\n        }\n        else\n        {\n            this[ prop ] = data[ prop ];\n        }\n    }\n\n    /**\n     * Set additional formatted match date/time information\n     *     - The data derived from this function can also be called directly in\n     *       the template. This also allows for template specific time and date\n     *       formats...\n     */\n    //this.setTimeData();\n\n    this.feeds.scheduleData = true;\n\n    this.registerInTournament();\n}"},"setScoringData":{"Documentation":{"description":"Fired on receiving both match and match timeline data\n    - Stores any team properties in this.teams[i]\n    - Stores timeline data to this.timeline","tags":[{"title":"param","description":"Match scoring data","type":{"type":"NameExpression","name":"Object"},"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.setScoringData = function( data )\n{\n    var prop, i;\n\n    if( data.match && data.match.events )\n    {\n        this.setTournament( data.match.events );\n    }\n\n    this.event = data.event;\n\n    if( data.teams )\n    {\n        for ( i = 0; i < data.teams.length; i++ )\n        {\n            $.extend( this.teams[i], data.teams[i] );\n            this.addPlayerInstances();\n            this.orderTeams();\n        }\n    }\n\n    if( data.timeline )\n    {\n        this.timeline = data.timeline;\n    }\n\n    if ( data.teamStats )\n    {\n        this.stats = this.setMatchStats( data.teamStats );\n    }\n\n    this.registerInTournament();\n}"},"setTournament":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"events"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.setTournament = function( events )\n{\n    if( events[ 0 ] )\n    {\n        this.tournament = window.WidgetController.getTournamentByName( events[ 0 ].id );\n    }\n}"},"addPlayerInstances":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.addPlayerInstances = function()\n{\n    for( var i = 0, iLimit = this.teams.length; i < iLimit; i++ )\n    {\n        var team = this.teams[ i ];\n        if( team.teamList && team.teamList.list )\n        {\n            for( var j = 0, jLimit = team.teamList.list.length; j < jLimit; j++ )\n            {\n                var player = team.teamList.list[ j ];\n                if( player instanceof PULSE.CLIENT.RUGBY.Player )\n                {\n                    // do nothing, instance is already set\n                }\n                else\n                {\n                    team.teamList.list[ j ] = new PULSE.CLIENT.RUGBY.Player( player );\n                }\n            }\n        }\n    }\n}"},"setMatchStats":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.setMatchStats = function( data )\n{\n    var stats = { teamStats : [], playerStats : {} };\n\n    if ( data && data.length > 0 )\n    {\n        for ( var i = 0; i < data.length; i++ )\n        {\n            stats.teamStats.push( data[ i ].stats );\n            if ( data[ i ].playerStats )\n            {\n                if ( this.tournament )\n                {\n                    this.tournament.updatePlayersMap( data[ i ].playerStats );\n                }\n                for ( var j = 0; j < data[ i ].playerStats.length; j++ )\n                {\n                    stats.playerStats[ data[ i ].playerStats[ j ].player.id ] = data[ i ].playerStats[ j ].stats;\n                    if ( this.tournament )\n                    {\n                        if ( ! this.tournament.players[ data[ i ].playerStats[ j ].player.id ].stats )\n                        {\n                            this.tournament.players[ data[ i ].playerStats[ j ].player.id ].stats = {};\n                        }\n                        if ( ! this.tournament.players[ data[ i ].playerStats[ j ].player.id ].stats.match )\n                        {\n                            this.tournament.players[ data[ i ].playerStats[ j ].player.id ].stats.match = {};\n                        }\n                        this.tournament.players[ data[ i ].playerStats[ j ].player.id ].stats.match[ this.matchId ] = data[ i ].playerStats[ j ].stats;\n                    }\n                }\n            }\n        }\n    }\n\n    return stats;\n}"},"setTeamsData":{"Documentation":{"description":"Sets teams at tournament level using match data if they don't already exist and\nadds players to playerLookup\n    - Fired on receiving scoring data only","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.setTeamsData = function( data )\n{\n    var i, iLimit, team, teamId, j, jLimit, player;\n\n    for ( i = 0, iLimit = this.teams.length; i < iLimit; i++ )\n    {\n        // Set teams\n        team = {\n            team: this.teams[ i ],\n            players: this.teams[ i ].teamList ? this.teams[ i ].teamList.list : undefined\n        };\n        teamId = team.team.id;\n\n        if( !this.tournament.teams[ teamId ] || !this.tournament.teams[ teamId ].players )\n        {\n            // Set team objects in tournament\n            this.tournament.teams[ teamId ] = new PULSE.CLIENT.RUGBY.Team( team );\n\n            // Set player objects in tournament\n            if( this.teams[ i ].teamList )\n            {\n                this.tournament.updatePlayersMap( this.teams[ i ].teamList.list );\n            }\n        }\n    }\n}"},"setAdditionalInfo":{"Documentation":{"description":"Sets additional match information from the summary","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.setAdditionalInfo = function( data )\n{\n    if ( data.officials )\n    {\n        this.officials = data.officials;\n    }\n    if ( data.motm )\n    {\n        this.motm = data.motm;\n        if ( this.motm && this.motm.motm )\n        {\n            this.motm.motm = new PULSE.CLIENT.RUGBY.Player( this.motm.motm );\n        }\n        if ( this.motm && this.motm.nominees )\n        {\n            if ( this.motm.nominees.length > 0 )\n            {\n                for ( var i = 0; i < this.motm.nominees.length; i++ )\n                {\n                    this.motm.nominees[ i ] = new PULSE.CLIENT.RUGBY.Player( this.motm.nominees[ i ] );\n                }\n            }\n        }\n    }\n    if ( data.mascots )\n    {\n        this.mascots = data.mascots;\n    }\n}"},"setTimeData":{"Documentation":{"description":"Sets formatted time data on the model upon receiving updated schedule information","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.setTimeData = function()\n{\n    this.time.formattedMatchDate = this.getFormattedMatchDate();\n    this.time.formattedMatchDateLocalToVenue = this.getFormattedMatchDateLocalToVenue();\n    this.time.formattedMatchTime = this.getFormattedMatchTime( undefined, this.time.gmtOffset );\n}"},"orderTeams":{"Documentation":{"description":"Creates an ordered team list according to standardised 15s format:\n    - This is important as numerous data cases see teamList arrays listed in\n      no particular order.\n    - 1 - 23\n    - Does not order 7s teams","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.orderTeams = function()\n{\n    var correctOrder = [];\n    for ( var i = 0; i < 23; i++ )\n    {\n        correctOrder.push( i + 1 );\n    }\n    var i, j, k, teamList, orderedList, player, number;\n\n    // For each team in the match...\n    for( i = 0; i < 2; i++ )\n    {\n        // Check team list exists\n        if( this.teams[i] && this.teams[i].teamList && this.teams[i].teamList.list )\n        {\n            teamList = this.teams[i].teamList.list;\n\n            // Order 15s team\n            if( this.teams[i].teamList.list.length > 12 )\n            {\n                orderedList = [].concat( correctOrder ).slice( 0, teamList.length );\n\n                var leftover = [];\n                for( j = 0; j < teamList.length; j++ )\n                {\n                    player = teamList[ j ];\n                    number = player ? parseInt( player.number, undefined ) : undefined;\n\n                    var found = false;\n                    for( k = 0; k < orderedList.length; k++ )\n                    {\n                        if( number && number === orderedList[ k ] )\n                        {\n                            orderedList[ k ] = player;\n                            found = true;\n                        }\n                    }\n                    if ( !found )\n                    {\n                        leftover.push( player );\n                    }\n                }\n\n                for( k = 0; k < orderedList.length; k++ )\n                {\n                    if ( orderedList[ k ] === parseInt( orderedList[ k ], 10 ) )\n                    {\n                        orderedList[ k ] = leftover.shift();\n                    }\n                }\n\n                this.teams[ i ].teamList.orderedList = orderedList;\n            }\n            // Do not order 7s team\n            else\n            {\n                this.teams[ i ].teamList.orderedList = teamList;\n            }\n        }\n    }\n}"},"getScoringInGame":{"Documentation":{"description":"Returns the scoring data for the entire game","tags":[{"title":"return","description":"Array of scoring data for each team","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getScoringInGame = function()\n{\n    var scores = [], i, score;\n\n    for( i = 0; i < 2; i++ )\n    {\n        score = this.getScoringByTeam( i ) ? this.getScoringByTeam( i ) : 0;\n        scores.push( score );\n    }\n\n    return scores;\n}"},"getScoringByTeam":{"Documentation":{"description":"Returns the scoring data for a given team","tags":[{"title":"param","description":"Array index of a team","type":{"type":"NameExpression","name":"Int"},"name":"index"},{"title":"return","description":"Scoring object for a team","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getScoringByTeam = function( index )\n{\n    if( this.hasScoringData() )\n    {\n        return this.teams[ index ].scoring || {};\n    }\n}"},"getConversionsByTeam":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.Match.prototype.getConversionsByTeam"},{"title":"param","description":null,"type":null,"name":"index"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getConversionsByTeam = function( index )\n{\n    return this.getScoringByTeam( index ).Con || [];\n}"},"getPenaltiesByTeam":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"index"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getPenaltiesByTeam = function( index )\n{\n    return this.getScoringByTeam( index ).Pen || [];\n\n}"},"getTriesByTeam":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"index"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getTriesByTeam = function( index )\n{\n    return this.getScoringByTeam( index ).Try || [];\n}"},"getDropGoalsByTeam":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"index"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getDropGoalsByTeam = function( index )\n{\n    return this.getScoringByTeam( index ).DG || [];\n}"},"getEventsInGame":{"Documentation":{"description":"Returns the penalties data for the entire game","tags":[{"title":"return","description":"Array of penalties for each team","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getEventsInGame = function( eventType )\n{\n    var getter = 'get' + eventType + 'ByTeam',\n        count = [],\n        i;\n\n    for( i = 0; i < 2; i++ )\n    {\n        count.push( this[ getter ]( i ) );\n    }\n\n    return count;\n}"},"getTriesInGame":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getTriesInGame = function()\n{\n    return this.getEventsInGame( 'Tries' );\n}"},"getDropGoalsInGame":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getDropGoalsInGame = function()\n{\n    return this.getEventsInGame( 'DropGoals' );\n}"},"getPenaltiesInGame":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getPenaltiesInGame = function()\n{\n    return this.getEventsInGame( 'Penalties' );\n}"},"getConversionsInGame":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getConversionsInGame = function()\n{\n    return this.getEventsInGame( 'Conversions' );\n}"},"getEventCountForPlayer":{"Documentation":{"description":"Returns the total occurances of a given event in a given match\n    - e.g. If playerId 1 has scored 4 penalties","tags":[{"title":"param","description":"Event type string","type":{"type":"NameExpression","name":"String"},"name":"eventType"},{"title":"param","description":"Unique player id","type":{"type":"NameExpression","name":"Number"},"name":"id"},{"title":"return","description":"Total occurances of an event","type":{"type":"NameExpression","name":"Number"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getEventCountForPlayer = function( eventType, id )\n{\n    var getter = 'get' + eventType + 'InGame',\n        eventsInGame = _.flatten( this[ getter ](), true ),\n        total = 0,\n        i;\n\n    for( i = 0; i < eventsInGame.length; i++ )\n    {\n        if( eventsInGame[ i ] && eventsInGame[ i ].playerId === id )\n        {\n            total += 1;\n        }\n    }\n\n    return total;\n}"},"getTryCountForPlayer":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getTryCountForPlayer = function( id )\n{\n    return this.getEventCountForPlayer( 'Tries', id );\n}"},"getConversionCountForPlayer":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getConversionCountForPlayer = function( id )\n{\n    return this.getEventCountForPlayer( 'Conversions', id );\n}"},"getDropGoalCountForPlayer":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getDropGoalCountForPlayer = function( id )\n{\n    return this.getEventCountForPlayer( 'DropGoals', id );\n}"},"getPenaltyCountForPlayer":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getPenaltyCountForPlayer = function( id )\n{\n    return this.getEventCountForPlayer( 'Penalties', id );\n}"},"getPenaltyTryCountForTeam":{"Documentation":{"description":"Returns the scoring data for the entire game","tags":[{"title":"return","description":"Array of scoring data for each team","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getPenaltyTryCountForTeam = function( index )\n{\n    var triesByTeam = _.flatten( this.getTriesByTeam( index ), true ),\n        total = 0,\n        i;\n\n    for( i = 0; i < triesByTeam.length; i++ )\n    {\n        if( triesByTeam[ i ] && triesByTeam[ i ].playerId === 0 )\n        {\n            total += 1;\n        }\n    }\n\n    return total;\n}"},"getPhases":{"Documentation":{"description":"Returns all the phases for the game","tags":[{"title":"return","description":"Array of phases in the game","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getPhases = function()\n{\n    var phases = [],\n        i;\n\n    for( i = 0; i < this.timeline.length; i++ )\n    {\n        if( _.indexOf( phases, this.timeline[ i ].phase ) < 0 )\n        {\n            phases.push( this.timeline[ i ].phase );\n        }\n    }\n\n    return phases;\n}"},"sortPhases":{"Documentation":{"description":"Returns an object mapping each event to a phase","tags":[{"title":"return","description":"Mapping of events to phases","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.sortPhases = function()\n{\n    var phases = this.getPhases(),\n        mapping = {},\n        ind, i;\n\n    for( i = 0; i < phases.length; i++)\n    {\n        mapping[phases[i]] = [];\n    }\n\n\n    for( i = 0; i < this.timeline.length; i++ )\n    {\n        mapping[ this.timeline[ i ].phase ].push( this.timeline[ i ] );\n    }\n\n    return mapping;\n\n}"},"getEventsbyPhase":{"Documentation":{"description":"Returns all the events in a certain phase","tags":[{"title":"param","description":"The phase of the game","type":{"type":"NameExpression","name":"String"},"name":"phase"},{"title":"return","description":"Array of events","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getEventsbyPhase = function( phase )\n{\n    var mapping = this.sortPhases();\n\n    if( phase in mapping )\n    {\n        return mapping[ phase ];\n    }\n    else\n    {\n        return [];\n    }\n}"},"getGroups":{"Documentation":{"description":"Returns all the groups in the game","tags":[{"title":"return","description":"Array of group titles","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getGroups = function()\n{\n    var groups = [],\n        i;\n\n    for( i = 0; i < this.timeline.length; i++ )\n    {\n        if( _.indexOf( groups, this.timeline[ i ].group ) < 0 )\n        {\n            groups.push( this.timeline[ i ].group );\n        }\n    }\n\n    return groups;\n}"},"sortGroups":{"Documentation":{"description":"Returns a object mapping each event to a group","tags":[{"title":"return","description":"Mapping of events to groups","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.sortGroups = function()\n{\n    var groups = this.getGroups(),\n        mapping = {},\n        ind;\n\n    for( i = 0; i < groups.length; i++ )\n    {\n        mapping[ groups[i] ] = [];\n    }\n\n    for( i = 0; i < this.timeline.length; i++ )\n    {\n        mapping[ this.timeline[i].group ].push( this.timeline[ i ] );\n    }\n\n    return mapping;\n}"},"getEventsbyGroup":{"Documentation":{"description":"Returns all the events in a certain group","tags":[{"title":"param","description":"The group of the event","type":{"type":"NameExpression","name":"String"},"name":"group"},{"title":"return","description":"Array of events","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getEventsbyGroup = function( group )\n{\n    var mapping = this.sortGroups();\n\n    if( group in mapping )\n    {\n        return mapping[ group ];\n    }\n    else\n    {\n        return [];\n    }\n}"},"getScoreAtTimelineEventIndex":{"Documentation":{"description":"Returns the score at a given point in the match","tags":[{"title":"param","description":"The index of the event to look at","type":{"type":"NameExpression","name":"String"},"name":"index"},{"title":"return","description":"Array of scores at a given point in the match","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getScoreAtTimelineEventIndex = function( index )\n{\n    var scores = [ 0, 0 ],\n        i, timelineEvent;\n\n    for( i = 0; i <= index; i++ )\n    {\n        timelineEvent = this.timeline[ i ];\n\n        if( timelineEvent.points )\n        {\n            scores[ timelineEvent.teamIndex ] += timelineEvent.points;\n        }\n    }\n\n    return scores;\n}"},"getHalfTimeScores":{"Documentation":{"description":"Returns the score at half time in the match","tags":[{"title":"return","description":"Array of scores at half time","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getHalfTimeScores = function()\n{\n    var scores = [],\n        i;\n\n    for( i = 0; i < this.timeline.length; i++ )\n    {\n        if( this.timeline[ i ].phase === 'L2' )\n        {\n            scores = this.getScoreAtTimelineEventIndex( i - 1 );\n            return scores;\n        }\n    }\n\n    return scores;\n}"},"getTypes":{"Documentation":{"description":"Returns all the types in the game","tags":[{"title":"return","description":"Array of type titles","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getTypes = function()\n{\n    var types = [],\n        i;\n\n    for( i = 0; i < this.timeline.length; i++ )\n    {\n        if( _.indexOf( types, this.timeline[i].type ) < 0 )\n        {\n            types.push( this.timeline[i].type );\n        }\n    }\n\n    return types;\n}"},"sortTypes":{"Documentation":{"description":"Returns a object mapping each event to a type","tags":[{"title":"return","description":"Mapping of events to types","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.sortTypes = function()\n{\n    var types = this.getTypes(),\n        mapping = {},\n        ind, i;\n\n    for( i = 0; i < types.length; i++ )\n    {\n        mapping[ types[ i ] ] = [];\n    }\n\n    for( i = 0; i < this.timeline.length; i++ )\n    {\n        mapping[ this.timeline[ i ].type ].push( this.timeline[ i ] );\n    }\n\n    return mapping;\n}"},"getEventsbyType":{"Documentation":{"description":"/**\nReturns all the events in a certain type","tags":[{"title":"param","description":"The type of the event","type":{"type":"NameExpression","name":"String"},"name":"type"},{"title":"return","description":"Array of events","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getEventsbyType = function( type )\n{\n    var mapping = this.sortTypes();\n\n    if( type in mapping ) {\n        return mapping[ type ];\n    }\n    else\n    {\n        return [];\n    }\n}"},"filterEventsbyTypes":{"Documentation":{"description":"/**\nReturns all the events of certain types","tags":[{"title":"param","description":"A list of event types","type":{"type":"NameExpression","name":"Array"},"name":"types"},{"title":"return","description":"Array of events","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.filterEventsbyTypes = function( types )\n{\n    var filteredEvents = [];\n    for ( var i = 0; i < this.timeline.length; i++ )\n    {\n        if ( $.inArray( this.timeline[ i ].type, types ) > -1 )\n        {\n            var timeEvent = this.timeline[ i ];\n            timeEvent.index = i;\n            filteredEvents.push( timeEvent );\n        }\n    }\n    return filteredEvents;\n}"},"filterEventsbyGroup":{"Documentation":{"description":"/**\nReturns all the events of certain groups","tags":[{"title":"param","description":"A list of event groups","type":{"type":"NameExpression","name":"Array"},"name":"groups"},{"title":"return","description":"Array of events","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.filterEventsbyGroup = function( groups )\n{\n    var filteredEvents = [];\n    for ( var i = 0; i < this.timeline.length; i++ )\n    {\n        if ( $.inArray( this.timeline[ i ].group, groups ) > -1 )\n        {\n            var timeEvent = this.timeline[ i ];\n            timeEvent.index = i;\n            filteredEvents.push( timeEvent );\n        }\n    }\n    return filteredEvents;\n}"},"sortEventsByTeam":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.Match.prototype.sortEventsByTeam"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.sortEventsByTeam = function()\n{\n    var map = { 0 : [], 1 : [] };\n\n    for( i = 0; i < this.timeline.length; i++ )\n    {\n        map[ this.timeline[ i ].teamIndex ].push( this.timeline[ i ] );\n    }\n    return map;\n}"},"getEventsByTeam":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"team"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getEventsByTeam = function( team )\n{\n    var mapping = this.sortEventsByTeam();\n    if( team in mapping ) {\n        return mapping[ team ];\n    }\n    else\n    {\n        return [];\n    }\n}"},"getPlayerIds":{"Documentation":{"description":"Returns all the playerIds with events in the game","tags":[{"title":"return","description":"Array of playerIds","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getPlayerIds = function()\n{\n    var players = [],\n        i;\n\n    for( i = 0; i < this.timeline.length; i++ )\n    {\n        if( _.indexOf( players, this.timeline[ i ].playerId ) < 0 )\n        {\n            players.push( this.timeline[ i ].playerId );\n        }\n    }\n\n    return players;\n}"},"sortPlayerIds":{"Documentation":{"description":"Returns a object mapping each event to a playerId","tags":[{"title":"return","description":"Mapping of events to playerIds","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.sortPlayerIds = function()\n{\n    var playerIds = this.getPlayerIds(),\n        mapping = {},\n        ind, i;\n\n    for( i = 0; i < playerIds.length; i++ )\n    {\n        mapping[playerIds[i]] = [];\n    }\n\n    for( i = 0; i < this.timeline.length; i++ )\n    {\n        mapping[ this.timeline[ i ].playerId ].push( this.timeline[ i ] );\n    }\n\n    return mapping;\n}"},"getEventsbyPlayerId":{"Documentation":{"description":"Returns all events given a certain playerID","tags":[{"title":"param","description":"The playerId of a player","type":{"type":"NameExpression","name":"String"},"name":"playerId"},{"title":"return","description":"Array of events","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getEventsbyPlayerId = function( playerId )\n{\n    var mapping = this.sortPlayerIds();\n\n    if( playerId in mapping )\n    {\n        return mapping[ playerId ];\n    }\n    else\n    {\n        return [];\n    }\n}"},"getRoundedTimeForEventAtIndex":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"index"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getRoundedTimeForEventAtIndex = function( index )\n{\n    if( !this.timeline[ index ] || this.timeline[ index ].time == null )\n    {\n        return;\n    }\n\n    return Math.floor( this.timeline[ index ].time.secs/60 );\n}"},"getEventTimes":{"Documentation":{"description":"Returns all the times (rounded down to minutes) of events during the game","tags":[{"title":"return","description":"Array of times","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getEventTimes = function()\n{\n    var times = [],\n        rounded, i;\n\n    for( i = 0; i < this.timeline.length; i++ )\n    {\n        rounded = this.getRoundedTimeForEventAtIndex( i );\n        if( _.indexOf( times, rounded ) < 0 )\n        {\n            times.push( Math.floor( rounded ) );\n        }\n    }\n\n    return times;\n}"},"sortEventTimes":{"Documentation":{"description":"Returns a object mapping each event to a time (rounded down to minutes)","tags":[{"title":"return","description":"Mapping of events to times","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.sortEventTimes = function()\n{\n    var times = this.getEventTimes(),\n        mapping = {},\n        ind, i;\n\n    for( i = 0; i < times.length; i++ )\n    {\n        mapping[ times[ i ] ] = [];\n    }\n\n\n    for( i = 0; i < this.timeline.length; i++ )\n    {\n        mapping[ Math.floor( this.timeline[ i ].time.secs / 60 ) ].push( this.timeline[ i ] );\n    }\n\n    return mapping;\n}"},"getEventsAtTime":{"Documentation":{"description":"Returns all events given a certain time (minute)","tags":[{"title":"param","description":"The time of an event","type":{"type":"NameExpression","name":"String"},"name":"time"},{"title":"return","description":"Array of events","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getEventsAtTime = function( time )\n{\n    var mapping = this.sortEventTimes();\n\n    if( time in mapping )\n    {\n        return mapping[ time ];\n    }\n    else\n    {\n        return [];\n    }\n}"},"getEventsBeforeTime":{"Documentation":{"description":"Returns all events before a certain time (minute)","tags":[{"title":"param","description":"The time of an event","type":{"type":"NameExpression","name":"String"},"name":"time"},{"title":"return","description":"Array of events","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getEventsBeforeTime = function( time )\n{\n    var mapping = this.sortEventTimes(),\n        events = [],\n        max = parseInt( time, undefined ),\n        key;\n\n    for( key in mapping )\n    {\n        if( key < max )\n        {\n            events.push.apply( events,mapping[ key ] );\n        }\n    }\n\n    return events;\n}"},"getEventsAfterTime":{"Documentation":{"description":"Returns all events after a certain time (minute)","tags":[{"title":"param","description":"The time of an event","type":{"type":"NameExpression","name":"String"},"name":"time"},{"title":"return","description":"Array of events","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getEventsAfterTime = function( time )\n{\n    var mapping = this.sortEventTimes(),\n        events = [],\n        min = parseInt( time, undefined ),\n        key;\n\n    for( key in mapping )\n    {\n        if( key > min )\n        {\n            events.push.apply( events,mapping[ key ] );\n        }\n    }\n\n    return events;\n}"},"getEventsBetweenTime":{"Documentation":{"description":"Returns all events between two times","tags":[{"title":"param","description":"The lower time","type":{"type":"NameExpression","name":"String"},"name":"timelow"},{"title":"param","description":"The higher time","type":{"type":"NameExpression","name":"String"},"name":"timehigh"},{"title":"return","description":"Array of events","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getEventsBetweenTime = function( timelow, timehigh )\n{\n    var mapping = this.sortEventTimes(),\n        events = [],\n        min = parseInt( timelow, undefined ),\n        max = parseInt( timehigh, undefined ),\n        key;\n\n    for( key in mapping )\n    {\n        if( key > min && key < max )\n        {\n            events.push.apply( events,mapping[ key ] );\n        }\n    }\n\n    return events;\n}"},"filterTimeline":{"Documentation":{"description":"Returns all events from a timeline depending on certain parameters specified in an object","tags":[{"title":"param","description":"Object containing filter labels and criteria","type":{"type":"NameExpression","name":"Object"},"name":"data"},{"title":"return","description":null,"type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.filterTimeline = function( data )\n{\n    var filter = [],\n        single = [],\n        similar = [],\n        splitted = [],\n        count = 0,\n        key, i;\n\n    for( key in data )\n    {\n        switch( key )\n        {\n            case ( 'phase' ):\n                single = this.getEventsbyPhase( data[ key ] );\n                break;\n            case ( 'group' ):\n                single = this.getEventsbyGroup( data[ key ] );\n                break;\n            case ( 'type' ):\n                single = this.getEventsbyType( data[ key ] );\n                break;\n            case ( 'playerId' ):\n                single = this.getEventsbyPlayerId( data[ key ] );\n                break;\n            case ( 'time' ):\n                single = this.getEventsAtTime( data[ key ] );\n                break;\n            case ( 'timeBefore' ):\n                single = this.getEventsBeforeTime( data[ key ] );\n                break;\n            case ( 'timeAfter' ):\n                single = this.getEventsAfterTime( data[ key ] );\n                break;\n            case ( 'team' ):\n                single = this.getEventsByTeam( data[ key ] );\n                break;\n            case ( 'timeBetween' ):\n                splitted = data[ key ].split( ',' );\n                single = this.getEventsBetweenTime( splitted[ 0 ], splitted[ 1 ] );\n                break;\n            default:\n                single = [];\n                break;\n        }\n\n        if( count < 1 )\n        {\n            filter.push.apply( filter, single );\n        }\n        else\n        {\n            similar = [];\n            for( i = 0; i < filter.length; i++ )\n            {\n                if( _.indexOf( single, filter[ i ] ) > -1 )\n                {\n                    similar.push( filter[ i ] );\n                }\n            }\n            filter = similar;\n        }\n        count = count + 1;\n    }\n\n    return filter;\n}"},"getHalfTimeScore":{"Documentation":{"description":"Returns the score halfway through the match\n    - Note that this only works once the match is complete","tags":[{"title":"return","description":"Scores array e.g. [ 16, 13 ]","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getHalfTimeScore = function()\n{\n    var scores;\n\n    for( i = 0; i < this.timeline.length; i++ )\n    {\n        if( this.timeline[ i ].phase === 'L1' )\n        {\n            scores = getScoreAtTimelineEventIndex( i );\n        }\n    }\n\n    return scores;\n}"},"getPlayerMapFromEventArray":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"eventArray"}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getPlayerMapFromEventArray = function( eventArray )\n{\n    var map = {};\n    for ( var i = 0; i < eventArray.length; i++ )\n    {\n        if ( map[ eventArray[ i ].playerId ] )\n        {\n            map[ eventArray[ i ].playerId ].push( eventArray[ i ] );\n        }\n        else\n        {\n            map[ eventArray[ i ].playerId ] = [ eventArray[ i ] ];\n        }\n    }\n    return map;\n}"},"makeSubEvents":{"Documentation":{"description":"Returns a list of events with 'Sub Off' and 'Sub On' combined into a single task if they occur\nat the same time","tags":[{"title":"param","description":"List of events","type":{"type":"NameExpression","name":"Array"},"name":"eventArray"},{"title":"return","description":"List of events with combined task","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.makeSubEvents = function( eventArray )\n{\n    var newArray = [];\n\n    var thisArray = eventArray\n    if ( !thisArray )\n    {\n        thisArray = this.timeline;\n    }\n\n    var arrayLength = thisArray.length;\n    for ( var i = 0; i < arrayLength; i++ )\n    {\n        var type = thisArray[ i ].type\n        if ( type === 'Sub On' || type === 'Sub Off' )\n        {\n            var subAlt = 'Sub Off';\n            if ( type === 'Sub Off' )\n            {\n                subAlt = 'Sub On';\n            }\n            var timestamp = thisArray[ i ].time.secs;\n            var newItem = {};\n            for ( var key in thisArray[ i ] )\n            {\n                newItem[ key ] = thisArray[ i ][ key ];\n            }\n            newItem.type = 'Substitution';\n            newItem.typeLabel = PULSE.I18N.lookup( 'label.match.substitution.short' );\n            newItem[ type ] = thisArray[ i ].playerId;\n            if ( thisArray[ i + 1 ] )\n            {\n                if ( thisArray[ i + 1 ].type === subAlt )\n                {\n                    if ( timestamp === thisArray[ i + 1 ].time.secs )\n                    {\n                        newItem[ subAlt ] = thisArray[ i + 1 ].playerId;\n                        i = i + 1;\n                    }\n                }\n            }\n            newArray.push( newItem );\n        }\n        else\n        {\n            newArray.push( thisArray[ i ] );\n        }\n    }\n    return newArray;\n}"},"getScorers":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.getScorers = function()\n{\n    var scorers = {};\n\n    var scoringEvents = [ 'T5', 'PT5', 'C2', 'P3', 'D3' ];\n\n    for ( var i = 0; i < scoringEvents.length; i++ )\n    {\n        scorers[ scoringEvents[ i ] ] = [ this.filterTimeline( { 'type' : scoringEvents[ i ], 'team' : 0 } ), this.filterTimeline( { 'type' : scoringEvents[ i ], 'team' : 1 } ) ]\n    }\n    return scorers;\n}"},"onData":{"Documentation":{"description":"Match onData\n onData gets called by the data manager when the file called is retrieved and\n the JSONP is read.","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.onData = function( data, id )\n{\n    var that = this, matchState;\n\n    if( id === this.feeds.feedScoring )\n    {\n        this.setScheduleData( data.match );\n        this.setScoringData( data );\n        this.setTeamsData();\n        this.setAdditionalInfo( data );\n\n        if( data )\n        {\n            this.feeds.scoringData = true;\n        }\n\n        matchState = this.getMatchStatus();\n\n        PULSE.CLIENT.notify( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCORING_UPDATE, {\n            success: true,\n            matchId: data.match.matchId,\n            tournamentName: that.tournament.tournamentName\n        } );\n    }\n    else if( id === this.feeds.feedTimeline )\n    {\n        this.setScheduleData( data.match );\n        this.setScoringData( data );\n\n        matchState = this.getMatchStatus();\n\n        if( data )\n        {\n            this.feeds.timelineData = true;\n        }\n\n        PULSE.CLIENT.notify( PULSE.CLIENT.RUGBY.DATA_EVENTS.TIMELINE_UPDATE, {\n            success: true,\n            matchId: data.match.matchId,\n            tournamentName: that.tournament.tournamentName\n        } );\n    }\n    else if( id === this.feeds.feedStats )\n    {\n        this.setScheduleData( data.match );\n        this.setScoringData( data );\n\n        matchState = this.getMatchStatus();\n\n        if( data )\n        {\n            this.feeds.statsData = true;\n        }\n\n        PULSE.CLIENT.notify( PULSE.CLIENT.RUGBY.DATA_EVENTS.STATS_UPDATE, {\n            success: true,\n            matchId: data.match.matchId,\n            tournamentName: that.tournament.tournamentName\n        } );\n    }\n\n}"},"onError":{"Documentation":{"description":"Match onError\n onError gets called by the data manager when the file called is not retrieved","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Match.prototype.onError = function( data, id )\n{\n    var that = this;\n\n}"}},"Documentation":{"description":"Rugby match object","tags":[{"title":"constructor","description":null,"type":null,"name":null},{"title":"param","description":"instance of PULSE.CLIENT.RUGBY.Tournament object","type":{"type":"NameExpression","name":"Object"},"name":"tournament"},{"title":"param","description":"the match ID (can also be a Number)","type":{"type":"NameExpression","name":"String"},"name":"matchId"}]},"Source":"PULSE.CLIENT.RUGBY.Match = function( tournament, matchId )\n{\n    this.tournament = tournament;\n    this.matchId = matchId;\n\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n    this.urlGenerator = PULSE.CLIENT.RUGBY.getUrlGenerator();\n\n    this.feeds = {};\n\n    this.setDefaults();\n}"},"Player":{"prototype":{"getStatsData":{"Documentation":{"description":"Used to directly request stats data","tags":[{"title":"param","description":"The scope of the stats, e.g. 'alltime', 'event', 'series'","type":{"type":"NameExpression","name":"String"},"name":"scope"},{"title":"param","description":"Optional parameters to further scope the stats, e.g { sport : 'mru' }","type":{"type":"NameExpression","name":"Object"},"name":"params"},{"title":"param","description":"Optional configurations for the feed","type":{"type":"NameExpression","name":"Object"},"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.Player.prototype.getStatsData = function( scope, params, config )\n{\n    var pathArray = [ 'stats', 'player', this.id, scope ];\n    var thisParams = {};\n    if ( !config )\n    {\n        config = {};\n    }\n    if ( params )\n    {\n        thisParams = params;\n    }\n\n    thisParams.language = PULSE.CLIENT.LANGUAGE\n\n    this.feeds.statsUrl = this.urlGenerator.makeDataUrl( pathArray, thisParams );\n    this.feeds.feedStats = 'playerStats';\n    this.feeds.statsInterval = config.interval || 60;\n    this.feeds.statsCallback = config.callback || 'onPlayerStats';\n\n    this.dm.addFeed( this.feeds.feedStats, this.feeds.statsUrl,\n        this.feeds.statsInterval, this.feeds.statsCallback, [ this ] );\n\n    this.dm.start( this.feeds.statsUrl );\n\n}"},"onData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.Player.prototype.onData"},{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"PULSE.CLIENT.RUGBY.Player.prototype.onData = function( data, id )\n{\n    if( id === this.feeds.feedStats )\n    {\n        var scope = undefined;\n        var metric = undefined;\n        var param = undefined;\n        var paramValue = undefined;\n\n        if ( data.scope )\n        {\n            var scopes = data.scope.split( '_' );\n            var scope = scopes[ 0 ].toLowerCase();\n            if ( scopes.length > 1 )\n            {\n                param = scopes[ 1 ].toLowerCase();\n                if ( param === 'eventtype' )\n                {\n                    param = 'type';\n                }\n            }\n            else\n            {\n                param = scope;\n            }\n        }\n        if ( data.metric )\n        {\n            metric = data.metric.toLowerCase();\n        }\n\n        if ( data.scopeIds )\n        {\n            paramValue = data.scopeIds;\n            if ( paramValue && param === 'sport' )\n            {\n                var newVal = PULSE.CLIENT.RUGBY.SPORT_LOOKUP[ paramValue ];\n                if ( newVal )\n                {\n                    paramValue = newVal;\n                }\n            }\n        }\n\n        var stats = data.stats;\n        if ( !this.stats )\n        {\n            this.stats = {};\n        }\n        if ( scope )\n        {\n            if ( !this.stats[ scope ] )\n            {\n                this.stats[ scope ] = {};\n            }\n            if ( param )\n            {\n                if ( !this.stats[ scope ][ param ] )\n                {\n                    this.stats[ scope ][ param ] = {};\n                }\n                if ( paramValue )\n                {\n                    this.stats[ scope ][ param ][ paramValue ] = stats;\n                }\n            }\n            else\n            {\n                this.stats[ scope ].stats = stats;\n            }\n        }\n        PULSE.CLIENT.notify( PULSE.CLIENT.RUGBY.DATA_PLAYER.STATS_UPDATE, {\n            id: this.id,\n            success: true\n        } );\n\n    }\n}"},"setData":{"Documentation":{"description":"Store various data passed into the constructor\n    - Players expect to have:\n        country {String}\n        dob {Object}\n        gender {String}\n        height {Number}\n        id {Number}\n        name {Object}\n        pob {String}\n        weight {Number}","tags":[{"title":"param","description":"Player data object ( e.g. id, name, abbreviation )","type":{"type":"NameExpression","name":"Object"},"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.Player.prototype.setData = function( data )\n{\n    var prop, playerProp;\n\n    for( prop in data )\n    {\n        // Set player data at base level if not already\n        if( prop === 'player' )\n        {\n            for( playerProp in data.player )\n            {\n                this[ playerProp ] = data.player[ playerProp ];\n            }\n        }\n        else\n        {\n            // Also store any other data\n            this[ prop ] = data[ prop ];\n        }\n    }\n}"},"getShortName":{"Documentation":{"description":"Returns a short version of a players name","tags":[{"title":"return","description":"Short name of the player","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.Player.prototype.getShortName = function()\n{\n    if( this.name.initials && ( this.name.last.official || this.name.last.known ) )\n    {\n        var last = this.name.last.known;\n        if ( !last )\n        {\n            last = this.name.last.official;\n        }\n        return this.name.initials + ' ' + last;\n    }\n    else if ( this.name.last.official || this.name.last.known )\n    {\n         var last = this.name.last.known;\n        if ( !last )\n        {\n            last = this.name.last.official;\n        }\n        return last;\n    }\n    else\n    {\n        return 'undefined';\n    }\n}"},"getOfficialFullName":{"Documentation":{"description":"Returns a full version of a players name","tags":[{"title":"return","description":"Full name of the player","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.Player.prototype.getOfficialFullName = function()\n{\n    if( this.name.first.official && this.name.last.official )\n    {\n        return this.name.first.official + ' ' + this.name.last.official;\n    }\n    else {\n        return 'undefined';\n    }\n}"},"getDisplayName":{"Documentation":{"description":"Returns a display version of a players name","tags":[{"title":"return","description":"Display name of the player","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.Player.prototype.getDisplayName = function()\n{\n    if ( this.name.display )\n    {\n        return this.name.display;\n    }\n    else\n    {\n        return this.getOfficialFullName();\n    }\n}"},"getKnownFullName":{"Documentation":{"description":"Returns the knwon full name of the player","tags":[{"title":"return","description":"Known full name of the player","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.Player.prototype.getKnownFullName = function()\n{\n    if( this.name.first.known && this.name.last.official )\n    {\n        return this.name.first.known + ' ' + this.name.last.official;\n    }\n    else\n    {\n        return 'undefined';\n    }\n}"},"getOfficialNameasReference":{"Documentation":{"description":"Returns the last name followed by the official first name of a player","tags":[{"title":"return","description":"Last name, then offical first name","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.Player.prototype.getOfficialNameasReference = function()\n{\n    if( this.name.last.official && this.name.first.official )\n    {\n        return this.name.last.official + ', ' + this.name.first.official;\n    }\n    else\n    {\n        return 'undefined';\n    }\n}"},"getKnownNameasReference":{"Documentation":{"description":"Returns the last name followed by the known first name of a player","tags":[{"title":"return","description":"Last name, then known first name","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.Player.prototype.getKnownNameasReference = function()\n{\n    if( this.name.last.official && this.name.first.known )\n    {\n        return this.name.last.official + ', ' + this.name.first.known;\n    }\n    else\n    {\n        return 'undefined';\n    }\n}"},"getOfficialInitials":{"Documentation":{"description":"Returns the official full initials of a player","tags":[{"title":"return","description":"Full official initials of a player","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.Player.prototype.getOfficialInitials = function()\n{\n    if( this.name.initials && this.name.last.official )\n    {\n        return this.name.initials + this.name.last.official.charAt(0);\n    }\n    else\n    {\n        return 'undefined';\n    }\n}"},"getKnownInitials":{"Documentation":{"description":"Returns the full known initials of a player","tags":[{"title":"return","description":"Full known initials of a player","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.Player.prototype.getKnownInitials = function()\n{\n    if( this.name.first.known && this.name.last.official )\n    {\n        return this.name.first.known.charAt(0) + this.name.last.official.charAt(0);\n    }\n    else\n    {\n        return 'undefined';\n    }\n}"},"getLastName":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Player.prototype.getLastName = function()\n{\n    return this.name.last.official;\n}"},"getDobAsDate":{"Documentation":{"description":"Returns a date object from the players date of birth","tags":[{"title":"return","description":"Date of birth for the player","type":{"type":"NameExpression","name":"Date"}}]},"Source":"PULSE.CLIENT.RUGBY.Player.prototype.getDobAsDate = function()\n{\n    var split, dob, day, month, year;\n\n    if( this.dob )\n    {\n        split = this.dob.label.split(' ');\n        day = split[ 0 ];\n\n        if( day.length < 10 )\n        {\n            day = '0' + day;\n        }\n\n        year = split[ 2 ];\n\n        switch ( split[ 1 ] )\n        {\n            case ('January'):\n                month = '01';\n                break;\n            case ('February'):\n                month = '02';\n                break;\n            case ('March'):\n                month = '03';\n                break;\n            case ('April'):\n                month = '04';\n                break;\n            case ('May'):\n                month = '05';\n                break;\n            case ('June'):\n                month = '06';\n                break;\n            case ('July'):\n                month = '07';\n                break;\n            case ('August'):\n                month = '08';\n                break;\n            case ('September'):\n                month = '09';\n                break;\n            case ('October'):\n                month = '10';\n                break;\n            case ('November'):\n                month = '11';\n                break;\n            case ('December'):\n                month = '12';\n                break;\n            default:\n                break;\n        }\n\n        dob = PULSE.CLIENT.DateUtil.parseDateTime( year + '-' + month + '-' + day );\n\n        return dob;\n    }\n    else\n    {\n        return undefined;\n    }\n\n}"},"getCountry":{"Documentation":{"description":"Return the country in a proper format","tags":[{"title":"return","description":"Country in a proper format","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.Player.prototype.getCountry = function()\n{\n    var i, lowerCountry, splitCountry, fixedCountry;\n\n    if( this.country )\n    {\n        lowerCountry = this.country.toLowerCase();\n        splitCountry = lowerCountry.split(' ');\n        fixedCountry = '';\n\n\n        for( i = 0; i < splitCountry.length; i++ )\n        {\n            splitCountry[ i ] = splitCountry[ i ].charAt( 0 ).toUpperCase() + splitCountry[ i ].slice( 1 );\n        }\n\n        return splitCountry.join(' ');\n\n    }\n    else\n    {\n        return 'undefined';\n    }\n\n}"},"getPlayerStatsForType":{"Documentation":{"description":"Return the stats for a given scope and type","tags":[{"title":"param","description":"The scope of the stat, e.g 'alltime'","type":{"type":"NameExpression","name":"String"},"name":"scope"},{"title":"param","description":"The type of stat, e.g. 'mru' ( optional )","type":{"type":"NameExpression","name":"String"},"name":"type"},{"title":"return","description":"An objects of stats for the provided scope/type","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Player.prototype.getPlayerStatsForType = function( scope, param, paramVal )\n{\n    if ( this.stats )\n    {\n        if ( this.stats[ scope ] )\n        {\n            if ( !param )\n            {\n                return this.stats[ scope ].stats;\n            }\n            else\n            {\n                if ( this.stats[ scope ][ param ] )\n                {\n                    if ( !paramVal )\n                    {\n                        return this.stats[ scope ][ param ];\n                    }\n                    else\n                    {\n                        if ( this.stats[ scope ][ param ][ paramVal ] )\n                        {\n                            return this.stats[ scope ][ param ][ paramVal ];\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return undefined;\n}"},"generateCareerStats":{"Documentation":{"description":"Generates career stats for a player for a given scope/type","tags":[{"title":"param","description":"The scope of the stat, e.g 'alltime'","type":{"type":"NameExpression","name":"String"},"name":"scope"},{"title":"param","description":"The type of stat, e.g. 'mru' ( optional )","type":{"type":"NameExpression","name":"String"},"name":"type"}]},"Source":"PULSE.CLIENT.RUGBY.Player.prototype.generateCareerStats = function( scope, param, paramVal )\n{\n    var statsObject = {};\n    statsObject[ param ] = paramVal;\n    this.getStatsData( scope, statsObject );\n}"}},"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for rugby player object"},{"title":"param","description":"Player data object ( e.g. id, name, abbreviation )","type":{"type":"NameExpression","name":"Object"},"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.Player = function( data )\n{\n    this.urlGenerator = PULSE.CLIENT.RUGBY.getUrlGenerator();\n    this.feeds = {};\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n    this.setData( data );\n}"},"Rankings":{"prototype":{"getFormattedUpdateDate":{"Documentation":{"description":"Returns a formatted rankings update string based on a given date format","tags":[{"title":"return","description":"Formatted date string","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.getFormattedUpdateDate = function( dateFormat )\n{\n    var dateString = this.effective.label,\n        date = PULSE.CLIENT.Util.getFormattedDate( dateString, dateFormat );\n\n    return date;\n}"},"getMovementDirection":{"Documentation":{"description":"Returns a string of either 'up'/'down' depending on difference in current and\nprevious team position","tags":[{"title":"param","description":"Rankings entry object","type":{"type":"NameExpression","name":"Object"},"name":"entry"},{"title":"return","description":"Either 'up'/'down'","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.getMovementDirection = function( entry )\n{\n    if( !entry || !entry.pos || !entry.previousPos || entry.pos === entry.previousPos )\n    {\n        return 'no-move';\n    }\n    else if( entry.pos < entry.previousPos )\n    {\n        return 'up';\n    }\n    else if( entry.pos > entry.previousPos )\n    {\n        return 'down';\n    }\n}"},"getMovementPositionDifference":{"Documentation":{"description":"Returns the difference in position between current and previous position","tags":[{"title":"param","description":"Rankings entry object","type":{"type":"NameExpression","name":"Object"},"name":"entry"},{"title":"return","description":"Position difference","type":{"type":"NameExpression","name":"Number"}}]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.getMovementPositionDifference = function( entry )\n{\n    if( !entry || !entry.pos || !entry.previousPos || entry.pos === entry.previousPos )\n    {\n        return 0;\n    }\n    else if( entry.pos > entry.previousPos )\n    {\n        return entry.pos - entry.previousPos;\n    }\n    else if( entry.pos < entry.previousPos )\n    {\n        return entry.previousPos - entry.pos;\n    }\n}"},"getMovementPointsDifference":{"Documentation":{"description":"Returns the diffence in points between current and previous points","tags":[{"title":"param","description":"Rankings entry object","type":{"type":"NameExpression","name":"Object"},"name":"entry"},{"title":"return","description":"Points difference","type":{"type":"NameExpression","name":"Number"}}]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.getMovementPointsDifference = function( entry )\n{\n    if( !entry || !entry.pts || !entry.previousPts || entry.pts === entry.previousPts )\n    {\n        return 0;\n    }\n    else if( entry.pts > entry.previousPts )\n    {\n        return entry.pts - entry.previousPts;\n    }\n    else if( entry.pts < entry.previousPts )\n    {\n        return entry.previousPts - entry.pts;\n    }\n}"},"getBiggestClimbers":{"Documentation":{"description":"Returns a list of entries sorted by biggest climbers\n    - 'Climber' = Difference between current and previous position","tags":[{"title":"return","description":"Sorted array of rankings entries","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.getBiggestClimbers = function()\n{\n    var that = this,\n        movers = this.entries.concat().sort( this.sortBiggestMovers ),\n        climbers = _.filter( movers, function( entry )\n        {\n            return that.getMovementDirection( entry ) === 'up';\n        } );\n    return climbers;\n}"},"getBiggestFallers":{"Documentation":{"description":"Returns a list of entries sorted by biggest fallers\n    - 'Faller' = Difference between current and previous position","tags":[{"title":"return","description":"Sorted array of rankings entries","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.getBiggestFallers = function()\n{\n    var that = this,\n        movers = this.entries.concat().sort( this.sortBiggestMovers ),\n        fallers = _.filter( movers, function( entry )\n        {\n            return that.getMovementDirection( entry ) === 'down';\n        } );\n    return fallers;\n}"},"sortBiggestMovers":{"Documentation":{"description":"Sort function callback to be called upon each iteration in an array\n    - Used by 'getBiggestClimbers' and 'getBiggestFallers'","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.sortBiggestMovers = function( a, b )\n{\n    if( PULSE.CLIENT.RUGBY.Rankings.prototype.getMovementPositionDifference( a ) >\n        PULSE.CLIENT.RUGBY.Rankings.prototype.getMovementPositionDifference( b ) )\n    {\n        return -1;\n    }\n    if( PULSE.CLIENT.RUGBY.Rankings.prototype.getMovementPositionDifference( a ) <\n        PULSE.CLIENT.RUGBY.Rankings.prototype.getMovementPositionDifference( b ) )\n    {\n        return 1;\n    }\n    return 0;\n}"},"getTeamEntryById":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.Rankings.prototype.getTeamEntryById"},{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.getTeamEntryById = function( id )\n{\n    return this.getEntryByElement( id, 'team' );\n}"},"getEntrybyElement":{"Documentation":{"description":"Returns an entry based on a specified element and a specified value","tags":[{"title":"param","description":"Value to determine entry","type":{"type":"NameExpression","name":"String"},"name":"val"},{"title":"param","description":"Element to be compared","type":{"type":"NameExpression","name":"String"},"name":"element"},{"title":"return","description":"Entry matching the value for the element","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.getEntrybyElement = function( val, element )\n{\n    var i;\n    for( i = 0; i < this.entries.length; i++ )\n    {\n        if( ( element.indexOf( 'id' ) > -1) ||\n            ( element.indexOf( 'name' ) > -1) ||\n            ( element.indexOf( 'abbreviation' ) > -1) )\n        {\n            if( this.entries[ i ].team[ element ] == val )\n            {\n                return this.entries[ i ];\n            }\n        }\n        else\n        {\n            if( this.entries[ i ][ element ] == val )\n            {\n                return this.entries[ i ];\n            }\n        }\n    }\n    return undefined;\n}"},"getIndexbyElement":{"Documentation":{"description":"Returns an index based on a specified element and a specified value","tags":[{"title":"param","description":"Value to determine entry","type":{"type":"NameExpression","name":"String"},"name":"val"},{"title":"param","description":"Element to be compared","type":{"type":"NameExpression","name":"String"},"name":"element"},{"title":"return","description":"Index of the entry in the array","type":{"type":"NameExpression","name":"Integer"}}]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.getIndexbyElement = function( val, element )\n{\n    var i;\n    for( i = 0; i < this.entries.length; i++ )\n    {\n        if( ( element.indexOf( 'id' ) > -1 ) ||\n            ( element.indexOf( 'name' ) > -1 ) ||\n            ( element.indexOf( 'abbreviation' ) > -1 ) )\n        {\n            if( this.entries[ i ].team[ element ] == val )\n            {\n                return i;\n            }\n        }\n        else\n        {\n            if( this.entries[ i ][ element ] == val )\n            {\n                return i;\n            }\n        }\n    }\n    return undefined;\n}"},"getEntriesNearElement":{"Documentation":{"description":"Returns an array of entries near to another entry based on the value of an element","tags":[{"title":"param","description":"Value to determine entry","type":{"type":"NameExpression","name":"String"},"name":"val"},{"title":"param","description":"Element to be compared","type":{"type":"NameExpression","name":"String"},"name":"element"},{"title":"param","description":"The amount of elements lower than the found element","type":{"type":"NameExpression","name":"String"},"name":"lower"},{"title":"param","description":"The amount of elements above the given element","type":{"type":"NameExpression","name":"String"},"name":"upper"},{"title":"return","description":"An array of entries","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.getEntriesNearElement = function( val, element, lower, upper )\n{\n    var out = [], id, low, high, i;\n\n    for( i = 0; i < this.entries.length; i++ )\n    {\n        if( ( element.indexOf( 'id' ) > -1 ) ||\n            ( element.indexOf( 'name' ) > -1 ) ||\n            ( element.indexOf( 'abbreviation' ) > -1 ) )\n        {\n            if( this.entries[ i ].team[ element ] == val )\n            {\n                id = i;\n            }\n        }\n        else\n        {\n            if( this.entries[ i ][ element ] == val )\n            {\n                id = i;\n            }\n        }\n    }\n\n    low = id - parseInt( lower, undefined );\n\n    if( low < 0 )\n    {\n        low = 0;\n    }\n    high = id + parseInt( upper, undefined );\n\n    if( high + 1 > this.entries.length )\n    {\n        high = this.entries.length - 1;\n    }\n    for( i = low; i < high + 1; i++ )\n    {\n        out.push( this.entries[ i ] );\n    }\n    return out;\n}"},"getElementsNearElement":{"Documentation":{"description":"Return an array of elements near an entry based on the value of another element","tags":[{"title":"param","description":"Value to determine entry","type":{"type":"NameExpression","name":"String"},"name":"val"},{"title":"param","description":"Element to be compared","type":{"type":"NameExpression","name":"String"},"name":"inelement"},{"title":"param","description":"Element to be outputted","type":{"type":"NameExpression","name":"String"},"name":"outelement"},{"title":"param","description":"The amount of elements lower than the found element","type":{"type":"NameExpression","name":"String"},"name":"lower"},{"title":"param","description":"The amount of elements above the given element","type":{"type":"NameExpression","name":"String"},"name":"upper"},{"title":"return","description":"An array of entries","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.getElementsNearElement = function( val, inelement, outelement, lower, upper )\n{\n    var elements = [],\n        out = [], i;\n\n    elements = this.getEntriesNearElement( val, inelement, lower, upper );\n\n    for( i = 0; i < elements.length; i++ )\n    {\n        if( ( outelement.indexOf( 'id' ) > -1) ||\n            ( outelement.indexOf( 'name' ) > -1) ||\n            ( outelement.indexOf( 'abbreviation' ) > -1) )\n        {\n            out.push( elements[ i ].team[ outelement ] );\n        }\n        else\n        {\n            out.push( elements[ i ][ outelement ] );\n        }\n    }\n    return out;\n}"},"getElementbyElement":{"Documentation":{"description":"Return an element of an entity based on the value of another element","tags":[{"title":"param","description":"Value to determine entity","type":{"type":"NameExpression","name":"String"},"name":"val"},{"title":"param","description":"Element to be compared","type":{"type":"NameExpression","name":"String"},"name":"inelement"},{"title":"param","description":"Element to be outputted","type":{"type":"NameExpression","name":"String"},"name":"outelement"},{"title":"return","description":"Entry element value matching the value for the elemen","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.getElementbyElement = function( val, inelement, outelement )\n{\n    var out = this.getEntrybyElement( val, inelement );\n\n    if( ( outelement.indexOf( 'id' ) > -1) || ( outelement.indexOf( 'name' ) > -1) || ( outelement.indexOf( 'abbreviation' ) > -1) )\n    {\n        return out.team[ outelement ];\n    }\n    else\n    {\n        return out[ outelement ];\n    }\n}"},"getElementsFromArray":{"Documentation":{"description":"Return array of elements given an array of entries and an element","tags":[{"title":"param","description":"Array of entries","type":{"type":"NameExpression","name":"String"},"name":"inside"},{"title":"param","description":"Element to be outputted","type":{"type":"NameExpression","name":"String"},"name":"outelement"},{"title":"return","description":"Array of elements","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.getElementsFromArray = function( inside, outelement )\n{\n    var out = [];\n    for( var i = 0; i < inside.length; i++ )\n    {\n        if( ( outelement.indexOf( 'id' ) > -1) || ( outelement.indexOf( 'name' ) > -1) || ( outelement.indexOf( 'abbreviation' ) > -1) )\n        {\n            out.push( inside[ i ].team[ outelement ] );\n        }\n        else\n        {\n            out.push( inside[ i ][ outelement ] );\n        }\n    }\n    return out;\n}"},"getEntriesBelowElement":{"Documentation":{"description":"Returns a ranking entry below a value of another element","tags":[{"title":"param","description":"Position of entry","type":{"type":"NameExpression","name":"String"},"name":"pos"},{"title":"return","description":"Ranking entry","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.getEntriesBelowElement = function( val, element )\n{\n    var out = [];\n    var fval = parseFloat( val );\n\n    for( var i = 0; i < this.entries.length; i++ )\n    {\n        if( parseFloat( this.entries[ i ][ element ] ) < fval )\n        {\n            out.push( this.entries[ i ] );\n        }\n    }\n    return out;\n}"},"getElementsBelowElement":{"Documentation":{"description":"Return an element of an entity below a value of another element","tags":[{"title":"param","description":"Value to determine entity","type":{"type":"NameExpression","name":"String"},"name":"val"},{"title":"param","description":"Element to be compared","type":{"type":"NameExpression","name":"String"},"name":"inelement"},{"title":"param","description":"Element to be outputted","type":{"type":"NameExpression","name":"String"},"name":"outelement"},{"title":"return","description":"Entry element value matching the value for the elemen","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.getElementsBelowElement = function( val, inelement, outelement )\n{\n    var inside = this.getEntriesBelowElement( val, inelement );\n    return this.getElementsFromArray( inside, outelement );\n}"},"getTeams":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.getTeams = function()\n{\n    var teams = [];\n    for( var i = 0; i < this.entries.length; i++ )\n    {\n        teams.push( this.entries[ i ].team.name );\n    }\n    return teams;\n\n}"},"getTeamIds":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.getTeamIds = function()\n{\n    var teams = [];\n    for( var i = 0; i < this.entries.length; i++ )\n    {\n        teams.push( this.entries[ i ].team.id );\n    }\n    return teams;\n\n}"},"getEntriesAboveElement":{"Documentation":{"description":"Returns a ranking entry above a value of another element","tags":[{"title":"param","description":"Position of entry","type":{"type":"NameExpression","name":"String"},"name":"pos"},{"title":"return","description":"Array of entries","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.getEntriesAboveElement = function( val, element )\n{\n    var out = [];\n    var fval = parseFloat( val );\n\n    for( var i = 0; i < this.entries.length; i++ )\n    {\n        if( parseFloat( this.entries[ i ][ element ] ) > fval )\n        {\n            out.push( this.entries[ i ] );\n        }\n    }\n    return out;\n}"},"getElementsAboveElement":{"Documentation":{"description":"Return an array of elements of an entity above a value of another element","tags":[{"title":"param","description":"Value to determine entity","type":{"type":"NameExpression","name":"String"},"name":"val"},{"title":"param","description":"Element to be compared","type":{"type":"NameExpression","name":"String"},"name":"inelement"},{"title":"param","description":"Element to be outputted","type":{"type":"NameExpression","name":"String"},"name":"outelement"},{"title":"return","description":"Array of entry element values matching the value for the elemen","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.getElementsAboveElement = function( val, inelement, outelement )\n{\n    var inside = this.getEntriesAboveElement( val, inelement );\n    return this.getElementsFromArray( inside, outelement );\n}"},"getEntriesBetweenElements":{"Documentation":{"description":"Return an array of entities between two values for another element","tags":[{"title":"param","description":"Lower value","type":{"type":"NameExpression","name":"String"},"name":"val1"},{"title":"param","description":"Higher value","type":{"type":"NameExpression","name":"String"},"name":"val2"},{"title":"param","description":"Element to be compared","type":{"type":"NameExpression","name":"String"},"name":"element"},{"title":"return","description":"Array of entries between the two values","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.getEntriesBetweenElements = function( val1, val2, element )\n{\n    var out = [];\n    var fval1 = parseFloat( val1 );\n    var fval2 = parseFloat( val2 );\n\n    for( var i = 0; i < this.entries.length; i++ )\n    {\n        if( parseFloat( this.entries[ i ][ element ] ) > fval1 && parseFloat( this.entries[ i ][ element ] ) < fval2 )\n        {\n            out.push( this.entries[ i ] );\n        }\n    }\n    return out;\n}"},"getElementsBetweenElements":{"Documentation":{"description":"Return an array of elements of an entity between two values for another element","tags":[{"title":"param","description":"Lower value","type":{"type":"NameExpression","name":"String"},"name":"val1"},{"title":"param","description":"Higher value","type":{"type":"NameExpression","name":"String"},"name":"val2"},{"title":"param","description":"Element to be compared","type":{"type":"NameExpression","name":"String"},"name":"inelement"},{"title":"param","description":"Elment type to be outputted","type":{"type":"NameExpression","name":"String"},"name":"outelement"},{"title":"return","description":"Array of elements of entries between the two values","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.getElementsBetweenElements = function( val1, val2, inelement, outelement )\n{\n    var inside = this.getEntriesBetweenElements( val1, val2, inelement );\n    return this.getElementsFromArray( inside, outelement );\n\n}"},"filterRankings":{"Documentation":{"description":"Returns all entries from standings depending on certain parameters specified in an object","tags":[{"title":"param","description":"Object containing filter labels and criteria","type":{"type":"NameExpression","name":"Object"},"name":"data"},{"title":"return","description":"filter Array of entries","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.filterRankings = function( data )\n{\n    var filter = [],\n        single = [],\n        similar = [],\n        splitted = [],\n        count = 0, rest, key;\n\n    for( key in data )\n    {\n        if( key.indexOf( 'Lower' ) > -1 )\n        {\n            rest = key.replace( 'Lower', '' );\n            single = this.getEntriesBelowElement( data[ key ], rest );\n        }\n        else if( key.indexOf( 'Higher' ) > -1 )\n        {\n            rest = key.replace( 'Higher', '' );\n            single = this.getEntriesAboveElement( data[ key ], rest );\n        }\n        else if( key.indexOf( 'Between' ) > -1 )\n        {\n            rest = key.replace( 'Between', '' );\n            splitted = data[ key ].split( ',' );\n            single = this.getEntriesBetweenElements( splitted[ 0 ], splitted[ 1 ], rest );\n        }\n        else if( key.indexOf( 'Near' ) > -1 )\n        {\n            rest = key.replace( 'Near', '' );\n            splitted = data[ key ].split( ',' );\n            single = this.getEntriesNearElement( splitted[ 0 ], rest, splitted[ 1 ], splitted[ 2 ] );\n        }\n        else\n        {\n            switch( key )\n            {\n                case ( 'matches'):\n                case ( 'pts'):\n                case ( 'pos'):\n                case ( 'name'):\n                case ( 'abbreviation'):\n                case ( 'id'):\n                    single = [ this.getEntryByElement( data[ key ], key ) ];\n                    break;\n                default:\n                    single = [];\n                    break;\n            }\n\n        }\n        if( count < 1 )\n        {\n            filter.push.apply( filter, single );\n        }\n        else\n        {\n            similar = [];\n            for( var i = 0; i < filter.length; i++ )\n            {\n                if( single.indexOf( filter[ i ] ) > -1 )\n                {\n                    similar.push( filter[ i ] );\n                }\n            }\n            filter = similar;\n        }\n        count = count + 1;\n    }\n    return filter;\n}"},"filterElementsFromRankings":{"Documentation":{"description":"Returns an array of elements for rankings","tags":[{"title":"param","description":"Objects containing filter labels and criteria","type":{"type":"NameExpression","name":"Object"},"name":"data"},{"title":"param","description":"Element type to be outputted","type":{"type":"NameExpression","name":"String"},"name":"outelement"},{"title":"return","description":"Array of elements","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.filterElementsFromRankings = function( data, outelement )\n{\n    var inside = this.filterRankings( data );\n    return this.getElementsFromArray( inside, outelement );\n}"},"getPtsByName":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"name"}]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.getPtsByName = function( name )\n{\n    return this.getElementByElement( name, 'name', 'pts' );\n}"},"getTeamNames":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.getTeamNames = function()\n{\n    return this.getElementsFromArray( this.entries, 'name' );\n}"},"sort":{"Documentation":{"description":"Sorts the Rankings array based on a certain element","tags":[{"title":"param","description":"Element to sort the array","type":{"type":"NameExpression","name":"String"},"name":"element"}]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.sort = function( element )\n{\n    var out = [],\n        splitted = element.split( ',' ),\n        teams = [];\n\n    for( var i = 0; i < this.entries.length; i++ )\n    {\n        teams.push( this.entries[ i ] );\n    }\n\n\n    teams.sort( function( a, b )\n    {\n        var lastA, lastB;\n\n        if( a[ element ] && b[ element ] && splitted.length < 2 )\n        {\n            lastA = parseFloat( a[ element ] );\n            lastB = parseFloat( b[ element ] );\n            if( lastA > lastB )\n            {\n                if( element == 'pts' )\n                {\n                    return -1;\n                }\n                else\n                {\n                    return 1;\n                }\n            }\n            else if( lastA < lastB )\n            {\n                if( element == 'pts' )\n                {\n                    return 1;\n                }\n                else\n                {\n                    return -1;\n                }\n            }\n            return 0;\n        }\n        else if( splitted[ 0 ] == 'team' && splitted.length > 1 )\n        {\n            if( a.team[ splitted[ 1 ] ] && b.team[ splitted[ 1 ] ] )\n            {\n                lastA = a.team[ splitted[ 1 ] ];\n                lastB = b.team[ splitted[ 1 ] ];\n                if( lastA < lastB )\n                {\n                    return -1;\n                }\n                else if( lastA > lastB )\n                {\n                    return 1;\n                }\n                return 0;\n            }\n            // Make sure undefined elements float to the bottom of the list for names/abbr\n            if( a.team[ splitted[ 1 ] ] && !b.team[ splitted[ 1 ] ] )\n            {\n                return -1;\n            }\n            else\n            {\n                return 1;\n            }\n        }\n        // Make sure undefined elements float to the bottom of the list\n        if( a[ element ] && !b[ element ] )\n        {\n            return -1;\n        }\n        else\n        {\n            return 1;\n        }\n        return 0;\n    }\n    );\n    return teams;\n}"},"sortArray":{"Documentation":{"description":"Sorts the Rankings array based on a certain element","tags":[{"title":"param","description":"Element to sort the array","type":{"type":"NameExpression","name":"String"},"name":"element"}]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.sortArray = function( array, element )\n{\n    var out = [],\n        splitted = element.split( ',' ),\n        teams = [];\n\n    for( var i = 0; i < array.length; i++ )\n    {\n        teams.push( array[ i ] );\n    }\n\n\n    teams.sort( function( a, b )\n    {\n        var lastA, lastB;\n\n        if( a[ element ] && b[ element ] && splitted.length < 2 )\n        {\n            lastA = parseFloat( a[ element ] );\n            lastB = parseFloat( b[ element ] );\n            if( lastA > lastB )\n            {\n                if( element == 'pts' )\n                {\n                    return -1;\n                }\n                else\n                {\n                    return 1;\n                }\n            }\n            else if( lastA < lastB )\n            {\n                if( element == 'pts' )\n                {\n                    return 1;\n                }\n                else\n                {\n                    return -1;\n                }\n            }\n            return 0;\n        }\n        else if( splitted[ 0 ] == 'team' && splitted.length > 1 )\n        {\n            if( a.team[ splitted[ 1 ] ] && b.team[ splitted[ 1 ] ] )\n            {\n                lastA = a.team[ splitted[ 1 ] ];\n                lastB = b.team[ splitted[ 1 ] ];\n                if( lastA < lastB )\n                {\n                    return -1;\n                }\n                else if( lastA > lastB )\n                {\n                    return 1;\n                }\n                return 0;\n            }\n            // Make sure undefined elements float to the bottom of the list for names/abbr\n            if( a.team[ splitted[ 1 ] ] && !b.team[ splitted[ 1 ] ] )\n            {\n                return -1;\n            }\n            else\n            {\n                return 1;\n            }\n        }\n        // Make sure undefined elements float to the bottom of the list\n        if( a[ element ] && !b[ element ] )\n        {\n            return -1;\n        }\n        else\n        {\n            return 1;\n        }\n        return 0;\n    }\n    );\n    return teams;\n}"},"getRankingsData":{"Documentation":{"description":"Checks if rankings data has already been requested\n    - If the same request has already been made and data has been received then notify DOM\n    - If request has not been made or request is different then make a new request","tags":[{"title":"param","description":"Request config","type":{"type":"NameExpression","name":"Object"},"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.getRankingsData = function( config )\n{\n    var pathArray = [ 'rankings', this.scope ],\n        params = config.params ? config.params : { language: PULSE.CLIENT.LANGUAGE },\n        newUrl = this.urlGenerator.makeDataUrl( pathArray, params );\n\n    if( newUrl === this.feeds.rankingsUrl )\n    {\n        if( this.hasRankingsData )\n        {\n            PULSE.CLIENT.notify( PULSE.CLIENT.RUGBY.DATA_EVENTS.RANKINGS_UPDATE, {\n                id: that.scope,\n                success: true\n            } );\n        }\n    }\n    else\n    {\n        this.requestRankingsData( config );\n    }\n}"},"requestRankingsData":{"Documentation":{"description":"Adds rankings feed to data manager","tags":[{"title":"param","description":"Boolean to determine whether to start feed immediately","type":{"type":"NameExpression","name":"Boolean"},"name":"start"}]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.requestRankingsData = function( config )\n{\n    var pathArray = [ 'rankings', this.scope ],\n        params = config.params ? config.params : { language: PULSE.CLIENT.LANGUAGE };\n\n    this.feeds.rankingsUrl = this.urlGenerator.makeDataUrl( pathArray, params );\n    this.feeds.feedRankings = 'rankings-' + this.scope;\n    this.feeds.rankingsInterval = 0;\n    this.feeds.rankingsCallback = 'onRankings';\n\n    this.dm.addFeed( this.feeds.feedRankings, this.feeds.rankingsUrl,\n        this.feeds.rankingsInterval, this.feeds.rankingsCallback, [ this ] );\n\n    if( config.start || config && typeof config === 'boolean' )\n    {\n        this.dm.start( this.feeds.rankingsUrl );\n    }\n\n    this.hasRankingsData = false;\n}"},"onData":{"Documentation":{"description":"Store rankings data and notify DOM if data is received","tags":[{"title":"param","description":"JSON data","type":{"type":"NameExpression","name":"Object"},"name":"data"},{"title":"param","description":"Id string for the received data","type":{"type":"NameExpression","name":"String"},"name":"id"}]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.onData = function( data, id )\n{\n    var that = this;\n\n    if( id === this.feeds.feedRankings && data )\n    {\n        this.label = data.label;\n        this.effective = data.effective;\n        this.entries = data.entries;\n        this.hasRankingsData = true;\n\n        PULSE.CLIENT.notify( PULSE.CLIENT.RUGBY.DATA_EVENTS.RANKINGS_UPDATE, {\n            id: that.scope,\n            success: true\n        } );\n    }\n}"},"onError":{"Documentation":{"description":"Notify DOM of failure","tags":[{"title":"param","description":"Failed response","type":{"type":"NameExpression","name":"Object"},"name":"data"},{"title":"param","description":"Id string for the received data","type":{"type":"NameExpression","name":"String"},"name":"id"}]},"Source":"PULSE.CLIENT.RUGBY.Rankings.prototype.onError = function( data, id )\n{\n    var that = this;\n\n    if( id === this.feeds.feedRankings )\n    {\n        PULSE.CLIENT.notify( PULSE.CLIENT.RUGBY.DATA_EVENTS.RANKINGS_UPDATE, {\n            id: that.scope,\n            success: false\n        } );\n    }\n}"}},"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for Rugby rankings list\n    - Rankings objects are stored at the window level\n    - Only one rankings instance should exist for any given rankings scope"},{"title":"param","description":"Rankings scope e.g. 'mru', 'wru', 'mrs', etc...","type":{"type":"NameExpression","name":"String"},"name":"scope"}]},"Source":"PULSE.CLIENT.RUGBY.Rankings = function( scope )\n{\n    this.scope = scope;\n\n    if( !window.rankings )\n    {\n        window.rankings = {};\n    }\n\n    // Check if a rankings instance for this scope already exists else create it\n    if( window.rankings[ this.scope ] )\n    {\n        return window.rankings[ this.scope ]\n    }\n    else\n    {\n        window.rankings[ this.scope ] = this;\n    }\n\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n    // As the rankings folder currently sits at same level as tournaments on CDN\n    // Url the 'tournament' param for constructing correct URLs. Subject to change.\n    this.urlGenerator = new PULSE.CLIENT.RUGBY.UrlGenerator();\n    this.feeds = {};\n\n    this.getRankingsData( {\n        start: true,\n        language: PULSE.CLIENT.LANGUAGE\n    } );\n}"},"Schedule":{"prototype":{"getScheduleData":{"Documentation":{"description":"Requests a list of match objects that match a given set of parameters\n    .e.g. /rugby/match?states=U,L&sports=mru","tags":[{"title":"param","description":"Url constructor options","type":{"type":"NameExpression","name":"Object"},"name":"options"}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getScheduleData = function( options )\n{\n    if( this.tournament )\n    {\n        this.requestTournamentSchedule( options );\n    }\n    else\n    {\n        this.requestMetaSchedule( options );\n    }\n}"},"requestTournamentSchedule":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.Schedule.prototype.requestTournamentSchedule"},{"title":"param","description":null,"type":null,"name":"options"}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.requestTournamentSchedule = function( options )\n{\n    var pathArray = [ 'event', this.tournament.tournamentName, 'schedule' ],\n        start;\n\n    this.feeds.scheduleUrl = this.tournamentUrlGenerator.makeDataUrl( pathArray, { language: PULSE.CLIENT.LANGUAGE } );\n    this.feeds.feedSchedule = this.tournament.tournamentName || 'schedule';\n    this.feeds.scheduleInterval = 300;\n    this.feeds.scheduleCallback = 'onSchedule';\n\n    if( _.isObject( options ) )\n    {\n        start = options.start;\n        this.feeds.scheduleInterval = this.feeds.scheduleInterval || options.interval;\n    }\n\n    this.dm.addFeed( this.feeds.feedSchedule, this.feeds.scheduleUrl,\n        this.feeds.scheduleInterval, this.feeds.scheduleCallback, [ this ] );\n\n    this.scheduleLoaded = true;\n\n    if( _.isBoolean( options ) || start )\n    {\n        this.dm.start( this.feeds.scheduleUrl );\n    }\n}"},"requestMetaSchedule":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"options"}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.requestMetaSchedule = function( options )\n{\n    var pathArray = [ 'match' ],\n        params, targets, start;\n\n    options = options || {};\n\n    params = options.params ? $.extend( options.params || {}, { callback: this.metaScheduleCallback } ) : { language: PULSE.CLIENT.LANGUAGE };\n\n    this.feeds.feedSchedule = options.feedName || 'metaScheduleData';\n    this.feeds.scheduleUrl = options.feedUrl || this.urlGenerator.makeDataUrl( pathArray, options.params );\n    this.feeds.scheduleInterval = options.interval ? options.interval : 300;\n    this.feeds.scheduleCallback = options.callback || 'metaScheduleDataCallback';\n\n    targets = options.target ? [ this ].concat( options.target ) : [ this ];\n\n    this.dm.addFeed( this.feeds.feedSchedule, this.feeds.scheduleUrl,\n        this.feeds.scheduleInterval, this.feeds.scheduleCallback, targets );\n\n    if( _.isBoolean( options ) && options === true || options.start )\n    {\n        this.dm.start( this.feeds.scheduleUrl );\n    }\n}"},"getMatchById":{"Documentation":{"description":"Return the stored match object from matches map","tags":[{"title":"param","description":"Unique match id","type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"String"},{"type":"NameExpression","name":"Number"}]},"name":"matchId"},{"title":"return","description":"Stored match object","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getMatchById = function( matchId )\n{\n    return this.matchMap[ matchId ];\n}"},"getNextMatch":{"Documentation":{"description":"Get first match from the chronologically sorted upcoming matches array","tags":[{"title":"return","description":"Stored match object","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getNextMatch = function()\n{\n    var nextMatch, matchId, match;\n\n    for( matchId in this.matchMap )\n    {\n        match = this.matchMap[ matchId ];\n\n        if( match.status === 'U' && ( !nextMatch || match.time.millis < nextMatch.time.millis ) )\n        {\n            nextMatch = match;\n        }\n    }\n\n    return nextMatch;\n}"},"getLatestMatch":{"Documentation":{"description":"Get most recent match from the chronologically sorted complete matches array","tags":[{"title":"return","description":"Stored match object","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getLatestMatch = function()\n{\n    var latestMatch, matchId, match;\n\n    for( matchId in this.matchMap )\n    {\n        match = this.matchMap[ matchId ];\n\n        if( match.status === 'C' && ( !latestMatch || match.time.millis > latestMatch.time.millis ) )\n        {\n            latestMatch = match;\n        }\n    }\n\n    return latestMatch;\n}"},"getNextMatchForTeam":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.Schedule.prototype.getNextMatchForTeam"},{"title":"param","description":null,"type":null,"name":"teamId"}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getNextMatchForTeam = function( teamId )\n{\n    var i, matchId, match;\n\n    for( i = 0, iLimit = this.upcomingMatches.length; i < iLimit; i++ )\n    {\n        matchId = this.upcomingMatches[i];\n        match = this.getMatchById( matchId );\n\n        if( match.hasTeamWithId( teamId ) )\n        {\n            return match;\n        }\n    }\n}"},"getAllMatchesModel":{"Documentation":{"description":"Create a model for all matches in this event","tags":[{"title":"param","description":"Date format string","type":{"type":"NameExpression","name":"String"},"name":"dateFormat"},{"title":"param","description":"Time format string","type":{"type":"NameExpression","name":"String"},"name":"timeFormat"},{"title":"return","description":"Object containing matches array","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getAllMatchesModel = function( dateFormat, timeFormat )\n{\n    var model = { matches: [] },\n        allMatches = [].concat( this.completeMatches, this.liveMatches, this.upcomingMatches ),\n        i, matchId, match;\n\n    for( i = 0, iLimit = allMatches.length; i < iLimit; i++ )\n    {\n        matchId = allMatches[i];\n        match = this.getMatchById( matchId );\n\n        model.matches.push( match );\n    }\n\n    return model;\n}"},"getMatchesSortedByTournamentModel":{"Documentation":{"description":"Create a model for all matches in this event","tags":[{"title":"param","description":"Date format string","type":{"type":"NameExpression","name":"String"},"name":"dateFormat"},{"title":"param","description":"Time format string","type":{"type":"NameExpression","name":"String"},"name":"timeFormat"},{"title":"return","description":"Object containing matches array","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getMatchesSortedByTournamentModel = function( dateFormat, timeFormat )\n{\n    var model = { tournaments: {} },\n        allMatches = [].concat( this.completeMatches, this.liveMatches, this.upcomingMatches ),\n        i, matchId, match, matchStatus, label, matchEvent, thisMatch;\n\n    for( i = 0, iLimit = allMatches.length; i < iLimit; i++ )\n    {\n        matchId = allMatches[ i ];\n        match = this.getMatchById( matchId );\n        matchStatus = match.getMatchStatus();\n\n        thisMatch = undefined;\n\n        if ( match && match.events && match.events.length > 0 )\n        {\n            thisMatch = match.events[0]\n        }\n        // If this schedule belongs to a tournament then just use that else use match.event\n        matchEvent = this.tournament && this.tournament.label ? this.tournament : thisMatch;\n\n        // Return if no tournament information is available\n        if( !matchEvent || !matchEvent.label )\n        {\n            continue;\n        }\n\n        // Create a new tournament grouping for the given match\n        if( !model.tournaments[ matchEvent.label ] )\n        {\n            model.tournaments[ matchEvent.label ] = { U: [], L: [], C: [] };\n        }\n\n        // Store match in tournament group\n        model.tournaments[ matchEvent.label ][ matchStatus ].push( match );\n        model.tournaments[ matchEvent.label ].id = matchEvent.id;\n    }\n\n    return model;\n}"},"getLiveMatchesModel":{"Documentation":{"description":"Create live matches only model for all live matches stored in the schedule","tags":[{"title":"param","description":"Date format string","type":{"type":"NameExpression","name":"String"},"name":"dateFormat"},{"title":"param","description":"Time format string","type":{"type":"NameExpression","name":"String"},"name":"timeFormat"},{"title":"return","description":"Object containing matches array","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getLiveMatchesModel = function( dateFormat, timeFormat )\n{\n    var model = { matches: [] },\n        dateAndTime = { dateFormat: dateFormat, timeFormat: timeFormat },\n        liveModel = this.getMatchArrayModelForType( 'live', false, dateAndTime );\n\n    model.matches = model.matches.concat( liveModel.matches );\n\n    return model;\n}"},"getUpcomingMatchesModel":{"Documentation":{"description":"Create live matches only model for all live matches stored in the schedule","tags":[{"title":"param","description":"Date format string","type":{"type":"NameExpression","name":"String"},"name":"dateFormat"},{"title":"param","description":"Time format string","type":{"type":"NameExpression","name":"String"},"name":"timeFormat"},{"title":"return","description":"Object containing matches array","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getUpcomingMatchesModel = function( dateFormat, timeFormat )\n{\n    var model = { matches: [] },\n        dateAndTime = { dateFormat: dateFormat, timeFormat: timeFormat },\n        upcomingModel = this.getMatchArrayModelForType( 'upcoming', false, dateAndTime );\n\n    model.matches = model.matches.concat( upcomingModel.matches );\n\n    return model;\n}"},"getScheduleModel":{"Documentation":{"description":"Create schedule model for all live and upcoming stored in the schedule","tags":[{"title":"param","description":"Date format string","type":{"type":"NameExpression","name":"String"},"name":"dateFormat"},{"title":"param","description":"Time format string","type":{"type":"NameExpression","name":"String"},"name":"timeFormat"},{"title":"return","description":"Object containing matches array","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getScheduleModel = function( dateFormat, timeFormat )\n{\n    var model = { matches: [] },\n        dateAndTime = { dateFormat: dateFormat, timeFormat: timeFormat },\n        liveModel = this.getMatchArrayModelForType( 'live', false, dateAndTime ),\n        upcomingModel = this.getMatchArrayModelForType( 'upcoming', false, dateAndTime );\n\n    model.matches = model.matches.concat( liveModel.matches, upcomingModel.matches );\n\n    return model;\n}"},"getResultsModel":{"Documentation":{"description":"Create a schedule model for all completed matches stored in the schedule","tags":[{"title":"param","description":"Date format string","type":{"type":"NameExpression","name":"String"},"name":"dateFormat"},{"title":"param","description":"Time format string","type":{"type":"NameExpression","name":"String"},"name":"timeFormat"},{"title":"return","description":"Object containing matches array","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getResultsModel = function( dateFormat, timeFormat )\n{\n    var model = { matches: [] },\n        dateAndTime = { dateFormat: dateFormat, timeFormat: timeFormat },\n        completeModel = this.getMatchArrayModelForType( 'complete', false, dateAndTime );\n\n    model.matches = model.matches.concat( completeModel.matches );\n\n    return model;\n}"},"getMatchArrayModelForType":{"Documentation":{"description":"Returns an array of match models, given a match type ( state )\nMatch type = [ \"upcoming\", \"live\", \"complete\" ]\nMatch models are generated from PULSE.CLIENT.RUGBY.Match.prototype.getModel\n\nSee Match.js for full model spec","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getMatchArrayModelForType = function( type, reverse, options )\n{\n    if( !options )\n    {\n        options = {};\n    }\n\n    var matches = [],\n        storedMatches = [].concat( this[ type + 'Matches' ] ),\n        limit = options.limit ? Math.min( options.limit, storedMatches.length ) : storedMatches.length,\n        teamId = options.teamId,\n        teamIds = options.teamIds,\n        venueId = options.venueId,\n        groupId = options.groupId,\n        dateFormat = options.dateFormat,\n        timeFormat = options.timeFormat,\n        i, matchId, match, team1Id, team2Id, model;\n\n    if( reverse ) storedMatches.reverse();\n\n    for( i = 0; i < limit; i++ )\n    {\n        matchId = storedMatches[ i ];\n        match = this.getMatchById( matchId );\n\n        model = match;\n        matches.push( model );\n    }\n\n    return { matches: matches };\n}"},"getSortedMatches":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"type"},{"title":"param","description":null,"type":null,"name":"limit"}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getSortedMatches = function(type, limit)\n{\n    var matches = this.getMatchArrayModelForType(type),\n        upcomingMatches = [],\n        lim = matches.matches.length,\n        i;\n\n    if( limit )\n    {\n        if( lim > limit )\n        {\n            lim = limit;\n        }\n    }\n\n    for( i = 0; i < lim; i++)\n    {\n        upcomingMatches.push( matches.matches[i] );\n    }\n\n    upcomingMatches.sort( function( a, b ) {\n        var abbrA = a.time.millis, abbrB = b.time.millis;\n        if( abbrA < abbrB ) //sort abbreviation ascending\n        {\n            return -1;\n        }\n        if( abbrA > abbrB )\n        {\n            return 1;\n        }\n        return 0; //default return value (no sorting)\n    } );\n\n    return upcomingMatches;\n}"},"getDatesFromSchedule":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"matchState"},{"title":"param","description":null,"type":null,"name":"filter"}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getDatesFromSchedule = function ( matchState, filter )\n{\n    var filterByMatchState = false,\n        dates = [],\n        data, teamId, i, match, date;\n\n    if( matchState )\n    {\n        if( this[ matchState + 'Matches' ].length === 0 )\n        {\n            return [];\n        }\n\n        filterByMatchState = true;\n    }\n\n    if( filter )\n    {\n        data = this.filterMatches.matches;\n    }\n    else\n    {\n        data = this.matches;\n    }\n\n    for( i = 0; i < data.length; i++ )\n    {\n        matchId = data[i].matchId;\n        match = this.getMatchById( matchId );\n        if( !filterByMatchState || this.hasMatchRegisteredAs( matchState, matchId ) )\n        {\n            var formattedDate = match.getFormattedMatchDateLocalToVenue( 'llll' );\n            dates.push( formattedDate );\n        }\n    }\n\n    return dates;\n}"},"getMonthsFromSchedule":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"matchState"},{"title":"param","description":null,"type":null,"name":"filter"}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getMonthsFromSchedule = function( matchState, filter )\n{\n    var filterByMatchState = false,\n        months = [],\n        data, monthFull, monthShort, teamId, i;\n\n    if( matchState )\n    {\n        if( this[ matchState + 'Matches' ].length === 0 )\n        {\n            return [];\n        }\n\n        filterByMatchState = true;\n    }\n\n    if( filter )\n    {\n        data = this.filterMatches.matches;\n    }\n    else\n    {\n        data = this.matches;\n    }\n\n    for( i = 0; i < data.length; i++ )\n    {\n        matchId = data[i].matchId;\n        if( !filterByMatchState || this.hasMatchRegisteredAs( matchState, matchId ) )\n        {\n            monthShort = data[i].time.label.split(' ')[2];\n            monthFull = PULSE.CLIENT.DateUtil.getFullMonthFromShort(monthShort);\n\n            if( _.indexOf( months, monthFull ) < 0 )\n            {\n                months.push(monthFull);\n            }\n        }\n    }\n    return months;\n}"},"getEventsFromSchedule":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"matchState"},{"title":"param","description":null,"type":null,"name":"filter"}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getEventsFromSchedule = function( matchState, filter )\n{\n    var filterByMatchState = false,\n        events = [],\n        data, label, teamId, i;\n\n    if( matchState )\n    {\n        if( this[ matchState + 'Matches' ].length === 0 )\n        {\n            return [];\n        }\n\n        filterByMatchState = true;\n    }\n\n    if( filter )\n    {\n        data = this.filterMatches.matches;\n    }\n    else\n    {\n        data = this.matches;\n    }\n\n    for( i = 0; i < data.length; i++ )\n    {\n        matchId = data[i].matchId;\n        if( !filterByMatchState || this.hasMatchRegisteredAs( matchState, matchId ) )\n        {\n            if ( data[ i ].events.length > 0 )\n            {\n                label = data[ i ].events[ 0 ].label;\n\n                if( _.indexOf( events, label ) < 0)\n                {\n                    events.push(label);\n                }\n            }\n        }\n    }\n    return events;\n}"},"getEventMappingsFromSchedule":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"matchState"},{"title":"param","description":null,"type":null,"name":"filter"}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getEventMappingsFromSchedule = function( matchState, filter )\n{\n    var filterByMatchState = false,\n        mapping = {},\n        data, id, teamId, i;\n\n    if( matchState )\n    {\n        if( this[ matchState + 'Matches' ].length === 0 )\n        {\n            return [];\n        }\n\n        filterByMatchState = true;\n    }\n\n    if( filter )\n    {\n        data = this.filterMatches.matches;\n    }\n    else\n    {\n        data = this.matches;\n    }\n\n    for( i = 0; i < data.length; i++ )\n    {\n        matchId = data[i].matchId;\n        if( !filterByMatchState || this.hasMatchRegisteredAs( matchState, matchId ) )\n        {\n            if ( data[ i ].events.length > 0 )\n            {\n                id = data[ i ].events[ 0 ].id;\n\n                if ( !( id in mapping ) )\n                {\n                    mapping[ id ] = data[ i ].events[ 0 ]\n                }\n            }\n        }\n    }\n    return mapping;\n}"},"getMatchModelsMappingByDate":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"matchState"},{"title":"param","description":null,"type":null,"name":"filter"}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getMatchModelsMappingByDate = function( matchState, filter )\n{\n    var filterByMatchState = false,\n        models = {'matches' : []},\n        dates = this.getDatesFromSchedule( matchState, filter ),\n        mapping = {},\n        matchId, i, key, match, date;\n\n    if( matchState )\n    {\n        if( this[ matchState + 'Matches' ].length === 0 )\n        {\n            return [];\n        }\n        filterByMatchState = true;\n    }\n\n    if( filter )\n    {\n        models.matches = this.filterMatches.matches;\n    }\n    else\n    {\n        models = this.getAllMatchesModel();\n    }\n\n    for( i = 0; i < dates.length; i++ )\n    {\n        mapping[dates[i]] = [];\n    }\n\n    for( i = 0; i < models.matches.length; i++ )\n    {\n        matchId = models.matches[i].matchId;\n        match = this.getMatchById( matchId );\n        if( !filterByMatchState || this.hasMatchRegisteredAs( matchState, matchId ) )\n        {\n            mapping[ match.getFormattedMatchDateLocalToVenue( 'llll' ) ]\n                        .push( models.matches[ i ] );\n        }\n    }\n\n    // Sort upcoming events in order of occurence\n    for( key in mapping )\n    {\n        // Sort teams array ( by abbreviation ) alphabetically\n        mapping[key].sort( function( a, b ) {\n            var abbrA = a.time.millis, abbrB = b.time.millis;\n            if( abbrA < abbrB ) //sort abbreviation ascending\n            {\n                return -1;\n            }\n            if( abbrA > abbrB )\n            {\n                return 1;\n            }\n            return 0; //default return value (no sorting)\n        } );\n    }\n\n    return mapping;\n}"},"getMatchModelsByDate":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"date"},{"title":"param","description":null,"type":null,"name":"matchState"},{"title":"param","description":null,"type":null,"name":"filter"}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getMatchModelsByDate = function( date, matchState, filter )\n{\n    var mapping = this.getMatchModelsMappingByDate( matchState, filter );\n\n    if( mapping[ date ] )\n    {\n        if( filter )\n        {\n            this.filterMatches.matches = mapping[ date ]\n        }\n\n        return mapping[ date ];\n    }\n    else\n    {\n        return [];\n    }\n}"},"getMatchModelsByMonth":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"month"},{"title":"param","description":null,"type":null,"name":"matchState"},{"title":"param","description":null,"type":null,"name":"filter"}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getMatchModelsByMonth = function( month, matchState, filter )\n{\n    var mapping = this.getMatchModelsMappingByMonth( matchState, filter );\n\n    if( mapping[ month ] )\n    {\n        if(filter)\n        {\n            this.filterMatches.matches = mapping[ month ]\n        }\n\n        return mapping[ month ];\n    }\n    else\n    {\n        return [];\n    }\n}"},"getMatchModelsMappingByMonth":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"matchState"},{"title":"param","description":null,"type":null,"name":"filter"}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getMatchModelsMappingByMonth = function( matchState, filter )\n{\n    var filterByMatchState = false,\n        models = {'matches' : []},\n        months = this.getMonthsFromSchedule( matchState, filter ),\n        mapping = {},\n        monthShort,\n        monthFull,\n        matchId;\n\n        if( matchState )\n        {\n            if( this[ matchState + 'Matches' ].length === 0 )\n            {\n                return [];\n            }\n            filterByMatchState = true;\n        }\n\n        if( filter )\n        {\n            models.matches = this.filterMatches.matches;\n        }\n        else\n        {\n            models = this.getAllMatchesModel();\n        }\n\n        for( var i = 0; i < months.length; i++ )\n        {\n            mapping[months[i]] = [];\n        }\n\n        for( var i = 0; i < models.matches.length; i++ )\n        {\n            matchId = models.matches[i].matchId;\n\n            if( !filterByMatchState || this.hasMatchRegisteredAs( matchState, matchId ) )\n            {\n                monthShort = models.matches[i].time.label.split(' ')[2];\n                monthFull = PULSE.CLIENT.DateUtil.getFullMonthFromShort(monthShort);\n                mapping[monthFull].push(models.matches[i]);\n            }\n        }\n\n        return mapping;\n}"},"getMatchModelsMappingByEvent":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"matchState"}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getMatchModelsMappingByEvent = function( matchState )//( matchState, filter )\n{\n    var filterByMatchState = false,\n        models = { 'matches' : [] },\n        //months = this.getMonthsFromSchedule( matchState, filter ),\n        events = this.getEventsFromSchedule( matchState ),\n        mapping = {},\n        label, matchId, i, key;\n\n    if( matchState )\n    {\n        if( this[ matchState + 'Matches' ].length === 0 )\n        {\n            return [];\n        }\n        filterByMatchState = true;\n    }\n\n    models = this.getAllMatchesModel();\n\n    // if( filter )\n    // {\n    //     models.matches = this.filterMatches.matches;\n    // }\n    // else\n    // {\n    //     models = this.getAllMatchesModel();\n    // }\n\n    for( i = 0; i < events.length; i++ )\n    {\n        mapping[events[i]] = [];\n    }\n\n    for( i = 0; i < models.matches.length; i++ )\n    {\n        matchId = models.matches[i].matchId;\n\n        if( !filterByMatchState || this.hasMatchRegisteredAs( matchState, matchId ) )\n        {\n            if ( models.matches[ i ].events.length > 0 )\n            {\n                label = models.matches[ i ].events[ 0 ].label;\n\n                mapping[ label ].push(models.matches[i]);\n            }\n\n        }\n    }\n\n    // Sort upcoming events in order of occurence\n    for( key in mapping )\n    {\n        // Sort teams array ( by abbreviation ) alphabetically\n        mapping[key].sort( function( a, b ) {\n            var abbrA = a.time.millis, abbrB = b.time.millis;\n            if( abbrA < abbrB ) //sort abbreviation ascending\n            {\n                return -1;\n            }\n            if( abbrA > abbrB )\n            {\n                return 1;\n            }\n            return 0; //default return value (no sorting)\n        } );\n    }\n\n    return mapping;\n}"},"getTeamListFromSchedule":{"Documentation":{"description":"Returns array of team objects in alphabetical order","tags":[{"title":"param","description":"optional filter by match state, to return venues for only upcoming matches, for example","type":{"type":"NameExpression","name":"String"},"name":"matchState"},{"title":"return","description":"team object array","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"Object"}]}}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getTeamListFromSchedule = function( matchState, filter )\n{\n    var filterByMatchState = false,\n        data,\n        matchId,\n        teams = [],\n        i, team1, team2, t1, t2;\n\n    if( matchState )\n    {\n        if( this[ matchState + 'Matches' ].length === 0 )\n        {\n            return [];\n        }\n\n        filterByMatchState = true;\n    }\n\n    if( filter )\n    {\n        data = this.filterMatches.matches;\n    }\n    else\n    {\n        data = this.matches;\n    }\n\n    for( i = 0; i < data.length; i++ )\n    {\n        matchId = data[i].matchId;\n\n        team1 = data[i].teams[0];\n        team2 = data[i].teams[1];\n\n        if( !filterByMatchState || this.hasMatchRegisteredAs( matchState, matchId ) )\n        {\n            if( team1 )\n            {\n                if( _.indexOf( teams, team1.name ) < 0 )\n                {\n                    teams.push( team1.name );\n                }\n            }\n\n            if( team2 )\n            {\n                if( _.indexOf( teams, team2.name ) < 0 )\n                {\n                    teams.push( team2.name );\n                }\n            }\n        }\n    }\n\n    // Sort teams array ( by abbreviation ) alphabetically\n    teams.sort( function( a, b )\n    {\n        var abbrA = a, abbrB = b;\n        if( abbrA < abbrB ) //sort abbreviation ascending\n        {\n            return -1;\n        }\n        if( abbrA > abbrB )\n        {\n            return 1;\n        }\n        return 0; //default return value (no sorting)\n    } );\n\n    return teams;\n}"},"getTeamObjectsFromSchedule":{"Documentation":{"description":"Returns mapping of team ids to team objects","tags":[{"title":"param","description":"optional filter by match state, to return venues for only upcoming matches, for example","type":{"type":"NameExpression","name":"String"},"name":"matchState"},{"title":"return","description":"team object array","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"Object"}]}}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getTeamObjectsFromSchedule = function( matchState, filter )\n{\n    var data, matchId, i, team1, team2, t1, t2,\n        filterByMatchState = false,\n        teams = {};\n\n    if( matchState )\n    {\n        if( this[ matchState + 'Matches' ].length === 0 )\n        {\n            return [];\n        }\n\n        filterByMatchState = true;\n    }\n\n    if( filter )\n    {\n        data = this.filterMatches.matches;\n    }\n    else\n    {\n        data = this.matches;\n    }\n\n    for( i = 0; i < data.length; i++ )\n    {\n        matchId = data[i].matchId;\n\n        team1 = data[i].teams[0];\n        team2 = data[i].teams[1];\n\n        if( !filterByMatchState || this.hasMatchRegisteredAs( matchState, matchId ) )\n        {\n            if( team1 )\n            {\n                if( !teams[ team1.id ] )\n                {\n                    teams[ team1.id ] = team1;\n                }\n            }\n\n            if( team2 )\n            {\n                if( !teams[ team2.id ] )\n                {\n                    teams[ team2.id ] = team2;\n                }\n            }\n        }\n    }\n\n    return teams;\n}"},"getVenueListFromSchedule":{"Documentation":{"description":"Returns array of venue objects in alphabetical","tags":[{"title":"param","description":"optional filter by match state, to return venues for only upcoming matches, for example","type":{"type":"NameExpression","name":"String"},"name":"matchState"},{"title":"return","description":"venue object array","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"Object"}]}}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getVenueListFromSchedule = function( matchState, filter )\n{\n    var filterByMatchState = false,\n        matchId,\n        data,\n        venues = [],\n        i, venue;\n\n    if( matchState )\n    {\n        if( this[ matchState + 'Matches' ].length === 0 )\n        {\n            return [];\n        }\n\n        filterByMatchState = true;\n    }\n\n    if( filter )\n    {\n        data = this.filterMatches.matches;\n    }\n    else\n    {\n        data = this.matches;\n    }\n\n    for( i = 0; i < data.length; i++ )\n    {\n        matchId = data[i].matchId;\n\n        if( !filterByMatchState || this.hasMatchRegisteredAs( matchState, matchId ) )\n        {\n            venue = data[i].venue;\n            if( venue )\n            {\n                if( _.indexOf( venues, venue.name  + ', ' + venue.city ) < 0 )\n                {\n                    venues.push( venue.name + ', ' + venue.city );\n                }\n            }\n        }\n    }\n\n    // Sort venues array ( by shortName ) alphabetically\n    venues.sort( function( a, b )\n    {\n        var abbrA = a, abbrB = b;\n        if( abbrA < abbrB ) //sort abbreviation ascending\n        {\n            return -1;\n        }\n        if( abbrA > abbrB )\n        {\n            return 1;\n        }\n        return 0; //default return value (no sorting)\n    } );\n\n    return venues;\n}"},"getVenueObjectsFromSchedule":{"Documentation":{"description":"Returns array of venue objects in alphabetical","tags":[{"title":"param","description":"optional filter by match state, to return venues for only upcoming matches, for example","type":{"type":"NameExpression","name":"String"},"name":"matchState"},{"title":"return","description":"venue object array","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"Object"}]}}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getVenueObjectsFromSchedule = function( matchState, filter )\n{\n    var filterByMatchState = false,\n        matchId,\n        data,\n        venues = [],\n        i, venue;\n\n    if( matchState )\n    {\n        if( this[ matchState + 'Matches' ].length === 0 )\n        {\n            return [];\n        }\n\n        filterByMatchState = true;\n    }\n\n    if( filter )\n    {\n        data = this.filterMatches.matches;\n    }\n    else\n    {\n        data = this.matches;\n    }\n\n    for( i = 0; i < data.length; i++ )\n    {\n        matchId = data[i].matchId;\n\n        if( !filterByMatchState || this.hasMatchRegisteredAs( matchState, matchId ) )\n        {\n            venue = data[i].venue;\n            if( venue && venue.name )\n            {\n                venues[ venue.name ] = venue;\n            }\n        }\n    }\n\n    return venues;\n}"},"getPhaseListFromSchedule":{"Documentation":{"description":"Returns array of group names in the order of their appearance in the schedule","tags":[{"title":"param","description":"optional filter by match state, to return groups for only upcoming matches, for example","type":{"type":"NameExpression","name":"String"},"name":"matchState"},{"title":"return","description":"group name array","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"String"}]}}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getPhaseListFromSchedule = function( matchState, filter )\n{\n    var filterByMatchState = false,\n        groups = [],\n        data, i, group, matchId;\n\n    if( matchState )\n    {\n        if( this[ matchState + 'Matches' ].length === 0 )\n        {\n            return [];\n        }\n\n        filterByMatchState = true;\n    }\n\n    if( filter )\n    {\n        data = this.filterMatches.matches;\n    }\n    else\n    {\n        data = this.matches;\n    }\n\n    for( i = 0; i < data.length; i++ )\n    {\n            matchId = data[i].matchId;\n\n            if( !filterByMatchState || this.hasMatchRegisteredAs( matchState, matchId ) )\n            {\n                group = data[i].eventPhase;\n                if($.inArray( group, groups ) === - 1 && group !== '')\n                {\n                    groups.push( group );\n                }\n            }\n\n    }\n\n    return groups;\n}"},"getGroupListFromSchedule":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"matchState"},{"title":"param","description":null,"type":null,"name":"filter"}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getGroupListFromSchedule = function( matchState, filter )\n{\n    var phases = this.getPhaseListFromSchedule( matchState, filter ),\n        groups = [], i;\n\n    for( i = 0; i < phases.length; i++ )\n    {\n        if( phases[i].indexOf( 'Pool' ) > -1 || phases[i].indexOf( 'Group' ) > -1 )\n        {\n            groups.push(phases[i]);\n        }\n    }\n\n    return groups;\n}"},"getMatchModelsMappingByTeam":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"matchState"},{"title":"param","description":null,"type":null,"name":"filter"}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getMatchModelsMappingByTeam = function( matchState, filter )\n{\n    var filterByMatchState = false,\n        models = {'matches' : []},\n        teams = this.getTeamListFromSchedule( matchState, filter ),\n        mapping = {},\n        modelTeams,\n        matchId;\n\n        if( matchState )\n        {\n            if( this[ matchState + 'Matches' ].length === 0 )\n            {\n                return [];\n            }\n            filterByMatchState = true;\n        }\n\n        if( filter )\n        {\n            models.matches = this.filterMatches.matches;\n        }\n        else\n        {\n            models = this.getAllMatchesModel();\n        }\n\n        for( var i = 0; i < teams.length; i++ )\n        {\n            mapping[teams[i]] = [];\n        }\n\n        for( var i = 0; i < models.matches.length; i++ )\n        {\n            modelTeams = models.matches[i].teams;\n\n            matchId = models.matches[i].matchId;\n\n            if( !filterByMatchState || this.hasMatchRegisteredAs( matchState, matchId ) )\n            {\n                for( var j = 0; j < modelTeams.length; j++)\n                {\n                    if(modelTeams[j].name)\n                    {\n                        mapping[modelTeams[j].name].push(models.matches[i]);\n                    }\n                }\n            }\n        }\n\n        return mapping;\n}"},"getMatchModelsByTeam":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"team"},{"title":"param","description":null,"type":null,"name":"matchState"},{"title":"param","description":null,"type":null,"name":"filter"}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getMatchModelsByTeam = function(team, matchState, filter)\n{\n    var mapping = this.getMatchModelsMappingByTeam( matchState, filter );\n\n    if(mapping[team])\n    {\n\n        if(filter)\n        {\n            this.filterMatches.matches = mapping[team]\n        }\n\n        return mapping[team];\n    }\n    else\n    {\n        return [];\n    }\n}"},"getMatchModelsMappingByVenue":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"matchState"},{"title":"param","description":null,"type":null,"name":"filter"}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getMatchModelsMappingByVenue = function( matchState, filter )\n{\n    var filterByMatchState = false,\n        models = {'matches' : []},\n        venues = this.getVenueListFromSchedule( matchState, filter ),\n        mapping = {},\n        matchId;\n\n    if( matchState )\n    {\n        if( this[ matchState + 'Matches' ].length === 0 )\n        {\n            return {};\n        }\n        filterByMatchState = true;\n    }\n\n    if( filter )\n    {\n        models.matches = this.filterMatches.matches;\n    }\n    else\n    {\n        models = this.getAllMatchesModel();\n    }\n\n    for( var i = 0; i < venues.length; i++ )\n    {\n        mapping[venues[i]] = [];\n    }\n\n    for( var i = 0; i < models.matches.length; i++ )\n    {\n        matchId = models.matches[i].matchId;\n\n        if( !filterByMatchState || this.hasMatchRegisteredAs( matchState, matchId ) )\n        {\n            if(models.matches[i].venue)\n            {\n                mapping[models.matches[i].venue.name + ', ' + models.matches[i].venue.city].push(models.matches[i]);\n            }\n        }\n    }\n\n    return mapping;\n}"},"getMatchModelsByVenue":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"venue"},{"title":"param","description":null,"type":null,"name":"matchState"},{"title":"param","description":null,"type":null,"name":"filter"}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getMatchModelsByVenue = function( venue, matchState, filter )\n{\n    var mapping = this.getMatchModelsMappingByVenue( matchState, filter );\n\n    if( mapping[ venue ] )\n    {\n\n        if( filter )\n        {\n            this.filterMatches.matches = mapping[venue]\n        }\n\n        return mapping[venue];\n    }\n    else\n    {\n        return [];\n    }\n}"},"getMatchModelsMappingByPhase":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"matchState"},{"title":"param","description":null,"type":null,"name":"filter"}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getMatchModelsMappingByPhase = function( matchState, filter )\n{\n    var filterByMatchState = false,\n        models = {'matches' : []},\n        phases = this.getPhaseListFromSchedule( matchState, filter ),\n        mapping = {},\n        matchId, i;\n\n    if( matchState )\n    {\n        if( this[ matchState + 'Matches' ].length === 0 )\n        {\n            return {};\n        }\n        filterByMatchState = true;\n    }\n\n    if( filter )\n    {\n        models.matches = this.filterMatches.matches;\n    }\n    else\n    {\n        models = this.getAllMatchesModel();\n    }\n\n    for( i = 0; i < phases.length; i++ )\n    {\n        mapping[phases[i]] = [];\n    }\n\n    for( var i = 0; i < models.matches.length; i++ )\n    {\n        matchId = models.matches[i].matchId;\n\n        if( !filterByMatchState || this.hasMatchRegisteredAs( matchState, matchId ) )\n        {\n            if(models.matches[i].eventPhase)\n            {\n                mapping[models.matches[i].eventPhase].push(models.matches[i]);\n            }\n        }\n    }\n\n    return mapping;\n}"},"getMatchModelsByPhase":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"phase"},{"title":"param","description":null,"type":null,"name":"matchState"},{"title":"param","description":null,"type":null,"name":"filter"}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getMatchModelsByPhase = function( phase, matchState, filter )\n{\n    var mapping = this.getMatchModelsMappingByPhase( matchState, filter );\n\n    if(mapping[phase])\n    {\n\n        if(filter)\n        {\n            this.filterMatches.matches = mapping[phase]\n        }\n\n        return mapping[phase];\n    }\n    else\n    {\n        return [];\n    }\n}"},"getMatchModelsMappingByGroup":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"matchState"},{"title":"param","description":null,"type":null,"name":"filter"}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getMatchModelsMappingByGroup = function( matchState, filter )\n{\n    var filterByMatchState = false,\n        models = {'matches' : []},\n        groups = this.getGroupListFromSchedule( matchState, filter ),\n        mapping = {},\n        phase = '',\n        matchId;\n\n        if( matchState )\n        {\n            if( this[ matchState + 'Matches' ].length === 0 )\n            {\n                return {};\n            }\n            filterByMatchState = true;\n        }\n\n        if( filter )\n        {\n            models.matches = this.filterMatches.matches;\n        }\n        else\n        {\n            models = this.getAllMatchesModel();\n        }\n\n        for( var i = 0; i < groups.length; i++ )\n        {\n            mapping[groups[i]] = [];\n        }\n\n        for( var i = 0; i < models.matches.length; i++ )\n        {\n            matchId = models.matches[i].matchId;\n\n            if( !filterByMatchState || this.hasMatchRegisteredAs( matchState, matchId ) )\n            {\n                phase = models.matches[i].eventPhase;\n                if( phase )\n                {\n                    if( phase.indexOf( 'Group' ) > -1 || phase.indexOf( 'Pool' ) > -1 )\n                    {\n                        mapping[phase].push(models.matches[i]);\n                    }\n                }\n            }\n        }\n\n        return mapping;\n}"},"getMatchModelsByGroup":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"group"},{"title":"param","description":null,"type":null,"name":"matchState"},{"title":"param","description":null,"type":null,"name":"filter"}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getMatchModelsByGroup = function( group, matchState, filter )\n{\n    var mapping = this.getMatchModelsMappingByGroup( matchState, filter );\n\n    if( mapping[ group ] )\n    {\n\n        if( filter )\n        {\n            this.filterMatches.matches = mapping[ group ]\n        }\n\n        return mapping[ group ];\n    }\n    else\n    {\n        return [];\n    }\n}"},"getMatchModelsMappingByStatus":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"filter"}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getMatchModelsMappingByStatus = function( filter )\n{\n    var mapping = {'complete' : [], 'live' : [], 'upcoming' : []},\n        phase = '',\n        models = {'matches' : []};\n\n    if(filter)\n    {\n        models.matches = this.filterMatches;\n    }\n    else\n    {\n        models = this.getAllMatchesModel()\n    }\n\n    for( var i = 0; i < models.matches.length; i++ )\n    {\n            if(models.matches[i].status)\n            {\n                if(models.matches[i].status == 'U')\n                {\n                    mapping['upcoming'].push(models.matches[i]);\n                }\n                else if(models.matches[i].status == 'L')\n                {\n                    mapping['live'].push(models.matches[i]);\n                }\n                else if(models.matches[i].status == 'C')\n                {\n                    mapping['complete'].push(models.matches[i]);\n                }\n            }\n    }\n\n    return mapping;\n}"},"getMatchModelsByStatus":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"status"},{"title":"param","description":null,"type":null,"name":"filter"}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getMatchModelsByStatus = function( status, filter )\n{\n    var mapping = this.getMatchModelsMappingByStatus( filter );\n\n    if( mapping[ status ] )\n    {\n\n    if( filter )\n    {\n        this.filterMatches.matches = mapping[ status ]\n    }\n        return mapping[ status ];\n    }\n    else\n    {\n        return [];\n    }\n}"},"getMatchModelsByTeamId":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"teamId"}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.getMatchModelsByTeamId = function( teamId )\n{\n    var model = this.getAllMatchesModel();\n    var matches = [];\n    if ( model && model.matches )\n    {\n        for ( var i = 0; i < model.matches.length; i++ )\n        {\n            var match = model.matches[ i ];\n            var teams = match.teams;\n            if ( teams && teams.length > 0 )\n            {\n                for( var j = 0; j < teams.length; j++)\n                {\n                    if( teams[j] && teams[ j ].id === parseInt( teamId, 10 ) )\n                    {\n                        matches.push( match );\n                    }\n                }\n            }\n        }\n    }\n    return matches;\n}"},"registerMatchAs":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"type"},{"title":"param","description":null,"type":null,"name":"matchId"}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.registerMatchAs = function( type, matchId )\n{\n    this.unregisterMatchAs( type, matchId );\n    if( matchId )\n    {\n        this[ type + 'Matches' ].push( matchId.toString() );\n    }\n}"},"hasMatchRegisteredAs":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"type"},{"title":"param","description":null,"type":null,"name":"matchId"}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.hasMatchRegisteredAs = function( type, matchId )\n{\n    var that = this;\n    if( matchId )\n    {\n        if( $.inArray( matchId.toString(), that[ type + 'Matches' ] ) > -1 )\n        {\n            return true;\n        }\n    }\n    return false;\n}"},"unregisterMatchAs":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"type"},{"title":"param","description":null,"type":null,"name":"matchId"}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.unregisterMatchAs = function( type, matchId )\n{\n    var that = this;\n    if( matchId )\n    {\n        this[ type + 'Matches' ] = jQuery.grep( that[ type + 'Matches' ], function( value ) {\n              return value.toString() !== matchId.toString();\n        } );\n    }\n}"},"registerAllMatches":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.registerAllMatches = function()\n{\n    var matchId, match;\n\n    for( matchId in this.matchMap )\n    {\n        match = this.matchMap[ matchId ];\n\n        if( match.getMatchStatus().charAt(0) === 'U' )\n        {\n            // Add the match to the tournament's list of upcoming matches\n            this.registerMatchAs( 'upcoming', matchId );\n        }\n\n        if( match.getMatchStatus().charAt(0) === 'L' )\n        {\n            // Remove the match from the tournament's list of upcoming matches\n            this.unregisterMatchAs( 'upcoming', matchId );\n            // Add the match to the tournament's list of current live matches\n            this.registerMatchAs( 'live', matchId );\n\n            match.prepareScoringData( { start: true, interval: 30 } );\n            match.scoringLoaded = true;\n        }\n\n        if( match.getMatchStatus().charAt(0) === 'C' )\n        {\n            // Remove the match from the tournament's list of current live matches\n            this.unregisterMatchAs( 'live', matchId );\n            // Add the match to the tournament's list of complete matches\n            this.registerMatchAs( 'complete', matchId );\n            match.stopScoringFeed();\n        }\n    }\n\n    this.sortMatches( this.upcomingMatches );\n    this.sortMatches( this.liveMatches );\n    this.sortMatches( this.completeMatches );\n}"},"sortMatches":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"matches"}]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.sortMatches = function( matches )\n{\n    var that = this;\n\n    matches.sort( function( a, b ) {\n            return that.getMatchById( a ).time.millis > that.getMatchById( b ).time.millis ? 1 : -1;\n        } );\n\n    return matches;\n}"},"updateMatchMap":{"Documentation":{"description":"Update stored map of match objects","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.updateMatchMap = function()\n{\n    var i, iLimit, match, matchId, tournament;\n\n    for( i = 0, iLimit = this.matches.length; i < iLimit; i++ )\n    {\n        // Create match data reference for setting data on match object\n        match = this.matches[i];\n        matchId = match.matchId;\n\n        // Get this tournament if it has already been created / create it otherwise\n        if( match.events && match.events.length )\n        {\n            tournament = window.WidgetController.getTournamentByName( match.events[0].id );\n        }\n\n        // Create this match if it doesn't already exist\n        if( !this.matchMap[ matchId ] )\n        {\n            this.matchMap[ matchId ] = new PULSE.CLIENT.RUGBY.Match( tournament, matchId );\n        }\n\n        // Fetch scoring file if match is live\n        if( this.matchMap[ matchId ].getMatchStatus() === 'L' )\n        {\n            this.matchMap[ matchId ].prepareScoringData( { start: true, interval: 30 } );\n        }\n\n        // Update match with latest schedule data from api\n        if( !this.matchMap[ matchId ].scoringLoaded )\n        {\n            this.matchMap[ matchId ].setScheduleData( match );\n        }\n\n        // Add a default rankings weight value\n        if ( this.matches[i].events && this.matches[i].events.length > 0)\n        {\n            if( this.matches[i].events[ 0 ].rankingsWeight )\n            {\n                this.matchMap[ matchId ]['rankingsWeight'] = this.matches[i].events[ 0 ].rankingsWeight;\n            }\n            else\n            {\n                this.matchMap[ matchId ]['rankingsWeight'] = 1;\n            }\n        }\n\n    }\n\n    this.registerAllMatches();\n    this.model = this.getAllMatchesModel();\n    this.filterMatches = this.getAllMatchesModel();\n}"},"resetFilter":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.resetFilter = function ()\n{\n    this.filterMatches = this.getAllMatchesModel();\n}"},"filterCompletedMatches":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.filterCompletedMatches = function ()\n{\n    var matchesToKeep = [],\n        matches = this.getAllMatchesModel().matches;\n\n    for ( var i = 0; i < matches.length; i++ )\n    {\n        if ( _.indexOf( this.completeMatches, matches[ i ].matchId.toString() ) > -1 )\n        {\n            matchesToKeep.push( matches[ i ] );\n        }\n    }\n\n    this.matches = matchesToKeep;\n    if ( !this.filterMatches )\n    {\n        this.filterMatches = this.getAllMatchesModel();\n    }\n    this.filterMatches.matches = matchesToKeep;\n}"},"filterUpcomingMatches":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.filterUpcomingMatches = function ()\n{\n     var matchesToKeep = [],\n        matchModels = this.getAllMatchesModel();\n\n    if ( matchModels )\n    {\n        var matches = matchModels.matches;\n        for ( var i = 0; i < matches.length; i++ )\n        {\n            if ( _.indexOf( this.completeMatches, matches[ i ].matchId.toString() ) < 0 )\n            {\n                matchesToKeep.push( matches[ i ] );\n            }\n        }\n    }\n\n    this.matches = matchesToKeep;\n    if ( !this.filterMatches )\n    {\n        this.filterMatches = this.getAllMatchesModel();\n    }\n    this.filterMatches.matches = matchesToKeep;\n}"},"updateMatchData":{"Documentation":{"description":"As matches are unaware that they belong to a given metaschedule they are currently\nunable to notify of their transitions as they are with tournament schedules\n\nListening to match data event allows us to keep the metaschedule matches uptodate\nwithout the match caring","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.updateMatchData = function()\n{\n    var that = this;\n    $('body').on('scoring/update', function( e, params )\n    {\n        that.updateMatchMap();\n    });\n\n    $('body').on('timeline/update', function( e, params )\n    {\n        that.updateMatchMap();\n    });\n}"},"onData":{"Documentation":{"description":"Schedule onData\n onData gets called by the data manager when the file called is retrieved and\n the JSONP is read.","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.onData = function( data, id )\n{\n    var that = this;\n\n    // Metaschedule matches\n    if( id === this.feeds.feedSchedule && data )\n    {\n        var dataBody = data.content || data.matches,\n            allMatches = this.matches.concat( dataBody );\n\n        // Update tournament\n        if( this.tournament )\n        {\n            this.tournament.setData( data.event );\n        }\n\n        this.pageInfo = data.pageInfo;\n\n        // Collect all matches from all requests and filter out duplicates\n        this.matches = _.map( _.groupBy( allMatches, function( matchData ) {\n            return matchData && matchData.matchId;\n        } ), function( grouped ) {\n            return grouped && grouped[0];\n        } );\n\n        if( !this.matches[0] || this.matches[0] === null )\n        {\n            this.matches = [];\n        }\n\n        // Update stored collections\n        this.matches.sort( function( a, b ) {\n                return a.time.millis > b.time.millis ? 1 : -1;\n            } );\n        this.updateMatchMap();\n        this.updateMatchData();\n\n        // Notify DOM of updates\n        PULSE.CLIENT.notify( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCHEDULE_UPDATE, {\n            id: that.feeds.feedSchedule,\n            success: true\n        } );\n    }\n}"},"onError":{"Documentation":{"description":"Schedule onError\n onError gets called by the data manager when the file called is not successfully\n retrieved.","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Schedule.prototype.onError = function( data, id )\n{\n    var that = this;\n\n    // Schedule data\n    if( id === this.feeds.feedScheduleData )\n    {\n        PULSE.CLIENT.notify( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCHEDULE_UPDATE, {\n            id: id,\n            success: false\n        } );\n    }\n\n}"}},"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for a metaschedule model"}]},"Source":"PULSE.CLIENT.RUGBY.Schedule = function( tournament, data )\n{\n    this.tournament = tournament;\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n    this.urlGenerator = PULSE.CLIENT.RUGBY.getUrlGenerator();\n    this.tournamentUrlGenerator = this.tournament && this.tournament.tournamentUrlGenerator;\n    this.feeds = {};\n\n    // test data in this array\n    this.matches = [];\n    this.matchMap = {};\n\n    this.completeMatches = []; // Array of completed matches chronologically\n    this.liveMatches = []; // Array of live matches chronologically\n    this.upcomingMatches = []; // Array of live matches chronologically\n\n}"},"Standings":{"Documentation":{"description":"Constructor for Standings","tags":[{"title":"param","description":"JSON data to be made into an object","type":{"type":"NameExpression","name":"Object"},"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.Standings = function( tournament, data )\n{\n    this.tournament = tournament;\n    this.setData( data );\n}","prototype":{"setData":{"Documentation":{"description":"Function to set the JSON data as an object","tags":[{"title":"param","description":"JSON data to be made into an object","type":{"type":"NameExpression","name":"Object"},"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.Standings.prototype.setData = function( data )\n{\n    var prop;\n\n    for( prop in data )\n    {\n        this[ prop ] = data[ prop ];\n    }\n}"},"getStandingsModel":{"Documentation":{"description":"Create standings model for all groups in this event","tags":[{"title":"param","description":"Max number of rows for tables ( e.g. show top 3 only )","type":{"type":"NameExpression","name":"Number"},"name":"limit"},{"title":"return","description":"Standings model","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Standings.prototype.getStandingsModel = function( limit )\n{\n    var model = { standings: [] }, i, iLimit, groupIndex, groupModel;\n\n    if( !this.tables || this.tables.length === 0 )\n    {\n        return model;\n    }\n\n    for( i = 0, iLimit = this.tables.length; i < iLimit; i++ )\n    {\n        groupIndex = i;\n        groupModel = this.getStandingsModelForGroupAtIndex( groupIndex, limit );\n        model.standings.push( groupModel );\n    }\n\n    return model;\n}"},"getStandingsModelForGroupAtIndex":{"Documentation":{"description":"Create standings model for group at index in standings data array","tags":[{"title":"param","description":"Index of lookup","type":{"type":"NameExpression","name":"Number"},"name":"index"},{"title":"param","description":"Max number of rows for tables ( e.g. show top 3 only )","type":{"type":"NameExpression","name":"Number"},"name":"limit"},{"title":"return","description":"Standings model for a given group","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Standings.prototype.getStandingsModelForGroupAtIndex = function( index, limit )\n{\n    var model = {},\n        standings = this.tables[ index ].entries,\n        standingsArray  = [],\n        iLimit = limit ? Math.min( limit, standings.length ) : standings.length,\n        i,\n        entry;\n\n    for( i = 0; i < iLimit; i++ )\n    {\n        entry = {\n            position: i + 1,\n            label: standings[i].positionLabel || i + 1,\n            team: standings[i].team,\n\n            played: standings[i].played || 0,\n            won: standings[i].won || 0,\n            lost: standings[i].lost || 0,\n            drawn: standings[i].drawn || 0,\n\n            points: standings[i].points || 0,\n            bonusPoints: standings[i].bonusPoints || 0,\n            pointsFor: standings[i].pointsFor || 0,\n            pointsAgainst: standings[i].pointsAgainst || 0,\n            pointsDifference: (standings[i].pointsFor && standings[i].pointsAgainst) ? parseInt( standings[ i ].pointsFor ) - parseInt( standings[ i ].pointsAgainst ) : 0,\n\n            triesFor: standings[i].triesFor || 0,\n            triesAgainst: standings[i].triesAgainst || 0\n        };\n\n        standingsArray.push( entry );\n    }\n\n    model.label = this.tables[ index ].label;\n    model.lastGenerated = this.tables[ index ].lastGenerated;\n    model.standings = standingsArray;\n\n    return model;\n}"},"getStandingsModelForGroupWithLabel":{"Documentation":{"description":"Create standings model for group with a given label","tags":[{"title":"param","description":"Group label string","type":{"type":"NameExpression","name":"String"},"name":"label"},{"title":"param","description":"Max number of rows for tables ( e.g. show top 3 only )","type":{"type":"NameExpression","name":"Number"},"name":"limit"},{"title":"return","description":"Standings model for group with the given label","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Standings.prototype.getStandingsModelForGroupWithLabel = function( label, limit )\n{\n    var model = { label: '', lastGenerated: {}, standings: [] }, i, iLimit;\n\n    if( !this.tables || this.tables.length === 0 )\n    {\n        return model;\n    }\n\n    for( i = 0, iLimit = this.tables.length; i < iLimit; i++ )\n    {\n        if( this.tables[i].label === label ||\n            ( !label && !this.tables[i].label ) )\n        {\n            model = this.getStandingsModelForGroupAtIndex( i, limit );\n            break;\n        }\n    }\n\n    return model;\n}"},"getStandingsModelForTeam":{"Documentation":{"description":"Assuming there is only 1 group, return the standings for a given team","tags":[{"title":"param","description":"Unique team id","type":{"type":"NameExpression","name":"Number"},"name":"teamId"},{"title":"return","description":"Standings entry object","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Standings.prototype.getStandingsModelForTeam = function( teamId )\n{\n    var standingsModel = this.getStandingsModelForGroupAtIndex( 0 ),\n        i, iLimit, entry;\n\n    for( i = 0, iLimit = standingsModel.standings.length; i < iLimit; i++ )\n    {\n        entry = standingsModel.standings[i];\n        if( entry.team.id === teamId )\n        {\n            return entry;\n        }\n    }\n}"},"getTeamsFromStandings":{"Documentation":{"description":"Loop through standings data and compile a map of teams","tags":[{"title":"return","description":"Map of team ids to team data objects","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Standings.prototype.getTeamsFromStandings = function()\n{\n    var teams = {}, i, iLimit, group, j, jLimit, entry;\n    if( this.tables.length )\n    {\n        for( i = 0, iLimit = this.tables.length; i < iLimit; i++ )\n        {\n            group = this.tables[i];\n            for( j = 0, jLimit = group.entries.length; j < jLimit; j++ )\n            {\n                entry = group.entries[j];\n\n                if( !teams[ entry.team.id ] )\n                {\n                    teams[ entry.team.id ] = entry.team;\n                }\n            }\n        }\n    }\n\n    return teams;\n}"},"getShortLabelForGroup":{"Documentation":{"description":"Returns a string to describe a pool/group without\n    - e.g. 'Pool A' -> 'A'","tags":[{"title":"param","description":"table label string e.g. 'Pool A'","type":{"type":"NameExpression","name":"String"},"name":"Standings"},{"title":"return","description":null,"type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.Standings.prototype.getShortLabelForGroup = function( longLabel )\n{\n    if( !longLabel )\n    {\n        return;\n    }\n\n    var containsPoolSubstring = longLabel.toLowerCase().indexOf( 'pool' ),\n        containsGroupSubstring = longLabel.toLowerCase().indexOf( 'group' ),\n        shortLabel;\n\n    if( containsPoolSubstring > -1 )\n    {\n        shortLabel = longLabel.slice( ( containsPoolSubstring + 4 ), longLabel.length );\n    }\n\n    if( containsGroupSubstring > -1 )\n    {\n        shortLabel = longLabel.slice( ( containsGroupSubstring + 5 ), longLabel.length );\n    }\n\n    return shortLabel;\n}"},"getTeamMapByGroup":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.Standings.prototype.getTeamMapByGroup"}]},"Source":"PULSE.CLIENT.RUGBY.Standings.prototype.getTeamMapByGroup = function()\n{\n    var mapping = {};\n\n    if ( this.tables )\n    {\n        for ( var  i = 0; i < this.tables.length; i++ )\n        {\n            mapping[ this.tables[ i ].label ] = [];\n            for ( var j = 0; j < this.tables[ i ].entries.length; j++ )\n            {\n                mapping[ this.tables[ i ].label ].push( this.tables[ i ].entries[ j ].team );\n            }\n        }\n    }\n\n    return mapping;\n\n}"},"getGroups":{"Documentation":{"description":"Returns all the groups in the game","tags":[{"title":"return","description":"Array of group titles","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Standings.prototype.getGroups = function()\n{\n    var groups = [], i;\n    for( i = 0; i < this.tables.length; i++ )\n    {\n        if( _.indexOf( groups, this.tables[ i ].label ) < 0 )\n        {\n            groups.push(this.tables[ i ].label);\n        }\n    }\n\n    return groups;\n}"},"sortGroups":{"Documentation":{"description":"Returns a object mapping each event to a group","tags":[{"title":"return","description":"Mapping of events to groups","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Standings.prototype.sortGroups = function ()\n{\n    var ind, groups = this.getGroups(), mapping = {};\n\n    for( i = 0; i < groups.length; i++ )\n    {\n        mapping[ groups[i] ] = [];\n    }\n\n    for( i = 0; i < this.tables.length; i++ )\n    {\n        mapping[ this.tables[i].label ] = this.tables[i].entries;\n    }\n\n    return mapping;\n}"},"getEntriesByGroup":{"Documentation":{"description":"Returns all the events in a certain group","tags":[{"title":"param","description":"The group of the event","type":{"type":"NameExpression","name":"String"},"name":"group"},{"title":"return","description":"Array of entries","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Standings.prototype.getEntriesByGroup = function( group )\n{\n    var mapping = this.sortGroups();\n\n    if( group in mapping )\n    {\n        return mapping[ group ] ;\n    }\n    else\n    {\n        return [];\n    }\n}"},"getAllEntries":{"Documentation":{"description":"Returns all the entries in the standings","tags":[{"title":"return","description":"Array of entries","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Standings.prototype.getAllEntries = function ()\n{\n    var all = [];\n\n    for( i = 0; i < this.tables.length; i++ )\n    {\n        all.push.apply( all, this.tables[i].entries );\n    }\n\n    return all;\n}"},"getElements":{"Documentation":{"description":"Returns all the different labels for a given element","tags":[{"title":"param","description":"A specific element","type":{"type":"NameExpression","name":"String"},"name":"element"},{"title":"return","description":"Array of distinct labels","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Standings.prototype.getElements = function( element )\n{\n    var pos = [], entries = this.getAllEntries();\n\n    for( var i = 0; i < entries.length; i++ )\n    {\n        if( _.indexOf( pos, entries[ i ][ element ] ) < 0 )\n        {\n            pos.push(entries[ i ][ element] );\n        }\n    }\n\n    return pos;\n}"},"sortElements":{"Documentation":{"description":"Returns a mapping of entries to distinct element labels","tags":[{"title":"param","description":"A specific element","type":{"type":"NameExpression","name":"String"},"name":"element"},{"title":"return","description":"Map of entries to element label","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.RUGBY.Standings.prototype.sortElements = function( element )\n{\n    var ind, entries = this.getAllEntries(), play = this.getElements(element), mapping = {};\n\n    for( i = 0; i < play.length; i++ )\n    {\n        mapping[ play[i] ] = [];\n    }\n\n    for( i = 0; i < entries.length; i++ )\n    {\n        mapping[ entries[i][element] ].push(entries[i]);\n    }\n\n    return mapping;\n}"},"getEntriesByElement":{"Documentation":{"description":"Returns entries depending on the number of a certain element","tags":[{"title":"param","description":"The number of a certain element","type":{"type":"NameExpression","name":"String"},"name":"num"},{"title":"param","description":"A specific element","type":{"type":"NameExpression","name":"String"},"name":"element"},{"title":"return","description":"Array of entries","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Standings.prototype.getEntriesByElement = function( num, element )\n{\n    var mapping = this.sortElements(element);\n\n    if( num in mapping )\n    {\n        return mapping[num];\n    }\n    else\n    {\n        return [];\n    }\n}"},"getEntriesLowerThanElement":{"Documentation":{"description":"Returns entires depending on entries lower than a number of certain elements","tags":[{"title":"param","description":"The higher bound for the number of elements","type":{"type":"NameExpression","name":"String"},"name":"num"},{"title":"param","description":"A specific element","type":{"type":"NameExpression","name":"String"},"name":"element"},{"title":"return","description":"Array of entries","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Standings.prototype.getEntriesLowerThanElement = function( num, element )\n{\n    var mapping = this.sortElements(element),\n        events = [],\n        max = parseInt( num, undefined ),\n        key;\n\n    for( position in mapping )\n    {\n        if( position < max )\n        {\n            events.push.apply( events,mapping[ position ] );\n        }\n    }\n\n    return events;\n}"},"getEntriesHigherThanElement":{"Documentation":{"description":"Returns entires depending on entries higher than a number of certain elements","tags":[{"title":"param","description":"The higher bound for the number of elements","type":{"type":"NameExpression","name":"String"},"name":"num"},{"title":"param","description":"A specific element","type":{"type":"NameExpression","name":"String"},"name":"element"},{"title":"return","description":"Array of entries","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Standings.prototype.getEntriesHigherThanElement = function( num, element )\n{\n    var mapping = this.sortElements(element),\n        events = [],\n        min = parseInt( num, undefined ),\n        key;\n\n    for( number in mapping )\n    {\n        if( number > min )\n        {\n            events.push.apply( events,mapping[ number ] );\n        }\n    }\n\n    return events;\n}"},"getEntriesBetweenElements":{"Documentation":{"description":"Returns entries between two numbers of a certain element","tags":[{"title":"param","description":"The upper bound","type":{"type":"NameExpression","name":"String"},"name":"num1"},{"title":"param","description":"The lower bound","type":{"type":"NameExpression","name":"String"},"name":"num2"},{"title":"param","description":"A specific element","type":{"type":"NameExpression","name":"String"},"name":"element"},{"title":"return","description":"Array of entries","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Standings.prototype.getEntriesBetweenElements = function( num1, num2, element )\n{\n    var mapping = this.sortElements(element),\n        events = [],\n        max = parseInt( num1, undefined ),\n        min = parseInt( num2, undefined ),\n        key, num;\n\n    for( num in mapping )\n    {\n        if( num < min && num > max )\n        {\n            events.push.apply( events,mapping[ num ] );\n        }\n    }\n\n    return events;\n}"},"filterStandings":{"Documentation":{"description":"Returns all entries from standings depending on certain parameters specified in an object","tags":[{"title":"param","description":"Object containing filter labels and criteria","type":{"type":"NameExpression","name":"Object"},"name":"data"},{"title":"return","description":"filter Array of entries","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.Standings.prototype.filterStandings = function( data )\n{\n    var filter = [], single = [], similar = [], splitted = [], count = 0, rest;\n\n    for(var key in data) {\n        if( key.indexOf( 'Lower' ) > -1 )\n        {\n            rest = key.replace( 'Lower', '' );\n            single = this.getEntriesLowerThanElement( data[ key ], rest );\n        }\n        else if( key.indexOf( 'Higher' ) > -1 )\n        {\n            rest = key.replace( 'Higher', '' );\n            single = this.getEntriesHigherThanElement( data[ key ], rest );\n        }\n        else if( key.indexOf( 'Between' ) > -1 )\n        {\n            rest = key.replace( 'Between', '' );\n            splitted = data[key].split( ',' );\n            single = this.getEntriesBetweenElements( splitted[ 0 ], splitted[ 1 ], rest);\n        }\n        else\n        {\n            switch( key ) {\n                case ( 'played' ):\n                case ( 'won' ):\n                case ( 'lost' ):\n                case ( 'drawn' ):\n                case ( 'pointsFor' ):\n                case ( 'pointsAgainst' ):\n                case ( 'triesFor' ):\n                case ( 'triesAgainst' ):\n                case ( 'bonusPoints' ):\n                case ( 'points' ):\n                    single = this.getEntriesByElement( data[ key ], key );\n                    break;\n                case ( 'group' ):\n                    single = this.getEntriesByGroup( data[ key ] );\n                    break;\n                default:\n                    single = [];\n                    break;\n            }\n\n        }\n\n        if( count < 1 )\n        {\n            filter.push.apply( filter,single );\n        }\n        else\n        {\n            similar = [];\n            for( var i = 0; i < filter.length; i++ )\n            {\n                if( single.indexOf( filter[ i ] ) > -1)\n                {\n                    similar.push( filter[ i ] );\n                }\n            }\n            filter = similar;\n        }\n        count = count + 1;\n    }\n\n    return filter;\n}"}}},"Search":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for a rugby tournament object."},{"title":"param","description":"Metadata object to extend model variables","type":{"type":"NameExpression","name":"Object"},"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.Search = function( terms, language, type, account, sort, pageSize, page, tags, eventGroup, startDateBefore, startDateAfter )\n{\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n    this.urlGen = PULSE.CLIENT.RUGBY.getUrlGenerator();\n\n    this.results = [];\n    this.numEntries = 0;\n    this.terms = terms;\n    this.getData( terms, language, type, account, sort, pageSize, page, tags, eventGroup, startDateBefore, startDateAfter );\n}","prototype":{"getData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"terms"},{"title":"param","description":null,"type":null,"name":"language"},{"title":"param","description":null,"type":null,"name":"type"},{"title":"param","description":null,"type":null,"name":"account"},{"title":"param","description":null,"type":null,"name":"sort"},{"title":"param","description":null,"type":null,"name":"pageSize"},{"title":"param","description":null,"type":null,"name":"page"},{"title":"param","description":null,"type":null,"name":"tags"},{"title":"param","description":null,"type":null,"name":"eventGroup"},{"title":"param","description":null,"type":null,"name":"startDateBefore"},{"title":"param","description":null,"type":null,"name":"startDateAfter"}]},"Source":"PULSE.CLIENT.RUGBY.Search.prototype.getData = function( terms, language, type, account, sort, pageSize, page, tags, eventGroup, startDateBefore, startDateAfter )\n{\n    this.feeds = {};\n\n    this.account = account;\n\n    var offset = 0;\n\n    if ( page && pageSize )\n    {\n        offset = offset + ( page * pageSize );\n    }\n\n    this.feeds.contentUrl = this.urlGen.makeSearchQuery( account, terms, language, type, sort, pageSize, offset, tags, eventGroup, startDateBefore, startDateAfter );\n\n    this.feeds.feedContent = 'search-' + terms;\n    this.feeds.contentInterval = 360;\n    this.feeds.contentCallback = 'onsearch';\n\n    this.dm.addFeed( this.feeds.feedContent, this.feeds.contentUrl,\n        this.feeds.contentInterval, this.feeds.conentCallback, [ this ] );\n\n    this.dm.start( this.feeds.contentUrl );\n}"},"onData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.Search.prototype.onData = function( data )\n{\n    for ( var i = 0; i < data.hits.hit.length; i++ )\n    {\n        this.results.push( this.parseField( data.hits.hit[ i ].fields ) );\n    }\n\n    this.numEntries = data.hits.found;\n\n    PULSE.CLIENT.notify( PULSE.CLIENT.RUGBY.SEARCH_EVENTS.SEARCH_UPDATE, {\n            id: that.id,\n            success: true,\n            terms: this.terms\n        } );\n}"},"parseField":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"field"}]},"Source":"PULSE.CLIENT.RUGBY.Search.prototype.parseField = function( field )\n{\n    var parsedObject = {};\n\n    if ( field )\n    {\n        for( prop in field )\n        {\n            if ( field[ prop ].length > 0 )\n            {\n\n                var newProp;\n\n                if ( ( prop != 'image_url' ) && ( prop != 'tags'  ) )\n                {\n                    newProp = field[ prop ][ 0 ];\n                }\n                else\n                {\n                    newProp = field[ prop ];\n                }\n\n                if ( prop == 'type' )\n                {\n                    newProp = newProp.toLowerCase();\n                }\n                else if ( prop == \"object_id\" )\n                {\n                    newProp = parseInt( newProp );\n                }\n                else if ( prop == \"timestamp\" )\n                {\n                    var oldProp = newProp;\n                    newProp = this.getDaysAgo( newProp );\n                    var docDate = PULSE.CLIENT.DateUtil.parseDateTime( oldProp );\n\n                    var date_time = new Object();\n                    date_time.formatedDate = PULSE.CLIENT.DateUtil.getFormattedEventDate(docDate.getTime(),\"dd/mm/yyyy hh:ss\");\n                    parsedObject[ 'date_time' ] = date_time;\n\n                    if ( field[ 'type' ][ 0 ] == 'DOCUMENT' )\n                    {\n                        var dateString = PULSE.CLIENT.DateUtil.getDate( docDate, true ) + ' ' + PULSE.CLIENT.DateUtil.getMonth( docDate ) + ', ' + docDate.getFullYear();\n                        parsedObject[ 'docDate' ] = dateString;\n                    }\n                }\n                else if ( prop == \"duration\" )\n                {\n                    newProp = this.parseDuration( newProp );\n                }\n                else if ( prop == \"title\" && field[ 'type' ][ 0 ] == 'TOURNAMENT' )\n                {\n                    if ( newProp.charAt( 0 ) == ' ' )\n                    {\n                        newProp = newProp.slice(1);\n                    }\n\n                    if ( newProp.charAt( newProp.length - 1 ) == ' ' )\n                    {\n                        newProp = newProp.substring( 0, newProp.length - 1 );\n                    }\n\n                    var splitLabel = newProp.split( ' ' );\n                    if (! isNaN( splitLabel[ 0 ] ) )\n                    {\n                        parsedObject[ 'year' ] = splitLabel[ 0 ];\n                        splitLabel.shift();\n                        newProp = splitLabel.join( ' ' );\n                    }\n                    else\n                    {\n                        var notFoundDate = true;\n                        var dashSplit = splitLabel[ 0 ].split( '/' );\n                        if ( dashSplit.length > 1 )\n                        {\n                            if ( (! isNaN( dashSplit[ 0 ] ) ) && (! isNaN( dashSplit[ 0 ] ) ) )\n                            {\n                                parsedObject[ 'year' ] = splitLabel[ 0 ];\n                                splitLabel.shift();\n                                newProp = splitLabel.join( ' ' );\n                                notFoundDate = false;\n                            }\n                        }\n\n                        if ( notFoundDate )\n                        {\n                            if (! isNaN( splitLabel[ splitLabel.length - 1 ] ) )\n                            {\n                                parsedObject[ 'year' ] = splitLabel[ splitLabel.length - 1 ];\n                                splitLabel.pop();\n                                newProp = splitLabel.join( ' ' );\n                            }\n                            else\n                            {\n                                for ( var i = splitLabel.length - 1; i > -1; i-- )\n                                {\n                                    if (! isNaN( splitLabel[ i ] ) )\n                                    {\n                                        parsedObject[ 'year' ] = splitLabel[ i ];\n                                        splitLabel.splice( i, 1 );\n                                        newProp = splitLabel.join( ' ' );\n                                        i = -1;\n                                    }\n                                }\n                            }\n                        }\n\n                    }\n                }\n                else if (  field[ 'type' ][ 0 ] == 'EVENT' )\n                {\n\n                    if(prop == \"address\" || prop == \"categories\")\n                    {\n                        newProp = newProp.split(\",\")[0];\n                    }\n                }\n\n                if(prop == 'link' && newProp.indexOf(\"http\") == 0)\n                {\n                    parsedObject['redirectUrl']=true;\n                }\n\n                parsedObject[ prop ] = newProp;\n            }\n        }\n\n        if ( parsedObject.type == \"text\" )\n        {\n            if ( parsedObject.tags )\n            {\n                var news = false;\n                var tags = parsedObject.tags;\n                for ( var i = 0; i < tags.length; i++ )\n                {\n                    if ( tags[ i ].indexOf( 'News' ) > -1 )\n                    {\n                        news = true;\n                    }\n\n                }\n\n                if ( news )\n                {\n                    parsedObject[ 'news' ] = true;\n                }\n\n            }\n        }\n\n        if ( parsedObject.type == \"photo\" )\n        {\n            if ( parsedObject.image_url )\n            {\n                var desiredHeight = 101,\n                    imageObjects = [];\n\n                for ( var i = 0; i < parsedObject.image_url.length; i++ )\n                {\n                    var splitImage = parsedObject.image_url[ i ].split( ';' ),\n                        imagesObject = { 'width' : parseInt( splitImage[ 0 ] ), 'height' : parseInt( splitImage[ 1 ] ), 'url' : splitImage[ 2 ] }\n\n                    imageObjects.push( imagesObject );\n                }\n\n                //parsedObject.thumbnail_url = PULSE.CLIENT.getBiggestPhotoVariant( imageObjects );\n                parsedObject.thumbnail_url = PULSE.CLIENT.getPhotoVariantByTag( imageObjects, 'THUMBNAIL', 312 );\n\n            }\n        }\n\n        parsedObject[ 'link' ] = this.generateUrl( parsedObject );\n\n    }\n\n    return parsedObject;\n}"},"generateUrl":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"object"}]},"Source":"PULSE.CLIENT.RUGBY.Search.prototype.generateUrl = function( object )\n{\n    var type = object.type,\n        url;\n\n    if ( object.url )\n    {\n        url = object.url;\n    }\n    else\n    {\n\n        if ( object.news )\n        {\n            type = 'news';\n        }\n\n        url = '/' + type + '/' + object.object_id;\n\n        if ( type.indexOf( 'document' ) > -1 )\n        {\n            url = object.url_highlight;\n        } else if ( ( type.indexOf( 'audio' ) > -1 ) || ( type.indexOf( 'video' ) > -1  ) )\n        {\n            url = PULSE.CLIENT.generateUrl( type, object.object_id );\n        } else if ( ( type.indexOf( 'text' ) > -1 ) && ( ! object.news ) )\n        {\n            url = '';\n        }\n    }\n\n    return url;\n}"},"getResults":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Search.prototype.getResults = function()\n{\n    return this.results;\n}"},"getNumEntries":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Search.prototype.getNumEntries = function()\n{\n    return this.numEntries;\n}"},"getDaysAgo":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"stamp"}]},"Source":"PULSE.CLIENT.RUGBY.Search.prototype.getDaysAgo = function( stamp )\n{\n            var daysAgo = PULSE.CLIENT.DateUtil.parseDateTime( stamp );\n            var dayString = PULSE.CLIENT.DateUtil.getSinceString( daysAgo );\n            if ( dayString.indexOf( 'd' ) > -1 )\n            {\n                var splitDay = dayString.split( 'd' );\n                var time = parseInt( splitDay[ 0 ] );\n                if ( time > 1 )\n                {\n                    dayString = splitDay[ 0 ] + ' days ago';\n                }\n                else\n                {\n                    dayString = splitDay[ 0 ] + ' day ago';\n                }\n            }\n            else if ( dayString.indexOf( 'h' ) > -1 )\n            {\n                var splitHours = dayString.split( 'h' );\n                var time = parseInt( splitHours[ 0 ] );\n                if ( time > 1 )\n                {\n                    dayString = splitHours[ 0 ] + ' hours ago';\n                }\n                else\n                {\n                    dayString = splitHours[ 0 ] + ' hours ago';\n                }\n            }\n            else if ( dayString.indexOf( 'm' ) > -1 )\n            {\n                var splitMins = dayString.split( 'm' );\n                var time = parseInt( splitMins[ 0 ] );\n                if ( time > 1 )\n                {\n                    dayString = splitMins[ 0 ] + ' minutes ago';\n                }\n                else\n                {\n                    dayString = splitMins[ 0 ] + ' minute ago';\n                }\n            }\n\n            return dayString;\n}"},"parseDuration":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"duration"}]},"Source":"PULSE.CLIENT.RUGBY.Search.prototype.parseDuration = function( duration )\n{\n    var stringDuration = '';\n\n    if ( duration.split(' ').length < 2 )\n    {\n        var commaSplit = duration.split( ',' );\n        var intDuration = parseInt( commaSplit.join( '' ) );\n\n        if ( intDuration < 60 )\n        {\n            stringDuration = intDuration  + 'sec';\n        }\n        else\n        {\n            var mins = Math.floor( intDuration / 60 );\n            var secs = intDuration % 60;\n            stringDuration = mins + 'min ' + secs + 'sec';\n        }\n    }\n\n    return stringDuration;\n}"}}},"Team":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for rugby team object"},{"title":"param","description":"Team data object ( e.g. id, name, abbreviation )","type":{"type":"NameExpression","name":"Object"},"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.Team = function( data )\n{\n    this.players = {};\n    $.extend( this, data.team );\n    this.setManagementData( data );\n    this.setPlayerData( data );\n\n\n}","prototype":{"setManagementData":{"Documentation":{"description":"Store any team management information that is included in data","tags":[{"title":"param","description":"Team data object ( e.g. id, name, abbreviation )","type":{"type":"NameExpression","name":"Object"},"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.Team.prototype.setManagementData = function( data )\n{\n    if( data.management )\n    {\n        this.management = data.management;\n    }\n}"},"setPlayerData":{"Documentation":{"description":"Store various data passed into the constructor","tags":[{"title":"param","description":"Team data object ( e.g. id, name, abbreviation )","type":{"type":"NameExpression","name":"Object"},"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.Team.prototype.setPlayerData = function( data )\n{\n    var i, player;\n\n    if( !data.players )\n    {\n        return;\n    }\n    else\n    {\n        for( i = 0; i < data.players.length; i++ )\n        {\n            player = data.players[i];\n            if( !this.players[ player.id ] )\n            {\n                this.players[ player.id ] = new PULSE.CLIENT.RUGBY.Player( player );\n            }\n            else\n            {\n                if( !this.players[ player.player.id ] )\n                {\n                    this.players[ player.player.id ] = new PULSE.CLIENT.RUGBY.Player( player );\n                }\n            }\n        }\n    }\n}"},"hasPlayerWithId":{"Documentation":{"description":"Checks if this Team contains data for a given player id","tags":[{"title":"param","description":"[description]","type":{"type":"ArrayType","elements":[{"type":"NameExpression","name":"type"}]},"name":"playerId"},{"title":"return","description":"[description]","type":{"type":"NameExpression","name":"Boolean"}}]},"Source":"PULSE.CLIENT.RUGBY.Team.prototype.hasPlayerWithId = function( playerId )\n{\n    if( this.players[ playerId ] )\n    {\n        return true;\n    }\n\n    return false;\n}"}}},"TopPlayers":{"prototype":{"getTopPlayersStatsData":{"Documentation":{"description":"Used to directly request top player stats data","tags":[{"title":"param","description":"The scope of the stats, e.g. 'alltime', 'event', 'series'","type":{"type":"NameExpression","name":"String"},"name":"scope"},{"title":"param","description":"Stat which players are ranked, e.g. 'tries', 'conversions'","type":{"type":"NameExpression","name":"String"},"name":"metric"},{"title":"param","description":"Optional parameters to further scope the stats, e.g { sport : 'mru' }","type":{"type":"NameExpression","name":"Object"},"name":"params"},{"title":"param","description":"Optional configurations for the feed","type":{"type":"NameExpression","name":"Object"},"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.TopPlayers.prototype.getTopPlayersStatsData = function( scope, metric, params, config )\n{\n    var pathArray = [ 'stats', 'topplayers', scope, metric ];\n    var thisParams = {};\n    if ( !config )\n    {\n        config = {};\n    }\n    if ( params )\n    {\n        thisParams = params;\n    }\n\n    if ( thisParams.teamId && thisParams.teamId > 0 )\n    {\n        pathArray = [ 'stats', 'topplayers', 'team', thisParams.teamId, scope, metric ];\n    }\n\n    var idInfo = [ 'stats', 'metric:' + metric, 'scope:' + scope ];\n\n    thisParams.language = PULSE.CLIENT.LANGUAGE\n\n    this.feeds.statsUrl = this.urlGenerator.makeDataUrl( pathArray, thisParams );\n    this.feeds.feedStats = 'topPlayers';\n    this.feeds.statsInterval = config.interval || 60;\n    this.feeds.statsCallback = config.callback || 'onPlayerStats';\n\n    this.dm.addFeed( this.feeds.feedStats, this.feeds.statsUrl,\n        this.feeds.statsInterval, this.feeds.statsCallback, [ this ] );\n\n    this.dm.start( this.feeds.statsUrl );\n\n}"},"onData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.TopPlayers.prototype.onData"},{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"PULSE.CLIENT.RUGBY.TopPlayers.prototype.onData = function( data, id )\n{\n    if( id === this.feeds.feedStats )\n    {\n        var params = this.setStats( data );\n        params.success = true;\n        PULSE.CLIENT.notify( PULSE.CLIENT.RUGBY.DATA_TOPPLAYERS.STATS_UPDATE, params );\n\n    }\n}"},"setStats":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.TopPlayers.prototype.setStats = function( data )\n{\n    var scope = undefined;\n    var metric = undefined;\n    var param = undefined;\n    var paramValue = undefined;\n\n    if ( data.scope )\n    {\n        var scopes = data.scope.split( '_' );\n        var scope = scopes[ 0 ].toLowerCase();\n        if ( scopes.length > 1 )\n        {\n            param = scopes[ 1 ].toLowerCase();\n            if ( param === 'eventtype' )\n            {\n                param = 'type';\n            }\n        }\n        else\n        {\n            param = scope;\n        }\n    }\n    if ( data.metric )\n    {\n        metric = data.metric.toLowerCase();\n    }\n\n    if ( data.scopeIds )\n    {\n        paramValue = data.scopeIds;\n        if ( paramValue && param === 'sport' )\n        {\n            var newVal = PULSE.CLIENT.RUGBY.SPORT_LOOKUP[ paramValue ];\n            if ( newVal )\n            {\n                paramValue = newVal;\n            }\n        }\n    }\n\n    var stats = data.entries;\n    if ( !this.stats )\n    {\n        this.stats = {};\n    }\n    if ( scope )\n    {\n        if ( !this.stats[ scope ] )\n        {\n            this.stats[ scope ] = {};\n        }\n        if ( !this.stats[ scope ][ metric ] )\n        {\n            this.stats[ scope ][ metric ] = {};\n        }\n        if ( param )\n        {\n            if ( !this.stats[ scope ][ metric ][ param ] )\n            {\n                this.stats[ scope ][ metric ][ param ] = {};\n            }\n            if ( paramValue )\n            {\n                this.stats[ scope ][ metric ][ param ][ paramValue ] = stats;\n            }\n        }\n        else\n        {\n            this.stats[ scope ][ metric ].stats = stats;\n        }\n    }\n    return {\n        scope: scope,\n        metric: metric,\n        param: param,\n        paramValue: paramValue\n    };\n}"},"findTopPlayerStats":{"Documentation":{"description":"Tries to find player stats given a scope, metric and parameter","tags":[{"title":"param","description":"The scope of the stats to find, e.g. 'alltime', 'event' or 'series'","type":{"type":"NameExpression","name":"String"},"name":"scope"},{"title":"param","description":"Stat by which players are ranked. E.g. 'tries', 'penalties'","type":{"type":"NameExpression","name":"String"},"name":"metric"},{"title":"param","description":"A further parameter further scoping the stats, e.g 'mru'","type":{"type":"NameExpression","name":"String"},"name":"param"},{"title":"return","description":"Returns a list of stats for the provided scope, metric and param","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.TopPlayers.prototype.findTopPlayerStats = function( scope, metric, param, paramVal )\n{\n    if ( this.stats && this.stats[ scope ] && this.stats[ scope ][ metric ] )\n    {\n        if ( !param )\n        {\n            return this.stats[ scope ][ metric ].stats;\n        }\n        else\n        {\n            if ( this.stats[ scope ][ metric ][ param ] )\n            {\n                if ( !paramVal )\n                {\n                    return this.stats[ scope ][ metric ][ param ];\n                }\n                else\n                {\n                    if ( this.stats[ scope ][ metric ][ param ][ paramVal ] )\n                    {\n                        return this.stats[ scope ][ metric ][ param ][ paramVal ];\n                    }\n                }\n            }\n        }\n    }\n    return undefined;\n}"}},"Documentation":{"description":"Constructor for a top players object","tags":[{"title":"param","description":"Tournament","type":{"type":"NameExpression","name":"Object"},"name":"tournament"}]},"Source":"PULSE.CLIENT.RUGBY.TopPlayers = function( tournament )\n{\n    this.urlGenerator = PULSE.CLIENT.RUGBY.getUrlGenerator();\n    this.feeds = {};\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n    this.tournament = tournament || window.WidgetController.getTournamentByName( 'Other' );\n}"},"TopTeamsStats":{"Documentation":{"description":"Constructor for a top teams object","tags":[{"title":"param","description":"Tournament","type":{"type":"NameExpression","name":"Object"},"name":"tournament"}]},"Source":"PULSE.CLIENT.RUGBY.TopTeamsStats = function( tournament )\n{\n    this.urlGenerator = PULSE.CLIENT.RUGBY.getUrlGenerator();\n    this.feeds = {};\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n    this.tournament = tournament || window.WidgetController.getTournamentByName( 'Other' );\n}","prototype":{"findTopTeamStats":{"Documentation":{"description":"Tries to find team stats given a scope, metric and parameter","tags":[{"title":"param","description":"The scope of the stats to find, e.g. 'alltime', 'event' or 'series'","type":{"type":"NameExpression","name":"String"},"name":"scope"},{"title":"param","description":"Stat by which teams are ranked. E.g. 'tries', 'penalties'","type":{"type":"NameExpression","name":"String"},"name":"metric"},{"title":"param","description":"A further parameter further scoping the stats, e.g 'mru'","type":{"type":"NameExpression","name":"String"},"name":"param"},{"title":"return","description":"Returns a list of stats for the provided scope, metric and param","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.TopTeamsStats.prototype.findTopTeamStats = function( scope, metric, param,\n    paramVal )\n{\n    if ( this.stats && this.stats[ scope ] && this.stats[ scope ][ metric ] )\n    {\n        if ( !param )\n        {\n            return this.stats[ scope ][ metric ].stats;\n        }\n        else\n        {\n            if ( this.stats[ scope ][ metric ][ param ] )\n            {\n                if ( !paramVal )\n                {\n                    return this.stats[ scope ][ metric ][ param ];\n                }\n                else\n                {\n                    if ( this.stats[ scope ][ metric ][ param ][ paramVal ] )\n                    {\n                        return this.stats[ scope ][ metric ][ param ][ paramVal ];\n                    }\n                }\n            }\n        }\n    }\n    return undefined;\n}"},"getTopTeamsStatsData":{"Documentation":{"description":"Used to directly request top team stats data","tags":[{"title":"param","description":"The scope of the stats, e.g. 'alltime', 'event', 'series'","type":{"type":"NameExpression","name":"String"},"name":"scope"},{"title":"param","description":"Stat which teams are ranked, e.g. 'tries', 'conversions'","type":{"type":"NameExpression","name":"String"},"name":"metric"},{"title":"param","description":"Optional parameters to further scope the stats, e.g { sport : 'mru' }","type":{"type":"NameExpression","name":"Object"},"name":"params"},{"title":"param","description":"Optional configurations for the feed","type":{"type":"NameExpression","name":"Object"},"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.TopTeamsStats.prototype.getTopTeamsStatsData = function( scope, metric, params, config )\n{\n    if(scope == \"alltime_eventtype\")\n    {\n        scope = \"alltime\"\n    }\n    var pathArray = [ 'stats', 'topteams', scope, metric ];\n    var thisParams = {};\n    if ( !config )\n    {\n        config = {};\n    }\n    if ( params )\n    {\n        thisParams = params;\n    }\n\n    if ( thisParams.teamId && thisParams.teamId > 0 )\n    {\n        pathArray = [ 'stats', 'topteams', scope, metric ];\n    }\n\n    var idInfo = [ 'stats', 'metric:' + metric, 'scope:' + scope ];\n\n    thisParams.language = PULSE.CLIENT.LANGUAGE\n    this.feeds.statsUrl = this.urlGenerator.makeDataUrl( pathArray, thisParams );\n    this.feeds.feedStats = 'topTeams';\n    this.feeds.statsInterval = config.interval || 60;\n    this.feeds.statsCallback = config.callback || 'onTeamStats';\n\n    this.dm.addFeed( this.feeds.feedStats, this.feeds.statsUrl,\n        this.feeds.statsInterval, this.feeds.statsCallback, [ this ] );\n\n    this.dm.start( this.feeds.statsUrl );\n\n}"},"onData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.TopTeamsStats.prototype.onData"},{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"PULSE.CLIENT.RUGBY.TopTeamsStats.prototype.onData = function( data, id )\n{\n    if( id === this.feeds.feedStats )\n    {\n        var params = this.setStats( data );\n        params.success = true;\n        PULSE.CLIENT.notify( PULSE.CLIENT.RUGBY.DATA_TOPTEAMS.STATS_UPDATE, params );\n\n    }\n}"},"setStats":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.TopTeamsStats.prototype.setStats = function( data )\n{\n    var scope = undefined;\n    var metric = undefined;\n    var param = undefined;\n    var paramValue = undefined;\n\n\n    if ( data.scope )\n    {\n        var scopes = data.scope.split( '_' );\n        var scope = scopes[ 0 ].toLowerCase();\n        if ( scopes.length > 1 )\n        {\n            param = scopes[ 1 ].toLowerCase();\n            if ( param === 'eventtype' )\n            {\n                param = 'type';\n            }\n        }\n        else\n        {\n            param = scope;\n        }\n    }\n    if ( data.metric )\n    {\n        metric = data.metric.toLowerCase();\n    }\n\n    if ( data.scopeIds )\n    {\n        paramValue = data.scopeIds;\n        if ( paramValue && param === 'sport' )\n        {\n            var newVal = PULSE.CLIENT.RUGBY.SPORT_LOOKUP[ paramValue ];\n            if ( newVal )\n            {\n                paramValue = newVal;\n            }\n        }\n    }\n\n    var stats = data.entries;\n    if ( !this.stats )\n    {\n        this.stats = {};\n    }\n    if ( scope )\n    {\n        if ( !this.stats[ scope ] )\n        {\n            this.stats[ scope ] = {};\n        }\n        if ( !this.stats[ scope ][ metric ] )\n        {\n            this.stats[ scope ][ metric ] = {};\n        }\n        if ( param )\n        {\n            if ( !this.stats[ scope ][ metric ][ param ] )\n            {\n                this.stats[ scope ][ metric ][ param ] = {};\n            }\n            if ( paramValue )\n            {\n                this.stats[ scope ][ metric ][ param ][ paramValue ] = stats;\n            }\n        }\n        else\n        {\n            this.stats[ scope ][ metric ].stats = stats;\n        }\n    }\n    return {\n        scope: scope,\n        metric: metric,\n        param: param,\n        paramValue: paramValue\n    };\n}"}}},"Tournament":{"prototype":{"getSchedule":{"Documentation":{"description":"Start Tournament feeds","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Tournament.prototype.getSchedule = function( options )\n{\n    this.schedule.getScheduleData( options );\n}"},"getStandings":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.Tournament.prototype.getStandings"},{"title":"param","description":null,"type":null,"name":"options"}]},"Source":"PULSE.CLIENT.RUGBY.Tournament.prototype.getStandings = function( options )\n{\n    if( this.standingsLoaded )\n    {\n        return;\n    }\n\n    var pathArray = [ 'event', this.tournamentName, 'standings' ],\n        start;\n\n    this.feeds.standingsUrl = this.tournamentUrlGenerator.makeDataUrl( pathArray, { language: PULSE.CLIENT.LANGUAGE } );\n    this.feeds.feedStandings = 'standings';\n    this.feeds.standingsInterval = 300;\n    this.feeds.standingsCallback = 'onStandings';\n\n    if( _.isObject( options ) )\n    {\n        start = options.start;\n        this.feeds.standingsInterval = this.feeds.standingsInterval || options.interval;\n    }\n\n    this.dm.addFeed( this.feeds.feedStandings, this.feeds.standingsUrl,\n        this.feeds.standingsInterval, this.feeds.standingsCallback, [ this ] );\n\n    this.standingsLoaded = true;\n\n    if( _.isBoolean( options ) || start )\n    {\n        this.dm.start( this.feeds.standingsUrl );\n    }\n}"},"getSquads":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"options"}]},"Source":"PULSE.CLIENT.RUGBY.Tournament.prototype.getSquads = function( options )\n{\n    if( this.squadsLoaded )\n    {\n        return;\n    }\n\n    var pathArray = [ 'event', this.tournamentName, 'squads' ],\n        start;\n\n    this.feeds.squadsUrl = this.tournamentUrlGenerator.makeDataUrl( pathArray, { language: PULSE.CLIENT.LANGUAGE } );\n    this.feeds.feedSquads = 'squad';\n    this.feeds.squadsInterval = 60;\n    this.feeds.squadsCallback = 'onSquads';\n\n    if( _.isObject( options ) )\n    {\n        start = options.start;\n        this.feeds.squadsInterval = this.feeds.squadsInterval || options.interval;\n    }\n\n    this.dm.addFeed( this.feeds.feedSquads, this.feeds.squadsUrl,\n        this.feeds.squadsInterval, this.feeds.squadsCallback, [ this ] );\n\n    this.squadsLoaded = true;\n\n    if( _.isBoolean( options ) || start )\n    {\n        this.dm.start( this.feeds.squadsUrl );\n    }\n}"},"getInformation":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"options"}]},"Source":"PULSE.CLIENT.RUGBY.Tournament.prototype.getInformation = function( options )\n{\n    if( this.eventLoaded )\n    {\n        return;\n    }\n\n    var pathArray = [ 'event', this.tournamentName ],\n        start;\n\n    this.feeds = {};\n\n    this.feeds.eventUrl = this.tournamentUrlGenerator.makeDataUrl( pathArray, { language: PULSE.CLIENT.LANGUAGE } );\n\n    this.feeds.feedEvent = 'event-information';\n    this.feeds.eventInterval = 0;\n    this.feeds.eventCallback = 'onEvent';\n\n    if( _.isObject( options ) )\n    {\n        start = options.start;\n        this.feeds.eventInterval = this.feeds.eventInterval || options.interval;\n    }\n\n    this.dm.addFeed( this.feeds.feedEvent, this.feeds.eventUrl,\n        this.feeds.eventInterval, this.feeds.eventCallback, [ this ] );\n\n    this.eventLoaded = true;\n\n    if( _.isBoolean( options ) || start )\n    {\n        this.dm.start( this.feeds.eventUrl );\n    }\n}"},"getNumbers":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"options"}]},"Source":"PULSE.CLIENT.RUGBY.Tournament.prototype.getNumbers = function( options )\n{\n    if( this.numbersLoaded )\n    {\n        return;\n    }\n\n    var pathArray = [ 'event', this.tournamentName, 'numbers' ],\n        start;\n\n    this.feeds = {};\n\n    this.feeds.eventUrl = this.tournamentUrlGenerator.makeDataUrl( pathArray, { language: PULSE.CLIENT.LANGUAGE } );\n\n    this.feeds.feedNumbers = 'event-numbers';\n    this.feeds.eventInterval = 300;\n    this.feeds.eventCallback = 'onEvent';\n\n    if( _.isObject( options ) )\n    {\n        start = options.start;\n        this.feeds.eventInterval =  parseInt( options.interval ) || this.feeds.eventInterval;\n    }\n\n    this.dm.addFeed( this.feeds.feedNumbers, this.feeds.eventUrl,\n        this.feeds.eventInterval, this.feeds.eventCallback, [ this ] );\n\n    this.numbersLoaded = true;\n\n    if( _.isBoolean( options ) || start )\n    {\n        this.dm.start( this.feeds.eventUrl );\n    }\n}"},"getTournamentState":{"Documentation":{"description":"Returns 'U' (upcoming, no matches started), 'L' (live, the tournamen is in progress) or\n'C' (complete, all matches have finished) by looking at tournament schedule data","tags":[{"title":"return","description":"the tournament state (U|L|C), or empty string if there's no data","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.Tournament.prototype.getTournamentState = function()\n{\n    var match;\n\n    if( this.hasScheduleData() )\n    {\n        if( this.schedule.matches.length === this.schedule.upcomingMatches.length )\n        {\n            return \"U\";\n        }\n\n        if( this.schedule.matches.length === this.schedule.completeMatches.length )\n        {\n            return \"C\";\n        }\n\n        return \"L\";\n    }\n    return \"\";\n}"},"getTournamentSpan":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.Tournament.prototype.getTournamentSpan"},{"title":"param","description":null,"type":null,"name":"fullMonth"},{"title":"param","description":null,"type":null,"name":"customStart"}]},"Source":"PULSE.CLIENT.RUGBY.Tournament.prototype.getTournamentSpan = function( fullMonth, customStart )\n{\n    if ( this.start && this.end )\n    {\n        var startDate = new Date( this.start.millis ),\n            endDate = new Date( this.end.millis ),\n            formats = moment.localeData()._longDateFormat,\n            startDateFormat = formats[ 'LL' ],\n            endDateFormat = formats[ 'LL' ];\n\n        if ( customStart )\n        {\n            startDate = new Date( customStart );\n        }\n\n        if( startDate.getFullYear() == endDate.getFullYear() )\n        {\n            startDateFormat = formats[ moment.localeData()._yearFirst ? 'LL' : 'll' ];\n            endDateFormat = formats[ moment.localeData()._yearFirst ? 'll' : 'LL' ];\n        }\n\n        if( !fullMonth )\n        {\n            startDateFormat.replace( 'MMMM', 'MMM' );\n            endDateFormat.replace( 'MMMM', 'MMM' );\n        }\n\n        return moment( startDate ).format( startDateFormat ) + ' - ' +\n            moment( endDate ).format( endDateFormat );\n    }\n}"},"getTournamentShortName":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"fullMonth"}]},"Source":"PULSE.CLIENT.RUGBY.Tournament.prototype.getTournamentShortName = function( fullMonth )\n{\n    if ( this.label )\n    {\n        var splitLabel = this.label.split( ' ' ),\n            outString = '';\n        if ( splitLabel.length > 1 )\n        {\n            for ( var i = 0; i < splitLabel.length - 1; i++ )\n            {\n                outString = outString + splitLabel[ i ].charAt( 0 );\n            }\n            return outString + ' ' + splitLabel[ splitLabel.length - 1 ]\n        }\n        else\n        {\n            return this.label;\n        }\n    }\n    else\n    {\n        return '';\n    }\n}"},"setData":{"Documentation":{"description":"Takes an tournament metadata object and saves its properties as the properties\nof this tournament object (i.e., this.eventName)","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Tournament.prototype.setData = function( data )\n{\n    var prop;\n\n    for( prop in data )\n    {\n        this[ prop ] = data[ prop ];\n    }\n}"},"updateTeamsMap":{"Documentation":{"description":"Update map of stored teams once data has been received","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Tournament.prototype.updateTeamsMap = function ( data )\n{\n    if( !data )\n    {\n        return;\n    }\n\n    var squads = data, i, iLimit, team, teamId;\n\n    for( i = 0, iLimit = squads.length; i < iLimit; i++ )\n    {\n        team = squads[i];\n        teamId = team.team.id;\n\n        // Create team objects\n        if( !this.teams[ teamId ] )\n        {\n            this.teams[ teamId ] = new PULSE.CLIENT.RUGBY.Team( team );\n        }\n\n        // Create player objects for this team\n        if( team.players )\n        {\n            this.updatePlayersMap( team.players );\n        }\n    }\n}"},"updatePlayersMap":{"Documentation":{"description":"Update map of stored players once either squad or match summary data has been\nreceived.","tags":[{"title":"param","description":"Array of player data","type":{"type":"NameExpression","name":"Array"},"name":"players"}]},"Source":"PULSE.CLIENT.RUGBY.Tournament.prototype.updatePlayersMap = function( players )\n{\n    var player, playerId, i;\n\n    if( !players )\n    {\n        return;\n    }\n\n    for( i = 0; i < players.length; i++ )\n    {\n        player = players[ i ];\n\n        if( !player.id )\n        {\n            player = player.player;\n        }\n\n        playerId = player.id;\n\n        if( !this.players[ playerId ] )\n        {\n            this.players[ playerId ] = new PULSE.CLIENT.RUGBY.Player( player );\n        }\n    }\n}"},"hasScheduleData":{"Documentation":{"description":"Check if any schedule data is present","tags":[{"title":"return","description":"True if schedule.matches is not empty","type":{"type":"NameExpression","name":"Boolean"}}]},"Source":"PULSE.CLIENT.RUGBY.Tournament.prototype.hasScheduleData = function()\n{\n    if( this.schedule && _.keys( this.schedule.matchMap ).length )\n    {\n        return true;\n    }\n    return false;\n}"},"hasStandingsData":{"Documentation":{"description":"Check if any standings data is present","tags":[{"title":"return","description":"True if schedule.matches is not empty","type":{"type":"NameExpression","name":"Boolean"}}]},"Source":"PULSE.CLIENT.RUGBY.Tournament.prototype.hasStandingsData = function()\n{\n    if( this.standings && this.standings.entries.length )\n    {\n        return true;\n    }\n    return false;\n}"},"setStandingsData":{"Documentation":{"description":"Updates standings model with newly received standings data","tags":[{"title":"param","description":"Standings data","type":{"type":"NameExpression","name":"Object"},"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.Tournament.prototype.setStandingsData = function( data )\n{\n    this.standings.setData( data );\n}"},"setInformation":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.Tournament.prototype.setInformation = function( data )\n{\n    var prop;\n\n    if( data )\n    {\n        for( prop in data )\n        {\n            this[ prop ] = data[ prop ];\n        }\n    }\n}"},"setNumbers":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.Tournament.prototype.setNumbers = function( data )\n{\n    var prop;\n\n    if( data && data.data )\n    {\n        this.numbers = {};\n        for( prop in data.data )\n        {\n            this.numbers[ prop ] = data.data[ prop ];\n        }\n    }\n}"},"hasSquadsData":{"Documentation":{"description":"Check if any schedule data is present","tags":[{"title":"return","description":"True if scheduleData is not empty","type":{"type":"NameExpression","name":"Boolean"}}]},"Source":"PULSE.CLIENT.RUGBY.Tournament.prototype.hasSquadsData = function()\n{\n    if( this.teams && _.keys( this.teams ).length )\n    {\n        return true;\n    }\n    return false;\n}"},"onData":{"Documentation":{"description":"Tournament onData\n onData gets called by the data manager when the file called is retrieved and\n the JSONP is read.","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Tournament.prototype.onData = function( data, id )\n{\n    if( id == this.feeds.feedStandings && data && data.tables )\n    {\n        this.setStandingsData( data );\n\n        PULSE.CLIENT.notify( PULSE.CLIENT.RUGBY.DATA_EVENTS.STANDINGS_UPDATE, {\n            id: this.tournamentName,\n            success: true\n        } );\n    }\n    else if( id == this.feeds.feedSquads && data && data.squads )\n    {\n        this.updateTeamsMap( data.squads );\n\n        PULSE.CLIENT.notify( PULSE.CLIENT.RUGBY.DATA_EVENTS.SQUADS_UPDATE, {\n            id: this.tournamentName,\n            success: true\n        } );\n    }\n    else if ( id == this.feeds.feedEvent && data )\n    {\n        this.setInformation( data );\n\n        PULSE.CLIENT.notify( PULSE.CLIENT.RUGBY.DATA_EVENTS.INFORMATION_UPDATE, {\n            id: this.tournamentName,\n            success: true\n        } );\n    }\n    else if ( id == this.feeds.feedNumbers && data )\n    {\n        this.setNumbers( data );\n\n        PULSE.CLIENT.notify( PULSE.CLIENT.RUGBY.DATA_EVENTS.NUMBERS_UPDATE, {\n            id: this.tournamentName,\n            success: true\n        } );\n    }\n}"},"onError":{"Documentation":{"description":"Tournament onError\n onError gets called by the data manager when the file called is not successfully\n retrieved.","tags":[]},"Source":"PULSE.CLIENT.RUGBY.Tournament.prototype.onError = function( data, id )\n{\n    if( id === this.feeds.feedSchedule )\n    {\n        PULSE.CLIENT.notify( PULSE.CLIENT.RUGBY.DATA_EVENTS.SCHEDULE_UPDATE, {\n            id: this.eventName,\n            success: false\n        } );\n    }\n    else if( id === this.feeds.feedStandings )\n    {\n        PULSE.CLIENT.notify( PULSE.CLIENT.RUGBY.DATA_EVENTS.STANDINGS_UPDATE, {\n            id: this.eventName,\n            success: false\n        } );\n    }\n    else if( id === this.feeds.feedSquads )\n    {\n        PULSE.CLIENT.notify( PULSE.CLIENT.RUGBY.DATA_EVENTS.SQUADS_UPDATE, {\n            id: this.eventName,\n            success: false\n        } );\n    }\n    else if ( id == this.feeds.feedEvent )\n    {\n        PULSE.CLIENT.notify( PULSE.CLIENT.RUGBY.DATA_EVENTS.INFORMATION_UPDATE, {\n            id: this.tournamentName,\n            success: false\n        } );\n    }\n}"}},"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for a rugby tournament object."},{"title":"param","description":"Metadata object to extend model variables","type":{"type":"NameExpression","name":"Object"},"name":"data"}]},"Source":"PULSE.CLIENT.RUGBY.Tournament = function( data )\n{\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n    this.globalUrlGenerator = PULSE.CLIENT.RUGBY.getUrlGenerator();\n    this.tournamentUrlGenerator = PULSE.CLIENT.RUGBY.getUrlGenerator( data );\n    this.setData( data );\n    this.feeds = {};\n    this.teams = {};\n    this.players = {};\n\n    this.schedule = new PULSE.CLIENT.RUGBY.Schedule( this, {} ); // Array of matches set on receiving schedule data\n    this.standings = new PULSE.CLIENT.RUGBY.Standings( this, {} ); // Array of standings tables set on receiving data\n}"},"TournamentGroup":{"prototype":{"getElements":{"Documentation":{"description":"Returns an array of elements for all the objects in events","tags":[{"title":"param","description":"Object element to be retrieved","type":{"type":"NameExpression","name":"String"},"name":"element"},{"title":"return","description":"Array of the element values","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.TournamentGroup.prototype.getElements = function( list, element )\n{\n    var out = [],\n        splitted = element.split(','), i;\n\n    for( i = 0; i < list.length; i++ )\n    {\n        if( list[ i ][ element ]  )\n        {\n            out.push( list[ i ][ element ] );\n        }\n        else if( list[ i ].start && splitted[ 0 ] == 'start' && ( splitted.length > 1 ) )\n        {\n            if( splitted[ 1 ] == 'label' || splitted[ 1 ] == 'millis' )\n            {\n                out.push( list[ i ].start[ splitted[ 1 ] ] );\n            }\n            else\n            {\n                out.push( 'undefined' );\n            }\n        }\n        else if( list[ i ].end && splitted[ 0 ] == 'end' && ( splitted.length > 1) )\n        {\n            if( splitted[ 1 ] == 'label' || splitted[ 1 ] == 'millis' )\n            {\n                out.push( list[ i ].end[ splitted[ 1 ] ] );\n            }\n            else\n            {\n                out.push( 'undefined' );\n            }\n        }\n        else\n        {\n            out.push( 'undefined' );\n        }\n    }\n\n    return out;\n}"},"getEventbyElement":{"Documentation":{"description":"Returns an event based on a value and an element","tags":[{"title":"param","description":"Value to be compared","type":{"type":"NameExpression","name":"String"},"name":"val"},{"title":"param","description":"Object element to be retrieved","type":{"type":"NameExpression","name":"String"},"name":"element"},{"title":"return","description":"Array of element values","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.RUGBY.TournamentGroup.prototype.getEventbyElement = function( val, element )\n{\n    var splitted = element.split(','), i;\n\n    for( i = 0; i < this.events.length; i++)\n    {\n        if( this.events[ i ][ element ] )\n        {\n            if( val == this.events[ i ][ element ] )\n            {\n                return this.events[ i ];\n            }\n        }\n        else if( this.events[i].start && splitted[0] == 'start' && (splitted.length > 1) )\n        {\n            if( splitted[1] == 'label' || splitted[1] == 'millis')\n            {\n                if( val == this.events[ i ].start[ splitted[ 1 ] ] )\n                {\n                    return this.events[ i ];\n                }\n            }\n            else\n            {\n                return undefined;\n            }\n        }\n        else if( this.events[ i ].end && splitted[ 0 ] == 'end' && ( splitted.length > 1 ) )\n        {\n            if( splitted[ 1 ] == 'label' || splitted[ 1 ] == 'millis')\n            {\n                if( val == this.events[ i ].end[ splitted[ 1 ] ] )\n                {\n                    return this.events[ i ];\n                }\n            }\n            else\n            {\n                return undefined;\n            }\n        }\n        else\n        {\n            return undefined;\n        }\n    }\n    return out;\n}"},"getElementbyElement":{"Documentation":{"description":"Returns an element for an event given another element and a value","tags":[{"title":"param","description":"Value to be compared","type":{"type":"NameExpression","name":"String"},"name":"val"},{"title":"param","description":"Object element to be compared","type":{"type":"NameExpression","name":"String"},"name":"elementin"},{"title":"param","description":"Object element to be retrieved","type":{"type":"NameExpression","name":"String"},"name":"elementout"},{"title":"return","description":"Object element value","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.RUGBY.TournamentGroup.prototype.getElementbyElement = function( val, elementin, elementout )\n{\n    var splitted = elementout.split(','),\n        ev = this.getEventbyElement( val, elementin );\n\n    if( ev[ elementout ] )\n    {\n        if( ev[ elementout ] )\n        {\n            return ev[ elementout ];\n        }\n    }\n    else if( ev.start && splitted[ 0 ] == 'start' && ( splitted.length > 1 ) )\n    {\n        if( splitted[ 1 ] == 'label' || splitted[ 1 ] == 'millis' )\n        {\n            if( ev.start[ splitted[ 1 ] ] )\n            {\n                return ev.start[ splitted[ 1 ] ];\n            }\n        }\n        else\n        {\n            return undefined;\n        }\n    }\n    else if( ev.end && splitted[ 0 ] == 'end' && ( splitted.length > 1 ) )\n    {\n        if( splitted[ 1 ] == 'label' || splitted[ 1 ] == 'millis' )\n        {\n            if( ev.end[splitted[ 1 ] ] )\n            {\n                return ev.end[ splitted[ 1 ] ];\n            }\n        }\n        else\n        {\n            return undefined;\n        }\n    }\n    else\n    {\n        return undefined;\n    }\n}"},"getTournamentGroupData":{"Documentation":{"description":"Adds tournamentgroup feed to data manager","tags":[{"title":"param","description":"Boolean to determine whether to start feed immediately","type":{"type":"NameExpression","name":"Boolean"},"name":"start"}]},"Source":"PULSE.CLIENT.RUGBY.TournamentGroup.prototype.getTournamentGroupData = function( start )\n{\n    var pathArray = [ 'eventGroup', this.type ];\n    this.feeds.tournamentgroupUrl = this.urlGenerator.makeDataUrl( pathArray, { language: PULSE.CLIENT.LANGUAGE } );\n    this.feeds.feedTournamentGroup = 'tournamentgroup-' + this.span;\n    this.feeds.tournamentgroupInterval = 360;\n    this.feeds.tournamentgroupCallback = 'onTournamentGroup';\n\n    this.dm.addFeed( this.feeds.feedTournamentGroup, this.feeds.tournamentgroupUrl,\n        this.feeds.tournamentgroupInterval, this.feeds.tournamentgroupCallback, [ this ] );\n\n    if( start )\n    {\n        this.dm.start( this.feeds.tournamentgroupUrl );\n    }\n}"},"onData":{"Documentation":{"description":"Store allplayers data and notify DOM if data is received","tags":[{"title":"param","description":"JSON data","type":{"type":"NameExpression","name":"Object"},"name":"data"},{"title":"param","description":"Id string for the received data","type":{"type":"NameExpression","name":"String"},"name":"id"}]},"Source":"PULSE.CLIENT.RUGBY.TournamentGroup.prototype.onData = function( data, id )\n{\n    var that = this,\n        events = [];\n\n    if( id === this.feeds.feedTournamentGroup && data )\n    {\n        for( var i = 0; i < data.events.length; i++)\n        {\n            events.push( new PULSE.CLIENT.RUGBY.Tournament( data.events[ i ] ) );\n        }\n\n        this.name = data.name;\n        this.events = events;\n\n        PULSE.CLIENT.notify( 'tournamentgroup/update', {\n            id: that.span,\n            success: true\n        } );\n    }\n}"},"onError":{"Documentation":{"description":"Notify DOM of failure","tags":[{"title":"param","description":"Failed response","type":{"type":"NameExpression","name":"Object"},"name":"data"},{"title":"param","description":"Id string for the received data","type":{"type":"NameExpression","name":"String"},"name":"id"}]},"Source":"PULSE.CLIENT.RUGBY.TournamentGroup.prototype.onError = function( data, id )\n{\n    var that = this;\n\n    if( id === this.feeds.feedTournamentGroup )\n    {\n        PULSE.CLIENT.notify( 'tournamentgroup/update', {\n            id: that.scope,\n            success: false\n        } );\n    }\n}"}},"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for Rugby TournamentGroup list"},{"title":"param","description":"Allplayers at a particular time span e.g. 'rwc', etc...","type":{"type":"NameExpression","name":"String"},"name":"span"}]},"Source":"PULSE.CLIENT.RUGBY.TournamentGroup = function( type )\n{\n    this.type = type;\n\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n    // As the tournament groups folder currently sits at same level as tournaments on CDN\n    // Url the 'tournament' param for constructing correct URLs. Subject to change.\n    this.urlGenerator = new PULSE.CLIENT.RUGBY.UrlGenerator();\n    this.feeds = {};\n\n    this.getTournamentGroupData();\n}"},"News":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.RUGBY.News"},{"title":"param","description":null,"type":null,"name":"language"},{"title":"param","description":null,"type":null,"name":"id"},{"title":"param","description":null,"type":null,"name":"config"}]},"Source":"PULSE.CLIENT.RUGBY.News = function( language, id, config )\n{\n    this.newslanguage = language;\n    this.newsid = id;\n\n    if (config.templates)\n    {\n        this.templates = config.templates\n    }\n    else\n    {\n        this.templates = {\n            'article' : 'templates/news/article.html',\n            'nextArticle' : 'templates/news/next-article.html',\n            'featuredArticle' : 'templates/news/featured-article.html'\n        };\n    }\n\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n    this.urlGenerator = new PULSE.CLIENT.RUGBY.UrlGenerator( { type: 'news'} );\n    this.feeds = {};\n\n    this.getNewsData();\n}","prototype":{"getNewsData":{"Documentation":{"description":"Adds news feed to data manager","tags":[{"title":"param","description":"Boolean to determine whether to start feed immediately","type":{"type":"NameExpression","name":"Boolean"},"name":"start"}]},"Source":"PULSE.CLIENT.RUGBY.News.prototype.getNewsData = function( start )\n{\n    this.feeds.newsUrl = this.urlGenerator.makeContentUrl( 'System', 'text', this.newslanguage, this.newsid );\n    this.feeds.feedNews = 'news-' + this.newslangauge + '/'+ this.newsid;\n    this.feeds.newsInterval = 360;\n    this.feeds.newsCallback = 'onNews';\n\n    this.dm.addFeed( this.feeds.feedNews, this.feeds.newsUrl,\n        this.feeds.newsInterval, this.feeds.newsCallback, [ this ] );\n\n    if( start )\n    {\n        this.dm.start( this.feeds.newsUrl );\n    }\n}"},"onData":{"Documentation":{"description":"Store allplayers data and notify DOM if data is received","tags":[{"title":"param","description":"JSON data","type":{"type":"NameExpression","name":"Object"},"name":"data"},{"title":"param","description":"Id string for the received data","type":{"type":"NameExpression","name":"String"},"name":"id"}]},"Source":"PULSE.CLIENT.RUGBY.News.prototype.onData = function( data )\n{\n    var prop;\n\n    if( data )\n    {\n        for( prop in data )\n        {\n            this[ prop ] = data[ prop ];\n        }\n\n        PULSE.CLIENT.notify( 'news/update', {\n            id: that.span,\n            success: true\n        } );\n    }\n\n    this.getTimeAgo();\n\n}"},"getSincePost":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.News.prototype.getSincePost = function()\n{\n    var date = this.date,\n    splitDate = [],\n    monthnum,\n    dateString = '',\n    dateObject,\n    thisDate,\n    currentTime;\n\n    splitDate = date.split(' ');\n\n    switch(splitDate[1])\n    {\n        case ('Jan'):\n            monthnum = '01';\n            break;\n        case ('Feb'):\n            monthnum = '02';\n            break;\n        case ('Mar'):\n            monthnum = '03';\n            break;\n        case ('Apr'):\n            monthnum = '04';\n            break;\n        case ('May'):\n            monthnum = '05';\n            break;\n        case ('Jun'):\n            monthnum = '06';\n            break;\n        case ('Jul'):\n            monthnum = '07';\n            break;\n        case ('Aug'):\n            monthnum = '08';\n            break;\n        case ('Sep'):\n            monthnum = '09';\n            break;\n        case ('Oct'):\n            monthnum = '10';\n            break;\n        case ('Nov'):\n            monthnum = '11';\n            break;\n        case ('Dec'):\n            monthnum = '12';\n            break;\n        default:\n            monthnum = undefined;\n    }\n\n    dateString = splitDate[5] + '-' + monthnum + '-' + splitDate[2] + ' ' + splitDate[3];// + splitDate[4];\n    dateObject = PULSE.CLIENT.DateUtil.parseDateTime( dateString );\n\n    thisDate = new Date(Date.now());\n    return thisDate.getTime() - dateObject.getTime();\n\n}"},"getTimeAgo":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.News.prototype.getTimeAgo = function()\n{\n\n    var difference = this.getSincePost(),\n        diffSecs,\n        diffMins,\n        diffHours,\n        diffDays,\n        timeAgo = '';\n\n    diffSecs =  Math.floor(difference / (1000));\n    diffMins = Math.floor(difference / (1000 * 60));\n    diffHours = Math.floor(difference / (1000 * 3600));\n    diffDays = Math.floor(difference / (1000 * 3600 * 24));\n\n    if (diffSecs < 60)\n    {\n        if (diffSecs < 1)\n        {\n            timeAgo = diffSecs + ' secs ago';\n        }\n        else\n        {\n            timeAgo = diffSecs + ' sec ago';\n        }\n    }\n    else if (diffMins < 60)\n    {\n        if (diffMins > 1)\n        {\n            timeAgo = diffMins + ' mins ago';\n        }\n        else\n        {\n            timeAgo = diffMins  + ' min ago';\n        }\n    }\n    else if (diffHours < 24)\n    {\n        if (diffHours > 1)\n        {\n            timeAgo = diffHours + ' hours ago';\n        }\n        else\n        {\n            timeAgo = diffHours + ' hour ago';\n        }\n    }\n    else\n    {\n        if (diffDays > 1)\n        {\n            timeAgo = diffDays + ' days ago';\n        }\n        else\n        {\n            timeAgo = diffDays + ' day ago';\n        }\n    }\n\n    this[ 'timeAgo' ] = timeAgo;\n\n}"},"displayArticle":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"container"},{"title":"param","description":null,"type":null,"name":"append"}]},"Source":"PULSE.CLIENT.RUGBY.News.prototype.displayArticle = function( container, append )\n{\n\n    this.getTimeAgo();\n\n    if (!append)\n    {\n        PULSE.CLIENT.Template.publish(\n            this.templates.article,\n            container,\n            {news : this}\n            );\n    }\n    else\n    {\n        PULSE.CLIENT.Template.append(\n            this.templates.article,\n            container,\n            {news : this}\n            );\n    }\n}"},"displayNextArticle":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"container"},{"title":"param","description":null,"type":null,"name":"append"}]},"Source":"PULSE.CLIENT.RUGBY.News.prototype.displayNextArticle = function( container, append )\n{\n\n    this.getTimeAgo();\n\n    if (!append)\n    {\n        PULSE.CLIENT.Template.publish(\n            this.templates.nextArticle,\n            container,\n            {news : this}\n            );\n    }\n    else\n    {\n        PULSE.CLIENT.Template.append(\n            this.templates.nextArticle,\n            container,\n            {news : this}\n            );\n    }\n}"},"displayFeaturedArticle":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"container"},{"title":"param","description":null,"type":null,"name":"append"}]},"Source":"PULSE.CLIENT.RUGBY.News.prototype.displayFeaturedArticle = function( container, append )\n{\n\n    this.getTimeAgo();\n\n    if (!append)\n    {\n        PULSE.CLIENT.Template.publish(\n            this.templates.featuredArticle,\n            container,\n            {news : this}\n            );\n    }\n    else\n    {\n        PULSE.CLIENT.Template.append(\n            this.templates.featuredArticle,\n            container,\n            {news : this}\n            );\n    }\n}"}}},"MatchEvents":{"Documentation":{"description":"Insights controller - decides what cards to show when.","tags":[{"title":"constructor","description":null,"type":null,"name":null},{"title":"param","description":"instance of PULSE.CLIENT.RUGBY.Match","type":{"type":"NameExpression","name":"Object"},"name":"match"}]},"Source":"PULSE.CLIENT.RUGBY.MatchEvents = function( match )\n{\n    this.match = match;\n    this.eventTypes = [ 'Try', 'Pen', 'YC', 'RC' ];\n    this.events = {};\n\n    this.setSubscriptions();\n    if( !this.match.timelineLoaded )\n    {\n        this.match.prepareTimelineData( { start: true, interval: 30 } );\n    }\n    else\n    {\n        this.init();\n    }\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchEvents.prototype.setSubscriptions = function()\n{\n    var that = this;\n    PULSE.CLIENT.subscribe( PULSE.CLIENT.RUGBY.DATA_EVENTS.TIMELINE_UPDATE, function( e, params )\n    {\n        if( params.matchId === that.match.matchId )\n        {\n            if( !that.initialised )\n            {\n                that.init();\n            }\n            else\n            {\n                that.checkEvents();\n            }\n        }\n    } );\n}"},"init":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchEvents.prototype.init = function()\n{\n    var events = this.match.filterEventsbyGroup( this.eventTypes );\n    for( var i = 0, iLimit = events.length; i < iLimit; i++ )\n    {\n        var matchEvent = events[ i ];\n        this.events[ this.getEventIdentifier( matchEvent ) ] = matchEvent;\n    }\n\n    this.initialised = true;\n}"},"getEventIdentifier":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"eventData"}]},"Source":"PULSE.CLIENT.RUGBY.MatchEvents.prototype.getEventIdentifier = function( eventData )\n{\n    return ( eventData.playerId ? eventData.playerId.toString() : '' ) + '-' +\n        eventData.time.secs.toString() + '-' +\n        eventData.type;\n}"},"checkEvents":{"Documentation":{"description":"Checks the timeline events, latest first; adds any new events to the mapping; notifies if new\nIMPORTANT! This is assuming the bottom of the array has the latest events","tags":[]},"Source":"PULSE.CLIENT.RUGBY.MatchEvents.prototype.checkEvents = function()\n{\n    var newEvents = [];\n    for( var i = this.match.timeline.length - 1; i >= 0; i-- )\n    {\n        var timelineEvent = this.match.timeline[ i ];\n        if( _.indexOf( this.eventTypes, timelineEvent.group ) > -1 )\n        {\n            var eventId = this.getEventIdentifier( timelineEvent );\n            if( !this.events[ eventId ] )\n            {\n                newEvents.push( timelineEvent );\n                this.events[ eventId ] = timelineEvent;\n            }\n        }\n    }\n\n    if( newEvents.length )\n    {\n        PULSE.CLIENT.notify( PULSE.CLIENT.RUGBY.DATA_EVENTS.MATCHEVENT_UPDATE, {\n            events: newEvents\n        } );\n    }\n}"}}}},"UI":{"DropdownMenu":{"Documentation":{"description":"Class for a dropdown menu","tags":[{"title":"param","description":"Object with the following parameters:\n dropdownId : The id for the dropdown menu\n itemsContainer : The container which holds the dropdown menu items.\n itemContainer : Defines a class/element within the itemsContainer which holds each item in the\n     dropdown menu (e.g. 'li' or 'div' or a class).\n currentContainer : The container for the current chosen option of the dropdown menu - clicking\n     it starts the dropdown.\n dropdownContainer : The container which holds the entire dropdown - used for closing the dropdown\n     menu when the mouse is clicked outside the area.\n currentId : OPTIONAL - Defines the initial selected dropdown item\n removeSelected : OPTIONAL - Boolean to determine whether the selected item should be hidden from\n     the dropdown list.\n addClass : OPTIONAL - Defines the class that list elements take if they are selected\n changeCurrent : OPTIONAL - Boolean to determine whether to change the current container text with\n     the selected one.\n addCurrent : OPTIONAL - An additional string to append to the current container when a new item is\n     selected\n notUsable : OPTIONAL - Defines whether the dropdown menu should not be usable\n notClose : OPTIONAL - Boolean if the dropdown should not close on an item click\n closeSpan : OPTIONAL - Boolean to determine whether to hide/show a nearby span, when a dropdown is usable/unsuable","type":{"type":"NameExpression","name":"Object"},"name":"options"}]},"Source":"PULSE.CLIENT.UI.DropdownMenu = function( container, options )\n{\n    if( !options )\n    {\n        return;\n    }\n\n    this.options = options;\n    this.$container = $( container );\n    this.dropdownId = options.dropdownId;\n    this.itemContainer = options.itemContainer;\n    this.$itemsContainer = this.$container.find( options.itemsContainer ) ;\n    this.$itemList = this.$itemsContainer.find( this.itemContainer ); //li or div\n    this.$currentContainer = this.$container.find( options.currentContainer );\n    this.$dropdownContainer = this.$container.find( options.dropdownContainer );\n    this.currentId = options.currentId;\n    this.removeSelected = options.removeSelected;\n    this.addClass = options.addClass;\n    this.changeCurrent = options.changeCurrent;\n    this.previousCurrent = this.$currentContainer.text();\n    this.notUsable = options.notUsable;\n    this.notClose = options.notClose;\n    this.addCurrent = options.addCurrent;\n    this.closeSpan = options.closeSpan;\n\n    if( this.currentId === undefined )\n    {\n        this.currentId = -1;\n    }\n\n    if ( options.notUsable )\n    {\n        this.setNotUsable();\n    }\n\n    this.setListeners();\n    this.$itemsContainer.hide();\n\n    if( this.currentId > -1 )\n    {\n        if( this.$itemList.length > this.currentId )\n        {\n            this.$itemList[ this.currentId ].click();\n        }\n    }\n}","prototype":{"setListeners":{"Documentation":{"description":"Defines the listeners for the dropdown menu","tags":[]},"Source":"PULSE.CLIENT.UI.DropdownMenu.prototype.setListeners = function( )\n{\n    var that = this;\n\n    // Displays the dropdown menu when the current choice is clicked.\n    // Closes it if the dropdown menu is already open\n    this.$currentContainer.on( 'click', function( e ) {\n        if( e ) { e.preventDefault() }\n\n        if (! that.notUsable )\n        {\n            if( that.$itemsContainer.css('display') == 'none' )\n            {\n                that.$itemsContainer.show();\n            }\n            else\n            {\n                that.$itemsContainer.hide();\n            }\n        }\n    });\n\n    // For each item in the list, selects the index and closes the dropdown when one it is selected.\n    // Optionally, can also remove the item from the dropdown list if it is selected,\n    // add a class to the selected item or change the currently selected items.\n    // The list will send an event trigger once an item has been selected, along with data with:\n    //  - index : Index of the selected item in the item list\n    //  - text : Text within the selected item in the dropdown list\n    //  - id : The id of the dropdown menu\n    this.$itemList.each( function( index )\n    {\n        var item = this;\n\n        $( this ).click( function( e )\n        {\n            e.preventDefault()\n            if( that.removeSelected || that.addClass )\n            {\n                for( var i =0; i < that.$itemList.length; i++ )\n                {\n                    if( i == index )\n                    {\n                        if( that.removeSelected )\n                        {\n                            $( that.$itemList[ i ] ).hide();\n                        }\n\n                        if( that.addClass )\n                        {\n                            $( that.$itemList[ i ] ).addClass( that.addClass );\n                        }\n                    }\n                    else\n                    {\n                        if( that.removeSelected )\n                        {\n                            $( that.$itemList[ i ] ).show();\n                        }\n\n                        if( that.addClass )\n                        {\n                            $( that.$itemList[ i ] ).removeClass( that.addClass );\n                        }\n                    }\n                }\n            }\n\n            var contain = that.$currentContainer.find( that.$itemList );\n\n            if( contain.length < 1 )\n            {\n                if ( ! that.notClose )\n                {\n                    that.$itemsContainer.hide();\n                }\n            }\n\n            that.currentId = index;\n            var selectedText = $( that.$itemList[ index ] ).text();\n\n            that.previousCurrent = that.$currentContainer.text();\n\n            if( that.changeCurrent )\n            {\n                if ( that.addCurrent )\n                {\n                    that.$currentContainer.html( selectedText + that.addCurrent );\n                }\n                else\n                {\n                    that.$currentContainer.text( selectedText );\n                }\n            }\n\n            that.$dropdownContainer.trigger( 'itemSelected', { index : index, text : selectedText, id : that.dropdownId } );\n        } );\n    } );\n\n    // Hides the dropdown menu when a click is recognised outside the dropdown container.\n    // The menu is not hidden if the current item container is clicked.\n    $( document ).mousedown( function ( e )\n    {\n        var container = that.$dropdownContainer;\n\n        that.count = 0;\n\n        if( !container.is( e.target ) &&\n            container.has( e.target ).length === 0 && !that.$currentContainer.is( e.target ) )\n        {\n            if ( ! that.notClose )\n            {\n                that.$itemsContainer.hide();\n            }\n        }\n    });\n}"},"getSelected":{"Documentation":{"description":"Returns the item container of the currently selected menu item","tags":[{"title":"return","description":"Item Container","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.UI.DropdownMenu.prototype.getSelected = function()\n{\n    return this.$itemsContainer[ this.currentId ];\n}"},"refreshItems":{"Documentation":{"description":"Refreshes the click listeners and item list if the dropdown menu has been altered","tags":[]},"Source":"PULSE.CLIENT.UI.DropdownMenu.prototype.refreshItems = function()\n{\n    this.$itemList = this.$itemsContainer.find( this.itemContainer );\n\n    this.$currentContainer.off(\"click\");\n\n    this.$itemList.each( function( index )\n    {\n        $( this ).off(\"click\");\n    });\n\n    for( var i = 0; i < this.$itemList.length; i++ )\n    {\n        if( $( this.$itemList[ i ] ).text() == $( this.$currentContainer ).text() )\n        {\n            $( this.$itemList[ i ] ).addClass( 'selected' );\n        }\n    }\n\n    this.setListeners();\n}"},"setUsable":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.UI.DropdownMenu.prototype.setUsable"}]},"Source":"PULSE.CLIENT.UI.DropdownMenu.prototype.setUsable = function()\n{\n\n    if ( this.closeSpan )\n    {\n        var parent = this.$currentContainer.parent(),\n            span = $( parent ).find( this.closeSpan );\n\n        if ( span )\n        {\n            $( span ).show();\n        }\n    }\n\n    this.notUsable = false;\n}"},"setNotUsable":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.UI.DropdownMenu.prototype.setNotUsable = function()\n{\n    if ( this.closeSpan )\n    {\n        var parent = this.$currentContainer.parent(),\n            span = $( parent ).find( this.closeSpan );\n\n        if ( span )\n        {\n            $( span ).hide();\n        }\n    }\n\n    this.notUsable = true;\n}"},"isUsable":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.UI.DropdownMenu.prototype.isUsable = function()\n{\n    if ( this.notUsable )\n    {\n        return false;\n    }\n    else\n    {\n        return true;\n    }\n}"},"getPrevious":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.UI.DropdownMenu.prototype.getPrevious = function()\n{\n    return this.previousCurrent;\n}"}}},"ListScroller":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.UI.ListScroller"},{"title":"param","description":null,"type":null,"name":"options"}]},"Source":"PULSE.CLIENT.UI.ListScroller = function( options )\n{\n    var that = this;\n    if( !options )\n    {\n        return;\n    }\n\n    this.$itemList      = $( options.listContainer );\n    this.itemListWidth  = parseInt(this.$itemList.css('width').replace('px', '')); \n    \n    this.$wrapper       = $( options.wrapper );\n    this.wrapperWidth  = parseInt(this.$wrapper.css('width').replace('px', ''));\n\n    this.$upScroll      = $( options.upScrollButton );\n    this.$downScroll    = $( options.downScrollButton );\n    this.maxHeight      = options.maxHeight || this.$wrapper.css('max-height');\n    this.maxWidth       = options.maxWidth || this.$wrapper.css('max-width');\n    this.scrollLength   = options.scrollLength || 2;\n    this.scrollSize     = options.scrollSize;\n    this.orientation    = options.orientation || 'vertical';\n    this.alignment      = options.alignment || 'right';\n    this.animating      = false;\n    this.cssTrans       = options.cssTrans || false;\n\n    $('body').on(\"transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd\", this.$itemList, function() { \n        that.animating = false;\n        that.refreshScrolling();\n    });\n\n    if( this.orientation === 'vertical' )\n    {\n        this.$upScroll.click( function( e ) {\n            e.preventDefault();\n            if( that.animating )\n            {\n                return;\n            }\n            that.animating = true;\n            var topOffset = Math.abs( parseInt( that.$itemList.css('top'), 10 ) ),\n                listHeight = that.$itemList.height(),\n                scrollHeight = ( listHeight / that.$itemList.children().length ) * that.scrollLength;\n            var offset = topOffset < scrollHeight ? topOffset : scrollHeight;\n            that.$itemList.animate(\n                { \n                    top: \"+=\" + offset \n                },\n                \"fast\",\n                'easeInSine',\n                function() {\n                    that.animating = false;\n                    that.refreshScrolling();\n                }\n            );\n        } );\n\n        this.$downScroll.click( function( e ) {\n            e.preventDefault();\n            if( that.animating )\n            {\n                return;\n            }\n            that.animating = true;\n            var topOffset = Math.abs( parseInt( that.$itemList.css('top'), 10 ) ),\n                containerHeight = that.$wrapper.height(),\n                listHeight = that.$itemList.height(),\n                remainder = listHeight - containerHeight - topOffset,\n                scrollHeight = ( listHeight / that.$itemList.children().length ) * that.scrollLength;\n            var offset = remainder < scrollHeight ? remainder : scrollHeight;\n            that.$itemList.animate(\n                { \n                    top: \"-=\" + offset\n                },\n                \"fast\",\n                'easeOutSine',\n                function() {\n                    that.animating = false;\n                    that.refreshScrolling();\n                }\n            );\n        } );\n    }\n    else\n    {\n\n\n        this.$upScroll.click( function( e ) {\n            e.preventDefault();\n\n            if( that.animating )\n            {\n                return;\n            }\n\n            that.animating = true;\n            var topOffset = Math.abs( parseInt( that.$itemList.css(that.alignment), 10 ) ),\n                listHeight = that.$itemList.innerWidth(),\n                scrollLength = ( listHeight / that.$itemList.children().length ) * that.scrollLength;\n            var offset = topOffset < scrollLength ? topOffset : scrollLength;\n            var offset = that.scrollSize ? that.scrollSize : offset;\n\n            if( that.alignment === 'right' )\n            {\n\n                if ($('html').hasClass('csstransitions') && that.cssTrans) {\n\n                    that.$itemList.css('right', '+=' + offset);\n\n                } else {\n                        that.$itemList.animate(\n                            { \n                                right: \"+=\" + offset \n                            },\n                            \"fast\",\n                            'easeInSine',\n                            function() {\n                                that.animating = false;\n                                that.refreshScrolling();\n                            }\n                        );\n                }\n            }\n            else\n            {\n\n                if ($('html').hasClass('csstransitions') && that.cssTrans) {\n\n                    var curPos = parseInt(that.$itemList.css('left').replace('px', ''));\n                    var newOffSet = parseInt(curPos + offset);\n                    if (newOffSet > 0) {\n\n                        that.$itemList.css('left', '0px');\n                    }\n                    else {\n\n                        that.$itemList.css('left', '+=' + offset);\n                    }\n\n                } else {\n                    that.$itemList.animate(\n                        { \n                            left: \"+=\" + offset \n                        },\n                        \"fast\",\n                        'easeInSine',\n                        function() {\n                            that.animating = false;\n                            that.refreshScrolling();\n                        }\n                    );\n                }\n            }\n\n            \n        } );\n\n        this.$downScroll.click( function( e ) {\n            \n            e.preventDefault();\n\n            if( that.animating )\n            {\n                return;\n            }\n            that.animating = true;\n\n            var topOffset = Math.abs( parseInt( that.$itemList.css( that.alignment ), 10 ) ),\n                containerHeight = that.maxWidth || that.$wrapper.width(),\n                listHeight = that.$itemList.innerWidth(),\n                remainder = listHeight - containerHeight - topOffset,\n                scrollLength = ( listHeight / that.$itemList.children().length ) * that.scrollLength;\n            var offset = remainder < scrollLength ? remainder : scrollLength;\n            var offset = that.scrollSize ? that.scrollSize : offset;\n\n            if( that.alignment === 'right' )\n            {\n\n                if ($('html').hasClass('csstransitions') && that.cssTrans) {\n\n                    that.$itemList.css('right', '+=' + offset);\n\n                } else {\n                    that.$itemList.animate(\n                        { \n                            right: \"-=\" + offset\n                        },\n                        \"fast\",\n                        'easeOutSine',\n                        function() {\n                            that.animating = false;\n                            that.refreshScrolling();\n                        }\n                    );\n                }\n            }\n            else\n            {\n\n                if ($('html').hasClass('csstransitions') && that.cssTrans) {\n\n                    var maxScroll = -Math.abs(that.itemListWidth - that.wrapperWidth);\n                    var curPos = parseInt(that.$itemList.css('left').replace('px', ''))\n                    var newOffSet = parseInt(curPos - offset);\n\n                    if (newOffSet <= maxScroll ) {\n\n                        offset = curPos - maxScroll\n                        that.animating = false;\n                    }\n    \n                    that.$itemList.css('left', '-=' + offset);\n\n                } else {\n\n                    that.$itemList.animate(\n                        { \n                            left: \"-=\" + offset\n                        },\n                        \"fast\",\n                        'easeOutSine',\n                        function() {\n                            that.animating = false;\n                            that.refreshScrolling();\n                        }\n                    );\n                }\n            }\n        } );\n    }\n\n    var that = this;\n    \n}","prototype":{"refreshScrolling":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.UI.ListScroller.prototype.refreshScrolling = function()\n{\n    if( this.orientation === \"vertical\" )\n    {\n        var maxHeight = parseInt( this.maxHeight, 10 ),\n            containerHeight = this.$wrapper.height(),\n            listHeight = this.$itemList.height();\n\n        if( containerHeight < maxHeight )\n        {\n            this.$upScroll.hide();\n            this.$downScroll.hide();\n        }\n        else\n        {\n            var topOffset = parseInt( this.$itemList.css('top'), 10 );\n            if( topOffset + 30 < 0 )\n            {\n                this.$upScroll.fadeIn();\n            }\n            else\n            {\n                this.$upScroll.hide();\n            }\n\n            if( -topOffset + containerHeight + 30 < listHeight )\n            {\n                this.$downScroll.fadeIn();\n            }\n            else\n            {\n                this.$downScroll.hide();\n            }\n        }\n    }\n    else\n    {\n        var maxWidth = parseInt( this.maxWidth, 10 ),\n            containerWidth = this.$wrapper.width(),\n            listWidth = 0;\n\n        this.$itemList.children().each( function() {\n            listWidth += $(this).outerWidth( true );\n        } );\n\n        if( listWidth === 0 )\n        {\n            listWidth = this.$itemList.width();\n        }\n\n        if( containerWidth < maxWidth )\n        {\n            this.$upScroll.hide();\n            this.$downScroll.hide();\n        }\n        else\n        {\n\n            if( this.alignment === \"right\" )\n            {\n\n                var offset = parseInt( this.$itemList.css('right'), 10 );\n            }\n            else\n            {\n                var offset = parseInt( this.$itemList.css('left'), 10 );\n            }\n\n            \n            \n            if( offset + 30 < 0 )\n            {\n                this.$upScroll.fadeIn();\n            }\n            else\n            {\n                this.$upScroll.hide();\n            }\n\n            // console.log( \"-offset + containerWidth + 30 < listWidth\" );\n            // console.log( \"-offset + containerWidth + 30 = \" + ( -offset + containerWidth + 30 ) );\n            // console.log( \"listWidth = \" + listWidth );\n\n            if( -offset + containerWidth + 30 < listWidth )\n            {\n                this.$downScroll.fadeIn();\n            }\n            else\n            {\n                this.$downScroll.hide();\n            }\n        }\n    }\n}"}}},"Pagination":{"Documentation":{"description":"Logic for the pagination of content\nOptions:\n    container : container for the widget\n    forwardContainer : The forward button to get the next page of content.\n    backwardContainer : The backwards button to get the previous page of content.\n    currentNumberContainer : Container which contains the current page number\n    maxNumberContainer : Container which contains the maximum number of pages\n    template : The template for the retrived data\n    displayMoreContainer : The container to display the new content\n\n    numEntries : The number of entries found for the data\n    pageSize : The number of entries per page\n    maxEntries : The maximum number of entries to display","tags":[]},"Source":"PULSE.CLIENT.UI.Pagination = function( options )\n{\n\n\n    if( !options )\n    {\n        return;\n    }\n\n    var tags;\n\n    this.$container = $( options.container );\n    this.$forwardContainer = this.$container.find( options.forwardContainer );\n    this.$backwardContainer = this.$container.find( options.backwardContainer );\n    this.$currentNumberContainer = this.$container.find( options.currentNumberContainer );\n    this.$maxNumberContainer = this.$container.find( options.maxNumberContainer );\n    this.$displayMoreContainer = this.$container.find( options.displayMoreContainer );\n    this.template = options.template;\n    this.options = options;\n\n    this.numEntries = parseInt( this.$container.data( 'num-entries' ) );\n    if ( options.numEntries )\n    {\n        this.numEntries = options.numEntries;\n    }\n    this.pageSize = parseInt( this.$container.data( 'page-size' ) );\n    if ( options.pageSize )\n    {\n        this.pageSize = options.pageSize;\n    }\n    this.maxEntries = parseInt( this.$container.data( 'max' ) );\n    if ( options.maxEntries )\n    {\n        this.maxEntries = options.maxEntries;\n    }\n    if(options.urlPaginated)\n    {\n        this.urlPaginationExpr = options.urlPaginated;\n    }\n    this.contentType = this.$container.data( 'content-type' );\n    //this.total = this.pageSize;\n    //this.pastAdd = this.total;\n\n    this.pageData = {}; //Caches the pages\n\n    this.paginationId = options.paginationId;\n\n    // if( this.numEntries > this.maxEntries )\n    // {\n    //     this.numEntries = this.maxEntries;\n    // }\n\n    this.maxPages = Math.ceil( this.numEntries / this.pageSize );\n\n    if ( this.maxPages < 1 )\n    {\n        this.maxPages = 1;\n    }\n\n    this.$maxNumberContainer.html( this.maxPages );\n\n    this.contentTags = this.$container.data( 'tags' );\n\n    this.references = this.$container.data( \"references\" );\n\n    // if( tags )\n    // {\n    //     this.contentTags = tags.split( ',' );\n    // }\n    // else\n    // {\n    //     this.contentTags = [];\n    // }\n\n    if( this.contentType == 'news' )\n    {\n        this.contentType = 'text';\n        // if ( ( ! this.contentTags ) || ( this.contentTags.length < 1 ) )\n        // {\n        //     this.contentTags = 'News Article';\n        // }\n        // else\n        // {\n        //     this.contentTags = this.contentTags + ',News Article';\n        // }\n    }\n\n    this.urlGen = new PULSE.CLIENT.RUGBY.getUrlGenerator( { 'type' : this.contentType } );\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n\n    this.pageNum = 0;\n    this.$backwardContainer.addClass( 'inactive' );\n\n    if( this.maxPages < 2 )\n    {\n        this.$forwardContainer.addClass( 'inactive' );\n    }\n\n    this.setListeners();\n\n    // var params = PULSE.CLIENT.Util.parseUrlParameters();\n\n    // if ( 'page' in params )\n    // {\n    //     var newPage = params[ 'page' ];\n    //     this.setPage( newPage );\n    // }\n\n}","prototype":{"checkUrl":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.UI.Pagination.prototype.checkUrl"}]},"Source":"PULSE.CLIENT.UI.Pagination.prototype.checkUrl = function()\n{\n    if(this.options.urlPaginated && parseInt(this.getPageFromUrl(this.options.urlPaginated)) > 0)\n    {\n        this.setPage(this.getPageFromUrl(this.options.urlPaginated));\n    }\n    if(this.options.urlPaginated)\n    {\n        var self = this;\n        window.onpopstate = function(event)\n        {\n            self.setPage(self.getPageFromUrl(self.options.urlPaginated));\n            self.$currentNumberContainer.val( parseInt(self.getPageFromUrl(self.options.urlPaginated)) );\n        }\n    }\n\n}"},"getPageFromUrl":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"evaluatingExpr"}]},"Source":"PULSE.CLIENT.UI.Pagination.prototype.getPageFromUrl = function(evaluatingExpr)\n{\n    //return \"/\\/.+\\//\".test(string);\n    if(this.isRegExp(evaluatingExpr))\n    {\n        //url pagination via regular expession\n        return evaluatingExpr.exec(window.location.pathname)[1];\n    }else\n    {\n        //url pagination via parameter\n        var params = PULSE.CLIENT.Util.parseUrlParameters();\n\n        if ( params[evaluatingExpr])\n        {\n             return params[evaluatingExpr];\n        }\n    }\n\n}"},"isRegExp":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"string"}]},"Source":"PULSE.CLIENT.UI.Pagination.prototype.isRegExp = function(string)\n{\n    return /\\/.+\\//.test(string);\n}"},"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.UI.Pagination.prototype.setListeners = function()\n{\n    var that = this;\n\n    this.$backwardContainer.on( 'click', function( e )\n    {\n        e.preventDefault();\n        if( that.pageNum > 0 )\n        {\n            that.pageNum = that.pageNum - 1;\n            //that.$currentNumberContainer.html( that.pageNum + 1 );\n            that.$currentNumberContainer.val( that.pageNum + 1 );\n\n            that.total = that.total - that.pastAdd - that.pageSize;\n\n            if( !( that.pageNum in that.pageData ) )\n            {\n                that.loading();\n                // Notify widget to get more content\n                PULSE.CLIENT.notify( 'content/get', {\n                    id: that.paginationId,\n                    success: true\n                 } );\n            }\n            else\n            {\n                that.publishData();\n            }\n\n            if( that.pageNum == 0 )\n            {\n                that.$backwardContainer.addClass( 'inactive' );\n            }\n\n            that.$forwardContainer.removeClass( 'inactive' );\n\n            if(that.options.urlPaginated)\n            {\n                that.updateUrlParam(that.pageNum, that.pageNum+1);\n            }\n        }\n\n    });\n\n    this.$forwardContainer.on( 'click', function( e )\n    {\n        e.preventDefault();\n        if( that.pageNum < that.maxPages - 1 )\n        {\n            that.pageNum = that.pageNum + 1;\n            //that.$currentNumberContainer.html( that.pageNum + 1 );\n            that.$currentNumberContainer.val( that.pageNum + 1 );\n\n            if( !( that.pageNum in that.pageData ) )\n            {\n                that.loading();\n                // Notify widget to get more content\n                PULSE.CLIENT.notify( 'content/get', {\n                    id: that.paginationId,\n                    success: true\n                 } );\n            }\n            else\n            {\n                that.publishData();\n            }\n\n            if( that.pageNum == that.maxPages - 1 )\n            {\n                that.$forwardContainer.addClass( 'inactive' );\n            }\n\n            that.$backwardContainer.removeClass( 'inactive' );\n            if(that.options.urlPaginated)\n            {\n                that.updateUrlParam(that.pageNum, that.pageNum - 1);\n            }\n        }\n\n    });\n\n    this.$currentNumberContainer.on( 'change', function( e )\n    {\n        e.preventDefault();\n\n        var currentValue = that.$currentNumberContainer.val();\n        if(that.options.urlPaginated)\n        {\n            console.log(\"next \", parseInt( that.$currentNumberContainer.val() ) -1 , \" previous \", that.pageNum );\n            that.updateUrlParam( parseInt( that.$currentNumberContainer.val() ) -1 , that.pageNum );\n        }\n        that.setPage( currentValue );\n\n\n    });\n\n\n\n}"},"updateUrlParam":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"next"},{"title":"param","description":null,"type":null,"name":"previous"}]},"Source":"PULSE.CLIENT.UI.Pagination.prototype.updateUrlParam = function(next, previous)\n{\n\n\n    next > this.maxPages ? next = this.maxPages : next++;\n    previous < 0 ? previous = 0 : previous++;\n    console.log(this.options);\n    console.log(next, previous);\n    console.log(this.maxPages);\n    if(window.location.href.indexOf(this.options.urlPaginated + \"=\") !== -1 )\n    {\n        var oldstring = this.options.urlPaginated + \"=\" + previous;\n        var newstring = this.options.urlPaginated + \"=\" + next;\n        var newurl = window.location.href.replace(oldstring, newstring);\n        console.log(oldstring, newstring, newurl);\n        window.history.pushState({}, \"Rugby World Cup 2015\", newurl);\n    }else{\n        if(window.location.href.indexOf(\"&\") !== -1)\n        {\n            //append at end of multiple params\n            var newurl = window.location.href + \"&\" + this.options.urlPaginated + \"=\" + next;\n            window.history.pushState({}, \"Rugby World Cup 2015\", newurl);\n        }else{\n            var newurl = window.location.href + \"?\" + this.options.urlPaginated + \"=\" + next;\n            window.history.pushState({}, \"Rugby World Cup 2015\", newurl);\n\n        }\n\n    }\n\n}"},"setPage":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"currentValue"}]},"Source":"PULSE.CLIENT.UI.Pagination.prototype.setPage = function( currentValue )\n{\n    var isInteger = /^\\+?(0|[1-9]\\d*)$/.test(currentValue);\n        if ( isInteger )\n        {\n            var val = parseInt( currentValue );\n            if ( val < 1 )\n            {\n                val = 1;\n                this.$currentNumberContainer.val( val )\n            }\n            if ( val > this.maxPages )\n            {\n                val = this.maxPages;\n                this.$currentNumberContainer.val( val )\n            }\n\n            this.pageNum = val - 1;\n\n            if( !( this.pageNum in this.pageData ) )\n            {\n                this.loading();\n                // Notify widget to get more content\n                PULSE.CLIENT.notify( 'content/get', {\n                    id: this.paginationId,\n                    success: true\n                 } );\n            }\n            else\n            {\n                this.publishData();\n            }\n\n            if( this.pageNum == this.maxPages - 1 )\n            {\n                this.$forwardContainer.addClass( 'inactive' );\n            }\n            else\n            {\n                this.$forwardContainer.removeClass( 'inactive' );\n            }\n\n            if ( this.pageNum < 1 )\n            {\n                this.$backwardContainer.addClass( 'inactive' );\n            }\n            else\n            {\n                this.$backwardContainer.removeClass( 'inactive' );\n            }\n        }\n        else\n        {\n            this.$currentNumberContainer.val( this.pageNum + 1 )\n        }\n}"},"setData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.UI.Pagination.prototype.setData = function( data )\n{\n    this.pageData[ this.pageNum ] = data;\n    this.setPageInfo( data );\n    this.publishData();\n}"},"setPageInfo":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.UI.Pagination.prototype.setPageInfo = function( data )\n{\n    if ( data && data.pageInfo )\n    {\n        var pageInfo = data.pageInfo;\n\n        if ( pageInfo.numEntries )\n        {\n            this.numEntries = pageInfo.numEntries;\n        }\n\n        if ( pageInfo.pageSize )\n        {\n            this.pageSize = pageInfo.pageSize;\n        }\n\n        if ( pageInfo.numPages )\n        {\n            this.maxPages = pageInfo.numPages;\n        }\n\n        // This is base 0\n        if ( pageInfo.page != undefined )\n        {\n            this.pageNum = pageInfo.page;\n        }\n        this.refreshPagination();\n    }\n}"},"refreshPagination":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.UI.Pagination.prototype.refreshPagination = function()\n{\n    this.maxPages = Math.ceil( this.numEntries / this.pageSize );\n    this.$maxNumberContainer.html( this.maxPages );\n    this.$currentNumberContainer.val( this.pageNum + 1 );\n\n    this.$backwardContainer.addClass( 'inactive' );\n\n   if( this.pageNum == this.maxPages - 1 )\n    {\n        this.$forwardContainer.addClass( 'inactive' );\n    }\n    else\n    {\n        this.$forwardContainer.removeClass( 'inactive' );\n    }\n\n    if ( this.pageNum < 1 )\n    {\n        this.$backwardContainer.addClass( 'inactive' );\n    }\n    else\n    {\n        this.$backwardContainer.removeClass( 'inactive' );\n    }\n}"},"publishData":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.UI.Pagination.prototype.publishData = function()\n{\n\n    var data = this.pageData[ this.pageNum ];\n\n    //this.pastAdd = 0;\n    this.$displayMoreContainer.html( '' );\n\n    // this.numEntries = data.pageInfo.numEntries;\n\n    // if( this.numEntries > this.maxEntries )\n    // {\n    //     this.numEntries = this.maxEntries;\n    // }\n\n    // this.maxPages = Math.ceil( this.numEntries / this.pageSize );\n    // this.$maxNumberContainer.html( this.maxPages );\n\n    // if( this.pageNum == this.maxPages - 1 )\n    // {\n    //     this.$forwardContainer.addClass( 'inactive' );\n    // }\n\n    for( var i  = 0; i < data.content.length; i++ )\n    {\n        // if( this.total < this.maxEntries )\n        // {\n        //     this.total = this.total + 1;\n        //     this.pastAdd = this.pastAdd + 1;\n\n            PULSE.CLIENT.Template.append(\n                    this.template,\n                    this.$displayMoreContainer,\n                    {\n                        content : data.content[ i ],\n                        pageSize : this.pageSize\n                    }\n            );\n        //}\n    }\n\n    var offset = this.$displayMoreContainer.offset();\n    if ( offset )\n    {\n        var top = offset.top;\n        top = top - 60;\n        if ( top < 0 )\n        {\n            top = 0;\n        }\n        $( \"body\" ).scrollTop( top );\n    }\n\n    PULSE.CLIENT.notify( 'content/update', {\n        id: that.paginationId,\n        success: true\n    } );\n}"},"getPageSize":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.UI.Pagination.prototype.getPageSize = function()\n{\n    return this.pageSize;\n}"},"getPageNum":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.UI.Pagination.prototype.getPageNum = function()\n{\n    return this.pageNum;\n}"},"getNumEntries":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.UI.Pagination.prototype.getNumEntries = function()\n{\n    return this.maxPages;\n}"},"resetPaginationUi":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.UI.Pagination.prototype.resetPaginationUi = function()\n{\n    this.maxPages = Math.ceil( this.numEntries / this.pageSize );\n    this.$maxNumberContainer.html( this.maxPages );\n    this.$currentNumberContainer.val( 1 );\n\n    this.$backwardContainer.addClass( 'inactive' );\n\n    if( this.maxPages < 2 )\n    {\n        this.$forwardContainer.addClass( 'inactive' );\n    }\n    else\n    {\n        this.$forwardContainer.removeClass( 'inactive' );\n    }\n\n    if ( this.maxPages < 1 )\n    {\n        this.$maxNumberContainer.html( '1' );\n    }\n\n}"},"setNumEntries":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"entries"}]},"Source":"PULSE.CLIENT.UI.Pagination.prototype.setNumEntries = function( entries )\n{\n    this.numEntries = entries;\n\n    //this.$currentNumberContainer.html( this.pageNum + 1 );\n    this.$currentNumberContainer.val( this.pageNum + 1 );\n\n    this.maxPages = Math.ceil( this.numEntries / this.pageSize );\n\n    this.$maxNumberContainer.html( this.maxPages );\n\n    this.$backwardContainer.removeClass( 'inactive' );\n\n    if( this.maxPages < 2 )\n    {\n        this.$forwardContainer.addClass( 'inactive' );\n    }\n    else\n    {\n        this.$forwardContainer.removeClass( 'inactive' );\n    }\n\n    //this.$backwardContainer.addClass( 'inactive' );\n    if ( this.pageNum > this.maxPages - 1 )\n    {\n        this.pageNum = this.maxPages - 1;\n        this.$forwardContainer.addClass( 'inactive' );\n        //this.$currentNumberContainer.html( this.pageNum + 1 );\n        this.$currentNumberContainer.val( this.pageNum + 1 );\n    }\n    else if ( this.pageNum == this.maxPages - 1 )\n    {\n        this.$forwardContainer.addClass( 'inactive' );\n    }\n\n    if ( this.pageNum < 1 )\n    {\n        this.$backwardContainer.addClass( 'inactive' );\n    }\n\n    if ( entries < 1 )\n    {\n        this.$maxNumberContainer.html( '1' );\n        //this.$currentNumberContainer.html( '1' );\n        this.$currentNumberContainer.val( 1 );\n        this.$forwardContainer.addClass( 'inactive' );\n        this.$backwardContainer.addClass( 'inactive' );\n    }\n}"},"loading":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.UI.Pagination.prototype.loading = function()\n{\n    this.$displayMoreContainer.html( '<div class=\"spinner\"><div style=\"height : 25px; width : 25px\"></div></div>' );\n}"}}},"PlaylistSlider":{"Documentation":{"description":"Logic for the PlaylistSlider of content\nOptions:\n    container : container for the widget\n    forwardContainer : The forward button to get the next page of content.\n    backwardContainer : The backwards button to get the previous page of content.\n    template : The template for the retrived data\n    displayMoreContainer : The container to display the new content","tags":[]},"Source":"PULSE.CLIENT.UI.PlaylistSlider = function( options )\n{\n    if( !options )\n    {\n        return;\n    }\n    var playListStrings;\n\n    this.$container = $( options.container );\n    this.$forwardContainer = this.$container.find( options.forwardContainer );\n    this.$backwardContainer = this.$container.find( options.backwardContainer );\n    this.$displayMoreContainer = this.$container.find( options.displayMoreContainer );\n    this.template = options.template;\n\n    this.numEntries = parseInt( this.$container.data( 'num-entries' ) );\n    this.pageLimit = parseInt( this.$container.data( 'show-more' ) );\n\n    var playlistItems = this.$container.data( 'playlist-items' );\n    if ( playlistItems )\n    {\n        playListStrings = this.$container.data( 'playlist-items' ).split( ';' );\n\n        this.playlistItems = [];\n\n        //Put all the content playlist data into an object\n        for ( var i = 0; i < playListStrings.length; i++ )\n        {\n            var commaSplit = playListStrings[ i ].split( '-' );\n            this.playlistItems.push( { 'id' : commaSplit[ 0 ].replace(/,/g , \"\"), 'type' : commaSplit[ 1 ] } );\n        }\n\n        this.itemData = {}; //Caches the content data for the playlist\n\n        // Check to see how many playist items there are and only display the forward arrow\n        // if there are more to find\n        if ( this.numEntries < this.pageLimit )\n        {\n            this.pageLimit = this.numEntries;\n            //this.$forwardContainer.addClass( 'inactive' );\n            this.$forwardContainer.hide();\n        }\n\n        // Set the first and last index of the playlist to show\n        this.firstIndex = 0;\n        this.lastIndex = this.pageLimit;\n        this.getCount = 0;\n\n        this.urlGen = new PULSE.CLIENT.RUGBY.getUrlGenerator( );\n        this.dm = PULSE.CLIENT.getJqueryDataManager();\n\n        //this.$backwardContainer.addClass( 'inactive' );\n        this.$backwardContainer.hide();\n\n        this.setListeners();\n    }\n}","prototype":{"checkData":{"Documentation":{"description":"Checks to see if all the media content has been cached in itemData","tags":[{"title":"return","description":"haveData","type":{"type":"NameExpression","name":"Boolean"}}]},"Source":"PULSE.CLIENT.UI.PlaylistSlider.prototype.checkData = function()\n{\n    // for ( var i = 0; i < this.getItems.length; i++ )\n    // {\n        if ( !( this.getItems[ this.getCount ].id in this.itemData ) )\n        {\n            PULSE.CLIENT.notify( 'playlist/get', {\n                id: this.getItems[ this.getCount ].id,\n                type : this.getItems[ this.getCount ].type,\n                success: true\n             } );\n        }\n        else\n        {\n            this.publishData( this.itemData[ this.getItems[ this.getCount ].id ] );\n        }\n    // }\n}"},"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.UI.PlaylistSlider.prototype.setListeners"}]},"Source":"PULSE.CLIENT.UI.PlaylistSlider.prototype.setListeners = function()\n{\n    var that = this;\n\n    //Handles backwards clicks\n    this.$backwardContainer.on( 'click', function( e )\n    {\n        e.preventDefault();\n        if ( that.firstIndex > 0 )\n        {\n            that.firstIndex = that.firstIndex - 1;\n            that.lastIndex = that.lastIndex - 1;\n\n            that.getPlaylistItems();\n\n            that.$displayMoreContainer.html( '' );\n\n            that.getCount = 0;\n            //If not all data is cached then request data for the missing content\n            //Otherwise publish the data\n            that.checkData();\n\n            if ( that.firstIndex === 0 )\n            {\n                // that.$backwardContainer.addClass( 'inactive' );\n                that.$backwardContainer.hide();\n            }\n\n            //that.$forwardContainer.removeClass( 'inactive' );\n            that.$forwardContainer.show();\n        }\n    });\n\n    // Handles forward clicks\n    this.$forwardContainer.on( 'click', function( e )\n    {\n        e.preventDefault();\n        if ( that.lastIndex < that.numEntries )\n        {\n            that.lastIndex = that.lastIndex + 1;\n            that.firstIndex = that.firstIndex + 1;\n\n            that.getItems = [];\n\n            that.getPlaylistItems();\n\n            //If not all data is cached then request data for the missing content\n            //Otherwise publish the data\n\n            that.$displayMoreContainer.html( '' );\n\n            that.getCount = 0;\n            that.checkData();\n\n            if ( that.lastIndex == that.numEntries )\n            {\n                //that.$forwardContainer.addClass( 'inactive' );\n                that.$forwardContainer.hide();\n            }\n\n            //that.$backwardContainer.removeClass( 'inactive' );\n            that.$backwardContainer.show();\n        }\n    });\n}"},"getPlaylistItems":{"Documentation":{"description":"Finds the content which will be viewed on the slider","tags":[]},"Source":"PULSE.CLIENT.UI.PlaylistSlider.prototype.getPlaylistItems = function()\n{\n    this.getItems = [];\n\n    for ( var i = this.firstIndex; i < this.lastIndex; i++)\n    {\n        this.getItems.push( this.playlistItems[ i ] );\n    }\n}"},"setData":{"Documentation":{"description":"Adds content found to the cache and publishes it if all current\ncontent has been cached","tags":[{"title":"param","description":"Data for one piece of content","type":{"type":"NameExpression","name":"Object"},"name":"data"}]},"Source":"PULSE.CLIENT.UI.PlaylistSlider.prototype.setData = function( data )\n{\n    this.itemData[ data.id ] = data;\n\n    // if ( this.haveData() )\n    // {\n        this.publishData( data );\n    //}\n}"},"publishData":{"Documentation":{"description":"Publishes the cached content data to the slider","tags":[]},"Source":"PULSE.CLIENT.UI.PlaylistSlider.prototype.publishData = function( data )\n{\n    //this.$displayMoreContainer.html( '' );\n\n    if ( ! data.error )\n    {\n    //for ( var i = 0; i < this.getItems.length; i++ )\n    //{\n        PULSE.CLIENT.Template.append(\n            this.template,\n            this.$displayMoreContainer,\n            {\n                content : data\n            }\n        );\n    //}\n\n        PULSE.CLIENT.notify( 'content/update',\n            {\n                id: that.span,\n                success: true\n            }\n        );\n    }\n\n    this.getCount = this.getCount + 1;\n    if ( this.getCount < this.getItems.length )\n    {\n        this.checkData();\n    }\n\n}"}}},"Scroller":{"Documentation":{"description":"Pulse scroller","tags":[{"title":"author","description":"tmarson"}]},"Source":"PULSE.CLIENT.UI.Scroller = (function( $ )\n{\n    /**\n     * Generic scroll functionality\n     *\n     * @param {HTMLElement} container - element to be scrolled\n     * @param {object} options\n     * @param {integer} [options.animSpeed = 250] - Time taken (ms) for scroller to change position\n     * @param {integer} [options.scrollChange = 0.75] - Percentage change of scroller position\n     * @param {string} [options.hideClass = 'hide'] - Class added to indicate control container superflousness\n     * @param {string} [options.toggleClass = 'inactive'] - Class added to indicate controls threshold\n     * @constructor\n     */\n    var Scroller = function( container, options )\n    {\n        var self = this;\n\n        self.config = $.extend( {\n            animSpeed: 250,\n            scrollChange: 0.75,\n            hideClass: 'hide',\n            toggleClass: 'inactive'\n        }, options );\n\n        self.$container = $( container );\n        self.container = self.$container[ 0 ];\n        self.$scrollControls = $( '<div class=\"controls\"></div>' ).appendTo( self.$container.parent() );\n        self.$scrollRight = $( '<span class=\"right\"></span>' ).appendTo( self.$scrollControls ).data( 'posChange', self.config.scrollChange );\n        self.$scrollLeft = $( '<span class=\"left\"></span>' ).addClass( self.config.toggleClass ).appendTo( self.$scrollControls ).data( 'posChange', -self.config.scrollChange );\n        self.scrollPosition = 0;\n        \n        this.checkThresholds();\n\n        // Scroll element\n        self.$scrollControls.on( 'click', 'span', function( e )\n        {\n            e.preventDefault();\n            self.posChange = $( this ).data( 'posChange' ) * self.container.clientWidth;\n            if ( self.posChange )\n            {\n                self.scrollTo( self.scrollPosition + self.posChange );\n            }\n        } );\n\n        // Refresh scroll controls on resize (with grace period)\n        $( window ).on( 'resize', function()\n        {\n            clearTimeout( self.windowTimeout );\n            self.windowTimeout = setTimeout( function()\n            {\n                self.scrollPosition = self.container.scrollLeft;\n                self.checkThresholds();\n            }, 150 );\n        } );\n\n        // Refresh scroll controls on scroll (with grace period)\n        self.$container.on( 'scroll', function()\n        {\n            if ( !self.scrollDisabled )\n            {\n                clearTimeout( self.scrollTimeout );\n                self.scrollTimeout = setTimeout( function()\n                {\n                    self.scrollPosition = self.container.scrollLeft;\n                    self.checkThresholds();\n                }, 150 );\n            }\n        } )\n    };\n\n    Scroller.prototype = {\n\n        /**\n         * Checks the current scroll position -\n         * if no scroll required, hide the controls, otherwise toggle state of left / right buttons.\n         *\n         * @returns {boolean} - Returns true if container can be scrolled\n         */\n        checkThresholds: function()\n        {\n            var self = this;\n\n            // If scroll container is not visible, don't check scroll position\n            if ( !self.$container.is( ':visible' ) )\n            {\n                return false;\n            }\n\n            // Hide scroll if not needed\n            if ( self.container.scrollWidth <= self.container.clientWidth )\n            {\n                self.$scrollControls.addClass( self.config.hideClass );\n                return false;\n            }\n            else\n            {\n                self.$scrollControls.removeClass( self.config.hideClass );\n            }\n\n            self.currentScroll = self.container.scrollLeft;\n            self.maxScroll = self.container.scrollWidth - self.container.clientWidth;\n\n            // Check for scroll beyond left threshold\n            if ( self.scrollPosition <= 0 )\n            {\n                self.scrollPosition = 0;\n                self.$scrollLeft.addClass( self.config.toggleClass );\n            }\n            else\n            {\n                self.$scrollLeft.removeClass( self.config.toggleClass );\n            }\n\n            // Check for scroll beyond right threshold\n            if ( self.scrollPosition >= ( self.maxScroll ) )\n            {\n                self.scrollPosition = self.maxScroll;\n                self.$scrollRight.addClass( self.config.toggleClass );\n            }\n            else\n            {\n                self.$scrollRight.removeClass( self.config.toggleClass );\n            }\n\n            return true;\n        },\n\n        /**\n         * Scroll the container to a specific position and update controls\n         *\n         * @param {integer} position - the target position to scroll to\n         * @param {boolean} [instantChange = false] - if true, do not animate\n         */\n        scrollTo: function( position, instantChange )\n        {\n            var self = this;\n            self.scrollPosition = position;\n\n            if ( self.scrollDisabled || !self.checkThresholds() )\n            {\n                return;\n            }\n\n            // Instant change\n            if ( instantChange )\n            {\n                self.container.scrollLeft = self.scrollPosition;\n                return;\n            }\n\n            // Animated change\n            self.scrollDisabled = true;\n            self.$container.animate(\n                {\n                    scrollLeft: self.scrollPosition + 'px'\n                },\n                self.config.animSpeed,\n                function()\n                {\n                    self.scrollDisabled = false;\n                    self.checkThresholds()\n                } );\n        }\n    };\n\n    $( function()\n    {\n        $.each( $( '[data-widget-type=\"scroller_widget\"]' ), function()\n        {\n            this.scroller = new Scroller( this );\n        } );\n    });\n\n    return Scroller;\n\n}","Scroller":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"container"},{"title":"param","description":null,"type":null,"name":"options"}]},"Source":"var Scroller = function( container, options )\n    {\n        var self = this;\n\n        self.config = $.extend( {\n            animSpeed: 250,\n            scrollChange: 0.75,\n            hideClass: 'hide',\n            toggleClass: 'inactive'\n        }, options );\n\n        self.$container = $( container );\n        self.container = self.$container[ 0 ];\n        self.$scrollControls = $( '<div class=\"controls\"></div>' ).appendTo( self.$container.parent() );\n        self.$scrollRight = $( '<span class=\"right\"></span>' ).appendTo( self.$scrollControls ).data( 'posChange', self.config.scrollChange );\n        self.$scrollLeft = $( '<span class=\"left\"></span>' ).addClass( self.config.toggleClass ).appendTo( self.$scrollControls ).data( 'posChange', -self.config.scrollChange );\n        self.scrollPosition = 0;\n        \n        this.checkThresholds();\n\n        // Scroll element\n        self.$scrollControls.on( 'click', 'span', function( e )\n        {\n            e.preventDefault();\n            self.posChange = $( this ).data( 'posChange' ) * self.container.clientWidth;\n            if ( self.posChange )\n            {\n                self.scrollTo( self.scrollPosition + self.posChange );\n            }\n        } );\n\n        // Refresh scroll controls on resize (with grace period)\n        $( window ).on( 'resize', function()\n        {\n            clearTimeout( self.windowTimeout );\n            self.windowTimeout = setTimeout( function()\n            {\n                self.scrollPosition = self.container.scrollLeft;\n                self.checkThresholds();\n            }, 150 );\n        } );\n\n        // Refresh scroll controls on scroll (with grace period)\n        self.$container.on( 'scroll', function()\n        {\n            if ( !self.scrollDisabled )\n            {\n                clearTimeout( self.scrollTimeout );\n                self.scrollTimeout = setTimeout( function()\n                {\n                    self.scrollPosition = self.container.scrollLeft;\n                    self.checkThresholds();\n                }, 150 );\n            }\n        } )\n    }"}},"ShowMore":{"Documentation":{"description":"Logic for the show more content buttons\nOptions:\n    container : The container for the widget\n    showMoreContainer : The container where the user clicks to show more content\n    template : The template for the retrived content\n    displayMoreContainer : The containtainer to display the new content","tags":[]},"Source":"PULSE.CLIENT.UI.ShowMore = function( options )\n{\n    if( !options )\n    {\n        return;\n    }\n\n    var tags;\n\n    this.$container = $( options.container );\n    this.$showMoreContainer = this.$container.find( options.showMoreContainer );\n    this.$displayMoreContainer = this.$container.find( options.displayMoreContainer );\n    this.template = options.template;\n\n    this.numEntries = parseInt( this.$container.data( 'num-entries' ) );\n    this.pageSize = parseInt( this.$container.data( 'page-size' ) );\n    this.maxEntries = parseInt( this.$container.data( 'max' ));\n    this.contentType = this.$container.data( 'content-type' );\n    this.total = this.pageSize;\n\n    if( this.numEntries > this.maxEntries )\n    {\n        this.numEntries = this.maxEntries;\n    }\n\n    this.maxPages = Math.ceil( this.numEntries / this.pageSize );\n\n    // tags = this.$container.data( 'tags' );\n\n    // if( tags )\n    // {\n    //     this.contentTags = tags.split( ',' );\n    // }\n    // else\n    // {\n    //     this.contentTags = [];\n    // }\n\n    // if( this.contentType == 'news' )\n    // {\n    //     this.contentType = 'text';\n    //     this.contentTags.push( 'news' );\n    // }\n    //\n    this.contentTags = this.$container.data( 'tags' );\n\n    this.references = this.$container.data( \"references\" );\n\n    if( this.contentType == 'news' )\n    {\n        this.contentType = 'text';\n        if ( ( ! this.contentTags ) || ( this.contentTags.length < 1 ) )\n        {\n            this.contentTags = 'News Article';\n        }\n        else\n        {\n            this.contentTags = this.contentTags + ',News Article';\n        }\n    }\n\n    this.urlGen = new PULSE.CLIENT.RUGBY.getUrlGenerator( { 'type' : this.contentType } );\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n\n    this.pageNum = 0;\n\n    if( this.maxPages < 2 )\n    {\n        this.$showMoreContainer.hide();\n    }\n    this.setListeners();\n}","prototype":{"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.UI.ShowMore.prototype.setListeners"}]},"Source":"PULSE.CLIENT.UI.ShowMore.prototype.setListeners = function()\n{\n    var that = this;\n\n    this.$showMoreContainer.on( 'click', function(e)\n    {\n        e.preventDefault();\n\n        that.pageNum = that.pageNum + 1;\n\n        // Notify widget to get more content\n        PULSE.CLIENT.notify( 'content/get',\n            {\n                id: that.span,\n                success: true\n            }\n        );\n\n        if( that.pageNum == that.maxPages - 1 )\n        {\n            that.$showMoreContainer.hide();\n        }\n    });\n}"},"setData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.UI.ShowMore.prototype.setData = function( data )\n{\n    this.numEntries = data.pageInfo.numEntries;\n\n    if( this.numEntries > this.maxEntries )\n    {\n        this.numEntries = this.maxEntries;\n    }\n\n    this.maxPages = Math.ceil( this.numEntries / this.pageSize );\n\n    for( var i  = 0; i < data.content.length; i++ )\n    {\n        this.total = this.total + 1;\n\n        if( this.total < this.maxEntries + 1 )\n        {\n            PULSE.CLIENT.Template.append(\n                    this.template,\n                    this.$displayMoreContainer,\n                    {\n                        content : data.content[ i ]\n                    }\n                );\n        }\n    }\n\n    PULSE.CLIENT.notify( 'content/update',\n            {\n                id: that.span,\n                success: true\n            }\n        );\n}"}}},"ToggleNav":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.UI.ToggleNav"},{"title":"param","description":null,"type":null,"name":"options"}]},"Source":"PULSE.CLIENT.UI.ToggleNav = function( options )\n{\n    var that = this;\n\n    if( !options )\n    {\n        return;\n    }\n\n    this.activeTab = typeof options.activeTab !== \"undefined\" ? options.activeTab : 0;\n    this.navOnClass = options.navActiveClass        || 'active';\n    this.contentClass = options.contentClassPrefix    || 'tab';\n    this.$nav = $( options.navigationContainer ); // mandatory\n    this.$content = $( options.contentContainer );    // mandatory\n    this.$navLinks = options.navLinksSelector ? this.$nav.find( options.navLinksSelector ) : this.$nav.children();\n    this.$next = $( options.nextButton );\n    this.$prev = $( options.prevButton );\n    this.animate = options.animate;\n    this.callback = options.callback;\n\n    this.$navLinks.eq( this.activeTab ).addClass( this.navOnClass );\n    this.$content.children().hide();\n    this.$content.find( '.' + this.contentClass + this.activeTab ).show();\n\n    this.$navLinks.each( function( index )\n    {\n        $( this ).click( function( e )\n        {\n            if( that.activeTab !== index )\n            {\n                that.activeTab = index;\n                that.switchTabs( that );\n            }\n\n            e.preventDefault();\n        } );\n    } );\n\n    if( options.nextButton )\n    {\n        this.$next.click( function( e )\n        {\n            if( that.$navLinks.length - 1 > that.activeTab )\n            {\n                that.activeTab++;\n                that.switchTabs( that );\n            }\n\n            e.preventDefault();\n        } );\n    }\n\n    if( options.prevButton )\n    {\n        this.$prev.click( function( e )\n        {\n            if( 0 < that.activeTab )\n            {\n                that.activeTab--;\n                that.switchTabs( that );\n            }\n\n            e.preventDefault();\n        } );\n    }\n}","prototype":{"switchTabs":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"scope"},{"title":"param","description":null,"type":null,"name":"dontTrack"}]},"Source":"PULSE.CLIENT.UI.ToggleNav.prototype.switchTabs = function( scope, dontTrack )\n{\n    if( !scope )\n    {\n        scope = this;\n    }\n\n    // Return early if the clicked link is 'inactive'\n    if( scope.$navLinks.eq( scope.activeTab ).hasClass('inactive') )\n    {\n        return;\n    }\n\n    /**\n    * THIS IS A DOC COMMENT FOR A NESTED FUNCTION\n    */\n\n    var hideContentChildren = function( callback )\n    {\n        scope.$content.children( ':visible' ).first().fadeOut('fast', function ()\n        {\n            if( callback )\n            {\n                callback( scope.activeTab, dontTrack );\n            }\n            if( scope.callback )\n            {\n                scope.callback( scope.activeTab, dontTrack );\n            }\n        } );\n    };\n\n    if( scope.animate )\n    {\n        hideContentChildren( function ()\n        {\n            scope.$content.find( \".\" + scope.contentClass + scope.activeTab ).fadeIn('slow');\n        } );\n    }\n    else\n    {\n        scope.$content.children().hide();\n        scope.$content.find( \".\" + scope.contentClass + scope.activeTab ).show();\n\n        if( scope.callback )\n        {\n            scope.callback( scope.activeTab, dontTrack );\n        }\n    }\n\n    scope.$navLinks.removeClass( scope.navOnClass );\n    scope.$navLinks.eq( scope.activeTab ).addClass( scope.navOnClass );\n}","hideContentChildren":{"Documentation":{"description":"THIS IS A DOC COMMENT FOR A NESTED FUNCTION","tags":[]},"Source":"var hideContentChildren = function( callback )\n    {\n        scope.$content.children( ':visible' ).first().fadeOut('fast', function ()\n        {\n            if( callback )\n            {\n                callback( scope.activeTab, dontTrack );\n            }\n            if( scope.callback )\n            {\n                scope.callback( scope.activeTab, dontTrack );\n            }\n        } );\n    }"}},"switchToTab":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"index"},{"title":"param","description":null,"type":null,"name":"dontTrack"}]},"Source":"PULSE.CLIENT.UI.ToggleNav.prototype.switchToTab = function( index, dontTrack )\n{\n    this.activeTab = index;\n    this.switchTabs( undefined, dontTrack );\n}"}}},"isElementInViewport":{"Documentation":{"description":"John Resig recommended function","tags":[{"title":"param","description":"DOM element or jQuery object for it","type":{"type":"NameExpression","name":"Object"},"name":"el"},{"title":"return","description":"whether it's within the user's viewport","type":{"type":"NameExpression","name":"Boolean"}}]},"Source":"PULSE.CLIENT.UI.isElementInViewport = function( el )\n{\n    //special bonus for those using jQuery\n    if ( typeof jQuery === \"function\" && el instanceof jQuery )\n    {\n        el = el[ 0 ];\n    }\n\n    var rect = el.getBoundingClientRect();\n\n    return (\n        rect.top >= 0 &&\n        rect.left >= 0 &&\n        rect.bottom <= ( window.innerHeight || document.documentElement.clientHeight ) && /*or $(window).height() */\n        rect.right <= ( window.innerWidth || document.documentElement.clientWidth ) /*or $(window).width() */\n    );\n}"},"SubMenuMore":{"Documentation":{"description":"Handles collapsing long submenus under the 'More' dropdown","tags":[]},"Source":"PULSE.CLIENT.UI.SubMenuMore = function( $container )\n{\n    this.$container = $container;\n    this.$wrapper = this.$container.find( '.subMenuWrapper' );\n    this.$linkList = this.$container.find( '.subMenuLinks' );\n    this.$moreLinks = this.$container.find( '.moreLinks' );\n    this.$currentButton = this.$container.find( '.current' );\n\n    this.dropdownOpen = false;\n\n    var that = this;\n\n    // click listener for the 'More' dropdown\n    this.$moreLinks.click( function( e )\n    {\n        $( this ).find( 'ul' ).toggle();\n        $( this ).find( '.moreLinksBtn' ).toggleClass( 'active' );\n        e.stopPropagation();\n    } );\n\n    // subNav drop-down (for smaller screens)\n    this.$currentButton.click( function()\n    {\n        that.$linkList.toggle();\n        that.dropdownOpen = !that.dropdownOpen;\n        $( this ).find( '.icon' ).toggleClass( 'drop-down-green drop-up-green' );\n    } );\n\n    // hide 'More' dropdown when user clicks outside of it\n    $( 'body' ).click( function()\n    {\n        that.$moreLinks.find( '.moreLinksBtn' ).removeClass( 'active' );\n        that.$moreLinks.find( 'ul' ).hide();\n    } );\n\n    this.$linkList.resize( function()\n    {\n        that.onResize();\n    } );\n\n    $( window ).resize( function()\n    {\n        that.onResize();\n    } );\n\n    this.onResize();\n}","prototype":{"onResize":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.UI.SubMenuMore.prototype.onResize"}]},"Source":"PULSE.CLIENT.UI.SubMenuMore.prototype.onResize = function()\n{\n    /**\n     * 860 is the cutoff after which the whole menu turns into a dropdown\n     * \n     * use window.innerWidth to account for scrollbar so width aligns with the\n     * width perceived by media queries\n     */\n    var width = window.innerWidth || $( window ).width();\n    if( width >= 860 )\n    {\n        this.checkSubMenuItems();\n        this.$linkList.show();\n    }\n    else\n    {\n        this.$moreLinks.hide();\n        // reapply position absolute as it's needed in the mobile view\n        this.$linkList.toggle( this.dropdownOpen ).css( 'position', 'absolute' );\n        this.$linkList.find( 'li' ).show();\n    }\n}"},"checkSubMenuItems":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.UI.SubMenuMore.prototype.checkSubMenuItems = function()\n{\n    var $hiddenItems = this.hideShowItems();\n    if( $hiddenItems.length )\n    {\n        this.$moreLinks.find( 'ul' ).html( $hiddenItems.reverse() );\n        this.$moreLinks.show();\n    }\n    else\n    {\n        this.$moreLinks.hide();\n    }\n}"},"hideShowItems":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.UI.SubMenuMore.prototype.hideShowItems = function()\n{\n    var total = 0;\n    var hiddenItems = [];\n    var $links = this.$linkList.find( 'li' );\n\n    $links.each( function()\n    {\n        total += $( this ).outerWidth();\n    } );\n\n    for( var i = $links.length - 1; i >= 0; i-- )\n    {\n        var $link = $links.eq( i );\n        \n        if( total > this.$wrapper.width() ||\n            // make sure the 'More' item fits if there are any items in the dropdown\n            ( hiddenItems.length && ( total + this.$moreLinks.width() ) > this.$wrapper.width() ) )\n        {\n            hiddenItems.push( $link.clone().show() );\n            total -= $link.outerWidth();\n            $link.hide();\n        }\n        else\n        {\n            $link.show();\n        }\n    }\n\n    return hiddenItems;\n}"}}}},"FacebookController":{"publishEvent":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.FacebookController.publishEvent"},{"title":"param","description":null,"type":null,"name":"page"},{"title":"param","description":null,"type":null,"name":"w"},{"title":"param","description":null,"type":null,"name":"h"}]},"Source":"PULSE.CLIENT.FacebookController.publishEvent = function( page, w, h )\n{\n    var FC = PULSE.CLIENT.FacebookController,\n        width = w || 575,\n        height = h || 400,\n        left = ( $( window ).width() - width ) / 2,\n        top = ( $( window ).height() - height ) / 2,\n        fbUrl = FC.getShareUrl( page ),\n        options = 'status=1' +\n                  ',width=' + width +\n                  ',height=' + height +\n                  ',top=' + top +\n                  ',left=' + left;\n\n    window.open( fbUrl, 'facebook', options );\n}"},"getShareUrl":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"temp_page"}]},"Source":"PULSE.CLIENT.FacebookController.getShareUrl = function( temp_page )\n{\n    return \"http://www.facebook.com/sharer/sharer.php?u=\" + temp_page;\n  \t// <!-- for Google -->\n    // <meta name=\"description\" content=\"\" />\n    // <meta name=\"keywords\" content=\"\" />\n\n    // <meta name=\"author\" content=\"\" />\n    // <meta name=\"copyright\" content=\"\" />\n    // <meta name=\"application-name\" content=\"\" />\n\n    // <!-- for Facebook -->\n    // <meta property=\"og:title\" content=\"\" />\n    // <meta property=\"og:type\" content=\"article\" />\n    // <meta property=\"og:image\" content=\"\" />\n    // <meta property=\"og:url\" content=\"\" />\n    // <meta property=\"og:description\" content=\"\" />\n\n    // <!-- for Twitter -->\n    // <meta name=\"twitter:card\" content=\"summary\" />\n    // <meta name=\"twitter:title\" content=\"\" />\n    // <meta name=\"twitter:description\" content=\"\" />\n    // <meta name=\"twitter:image\" content=\"\" />\n}"}},"GooglePlusController":{"publishEvent":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.GooglePlusController.publishEvent"},{"title":"param","description":null,"type":null,"name":"page"},{"title":"param","description":null,"type":null,"name":"w"},{"title":"param","description":null,"type":null,"name":"h"}]},"Source":"PULSE.CLIENT.GooglePlusController.publishEvent = function( page, w, h )\n{\n  var GC = PULSE.CLIENT.GooglePlusController,\n        width = w || 575,\n        height = h || 400,\n        left = ( $( window ).width() - width ) / 2,\n        top = ( $( window ).height() - height ) / 2,\n        gplusUrl = GC.getShareUrl( page ),\n        options = 'status=1' +\n                  ',width=' + width +\n                  ',height=' + height +\n                  ',top=' + top +\n                  ',left=' + left;\n\n    window.open( gplusUrl, 'google plus', options );\n}"},"getShareUrl":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"tmp_page"}]},"Source":"PULSE.CLIENT.GooglePlusController.getShareUrl = function( tmp_page )\n{\n    return \"https://plus.google.com/share?url=\" + tmp_page;\n    //language\n}"}},"getJqueryDataManager":{"Documentation":{"description":"Retrieves (or creates if it doesn't exist) the data manager object instance","tags":[{"title":"return","description":"Reference to the window level data manager instance","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.getJqueryDataManager = function()\n{\n    if( window.DataManager === undefined )\n    {\n        window.DataManager = new PULSE.CLIENT.JqueryDataManager();\n    }\n\n    return window.DataManager;\n}"},"JqueryDataManager":{"Documentation":{"description":"Jquery data manager\n    - Maps urls to JqueryTimer instances which poll their url at regular intervals\n    - Provides methods of adding/removing/starting/stopping these feeds","tags":[{"title":"constructor","description":null,"type":null,"name":null}]},"Source":"PULSE.CLIENT.JqueryDataManager = function()\n{\n    this.urls = {};\n\n    // Singleton access\n    if( PULSE.CLIENT.JqueryDataManager.prototype._singletonInstance )\n    {\n        return PULSE.CLIENT.JqueryDataManager.prototype._singletonInstance;\n    }\n    PULSE.CLIENT.JqueryDataManager.prototype._singletonInstance = this;\n\n    /**\n     * Proposed object for a given url\n     *   this.urls['scoring-01.js'] = {\n     *       timer: 'new JqueryJSONPTimer'\n     *       savedTargets: [],\n     *       lastData: '',\n     *       callback: '',\n     *       interval: -1,\n     *       url: '',\n     *       id: ''\n     *   }\n     */\n}","prototype":{"addFeed":{"Documentation":{"description":"Maps a given url to a new JqueryTimer instance","tags":[{"title":"param","description":"Identifier for this feed","type":{"type":"NameExpression","name":"String"},"name":"id"},{"title":"param","description":"Url to poll - also used as a key for lookup","type":{"type":"NameExpression","name":"String"},"name":"url"},{"title":"param","description":"Poll frequency interval in SECONDS","type":{"type":"NameExpression","name":"String"},"name":"interval"},{"title":"param","description":"Callback function to invoke on receiving response","type":{"type":"NameExpression","name":"Object"},"name":"callback"},{"title":"param","description":"List of targets to invoke onData/Error on response","type":{"type":"NameExpression","name":"Array"},"name":"targets"}]},"Source":"PULSE.CLIENT.JqueryDataManager.prototype.addFeed = function( id, url, interval, callback, targets )\n{\n    url = this.getUrlWithClient( url );\n\n    var that = this,\n        currentTargets = this.urls[url] && this.urls[url].savedTargets ? this.urls[url].savedTargets : [],\n        i, needToAdd, j, f, e;\n\n    // Remove any existing feed with this ID\n    this.removeFeed( url );\n\n    // Save the callback name\n    this.urls[url] = { id:id, url:url, interval:interval, callback:callback };\n\n    // Add all the targets to the current targets\n    for( i = 0; i < targets.length; i++ )\n    {\n        needToAdd = true;\n        for( j = 0; j < currentTargets.length; j++ )\n        {\n            if( targets[ i ] === currentTargets[ j ] )\n            {\n                needToAdd = false;\n                break;\n            }\n        }\n        if( needToAdd )\n        {\n            currentTargets.push( targets[ i ] );\n        }\n    }\n\n    this.urls[url].savedTargets = currentTargets;\n\n    // Dynamically create the succesful callback\n    f = function ( jsonData )\n    {\n        if( jsonData )\n        {\n            var payload = jsonData, serialised, t, target;\n\n            // Serialise the payload\n            serialised = $.toJSON( payload );\n\n            // Only call to update with data if it differs from the last data for\n            // this url\n            if( that.urls[url] && that.urls[url].lastData !== serialised )\n            {\n                // Save the new data\n                that.urls[url].lastData = serialised;\n                // Pass the data to all of the valid targets\n                for( t = 0, tlimit = currentTargets.length; t < tlimit; t++ )\n                {\n                    target = currentTargets[t];\n                    if( target && target.onData )\n                    {\n                        try\n                        {\n                            target.onData( payload, id );\n                        }\n                        catch(e)\n                        {\n                            if( window.console && window.console.log ) console.log( e );\n                        }\n                    }\n                }\n            }\n        }\n        else if( window.console && window.console.log )\n        {\n            console.log( 'No data received' );\n        }\n    };\n\n    // Dynamically create the error callback\n    e = function()\n    {\n        for( var t = 0, tlimit = currentTargets.length; t < tlimit; t++ )\n        {\n            // ...if they are valid\n            var target = currentTargets[t];\n            if( target && target.onError )\n            {\n                target.onError( id );\n            }\n        }\n    };\n\n    // Create the timer\n    that.urls[url].timer = new PULSE.CLIENT.JqueryTimer( this.urls[url], f, e );\n}"},"startAll":{"Documentation":{"description":"Call to start the timer for each stored url","tags":[]},"Source":"PULSE.CLIENT.JqueryDataManager.prototype.startAll = function()\n{\n    for( var url in this.urls )\n    {\n        this.start( url );\n    }\n}"},"stopAll":{"Documentation":{"description":"Call to stop the timer for each stored url","tags":[]},"Source":"PULSE.CLIENT.JqueryDataManager.prototype.stopAll = function()\n{\n    for( var url in this.urls )\n    {\n        this.stop( url );\n    }\n}"},"start":{"Documentation":{"description":"Call to start the timer for a given url","tags":[{"title":"param","description":"Key of url to lookup and start","type":{"type":"NameExpression","name":"String"},"name":"url"}]},"Source":"PULSE.CLIENT.JqueryDataManager.prototype.start = function( url )\n{\n    url = this.getUrlWithClient( url );\n    if( this.urls[url] && this.urls[url].timer )\n    {\n        this.urls[url].timer.start();\n    }\n}"},"stop":{"Documentation":{"description":"Call to stop the timer for a given url","tags":[{"title":"param","description":"Key of url to lookup and stop","type":{"type":"NameExpression","name":"String"},"name":"url"}]},"Source":"PULSE.CLIENT.JqueryDataManager.prototype.stop = function( url )\n{\n    url = this.getUrlWithClient( url );\n\n    if( this.urls[url] && this.urls[url].timer )\n    {\n        this.urls[url].timer.stop();\n    }\n}"},"removeFeed":{"Documentation":{"description":"Call to remove a given url from the map","tags":[{"title":"param","description":"Key of url remove","type":{"type":"NameExpression","name":"String"},"name":"url"}]},"Source":"PULSE.CLIENT.JqueryDataManager.prototype.removeFeed = function( url )\n{\n    url = this.getUrlWithClient( url );\n    this.stop( url );\n\n    if( this.urls[url] )\n    {\n        this.urls[url] = undefined;\n    }\n}"},"getUrlWithClient":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"url"}]},"Source":"PULSE.CLIENT.JqueryDataManager.prototype.getUrlWithClient = function( url )\n{\n    if( url && url.search( 'client=pulse' ) === -1 &&\n        ( url.search( 'rugby' ) > -1 || url.search( 'content' ) > -1 || url.search( 'blog' ) > -1 ) )\n    {\n        if( url.search( '\\\\?' ) > -1 )\n        {\n            return url + '&client=pulse';\n        }\n        else\n        {\n            return url + '?client=pulse';\n        }\n    }\n\n    return url;\n}"}}},"JqueryTimer":{"Documentation":{"description":"jQuery AJAX request timer","tags":[{"title":"constructor","description":null,"type":null,"name":null},{"title":"param","description":"Timer parameters e.g. as interval time","type":{"type":"NameExpression","name":"Object"},"name":"params"},{"title":"param","description":"Success callback function","type":{"type":"NameExpression","name":"Object"},"name":"f"},{"title":"param","description":"Error callback function","type":{"type":"NameExpression","name":"Object"},"name":"e"}]},"Source":"PULSE.CLIENT.JqueryTimer = function( params, f, e )\n{\n    this.initialise( params || {}, f, e );\n\n    this.running = false;\n}","prototype":{"initialise":{"Documentation":{"description":"Initialise public variables and expand params","tags":[{"title":"param","description":"Timer parameters e.g. as interval time","type":{"type":"NameExpression","name":"Object"},"name":"params"},{"title":"param","description":"Success callback function","type":{"type":"NameExpression","name":"Object"},"name":"f"},{"title":"param","description":"Error callback function","type":{"type":"NameExpression","name":"Object"},"name":"e"}]},"Source":"PULSE.CLIENT.JqueryTimer.prototype.initialise = function( params, f, e )\n{\n    this.url = params.url || '';\n    this.interval = params.interval * 1000 || '';\n    this.params = params.params || {};\n    this.callbackName = params.callback || '';\n    this.callback = f;\n    this.errorCallback = e;\n    this.name = params.id || 'un-named';\n}"},"start":{"Documentation":{"description":"Start this timer - make a reset and reset timeout","tags":[]},"Source":"PULSE.CLIENT.JqueryTimer.prototype.start = function()\n{\n    if( !this.running )\n    {\n        this.running = true;\n        this.fireTimer();\n    }\n}"},"stop":{"Documentation":{"description":"Stop this timer - cancel current timer and prevent resetting","tags":[]},"Source":"PULSE.CLIENT.JqueryTimer.prototype.stop = function()\n{\n    if( this.running )\n    {\n        this.running = false;\n        this.cancelTimer();\n    }\n}"},"fireTimer":{"Documentation":{"description":"Make jquery jsonp|ajax request to url and reset timout if interval is more than 0","tags":[]},"Source":"PULSE.CLIENT.JqueryTimer.prototype.fireTimer = function()\n{\n    var that = this,\n        isJSONP = this.url.indexOf('.js', this.url.length - '.js'.length) !== -1 || this.url.indexOf('.js?') > -1 ,\n        requestType = $.jsonp && isJSONP ? 'jsonp' : 'ajax';\n\n    jQuery.support.cors = true;\n\n    // IE 8 & 9 support for cross-domain JSON is limited to XDomainRequest\n    if( !isJSONP && ( 'XDomainRequest' in window ) && window.XDomainRequest !== null )\n    {\n        var xdr = new XDomainRequest(); // Use Microsoft XDR\n        xdr.open( 'get', this.url );\n        xdr.onload = function ()\n        {\n            var dom  = new ActiveXObject( 'Microsoft.XMLDOM' ),\n                JSON = $.parseJSON( xdr.responseText );\n\n            dom.async = false;\n\n            if( JSON === null || typeof ( JSON ) == 'undefined' )\n            {\n                JSON = $.parseJSON( data.firstChild.textContent );\n            }\n\n            that.callback( JSON ); // internal function\n        };\n\n        xdr.onerror = function()\n        {\n            that.errorCallback();\n            _result = false;\n        };\n\n        xdr.onprogress = function(){ };\n        xdr.ontimeout = function(){ };\n        setTimeout(function(){\n            xdr.send();\n        }, 0);\n\n        xdr.send();\n    }\n    else\n    {\n        $[ requestType ](\n        {\n            url: that.url,\n            context: document.body,\n            callback: that.callbackName,\n            cache: true,\n            dataType: isJSONP ? 'jsonp' : 'json',\n            processData: false,\n            contentType: false,\n            // Reset timeout and invoke callback\n            success: function( data )\n            {\n                that.cancelTimer();\n                if( that.interval > 0 && that.running )\n                {\n                    that.resetTimer();\n                }\n                that.callback( data );\n            },\n            // Reset timeout\n            error: function( xOptions, textStatus )\n            {\n                that.errorCallback();\n                if( that.interval > 0 && that.running )\n                {\n                    that.resetTimer();\n                }\n            }\n        });\n    }\n}"},"resetTimer":{"Documentation":{"description":"Reset the timer","tags":[]},"Source":"PULSE.CLIENT.JqueryTimer.prototype.resetTimer = function()\n{\n    var that = this;\n    if ( this.running )\n    {\n        this.timer = setTimeout( function()\n        {\n            that.fireTimer();\n        }, this.interval );\n    }\n}"},"cancelTimer":{"Documentation":{"description":"Clear the current timer","tags":[]},"Source":"PULSE.CLIENT.JqueryTimer.prototype.cancelTimer = function()\n{\n    if( this.timer )\n    {\n        clearTimeout( this.timer );\n    }\n}"}}},"Tracking":{"pageview":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.Tracking.pageview"},{"title":"param","description":null,"type":null,"name":"page"},{"title":"param","description":null,"type":null,"name":"title"}]},"Source":"PULSE.CLIENT.Tracking.pageview = function( page, title )\n{\n    if( typeof window.ga !== 'undefined' )\n    {\n        ga( 'send', 'pageview', {\n            page:  page,\n            title: title\n        } );\n    }\n    else\n    {\n        console.log( 'Track: PAGEVIEW ' + page );\n    }\n}"},"event":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"category"},{"title":"param","description":null,"type":null,"name":"action"},{"title":"param","description":null,"type":null,"name":"label"}]},"Source":"PULSE.CLIENT.Tracking.event = function( category, action, label )\n{\n    if( typeof window.ga !== 'undefined' )\n    {\n        ga( 'send', 'event', category, action, label );\n    }\n    else\n    {\n        console.log( 'Track: EVENT ' + category + ' | ' + action + ( label ? ' | ' + label : '' ) );\n    }\n}"}},"notify":{"Documentation":{"description":"Notifies all subscribed components of a certain event - requires jQuery","tags":[{"title":"param","description":"Event message type ( e.g. scoring/update )","type":{"type":"NameExpression","name":"String"},"name":"messageType"},{"title":"param","description":"Params object to notify of success and scope","type":{"type":"NameExpression","name":"Object"},"name":"params"}]},"Source":"PULSE.CLIENT.notify = function( messageType, params )\n{\n    $('body').trigger( messageType, params );\n}"},"subscribe":{"Documentation":{"description":"Subscribes to a given event type, invoking callback on event firing","tags":[{"title":"param","description":"Event type, see PULSE.CLIENT.RUGBY.DATA_EVENTS in metadata.js","type":{"type":"NameExpression","name":"String"},"name":"subscription"},{"title":"param","description":"Callback function to run on event occurances","type":{"type":"NameExpression","name":"Function"},"name":"callback"}]},"Source":"PULSE.CLIENT.subscribe = function( subscription, callback )\n{\n    $('body').on( subscription, callback );\n}"},"getDataManager":{"Documentation":{"description":"Retrieves (or creates if it doesn't exist) the data manager object instance","tags":[{"title":"return","description":"Reference to the window level data manager instance","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.getDataManager = function()\n{\n    if( window.datamgr === undefined ) {\n        window.datamgr = new PULSE.CLIENT.JqueryJSONPDataManager();\n    }\n\n    return window.datamgr;\n}"},"isTest":{"Documentation":{"description":"Determine if client is currently running locally/on test site.","tags":[{"title":"return","description":"Returns true if the user is testing locally or on test site","type":{"type":"NameExpression","name":"Boolean"}}]},"Source":"PULSE.CLIENT.isTest = function()\n{\n    try\n    {\n        this.domain = document.domain;\n    }\n    catch ( err )\n    {\n        this.domain = 'worldrugby.org';\n    }\n\n    if( this.domain.match( /^local\\./g ) )\n    {\n        return true;\n    }\n\n    if( this.domain.search( 'worldrugby.org' ) > -1 ||\n        this.domain.search( 'rugbyworldcup.com' ) > -1 ||\n        this.domain.search( 'festivalofrugby2015.com' ) > -1 ||\n        this.domain.search( 'test9.pulselive.com' ) > -1 ||\n        this.domain.search( 'test5.pulselive.com' ) > -1 )\n    {\n        return false;\n    }\n\n    if( this.domain.match( /test[1-9]*\\.pulselive/g ) )\n    {\n        return true;\n    }\n\n    return false;\n}"},"pluralise":{"Documentation":{"description":"Pluralise a string","tags":[]},"Source":"PULSE.CLIENT.pluralise = function( number, singularString, pluralString )\n{\n    if( number === 1 )\n    {\n        return singularString;\n    }\n    else\n    {\n        return pluralString || singularString + \"s\";\n    }\n}"},"getUserFacingAbbr":{"Documentation":{"description":"Method to take a team abbreviation and work out whether it needs sanitising.\nMantis issue #0003238\nJIRA issue number BWP-1","tags":[]},"Source":"PULSE.CLIENT.getUserFacingAbbr = function( abbr )\n{\n    var result = abbr;\n    return result;\n}"},"getPlayerAge":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.getPlayerAge"},{"title":"param","description":null,"type":null,"name":"timestamp"}]},"Source":"PULSE.CLIENT.getPlayerAge = function( timestamp )\n{\n    var ageDifMs = Date.now() - timestamp,\n        ageDate = new Date( ageDifMs ); // miliseconds from epoch\n\n    return Math.abs( ageDate.getUTCFullYear() - 1970 );\n}"},"fuzzyInArray":{"Documentation":{"description":"Given an element and an array, returns the index of the element in the array, or -1\nNote that it doesn't type match, so the string '1' will be equal to the integer 1","tags":[{"title":"param","description":null,"type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"String"},{"type":"NameExpression","name":"Integer"}]},"name":"element"},{"title":"param","description":null,"type":{"type":"NameExpression","name":"Array"},"name":"array"},{"title":"return","description":null,"type":{"type":"NameExpression","name":"Integer"}}]},"Source":"PULSE.CLIENT.fuzzyInArray = function( element, array )\n{\n    for( var i = 0, iLimit = array.length; i < iLimit; i++ )\n    {\n        var item = array[ i ];\n        if( item == element )\n        {\n            return i;\n        }\n    }\n    return -1;\n}"},"splitOnComma":{"Documentation":{"description":"Given the string of an enumeration, it returns an array of strings, trimmed","tags":[{"title":"param","description":null,"type":{"type":"NameExpression","name":"String"},"name":"string"},{"title":"return","description":null,"type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"String"}]}}]},"Source":"PULSE.CLIENT.splitOnComma = function( string )\n{\n    if( !string )\n    {\n        return [];\n    }\n\n    var array = string.split(',');\n    array = $.map( array, function( element, i )\n    {\n        return $.trim( element );\n    } );\n\n    return array;\n}"},"getCookie":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"cookieName"}]},"Source":"PULSE.CLIENT.getCookie = function( cookieName )\n{\n    return $.cookie( cookieName );\n}"},"getBiggestPhotoVariant":{"Documentation":{"description":"Returns the widest image variant from an array of variants","tags":[{"title":"param","description":"Array of photo variants","type":{"type":"NameExpression","name":"Array"},"name":"variants"},{"title":"return","description":"Widests photo variant","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.getBiggestPhotoVariant = function( variants )\n{\n    var width = 0,\n        i, variant, biggest;\n\n    for( i = 0; i < variants.length; i++ )\n    {\n        variant = variants[ i ];\n\n        if( variant.width > width )\n        {\n            width = variant.width;\n            biggest = i;\n        }\n    }\n\n    return variants[ biggest ];\n}"},"reorderVariants":{"Documentation":{"description":"Returns variants ordered by width (as on the cms).","tags":[{"title":"param","description":"Array of photo variants","type":{"type":"NameExpression","name":"Array"},"name":"variants"}]},"Source":"PULSE.CLIENT.reorderVariants = function( variants )\n{\n    variants.sort( function( a, b ) {\n        if( a.width < b.width )\n            return -1;\n        if( a.width > b.width )\n            return 1;\n        return 0;\n    });\n\n    return variants;\n}"},"getPhotoVariant":{"Documentation":{"description":"Returns the smallest image that is wider than the desired width - if none of\n  the variants are bigger than the desired width then fallback to the biggest\n  variant.","tags":[{"title":"param","description":"Array of photo variants","type":{"type":"NameExpression","name":"Array"},"name":"variants"},{"title":"param","description":"Desired width value","type":{"type":"NameExpression","name":"Number"},"name":"desired_width"},{"title":"param","description":"Desired height value","type":{"type":"NameExpression","name":"Number"},"name":"desired_height"},{"title":"return","description":"Most appropriate variant","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.getPhotoVariant = function( notOrderedVariants, desired_width, desired_height )\n{\n    var variants = PULSE.CLIENT.reorderVariants( notOrderedVariants );\n\n    if( !desired_height )\n    {\n        desired_height = 0;\n    }\n\n    var picked_width = 0;\n    var picked_height = 0;\n    var width_to_set = true;\n    var height_to_set = true;\n    var picked_url = \"\";\n\n    for( var i = 0; i < variants.length; i++ )\n    {\n        if( variants[i].width >= desired_width && picked_width !== 0 )\n        {\n            if( desired_height !== 0  &&  variants[i].height >= desired_height && variants[i].width == picked_width && height_to_set) //height is set and the variant is the same\n            {\n                picked_width = variants[i].width;\n                picked_height = variants[i].height;\n                picked_url = variants[i].url;\n            }\n            else if( width_to_set && desired_height !== 0 && variants[i].height >= desired_height ) //alredy meet requirements on height\n            {\n                picked_width = variants[i].width;\n                picked_height = variants[i].height;\n                picked_url = variants[i].url;\n                width_to_set = false;\n                height_to_set = false;\n            }\n            else if( width_to_set ) //second meet req of width no height meet or no height set\n            {\n                width_to_set = false;\n                picked_width = variants[ i ].width;\n                picked_height = variants[ i ].height;\n                picked_url = variants[ i ].url;\n            }\n        }\n        else if( variants[ i ].width >= desired_width && picked_width === 0 ) //first already meet requirements\n        {\n            picked_width = variants[ i ].width;\n            picked_height = variants[ i ].height;\n            picked_url = variants[ i ].url;\n            width_to_set = false;\n        }\n        else if( picked_width === 0 ) //first doesn't meet requirements\n        {\n            picked_width = variants[ i ].width;\n            picked_height = variants[ i ].height;\n            picked_url = variants[ i ].url;\n        }\n    }\n\n    return picked_url;\n}"},"getPhotoVariantByTag":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"notOrderedVariants"},{"title":"param","description":null,"type":null,"name":"tag"},{"title":"param","description":null,"type":null,"name":"desired_width"},{"title":"param","description":null,"type":null,"name":"desired_height"}]},"Source":"PULSE.CLIENT.getPhotoVariantByTag = function( notOrderedVariants, tag, desired_width, desired_height )\n{\n    var picked_url = '';\n    var variants = PULSE.CLIENT.reorderVariants( notOrderedVariants );\n\n    if( tag !== \"\" )\n    {\n        for( var i = 0; i < variants.length; i++ )\n        {\n            if( variants[ i ].tag && variants[ i ].tag.label == tag )\n            {\n                picked_url = variants[ i ].url;\n            }\n        }\n\n        if( picked_url !== \"\" )\n        {\n            return picked_url;\n        }\n        else\n        {\n            return PULSE.CLIENT.getPhotoVariant(variants, desired_width, desired_height);\n        }\n    }\n    else\n    {\n        return PULSE.CLIENT.getPhotoVariant(variants, desired_width, desired_height);\n    }\n}"},"generateUrl":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"type"},{"title":"param","description":null,"type":null,"name":"id"},{"title":"param","description":null,"type":null,"name":"references"}]},"Source":"PULSE.CLIENT.generateUrl = function( type, id, references )\n{\n    var url,\n        current = window.location.href;\n\n    url = '/' + type + '/' + id;\n\n    var refUrl = PULSE.CLIENT.checkReferences( references, type, url );\n\n    if ( refUrl )\n    {\n        url = refUrl;\n    }\n    else if ( current.indexOf( '/sevens-series' ) > -1 )\n    {\n        url = '/sevens-series' + url;\n    }\n    else if ( current.indexOf( '/womens-sevens-series' ) > -1 )\n    {\n        url = '/womens-sevens-series' + url;\n    }\n    else if ( current.indexOf( '/u20' ) > -1 )\n    {\n        url = '/u20' + url;\n    }\n    else if ( current.indexOf( '/pnc' ) > -1 )\n    {\n        url = '/pnc' + url;\n    }\n    else if ( current.indexOf( '/u20-championship' ) > -1 )\n    {\n        url = '/u20-championship' + url;\n    }\n    else if ( current.indexOf( '/pacific-nations-cup' ) > -1 )\n    {\n        url = '/pacific-nations-cup' + url;\n    }\n    else if ( current.indexOf( '/media-extranet' ) > -1 )\n    {\n        url = '/media-extranet' + url;\n    }\n    else if( current.indexOf( 'rugbyworldcup.com' ) < 0 )\n    {\n        if( ( type.indexOf( 'audio' ) > -1 ) || ( type.indexOf( 'video' ) > -1 ) )\n        {\n            url = '/worldrugbytv' + url;\n        }\n    }\n\n    return url;\n}"},"checkReferences":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"references"},{"title":"param","description":null,"type":null,"name":"type"},{"title":"param","description":null,"type":null,"name":"url"}]},"Source":"PULSE.CLIENT.checkReferences = function( references, type, url )\n{\n    if ( references && references.length > 0 )\n    {\n        for ( var i = 0; i < references.length; i++ )\n        {\n            // If is RWC\n            if ( references[ i ].type === 'RUGBY_TOURNAMENT' && references[ i ].id === 1238 )\n            {\n                return 'http://www.rugbyworldcup.com' + url;\n            }\n            else\n            {\n                var prefix = null;\n                //HSBC Sevens\n                if ( references[ i ].type === 'RUGBY_EVENTGROUP' && references[ i ].id === 45 )\n                {\n                    return '/sevens-series' + url;\n                }\n                else if ( references[ i ].type === 'RUGBY_EVENTGROUP' && references[ i ].id === 115 )\n                {\n                    return '/womens-sevens-series' + url;\n                }\n                else if ( references[ i ].type === 'RUGBY_EVENTGROUP' && references[ i ].id === 115 )\n                {\n                    return '/womens-sevens-series' + url;\n                }\n                else if ( references[ i ].type === 'RUGBY_EVENTGROUP' && references[ i ].id === 58 )\n                {\n                    return '/pnc' + url;\n                }\n                else if ( references[ i ].type === 'RUGBY_EVENTGROUP' && references[ i ].id === 72 )\n                {\n                    return '/u20' + url;\n                }\n            }\n        }\n    }\n    return null;\n}"},"getContinentFromCountry":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"countryId"}]},"Source":"PULSE.CLIENT.getContinentFromCountry = function( countryId )\n{\n    var key;\n\n    for( key in PULSE.CLIENT.RUGBY.COUNTRY_LOOK_UP )\n    {\n        var countryList = PULSE.CLIENT.RUGBY.COUNTRY_LOOK_UP[ key ];\n        for( var i = 0; i < countryList.length; i++ )\n        {\n            if( countryId === countryList[ i ] )\n            {\n                return key;\n            }\n        }\n    }\n\n    return undefined;\n}"},"getBaseUrl":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"val"}]},"Source":"PULSE.CLIENT.getBaseUrl = function( val )\n{\n    if ( PULSE.CLIENT.isTest() )\n    {\n        return '/' + val + '/'\n    }\n    else\n    {\n        return '/';\n    }\n}"},"GoogleMaps":{"Documentation":{"description":"Google Maps","tags":[{"title":"constructor","description":null,"type":null,"name":null}]},"Source":"PULSE.CLIENT.GoogleMaps = function( container, config )\n{\n    this.$container = $( container );\n    this.config = config;\n\n    this.startLongLat = {};\n    this.markers = {};\n\n    this.infoWindow = new google.maps.InfoWindow(\n    {\n        content: '<div class=\"infoWindow\">Loading...</div>'\n    } );\n\n    this.mapId = 'googleMap';\n\n    this.searchRad = false;\n\n    if ( this.config && this.config.mapId )\n    {\n        this.mapId = config.mapId;\n    }\n\n    if ( this.config && this.config.mapStyle )\n    {\n        this.mapStyle = this.config.mapStyle;\n    }\n\n    if ( this.config && this.config.pinIcon )\n    {\n        this.pinIcon = this.config.pinIcon;\n    }\n\n    if ( this.config && this.config.startLongLat )\n    {\n        if ( this.config.startLongLat.longitude )\n        {\n            this.startLongLat.longitude = this.config.startLongLat.longitude;\n        }\n        else\n        {\n            this.startLongLat.longitude = -0.164394;\n        }\n\n        if ( this.config.startLongLat.lat )\n        {\n            this.startLongLat.lat = this.config.startLongLat.lat;\n        }\n        else\n        {\n            this.startLongLat.lat = 51.427153;\n        }\n    }\n    else\n    {\n        this.startLongLat = {\n            longitude: -0.164394,\n            lat: 51.427153\n        };\n    }\n\n    if ( this.config && this.config.zoom )\n    {\n        this.zoom = this.config.zoom\n    }\n    else\n    {\n        this.zoom = 8;\n    }\n\n    google.maps.event.addDomListener( window, 'load', this.initGoogle() );\n}","prototype":{"initGoogle":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.GoogleMaps.prototype.initGoogle = function()\n{\n    var that = this;\n\n    var myLatlng = new google.maps.LatLng( this.startLongLat.lat, this.startLongLat.longitude );\n    var mapOptions = {\n            zoom: this.zoom,\n            center: myLatlng,\n            style: this.mapStyle\n        };\n\n    this.map = new google.maps.Map( this.$container[ 0 ], mapOptions );\n    this.geocoder = new google.maps.Geocoder();\n\n    google.maps.event.addListener( this.map, \"click\", function()\n    {\n        that.infoWindow.close();\n    } );\n}"},"renderMarker":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"config"}]},"Source":"PULSE.CLIENT.GoogleMaps.prototype.renderMarker = function( config )\n{\n    var that = this;\n\n    if ( !config || !config.longitude || !config.lat )\n    {\n        return;\n    }\n\n    var myLatlng = new google.maps.LatLng( config.lat, config.longitude ),\n        markerId = markerId,\n        pinIcon = this.pinIcon;\n\n    if ( !config.id )\n    {\n        markerId = config.longitude.toString().replace( '.', '' ) + config.lat.toString().replace(\n            '.', '' );\n    }\n    else\n    {\n        markerId = config.id;\n    }\n\n    if ( config.pinIcon )\n    {\n        pinIcon = config.pinIcon;\n    }\n\n    if ( this.markers[ markerId ] )\n    {\n        this.markers[ markerId ].marker.setMap( this.map );\n        this.markers[ markerId ].marker.setPosition( myLatlng );\n    }\n    else\n    {\n        this.markers[ markerId ] = {\n            marker: new google.maps.Marker(\n            {\n                position: myLatlng,\n                map: this.map,\n                draggable: config.draggable,\n                icon: pinIcon\n            } ),\n            info: this.infoWindow,\n            latLng: myLatlng\n        };\n        google.maps.event.addListener( this.markers[ markerId ].marker, 'click', function()\n        {\n            that.map.setCenter( that.markers[ markerId ].marker.getPosition() );\n            that.markers[ markerId ].info.open( that.map, that.markers[ markerId ].marker );\n            var windowName = '.infoWindow';\n            PULSE.CLIENT.notify( 'googleMarker/click',\n            {\n                success: true,\n                markerId: markerId,\n                mapId: that.mapId,\n                windowName: windowName\n            } );\n        } );\n\n        google.maps.event.addListener( this.markers[ markerId ].marker, 'mouseover', function()\n        {\n            PULSE.CLIENT.notify( 'googleMarker/mouseover',\n            {\n                success: true,\n                markerId: markerId,\n                mapId: that.mapId\n            } );\n        } );\n    }\n}"},"removeMarker":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"config"}]},"Source":"PULSE.CLIENT.GoogleMaps.prototype.removeMarker = function( config )\n{\n    if ( config && ( ( ( config.longitude && config.lat ) ) || config.id ) && this.markers )\n    {\n        if ( !config.id )\n        {\n            markerId = config.longitude.toString().replace( '.', '' ) + config.lat.toString().replace(\n                '.', '' );\n        }\n        else\n        {\n            markerId = config.id;\n        }\n        if ( this.markers[ markerId ] )\n        {\n            this.markers[ markerId ].marker.setMap( null );\n        }\n        else\n        {\n            return;\n        }\n    }\n    else\n    {\n        return;\n    }\n}"},"recenterMap":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"config"}]},"Source":"PULSE.CLIENT.GoogleMaps.prototype.recenterMap = function( config )\n{\n    if ( config && ( ( ( config.longitude && config.lat ) ) || config.id ) )\n    {\n        var myLatlng;\n\n        if ( !config.id )\n        {\n            var potentialId = config.longitude.toString().replace( '.', '' ) + config.lat.toString()\n                .replace( '.', '' );\n            if ( this.markers && this.markers[ potentialId ] )\n            {\n                myLatlng = this.markers[ potentialId ].marker.getPosition();\n            }\n            else\n            {\n                myLatlng = new google.maps.LatLng( config.lat, config.longitude );\n            }\n        }\n        else\n        {\n            if ( this.markers && this.markers[ config.id ] )\n            {\n                myLatlng = this.markers[ config.id ].marker.getPosition();\n            }\n        }\n        this.map.setCenter( myLatlng );\n    }\n}"},"boundMarkers":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.GoogleMaps.prototype.boundMarkers = function()\n{\n    var that = this;\n\n    if ( !this.markers )\n    {\n        return false;\n    }\n\n    var left = -180,\n        top = 85,\n        right = 180,\n        bottom = -85,\n        topRight,\n        bottomLeft,\n        bounds;\n\n    for ( key in this.markers )\n    {\n        if ( this.markers[ key ].marker.getMap() )\n        {\n            var position = this.markers[ key ].marker.getPosition(),\n                thisLong = position.lng(),\n                thisLat = position.lat();\n            if ( thisLong && thisLat )\n            {\n                if ( thisLong > left )\n                {\n                    left = thisLong;\n                }\n                if ( thisLong < right )\n                {\n                    right = thisLong;\n                }\n                if ( thisLat < top )\n                {\n                    top = thisLat;\n                }\n                if ( thisLat > bottom )\n                {\n                    bottom = thisLat;\n                }\n            }\n        }\n    }\n\n    topRight = new google.maps.LatLng( top, right );\n    bottomLeft = new google.maps.LatLng( bottom, left );\n    bounds = new google.maps.LatLngBounds( topRight, bottomLeft );\n    this.map.fitBounds( bounds );\n\n    if ( this.circle && this.searchRad )\n    {\n        this.map.fitBounds( this.circle.getBounds() );\n    }\n\n    var listener = google.maps.event.addListener( this.map, \"idle\", function()\n    {\n        if ( that.map.getZoom() > 13 )\n        {\n            that.map.setZoom( 13 );\n        }\n        google.maps.event.removeListener( listener );\n    } );\n}"},"removeAllMarkers":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.GoogleMaps.prototype.removeAllMarkers = function()\n{\n    if ( !this.markers )\n    {\n        return;\n    }\n\n    for ( key in this.markers )\n    {\n        this.markers[ key ].marker.setMap( null );\n    }\n}"},"animateMarker":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"config"}]},"Source":"PULSE.CLIENT.GoogleMaps.prototype.animateMarker = function( config )\n{\n\n    if ( config && ( ( ( config.longitude && config.lat ) ) || config.id ) && this.markers )\n    {\n        if ( !config.id )\n        {\n            markerId = config.longitude.toString().replace( '.', '' ) + config.lat.toString().replace(\n                '.', '' );\n        }\n        else\n        {\n            markerId = config.id;\n        }\n\n        for ( var key in this.markers )\n        {\n            if ( !( key === markerId ) )\n            {\n                this.markers[ key ].marker.setAnimation( null );\n            }\n        }\n\n        if ( this.markers[ markerId ] )\n        {\n            if ( this.markers[ markerId ].marker.getAnimation() != null )\n            {\n                this.markers[ markerId ].marker.setAnimation( null );\n            }\n            else\n            {\n                this.markers[ markerId ].marker.setAnimation( google.maps.Animation.BOUNCE );\n            }\n        }\n        else\n        {\n            return;\n        }\n    }\n    else\n    {\n        return;\n    }\n}"},"makeRenderRadius":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"markerId"},{"title":"param","description":null,"type":null,"name":"circleRadius"}]},"Source":"PULSE.CLIENT.GoogleMaps.prototype.makeRenderRadius = function( markerId, circleRadius )\n{\n    if ( this.markers[ markerId ] )\n    {\n        // Add circle overlay and bind to marker\n        this.circle = new google.maps.Circle(\n        {\n            map: this.map,\n            radius: circleRadius * 1609.344, // 10 miles in metres\n            fillColor: '#AA0000',\n            center: this.markers[ markerId ].latLng\n        } );\n\n        this.circle.setMap( this.map );\n\n        this.searchRad = true;\n\n        //circle.bindTo('center', this.markers[ markerId ], 'position');\n    }\n}"},"removeCircles":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.GoogleMaps.prototype.removeCircles = function()\n{\n    if ( this.circle )\n    {\n        this.circle.setMap( null );\n    }\n    this.searchRad = false;\n}"},"getLongLatFromPostcode":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"postCode"}]},"Source":"PULSE.CLIENT.GoogleMaps.prototype.getLongLatFromPostcode = function( postCode )\n{\n    var that = this;\n\n    this.geocoder.geocode(\n    {\n        'address': postCode\n    }, function( results, status )\n    {\n        if ( status == google.maps.GeocoderStatus.OK )\n        {\n            var thisLong = results[ 0 ].geometry.location.lng(),\n                thisLat = results[ 0 ].geometry.location.lat();\n            PULSE.CLIENT.notify( 'googleMaps/longLat',\n            {\n                success: true,\n                longitude: thisLong,\n                lat: thisLat,\n                mapId: that.mapId,\n                postCode: postCode\n            } );\n        }\n    } );\n}"}}},"PDK":{"Documentation":{"description":"Pulse intefacing with tP Player code (PDK), adding listeners and setting up custom events for\nthe custom HTML5 control rack.","tags":[{"title":"constructor","description":null,"type":null,"name":null}]},"Source":"PULSE.CLIENT.PDK = function()\n{\n    // Singleton access\n    if ( PULSE.CLIENT.PDK.prototype._singletonInstance )\n    {\n        return PULSE.CLIENT.PDK.prototype._singletonInstance;\n    }\n    PULSE.CLIENT.PDK.prototype._singletonInstance = this;\n\n    this.players = [];\n}","prototype":{"addPlayer":{"Documentation":{"description":"Adds a player to the PDK instance","tags":[{"title":"param","description":"Player scope to differentiate from other players on the page","type":{"type":"NameExpression","name":"String"},"name":"scope"},{"title":"param","description":"Unique media id","type":{"type":"NameExpression","name":"String"},"name":"id"},{"title":"param","description":"Options object - see player object below for params","type":{"type":"NameExpression","name":"Object"},"name":"options"}]},"Source":"PULSE.CLIENT.PDK.prototype.addPlayer = function( scope, id, options )\n{\n    options = options || {};\n\n    this.controlsTemplate = '<div class=\"mediaControls\"><div class=\"play\"><div class=\"icon media-play\"></div></div><!-- ADD CLASS media-puase TO TOGGLE MUTE BUTTON STATE --><div class=\"mute\"><div class=\"icon media-mute\"></div></div><!-- ADD CLASS media-un-mute TO TOGGLE MUTE BUTTON STATE --><div class=\"time\"><div class=\"current\">0:00</div><div class=\"divider\">&#47;</div><div class=\"scrubber\"><div id=\"slider\"></div></div><div class=\"end\">0:00</div></div><div class=\"fullScreen\"><div class=\"icon media-full-screen\"></div></div><!-- ADD CLASS media-full-screen-exit TO TOGGLE MUTE BUTTON STATE --></div>';\n\n    var tPPlayer = {\n        scope: scope,\n        id: id,\n        playing: options.playing ? options.playing : false,\n        player_time: options.player_time ? options.player_time : id +\n            ' .mediaControls .time',\n        player_mute: options.player_mute ? options.player_mute : id +\n            ' .mediaControls .mute',\n        player_play: options.player_play ? options.player_play : id +\n            ' .mediaControls .play',\n        player_length: options.player_length ? options.player_length : id + ' .length',\n        player_title: options.player_title ? options.player_title : id + ' .title',\n        player_date: options.player_date ? options.player_date : id + ' .tag',\n        player_slider: options.player_slider ? options.player_slider : id + ' #slider',\n        player_fullscreen: options.player_fullscreen ? options.player_fullscreen : id +\n            ' .fullScreen',\n        player_social : options.player_social ? options.player_social : id + ' .socialLinks'\n    };\n\n    var $player = $( id );\n\n\n\n    if ( $player.find( '.mediaControls' ).length === 0 )\n    {\n        //for ios use system controls\n        $player.append( this.controlsTemplate );\n    }\n\n    //hide controls on small ios devices as play is handled fullscreen\n    if(navigator.platform.toLowerCase().indexOf( 'iphone' ) > -1 || navigator.platform.toLowerCase().indexOf( 'ipod' ) > -1){   \n        $player.find( '.mediaControls' ).addClass( 'hide' );\n    }\n\n    //if on ipad hide the fullscreen controls until the video is actually playing\n    if(navigator.platform.toLowerCase().indexOf( 'ipad' ) > -1)\n    {\n        $player.find( '.fullScreen' ).addClass( 'hide' );\n    }\n\n    this.setSubscriptions( tPPlayer );\n    this.players.push( tPPlayer );\n\n    return tPPlayer;\n}"},"setSubscriptions":{"Documentation":{"description":"Subscribes to various events","tags":[{"title":"param","description":"Player object","type":{"type":"NameExpression","name":"Object"},"name":"player"}]},"Source":"PULSE.CLIENT.PDK.prototype.setSubscriptions = function( tPPlayer )\n{\n    var that = this;\n\n    $( tPPlayer.player_mute ).on( 'click', function()\n    {\n        if ( $( tPPlayer.id ).hasClass( 'playing' ) )\n        {\n            var scope = tPPlayer.scope ? [ tPPlayer.scope ] : undefined;\n            if ( $( tPPlayer.id ).hasClass( 'mute' ) )\n            {\n                $pdk.controller.mute( false, scope );\n                $( this ).find( \".icon\" ).removeClass( 'media-un-mute' ).addClass( 'media-mute' );\n                $( tPPlayer.id ).removeClass( 'mute' );\n            }\n            else\n            {\n                $pdk.controller.mute( true, scope );\n                $( this ).find( \".icon\" ).addClass( 'media-un-mute' ).removeClass( 'media-mute' );\n                $( tPPlayer.id ).addClass( 'mute' );\n            }\n        }\n    } );\n\n    $('body').on(PULSE.CLIENT.PDK_EVENTS.VIDEO_PLAYING, function(e){\n\n        if($(tPPlayer.id).find( '.fullScreen' ).hasClass(\"hide\"))\n        {\n                $(tPPlayer.id).find( '.fullScreen' ).removeClass(\"hide\");\n        }\n\n    });\n\n    $( tPPlayer.player_fullscreen ).on( 'click', function()\n    {\n        var scope = tPPlayer.scope ? [ tPPlayer.scope ] : undefined;\n        //before first play media player has neither playing nor paused class\n        //if( !$( tPPlayer.id ).hasClass( 'playing' ) && !$( tPPlayer.id ).hasClass( 'paused' ))\n        //{\n\n\n        if ( $( tPPlayer.id ).hasClass( 'fullscreen' ) )\n        {\n            $pdk.controller.showFullScreen( false, scope );\n\n            $( this ).find( \".icon\" ).removeClass( 'media-full-screen-exit' ).addClass(\n                'media-full-screen' );\n            $( tPPlayer.id ).removeClass( 'fullscreen' );\n\n        }\n        else\n        {\n            $pdk.controller.showFullScreen( true, scope );\n\n            $( this ).find( \".icon\" ).addClass( 'media-full-screen-exit' ).removeClass(\n                'media-full-screen' );\n            $( tPPlayer.id ).addClass( 'fullscreen' );\n        }\n\n/*        if(navigator.platform.toLowerCase().indexOf(\"ipad\") > -1)\n        {\n            $( tPPlayer.player_play ).trigger(\"click\");\n            $(tPPlayer.id).find( '.mediaControls' ).addClass(\"hide\");\n\n        }\n*/\n        //}\n    } );\n\n    $( tPPlayer.player_play ).on( 'click', function()\n    {\n        var scope = tPPlayer.scope ? [ tPPlayer.scope ] : undefined;\n\n        if ( $( tPPlayer.id ).hasClass( 'paused' ) )\n        {\n            // $( tPPlayer.id ).removeClass( 'paused' ).addClass( 'playing' );\n            // $( this ).find(\".icon\").addClass( 'media-pause' ).removeClass( 'media-play' );\n            $pdk.controller.pause( false, scope );\n\n        }\n        else if ( $( tPPlayer.id ).hasClass( 'playing' ) )\n        {\n            $( tPPlayer.id ).addClass( 'paused' ).removeClass( 'playing' );\n            $( this ).find( \".icon\" ).removeClass( 'media-pause' ).addClass(\n                'media-play' );\n            $pdk.controller.pause( true, scope );\n        }\n        else\n        {\n            //first time\n            // $( tPPlayer.id ).addClass( 'playing' );\n            // $( this ).find(\".icon\").removeClass( 'media-play' ).addClass( 'media-pause' );\n\n\n            $pdk.controller.clickPlayButton( scope );\n        }\n\n    } );\n\n    if ( typeof window.$pdk !== 'undefined' && $pdk.ready )\n    {\n        $pdk.ready( function()\n        {\n            that.setPDKListeners( tPPlayer );\n        } );\n    }\n\n    if ( $.waypoints )\n    {\n        //if it doesn't have the class playing is not gonna minifiy\n        $( tPPlayer.id ).find( '.video-scroll-trigger' ).waypoint( function( direction )\n        {\n            var video_container = $( tPPlayer.id );\n\n            if ( direction === 'up' )\n            {\n                video_container.css( 'height', \"\" );\n                video_container.removeClass( 'video-scroll-reduced' );\n            }\n            else\n            {\n                video_container.css( 'height', video_container.outerHeight() );\n                video_container.addClass( 'video-scroll-reduced' );\n            }\n        } );\n    }\n}"},"play":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"scope"}]},"Source":"PULSE.CLIENT.PDK.prototype.play = function( scope )\n{\n    for ( i = 0; i < this.players.length; i++ )\n    {\n        tPPlayer = this.players[ i ];\n        playerScope = ( tPPlayer.scope ? [ tPPlayer.scope ] : undefined );\n\n        if ( tPPlayer.scope === scope )\n        {\n            $pdk.controller.clickPlayButton( playerScope );\n        }\n    }\n}"},"pause":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"scope"}]},"Source":"PULSE.CLIENT.PDK.prototype.pause = function( scope )\n{\n    for ( i = 0; i < this.players.length; i++ )\n    {\n        tPPlayer = this.players[ i ];\n        playerScope = ( tPPlayer.scope ? [ tPPlayer.scope ] : undefined );\n\n        if ( tPPlayer.scope === scope )\n        {\n            if ( $( tPPlayer.id ).hasClass( 'playing' ) )\n            {\n                $( tPPlayer.id ).addClass( 'paused' ).removeClass( 'playing' );\n                $( this ).find( \".icon\" ).removeClass( 'media-pause' ).addClass(\n                    'media-play' );\n                $pdk.controller.pause( true, playerScope );\n            }\n        }\n    }\n}"},"stop":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"scope"}]},"Source":"PULSE.CLIENT.PDK.prototype.stop = function( scope )\n{\n    for ( i = 0; i < this.players.length; i++ )\n    {\n        tPPlayer = this.players[ i ];\n        playerScope = ( tPPlayer.scope ? [ tPPlayer.scope ] : undefined );\n\n        if ( tPPlayer.scope === scope )\n        {\n            $pdk.controller.endCurrentRelease( playerScope );\n        }\n    }\n}"},"setPDKListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"tPPlayer"}]},"Source":"PULSE.CLIENT.PDK.prototype.setPDKListeners = function( tPPlayer )\n{\n    var that = this;\n    $( tPPlayer.player_slider ).slider();\n    $( tPPlayer.player_time + ' .ui-slider-handle' ).mousedown( function()\n    {\n        if ( $( tPPlayer.id ).hasClass( 'playing' ) )\n        {\n            // $( tPPlayer.id ).addClass( 'paused' );\n            // $( tPPlayer.player_mute ).find(\".icon\").removeClass( 'media-play' ).addClass( 'media-pause' );\n            $pdk.controller.pause( true, ( tPPlayer.scope ? [ tPPlayer.scope ] :\n                undefined ) );\n        }\n    } );\n\n    $( tPPlayer.player_time + ' .ui-slider-handle' ).mouseup( function()\n    {\n        var percentage_of_x = $( tPPlayer.player_slider ).slider( \"value\" );\n        $pdk.controller.seekToPercentage( percentage_of_x, ( tPPlayer.scope ? [\n                tPPlayer.scope ] :\n            undefined ) );\n        // $( tPPlayer.player_mute ).find(\".icon\").removeClass( 'media-play' ).addClass( 'media-pause' );\n        // $( tPPlayer.id ).removeClass( 'paused' );\n        $pdk.controller.pause( false, ( tPPlayer.scope ? [ tPPlayer.scope ] : undefined ) );\n    } );\n\n    $pdk.controller.addEventListener( 'OnReleaseEnd', function()\n    {\n        $( 'body' ).trigger( PULSE.CLIENT.PDK_EVENTS.VIDEO_END,\n        {\n            scope: tPPlayer.scope\n        } );\n        that.releaseEnd( tPPlayer );\n    }, ( tPPlayer.scope ? [ tPPlayer.scope ] : undefined ) );\n\n    $pdk.controller.addEventListener( 'OnMediaPlaying', function( e, r )\n    {\n        $( 'body' ).trigger( PULSE.CLIENT.PDK_EVENTS.VIDEO_PLAYING,\n        {\n            scope: tPPlayer.scope\n        } );\n        that.mediaPlaying( tPPlayer, e );\n    }, ( tPPlayer.scope ? [ tPPlayer.scope ] : undefined ) );\n\n    $pdk.controller.addEventListener(\"OnMediaLoadStart\", function( e ){\n        $( 'body' ).trigger( PULSE.CLIENT.PDK_EVENTS.VIDEO_LOADED, { scope: tPPlayer.scope, media : e } );\n    }, ( tPPlayer.scope ? [ tPPlayer.scope ] : undefined ) );\n\n    if ( PULSE.CLIENT.isTest && PULSE.CLIENT.isTest() )\n    {\n        $pdk.controller.addEventListener( \"OnMediaLoadStart\", function( e )\n        {\n            that.overrideGeoLocationMessage( e, tPPlayer );\n        }, ( tPPlayer.scope ? [ tPPlayer.scope ] : undefined ) );\n    }\n\n    /**\n     * Required for cases where full screen on or off gets triggered by something else other than\n     * Pulse controls, so we have to listen for the event and react accordingly\n     */\n    $pdk.controller.addEventListener( 'OnShowFullScreen', function( e, r )\n    {\n        if ( e.data )\n        {\n            $( tPPlayer.player_fullscreen ).find( \".icon\" )\n                .addClass( 'media-full-screen-exit' )\n                .removeClass( 'media-full-screen' );\n            $( tPPlayer.id ).addClass( 'fullscreen' );\n        }\n        else\n        {\n            $( tPPlayer.player_fullscreen ).find( \".icon\" )\n                .removeClass( 'media-full-screen-exit' )\n                .addClass( 'media-full-screen' );\n            $( tPPlayer.id ).removeClass( 'fullscreen' );\n        }\n    }, ( tPPlayer.scope ? [ tPPlayer.scope ] : undefined ) );\n}"},"overrideGeoLocationMessage":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"event"},{"title":"param","description":null,"type":null,"name":"tPPlayer"}]},"Source":"PULSE.CLIENT.PDK.prototype.overrideGeoLocationMessage = function( event, tPPlayer )\n{\n    // tbd\n}"},"releaseEnd":{"Documentation":{"description":"Called on reaching the end of a given video to hide controls","tags":[{"title":"param","description":"Player object","type":{"type":"NameExpression","name":"Object"},"name":"tPPlayer"}]},"Source":"PULSE.CLIENT.PDK.prototype.releaseEnd = function( tPPlayer )\n{\n    $( tPPlayer.id ).removeClass( 'playing' );\n    $( tPPlayer.player_play ).find( \".icon\" ).removeClass( 'media-pause' ).addClass(\n        'media-play' );\n    $( tPPlayer.player_time ).find( '.current' ).text( '0:00' );\n    $( tPPlayer.player_time ).find( '.end' ).text( '0:00' );\n    $( tPPlayer.player_time ).find( '.ui-slider-handle' ).css( 'left', '0%' );\n    // $( tPPlayer.id ).find( '.mediaControls' ).hide();\n}"},"mediaPlaying":{"Documentation":{"description":"Set a given player to be a 'playing' state","tags":[{"title":"param","description":"Player object","type":{"type":"NameExpression","name":"Object"},"name":"tPPlayer"},{"title":"param","description":"Event object","type":{"type":"NameExpression","name":"Object"},"name":"e"}]},"Source":"PULSE.CLIENT.PDK.prototype.mediaPlaying = function( tPPlayer, e )\n{\n    var id = tPPlayer.id && tPPlayer.id.search( '#' ) < 0 ? '#' + tPPlayer.id : tPPlayer.id;\n    $( tPPlayer.id ).removeClass( 'paused' ).addClass( 'playing' );\n    $( tPPlayer.player_play ).find( \".icon\" ).removeClass( 'media-play' ).addClass(\n        'media-pause' );\n    // $( tPPlayer.id ).find( '.mediaControls' ).show();\n    var current_min = ( e.data.currentTime / 1000 / 60 ) << 0;\n    // if (current_min < 10){ current_min = (\"0\" + current_min).slice(-2) };\n    var current_sec = ( ( e.data.currentTime / 1000 ) % 60 ) << 0;\n    if ( current_sec < 10 )\n    {\n        current_sec = ( \"0\" + current_sec ).slice( -2 )\n    };\n    var total_min = ( e.data.duration / 1000 / 60 ) << 0;\n    // if (total_min < 10){ total_min = (\"0\" + total_min).slice(-2) };\n    var total_sec = ( ( e.data.duration / 1000 ) % 60 ) << 0;\n    if ( total_sec < 10 )\n    {\n        total_sec = ( \"0\" + total_sec ).slice( -2 )\n    };\n    $( tPPlayer.player_time ).find( '.current' ).text( current_min + ':' + current_sec );\n    $( tPPlayer.player_time ).find( '.end' ).text( total_min + ':' + total_sec );\n    $( tPPlayer.player_time ).find( '.ui-slider-handle' ).css( 'left', e.data.percentComplete +\n        '%' );\n}"},"fullScreen":{"Documentation":{"description":"Used to make a given player fullscreen","tags":[{"title":"param","description":"Player object","type":{"type":"NameExpression","name":"Object"},"name":"tPPlayer"},{"title":"param","description":"Container","type":{"type":"NameExpression","name":"Object"},"name":"that"}]},"Source":"PULSE.CLIENT.PDK.prototype.fullScreen = function( tPPlayer, playerContainer )\n{\n    $( tPPlayer.player_fullscreen ).find( \".icon\" ).toggleClass(\n        'media-full-screen media-full-screen-exit' );\n    $( tPPlayer.id ).find( '.mediaControls' ).toggle( function()\n    {\n        $( playerContainer ).css( 'z-index', '' );\n    }, function()\n    {\n        $( playerContainer ).css( 'z-index', '600000000000' );\n        $( playerContainer ).show();\n    } );\n    $( tPPlayer.id ).toggleClass( 'fullscreen' );\n}"},"setVideo":{"Documentation":{"description":"Sets the video in players with a given scope on the page","tags":[{"title":"param","description":"Player scope to determine which players on the page to set the video for","type":{"type":"NameExpression","name":"String"},"name":"scope"},{"title":"param","description":"Unique media id","type":{"type":"NameExpression","name":"String"},"name":"newMedia"},{"title":"param","description":"Duration of the given media content","type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"String"},{"type":"NameExpression","name":"Number"}]},"name":"duration"},{"title":"param","description":"Title of the given media content","type":{"type":"NameExpression","name":"String"},"name":"title"},{"title":"param","description":"How long ago the media was created","type":{"type":"NameExpression","name":"String"},"name":"daysAgo"},{"title":"param","description":"Boolean to determine whether the video should autoplay","type":{"type":"NameExpression","name":"Boolean"},"name":"autoplay"}]},"Source":"PULSE.CLIENT.PDK.prototype.setVideo = function( scope, newMedia, duration, title, daysAgo, autoplay, hideSocial )\n{\n    var setterFunction = autoplay ? 'setReleaseURL' : 'loadReleaseURL',\n        i, tPPlayer, playerScope;\n\n    for ( i = 0; i < this.players.length; i++ )\n    {\n        tPPlayer = this.players[ i ];\n        playerScope = ( tPPlayer.scope ? [ tPPlayer.scope ] : undefined );\n\n        if ( tPPlayer.scope === scope )\n        {\n            $pdk.controller[ setterFunction ]( newMedia, true, playerScope );\n\n            $( tPPlayer.player_length ).text( duration );\n            $( tPPlayer.player_title ).text( title );\n            $( tPPlayer.player_date ).text( daysAgo );\n            if ( hideSocial )\n            {\n                $( tPPlayer.player_social ).hide();\n            }\n        }\n    }\n}"},"setVideoDetails":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"scope"},{"title":"param","description":null,"type":null,"name":"duration"},{"title":"param","description":null,"type":null,"name":"title"},{"title":"param","description":null,"type":null,"name":"daysAgo"},{"title":"param","description":null,"type":null,"name":"hideSocial"}]},"Source":"PULSE.CLIENT.PDK.prototype.setVideoDetails = function( scope, duration, title, daysAgo, hideSocial )\n{\n    var i, player, playerScope;\n\n    for( i = 0; i < this.players.length; i++ )\n    {\n        player = this.players[ i ];\n        playerScope = ( player.scope ? [ player.scope ] : undefined );\n\n        if( player.scope === scope )\n        {\n            $( player.player_length ).text( duration );\n            $( player.player_title ).text( title );\n            $( player.player_date ).text( daysAgo );\n            if ( hideSocial )\n            {\n                $( player.player_social ).hide();\n            }\n        }\n    }\n}"}}},"TwitterFeed":{"Documentation":{"description":"Works off a twitter feed and displays the tweets for it\n Dependent on the Twitter module (PULSE.CLIENT.Twitter from Twitter.js)","tags":[]},"Source":"PULSE.CLIENT.TwitterFeed = function ( container, config, active )\n{\n    config = config || {};\n\n    this.$container = $( container );\n    this.config = config;\n    this.account = config.account;\n    this.maxTweets = config.maxTweets;\n    this.interval = config.interval;\n    this.twitter = PULSE.CLIENT.getTwitterInstance();\n    this.callback = config.callback;\n    this.errorCallback = config.errorCallback;\n    this.active = active;\n    this.tweet_containerid = config.custom_containerid || '#tweets';\n\n    this.templates = {\n        latestTweets: config.template || \"templates/twitter/tweet-list.html\"\n    };\n\n    this.setSubscriptions();\n\n    if( this.active )\n    {\n        this.getData();\n    }\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.TwitterFeed.prototype.setSubscriptions"}]},"Source":"PULSE.CLIENT.TwitterFeed.prototype.setSubscriptions = function()\n{\n    var that = this;\n    $('body').on( PULSE.CLIENT.RUGBY.TWITTER_EVENTS.LIST, function( e, params )\n    {\n        // check if the received notification's for the right account\n        if( params.name === that.account )\n        {\n            if( params.success )\n            {\n                if( that.active )\n                {\n                    // only update active elements\n                    that.update();\n                }\n            }\n            else\n            {\n                that.errorCallback();\n            }\n        }\n    } );\n}"},"getData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"start"}]},"Source":"PULSE.CLIENT.TwitterFeed.prototype.getData = function( start )\n{\n    this.twitter.getList( this.account, {\n        fileName:   this.config.fileName,\n        start:      this.config.start || start,\n        interval:   this.config.interval,\n        targets:    this.config.targets\n    } );\n}"},"update":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.TwitterFeed.prototype.update = function()\n{\n    var that    = this,\n        model   = this.twitter.getTweetsListModel( this.account, this.maxTweets ),\n        tweets_container = this.$container.find( this.tweet_containerid );\n\n    PULSE.CLIENT.Template.publish(\n        this.templates.latestTweets,\n        tweets_container,\n        model,\n        function()\n        {\n            if( that.callback )\n            {\n                that.callback();\n            }\n            if( that.timeRefresh )\n            {\n                that.stopRefresh();\n            }\n        }\n    );\n\n    this.timeRefresh = setInterval( function()\n    {\n        var model = that.twitter.getTweetsListModel( that.account, that.maxTweets );\n        for( var i = 0, iLimit = model.tweets.length; i < iLimit; i++ )\n        {\n            var tweet = model.tweets[i],\n                timeString = tweet.timestamp;\n\n            that.$container.find( '.time' ).eq( i )\n                    .empty()\n                    .append( $('<i class=\"icon\">').text('') )\n                    .append( tweet.timestamp );\n        }\n    }, 60000 );\n}"},"stopRefresh":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.TwitterFeed.prototype.stopRefresh = function()\n{\n    clearInterval( this.timeRefresh );\n}"},"activate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.TwitterFeed.prototype.activate = function()\n{\n    this.active = true;\n    this.getData( true );\n    this.$container.show();\n}"},"deactivate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.TwitterFeed.prototype.deactivate = function()\n{\n    this.active = false;\n    this.stopRefresh();\n    this.$container.hide();\n}"}}},"I18N":{"Translator":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.I18N.Translator"},{"title":"param","description":null,"type":null,"name":"translationsData"}]},"Source":"PULSE.CLIENT.I18N.Translator = function( translationsData )\n{\n    this.hasTranslations = false;\n    this.language = PULSE.CLIENT.LANGUAGE;\n\n    if( translationsData )\n    {\n        this.hasTranslations = true;\n        if( this.language !== translationsData.language )\n        {\n            if( translationsData.language == undefined ) debugger;\n            console.log( 'Language mismatch! Using ' + translationsData.language );\n            this.language = translationsData.language;\n        }\n\n        this.translations = translationsData.translations || {};\n        this.hasTranslations = true;\n    }\n    else\n    {\n        this.hasTranslations = false;\n        this.translations = {};\n    }\n}","prototype":{"lookup":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"key"},{"title":"param","description":null,"type":null,"name":"replaceMap"}]},"Source":"PULSE.CLIENT.I18N.Translator.prototype.lookup = function( key, replaceMap )\n{\n    if( key )\n    {\n        var mapping = this.lookupKey( key );\n        if( replaceMap )\n        {\n            for( var replaceKey in replaceMap )\n            {\n                var regExp = new RegExp( \"\\\\${\" + replaceKey + \"}\", \"gi\" );\n                mapping = mapping.replace( regExp, replaceMap[ replaceKey ] );\n            }\n        }\n\n        return mapping;\n    }\n\n    return \"\";\n}"},"lookupKey":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"key"}]},"Source":"PULSE.CLIENT.I18N.Translator.prototype.lookupKey = function( key )\n{\n    if( this.hasTranslations )\n    {\n        return this.translations[ key ] || key;\n    }\n    else\n    {\n        return key;\n    }\n}"}}},"EnOverride":{"Documentation":{"description":"The default 'en' locale is overridden with the formats we need for dates","tags":[]},"Source":"PULSE.CLIENT.I18N.EnOverride = function()\n{\n    moment.locale( 'en',\n    {\n        longDateFormat : {\n            LT: \"HH:mm\",\n            // LT: \"h:mm A\",\n            LTS: \"h:mm:ss A\",\n            l : 'DD/MM',\n            L: \"DD/MM/YYYY\",\n            ll: 'D MMMM',\n            LL: \"D MMMM YYYY\",\n            lll: \"MMM D YYYY LT\",\n            LLL: \"MMMM Do YYYY LT\",\n            llll: \"ddd MMM D YYYY\",\n            LLLL: \"dddd, MMMM Do YYYY\"\n        },\n        yearFirst: false\n    } );\n}"}},"CometdClient":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.CometdClient"}]},"Source":"PULSE.CLIENT.CometdClient = function() {\n\tthis.cometd = $.cometd;\n\tthis._connected = false;\n\tthis._handshake = false;\n\tthis._subscriptions = [];\n\tthis.init();\n\t//Register the unload to envoke the disconnect.\n\t$(window).unload( function() { if (this.cometdClient) { this.cometdClient.disconnect( ); } } );\n}","prototype":{"init":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.CometdClient.prototype.init = function() {\n\t//TODO could externalise the URL?\n\tvar cometURL = \"http://localhost:8082\" + \"/kuiper/cometd\";\n\tthis.cometd.configure({\n\t\turl : cometURL,\n\t\tlogLevel : 'info'\n\t});\n\n\tthis.cometd.addListener('/meta/handshake', this, this._metaHandshake);\n\tthis.cometd.addListener('/meta/connect', this, this._metaConnect);\n\t\n\t// Enable WebSockets\n\tthis.cometd.websocketEnabled = true;\n\tthis.cometd.handshake();\n\t\n}"},"_metaConnect":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"message"}]},"Source":"PULSE.CLIENT.CometdClient.prototype._metaConnect = function(message) {\n\n\tif (this.cometd.isDisconnected()) {\n\t\tthis._connected = false;\n\t\tthis._handshake = false;\n\t\tthis._connectionClosed();\n\t\treturn;\n\t}\n\n\tvar wasConnected = this._connected;\n\n\tthis._connected = message.successful === true;\n\tif (!wasConnected && this._connected) {\n\n\t\tthis._connectionEstablished();\n\n\t} else if (wasConnected && !this._connected) {\n\t\tthis._handshake = false;\n\t\tthis._connectionBroken();\n\t}\n\n}"},"_metaHandshake":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"handshake"}]},"Source":"PULSE.CLIENT.CometdClient.prototype._metaHandshake = function(handshake) {\n\n\tif (handshake.successful === true) {\n\t\t\n\t\tconsole.log('Handshake Successful');\n\t\t\n\t\tthis._handshake = true;\n\t\t\n\t\t// Subscribe to any channels if they exist\n\t\tif (this._subscriptions.length > 0) {\n\t\t\tvar resubscriptions = this._subscriptions;\n\t\t\tthis._subscriptions = [];\n\t\t\tthis.subscribe(resubscriptions);\n\t\t}\n\t}\n}"},"subscribe":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"subscriptions"}]},"Source":"PULSE.CLIENT.CometdClient.prototype.subscribe = function(subscriptions) {\n\t\n\t\tthis.subscriptions = subscriptions;\n\t\t\n\t\tthis.cometd.batch(this, function() {\n\t\t\t\n\t\t\tfor ( var i = 0; i < this.subscriptions.length; i++ ) {\n\t\t\t\t\t\n\t\t\t\t\tvar subscription = this.subscriptions[i];\n\t\t\t\t\tconsole.log('subscribing to : ' + subscription.channel);\n\t\t\t\t\tthis.cometd.subscribe(subscription.channel, subscription.callback);\n\t\t\t\t\t\n\t\t\t\t\t// Keep track of subscriptions so we can re-subscribe if the connection ever breaks\n\t\t\t\t\tthis._subscriptions.push(subscription);\n\t\t\t\t}\n\t\t});\n}"},"_connectionEstablished":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.CometdClient.prototype._connectionEstablished = function() {\n\tconsole.log('Connection Established');\n}"},"_connectionBroken":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.CometdClient.prototype._connectionBroken = function() {\n\tconsole.log('Connection Broken');\n}"},"_connectionClosed":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.CometdClient.prototype._connectionClosed = function() {\n\tconsole.log('Connection Closed');\n}"},"disconnect":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.CometdClient.prototype.disconnect = function() {\n\tthis.cometd.disconnect(true);\n}"}}},"Cookie":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.Cookie"},{"title":"param","description":null,"type":null,"name":"c_name"}]},"Source":"PULSE.CLIENT.Cookie = function( c_name )\n{\n\tthis.c_name = c_name || '';\n\tthis.c_value;\n\tthis.ex_minutes = 1 * 60 * 24 * 100; // 100 days by default\n\tthis.json = {};\n\tthis.kojson = {};\t\t\t\t\t//optional - used to convert to and from knockoutjs variables\n}","prototype":{"setName":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"newName"}]},"Source":"PULSE.CLIENT.Cookie.prototype.setName = function( newName )\n{\n\tthis.c_name = newName;\n}"},"setValue":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"newValue"}]},"Source":"PULSE.CLIENT.Cookie.prototype.setValue = function( newValue )\n{\n\tthis.c_value = newValue;\n}"},"setExpireMinutes":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"newValue"}]},"Source":"PULSE.CLIENT.Cookie.prototype.setExpireMinutes = function( newValue )\n{\n\tthis.ex_minutes = newValue;\n}"},"getCookie":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.Cookie.prototype.getCookie = function()\n{\n\tvar c_name = this.c_name;\n\treturn this.getCookieByKey( c_name );\n}"},"setCookie":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.Cookie.prototype.setCookie = function()\n{\n\tvar c_name = this.c_name;\n\tvar value = this.c_value;\n\tvar ex_minutes = this.ex_minutes;\n\tvar extime = new Date( );\n\textime.setTime( extime.getTime( ) + ( ex_minutes * 60 * 1000 ) );\n\tvar c_value = escape( value )\n\t\t\t+ ( ( ex_minutes == null ) ? \"\" : \"; expires=\"\n\t\t\t\t\t+ extime.toUTCString( ) );\n\tdocument.cookie = c_name + \"=\" + c_value;\n}"},"saveJSON":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"object"}]},"Source":"PULSE.CLIENT.Cookie.prototype.saveJSON = function( object )\n{\n\tthis.c_value = $.toJSON( object )\n\tthis.setCookie( );\n}"},"retiveJSON":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.Cookie.prototype.retiveJSON = function( )\n{\n\tvar jsonString = this.getCookie();\n\tif( jsonString )\n\t{\n\t\tthis.json = $.evalJSON( jsonString );\n\t}\n\treturn this.json;\n}"}}},"DataManager":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.DataManager"}]},"Source":"PULSE.CLIENT.DataManager = function ()\n{\n\tthis.timers = {};\n\tthis.callbacks = {};\n\tthis.lastdata = {};\n\tthis.savedTargets = {};\n}","prototype":{"addFeed":{"Documentation":{"description":"Note that the interval is in SECONDS, and will be multiplied by 1000 to derive a millisecond\nvalue.","tags":[]},"Source":"PULSE.CLIENT.DataManager.prototype.addFeed = function ( id, url, interval, callback, targets )\n{\n    var currentTargets = this.savedTargets[id] || [];\n    \n\t// Remove any existing feed with this ID\n\tthis.removeFeed( id );\n\n\t// Save the callback name\n\tthis.callbacks[id] = callback;\n    \n    // Add all the targets to the current targets\n    for ( var i = 0, limit = targets.length; i < limit; i++ )\n    {\n        var needToAdd = true;\n        for ( var j = 0, jLimit = currentTargets.length; j < jLimit; j++ )\n        {\n            if ( targets[ i ] === currentTargets[ j ] )\n            {\n                needToAdd = false;\n                break;\n            }\n        }\n        if ( needToAdd )\n        {\n            currentTargets.push( targets[ i ] );\n        }\n    }\n    \n    this.savedTargets[id] = currentTargets;\n\t\n\t// Dynamically create the callback method\n\tvar that = this;\n\twindow[callback] = function ( jsonpData )\n\t{\n\t\tif ( jsonpData )\n\t\t{\n\t\t\tvar payload = jsonpData;\n\t\t\t\n\t\t\t// Serialise the payload\n\t\t\tvar serialised = $.toJSON( payload );\n\t\t    if ( that.lastdata[id] !== serialised )\n\t\t    {\n\t\t    \t// Save the new data\n\t\t    \tthat.lastdata[id] = serialised;\n\t\t\t\t\n\t\t\t\t// Pass the data to all of the targets...\n\t\t\t\tfor ( var t = 0, tlimit = currentTargets.length; t < tlimit; t++ )\n\t\t\t\t{\n\t\t\t\t\t// ...if they are valid\n\t\t\t\t\tvar target = currentTargets[t];\n\t\t\t\t\tif ( target && target.onData )\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget.onData( payload, id );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t    }\n\t\t}\n\t};\n\t\n\t// Create the timer\n\tthis.timers[id] = new PULSE.CLIENT.NewJSONPTimer( url, interval * 1000 );\n}"},"startAll":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.DataManager.prototype.startAll = function ()\n{\n\tfor ( var id in this.timers )\n\t{\n\t\tthis.start( id );\n\t}\n}"},"stopAll":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.DataManager.prototype.stopAll = function ()\n{\n\tfor ( var id in this.timers )\n\t{\n\t\tthis.stop( id );\n\t}\n}"},"start":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"PULSE.CLIENT.DataManager.prototype.start = function ( id )\n{\n\tif ( this.timers[id] )\n\t{\n\t\tthis.timers[id].start();\n\t}\n}"},"stop":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"PULSE.CLIENT.DataManager.prototype.stop = function ( id )\n{\n\tif ( this.timers[id] )\n\t{\n\t\tthis.timers[id].stop();\n\t}\n}"},"removeFeed":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"PULSE.CLIENT.DataManager.prototype.removeFeed = function ( id )\n{\n\tthis.stop( id );\n\t\n\tif ( this.timers[id] )\n\t{\n\t\tthis.timers[id] = undefined;\n\t}\n\t\n\tif ( window[ this.callbacks[id] ] )\n\t{\n\t\twindow[ this.callbacks[id] ] = undefined;\n\t}\n\t\n\tif ( this.lastdata[id] )\n\t{\n\t\tthis.lastdata[id] = undefined;\n\t}\n\t\n\tif ( this.savedTargets[id] )\n\t{\n\t    this.savedTargets[id] = undefined;\n\t}\n}"}}},"DateUtil":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.DateUtil"}]},"Source":"PULSE.CLIENT.DateUtil = function()\n{}","parseDateTime":{"Documentation":{"description":"Takes a date string ( supports 'yyyy-mm-dd' & 'yyyy-mm-ddTHH:MM:SS+0100' formats ) as a parameter","tags":[{"title":"param","description":"ISO 8601 date string","type":{"type":"NameExpression","name":"String"},"name":"dateStr"},{"title":"return","description":"JavaScript date object","type":{"type":"NameExpression","name":"Date"}}]},"Source":"PULSE.CLIENT.DateUtil.parseDateTime = function( dateStr )\n{\n    if( !dateStr )\n    {\n        return;\n    }\n\n    var date = new Date( dateStr );\n\n    if( isDateValid( date ) )\n    {\n        return date;\n    }\n    else\n    {\n        var dateTime = dateStr.split('T');\n        if ( dateTime.length === 1 )\n        {\n            return new Date( dateTime[0].replace( /\\-/g, '/' ) );\n        }\n        else if ( dateTime.length === 2 )\n        {\n            // we only want to replace the hyphens of date bit (there might be hypens(minus) as in GMT-0200)\n            var aDate1 = dateTime[0].replace( /\\-/g, '/' );\n            var aDate2 = dateTime[1];\n            var newDate = aDate1 + ' ' + aDate2;\n\n            date = new Date( newDate );\n        }\n\n        if( isDateValid( date ) )\n        {\n            return date;\n        }\n        else\n        {\n            window.console.log( 'Invalid Date String ' + dateStr );\n        }\n    }\n}"},"getMonth":{"Documentation":{"description":"Takes a valid date object and returns the month either full name or partial,\nbased on fullName boolean flag","tags":[]},"Source":"PULSE.CLIENT.DateUtil.getMonth = function( dateObj, fullName )\n{\n    var monthNames = [\n            \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\",\n            \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ];\n\n    var month = dateObj.getMonth();\n\n    if ( fullName )\n    {\n        month = month + PULSE.CLIENT.DateUtil.MONTHS_IN_A_YEAR;\n    }\n\n    return monthNames[ month ];\n}"},"getMonthNumber":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"date"}]},"Source":"PULSE.CLIENT.DateUtil.getMonthNumber = function(date)\n{\n    var month = date.getMonth() + 1;\n\n    if (month < 10) {\n\n        return '0' + month;\n    }\n    return month;\n}"},"getDaysAgo":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"stamp"}]},"Source":"PULSE.CLIENT.DateUtil.getDaysAgo = function(stamp)\n{\n    var timeStamp = parseInt(stamp.toString().replace(/,/g ,'')),\n                dateObject = new Date( timeStamp ),\n                thisDate = new Date(Date.now()),\n                difference = thisDate.getTime() - dateObject.getTime(),\n                diffSecs,\n                diffMins,\n                diffHours,\n                diffDays,\n                timeAgo = '';\n\n            diffSecs =  Math.round(difference / (1000));\n            diffMins = Math.round(difference / (1000 * 60));\n            diffHours = Math.round(difference / (1000 * 3600));\n            diffDays = Math.round(difference / (1000 * 3600 * 24));\n\n            if (diffSecs < 60)\n            {\n                if (diffSecs < 1)\n                {\n                    timeAgo = diffSecs + ' secs ago';\n                }\n                else\n                {\n                    timeAgo = diffSecs + ' sec ago';\n                }\n            }\n            else if (diffMins < 60)\n            {\n                if (diffMins > 1)\n                {\n                    timeAgo = diffMins + ' mins ago';\n                }\n                else\n                {\n                    timeAgo = diffMins  + ' min ago';\n                }\n            }\n            else if (diffHours < 24)\n            {\n                if (diffHours > 1)\n                {\n                    timeAgo = diffHours + ' hours ago';\n                }\n                else\n                {\n                    timeAgo = diffHours + ' hour ago';\n                }\n            }\n            else\n            {\n                if (diffDays > 1)\n                {\n                    timeAgo = diffDays + ' days ago';\n                }\n                else\n                {\n                    timeAgo = diffDays + ' day ago';\n                }\n            }\n\n        return timeAgo;\n}"},"getFullMonthFromShort":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"monthShort"}]},"Source":"PULSE.CLIENT.DateUtil.getFullMonthFromShort = function(monthShort)\n{\n    monthFull = '';\n        switch(monthShort)\n    {\n        case ('Jan'):\n            monthFull = 'January';\n            break;\n        case ('Feb'):\n            monthFull = 'February';\n            break;\n        case ('Mar'):\n            monthFull = 'March';\n            break;\n        case ('Apr'):\n            monthFull = 'April';\n            break;\n        case ('May'):\n            monthFull = 'May';\n            break;\n        case ('Jun'):\n            monthFull = 'June';\n            break;\n        case ('Jul'):\n            monthFull = 'July';\n            break;\n        case ('Aug'):\n            monthFull = 'August';\n            break;\n        case ('Sep'):\n            monthFull = 'September';\n            break;\n        case ('Oct'):\n            monthFull = 'October';\n            break;\n        case ('Nov'):\n            monthFull = 'November';\n            break;\n        case ('Dec'):\n            monthFull = 'December';\n            break;\n        default:\n            monthFull = undefined;\n    }\n\n    return monthFull;\n\n}"},"getWeekDay":{"Documentation":{"description":"Takes a valid date object and returns the week day either full name or partial,\nbased on fullName boolean flag","tags":[]},"Source":"PULSE.CLIENT.DateUtil.getWeekDay = function( dateObj, fullName )\n{\n    var dayNames = [\n            \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\",\n            \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\" ];\n\n    var day = dateObj.getDay();\n\n    if ( fullName )\n    {\n        day = day + PULSE.CLIENT.DateUtil.DAYS_IN_A_WEEK;\n    }\n\n    return dayNames[ day ];\n}"},"getDayNumber":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"date"}]},"Source":"PULSE.CLIENT.DateUtil.getDayNumber = function(date)\n{\n    var day = date.getDate();\n\n    if (day < 10) {\n\n        return '0' + day;\n    }\n\n    return day;\n}"},"getDate":{"Documentation":{"description":"Takes a valid date object and returns the date with or without suffix,\nbased on withSuffix boolean flag","tags":[]},"Source":"PULSE.CLIENT.DateUtil.getDate = function( dateObj, withSuffix )\n{\n    var d = dateObj.getDate();\n\n    if ( withSuffix )\n    {\n        return d + [\"th\", \"st\", \"nd\", \"rd\"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10];\n    }\n\n    return d;\n}"},"calcTimeByOffset":{"Documentation":{"description":"Takes a valid date object and returns the date-time string after taking\ncare of timezone offset","tags":[]},"Source":"PULSE.CLIENT.DateUtil.calcTimeByOffset = function( dateObj, offset )\n{\n    // convert to msec\n    // add local time zone offset\n    // get UTC time in msec\n    var localTime       = dateObj.getTime(),\n        timezoneOffset  = dateObj.getTimezoneOffset() * 60000;\n\n    var utc = localTime + timezoneOffset;\n\n    // create new Date object for different city\n    // using supplied offset\n    var utcDate = new Date ( utc );\n    var convertedDate = new Date( utc + ( 3600000 * offset ) );\n\n    var time = convertedDate.getHours() + ':' + (convertedDate.getMinutes() + '' < '10' ? '0' : '' ) + convertedDate.getMinutes()\n\n    // return date and time in a object\n    return {\n        date : convertedDate.toLocaleDateString(),\n        time : time\n    };\n}"},"getUtcDateObject":{"Documentation":{"description":"Gets a date object (corresponding to the local time and date) and returns\nthe UTC date object","tags":[]},"Source":"PULSE.CLIENT.DateUtil.getUtcDateObject = function convertDateToUTC( date )\n{\n    return new Date(\n        date.getUTCFullYear(),\n        date.getUTCMonth(),\n        date.getUTCDate(),\n        date.getUTCHours(),\n        date.getUTCMinutes(),\n        date.getUTCSeconds()\n    );\n}"},"getUtcTime":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"dateStr"}]},"Source":"PULSE.CLIENT.DateUtil.getUtcTime = function ( dateStr )\n{\n    // parseDateTime gives you local date-time\n    var matchDate   = PULSE.CLIENT.DateUtil.parseDateTime( dateStr );\n\n    if ( matchDate )\n    {\n        var utcDate                 = PULSE.CLIENT.DateUtil.getUtcDateObject( matchDate ),\n            formattedUTCDateTime    = dateFormat( utcDate, 'dddd mmmm dS yyyy|HH:MM| Z' ).split( \"|\" ),\n            utcTime                 = formattedUTCDateTime[1];\n\n        return utcTime;\n    }\n}"},"getTimeFromTimestamp":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"dateStr"},{"title":"param","description":null,"type":null,"name":"offset"},{"title":"param","description":null,"type":null,"name":"timeFormat"}]},"Source":"PULSE.CLIENT.DateUtil.getTimeFromTimestamp = function ( dateStr, offset, timeFormat )\n{\n    // Default values\n    if( !offset )\n    {\n        offset = 0;\n    }\n    if( !timeFormat )\n    {\n        timeFormat = \"HH:MM\";\n    }\n\n    // parseDateTime gives you local date-time\n    var matchDate   = PULSE.CLIENT.DateUtil.parseDateTime( dateStr ),\n        offsetDate  = matchDate ? new Date( matchDate.getTime() + ( 3600000 * offset ) ) : undefined;\n\n    if ( offsetDate )\n    {\n        var utcDate           = PULSE.CLIENT.DateUtil.getUtcDateObject( offsetDate ),\n            formattedDateTime = dateFormat( utcDate, 'dddd mmmm dS yyyy|' + timeFormat + '| Z' ).split( \"|\" ),\n            utcTime           = formattedDateTime[1];\n\n        return utcTime;\n    }\n}"},"getDateFromTimestamp":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"dateStr"},{"title":"param","description":null,"type":null,"name":"offset"},{"title":"param","description":null,"type":null,"name":"desiredFormat"}]},"Source":"PULSE.CLIENT.DateUtil.getDateFromTimestamp = function ( dateStr, offset, desiredFormat )\n{\n    // Default values\n    if( !offset )\n    {\n        offset = 0;\n    }\n    if( !desiredFormat )\n    {\n        desiredFormat = 'dd mmmm yyyy';\n    }\n\n    // parseDateTime gives you local date-time\n    var matchDate   = PULSE.CLIENT.DateUtil.parseDateTime( dateStr ),\n        offsetDate  = matchDate ? new Date( matchDate.getTime() + ( 3600000 * offset ) ) : undefined;\n\n    if ( offsetDate )\n    {\n        var utcDate           = PULSE.CLIENT.DateUtil.getUtcDateObject( offsetDate ),\n            formattedDateTime = dateFormat( utcDate, desiredFormat + '|HH:MM| Z' ).split( \"|\" ),\n            formattedDate     = formattedDateTime[0];\n\n        return formattedDate;\n    }\n}"},"getSinceString":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"date"},{"title":"param","description":null,"type":null,"name":"format"}]},"Source":"PULSE.CLIENT.DateUtil.getSinceString = function( date, format )\n{\n    if( date )\n    {\n        var now = new Date();\n\n        var diff = Math.floor( ( now - date ) / 1000 );\n\n        if( diff <= 0 )\n        {\n            return format ? format.justNow : \"just now\";\n        }\n        else if( diff < 60 )\n        {\n            var output = Math.round( diff );\n            return output + ( format ? format.seconds : \"s\" );\n        }\n        else if( diff < 60 * 60 )\n        {\n            var output = Math.round( diff / 60 );\n            return output + ( format ? format.minutes : \"m\" );\n        }\n        else if( diff < 60 * 60 * 24 )\n        {\n            var output = Math.round( diff / ( 60 * 60 ) );\n            return output + ( format ? format.hours : \"h\" );\n        }\n        else\n        {\n            var output = Math.round( diff / ( 60 * 60 * 24 ) );\n            return output + ( format ? format.days : \"d\" );\n        }\n    }\n}"},"getFormattedEventDate":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"dateString"},{"title":"param","description":null,"type":null,"name":"dateFormatString"}]},"Source":"PULSE.CLIENT.DateUtil.getFormattedEventDate = function( dateString, dateFormatString )\n{\n    var date = PULSE.CLIENT.DateUtil.parseDateTime( dateString ),\n        utcDate = PULSE.CLIENT.DateUtil.getUtcDateObject( date );\n\n    if( utcDate )\n    {\n        var formattedDateString = dateFormat( utcDate, dateFormatString ).split('|')[0];\n        return formattedDateString;\n    }\n}"}},"JSONPTimer":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.JSONPTimer"}]},"Source":"PULSE.CLIENT.JSONPTimer = function()\n{\n\tthis.timer = undefined;\n\tthis.isStopped = false;\n}","prototype":{"fireTimer":{"Documentation":{"description":"This makes an ajax call for the given url and fires the timer with the given parameters. \ninterval should be > 0  to make it run periodically. \ntimeout attr is required to handle 404","tags":[]},"Source":"PULSE.CLIENT.JSONPTimer.prototype.fireTimer = function( url, params, interval )\n{\n\tvar that = this;\n\t$.ajax(\n\t{        \n\t    dataType: 'jsonp',\t    \n\t    url: url,\t    \n\t    data: params,\n\t    timeout: interval,\n\t    complete: function(param1, param2)\n\t    {\n\t\t\tthat.cancelTimer();\n\t\t\tif( interval > 0 && !that.isStopped )\n\t\t\t{\n\t\t\t\tthat.timer = setTimeout( function(){ that.fireTimer( url, params, interval ); }, interval );\n\t\t\t}\n\t\t}\n\t});\t\n}"},"cancelTimer":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.JSONPTimer.prototype.cancelTimer = function()\n{\n\tif( this.timer )\n\t{\n\t\tclearTimeout( this.timer );\n\t}\n}"}}},"JqueryJSONPDataManager":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.JqueryJSONPDataManager"}]},"Source":"PULSE.CLIENT.JqueryJSONPDataManager = function ()\n{\n\t//depricated\n\t//this.timers = {};\n\t//this.lastdata = {};\n\t//this.savedTargets = {};\n\t\n\tthis.urls = {};\n\t/**\n\t * //proposed object for a given url\n\tthis.urls['scoring-01.js'] = {\n\t\ttimer: 'new JqueryJSONPTimer'\n\t\tsavedTargets: [],\n\t\tlastData: '',\n\t\tcallback: '',\n\t\tinterval: -1,\n\t\turl: '',\n\t\tid: ''\n\t}\n\t*/\n}","prototype":{"addFeed":{"Documentation":{"description":"Note that the interval is in SECONDS, and will be multiplied by 1000 to derive a millisecond\nvalue.","tags":[]},"Source":"PULSE.CLIENT.JqueryJSONPDataManager.prototype.addFeed = function ( id, url, interval, callback, targets )\n{\n    var currentTargets = this.urls[url] && this.urls[url].savedTargets ? this.urls[url].savedTargets : [];\n    \n\t// Remove any existing feed with this ID\n\tthis.removeFeed( url );\n\n\t// Save the callback name\n\tthis.urls[url] = { id:id, url:url, interval:interval, callback:callback };\n    \n    // Add all the targets to the current targets\n    for ( var i = 0, limit = targets.length; i < limit; i++ )\n    {\n        var needToAdd = true;\n        for ( var j = 0, jLimit = currentTargets.length; j < jLimit; j++ )\n        {\n            if ( targets[ i ] === currentTargets[ j ] )\n            {\n                needToAdd = false;\n                break;\n            }\n        }\n        if ( needToAdd )\n        {\n            currentTargets.push( targets[ i ] );\n        }\n    }\n    \n    this.urls[url].savedTargets = currentTargets;\n\t\n\t// Dynamically create the callback method\n\tvar that = this;\n\tvar f = function ( jsonpData )\n\t{\n\t\tif ( jsonpData )\n\t\t{\n\t\t\tvar payload = jsonpData;\n\t\t\t\n\t\t\t// Serialise the payload\n\t\t\tvar serialised = $.toJSON( payload );\n\t\t    if ( that.urls[url] && that.urls[url].lastData !== serialised )\n\t\t    {\n\t\t    \t// Save the new data\n\t\t    \tthat.urls[url].lastData = serialised;\n\t\t\t\t// Pass the data to all of the targets...\n\t\t\t\tfor ( var t = 0, tlimit = currentTargets.length; t < tlimit; t++ )\n\t\t\t\t{\n\t\t\t\t\t// ...if they are valid\n\t\t\t\t\tvar target = currentTargets[t];\n\t\t\t\t\tif ( target && target.onData )\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttarget.onData( payload, id );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch(e)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif( window.console && window.console.log ) console.log(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t    }\n\t\t}\n\t};\n\t\n\tvar e = function ( )\n\t{\n\t\tfor ( var t = 0, tlimit = currentTargets.length; t < tlimit; t++ )\n\t\t{\n\t\t\t// ...if they are valid\n\t\t\tvar target = currentTargets[t];\n\t\t\tif ( target && target.onError )\n\t\t\t{\n\t\t\t\ttarget.onError( id );\n\t\t\t}\n\t\t}\n\t};\n\t\n\t// Create the timer\n\tthat.urls[url].timer = new PULSE.CLIENT.JqueryJSONPTimer( this.urls[url], f, e );\n}","f":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"jsonpData"}]},"Source":"var f = function ( jsonpData )\n\t{\n\t\tif ( jsonpData )\n\t\t{\n\t\t\tvar payload = jsonpData;\n\t\t\t\n\t\t\t// Serialise the payload\n\t\t\tvar serialised = $.toJSON( payload );\n\t\t    if ( that.urls[url] && that.urls[url].lastData !== serialised )\n\t\t    {\n\t\t    \t// Save the new data\n\t\t    \tthat.urls[url].lastData = serialised;\n\t\t\t\t// Pass the data to all of the targets...\n\t\t\t\tfor ( var t = 0, tlimit = currentTargets.length; t < tlimit; t++ )\n\t\t\t\t{\n\t\t\t\t\t// ...if they are valid\n\t\t\t\t\tvar target = currentTargets[t];\n\t\t\t\t\tif ( target && target.onData )\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttarget.onData( payload, id );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch(e)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif( window.console && window.console.log ) console.log(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t    }\n\t\t}\n\t}"},"e":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"var e = function ( )\n\t{\n\t\tfor ( var t = 0, tlimit = currentTargets.length; t < tlimit; t++ )\n\t\t{\n\t\t\t// ...if they are valid\n\t\t\tvar target = currentTargets[t];\n\t\t\tif ( target && target.onError )\n\t\t\t{\n\t\t\t\ttarget.onError( id );\n\t\t\t}\n\t\t}\n\t}"}},"startAll":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.JqueryJSONPDataManager.prototype.startAll = function ()\n{\n\tfor ( var url in this.urls )\n\t{\n\t\tthis.start( url );\n\t}\n}"},"stopAll":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.JqueryJSONPDataManager.prototype.stopAll = function ()\n{\n\tfor ( var url in this.urls )\n\t{\n\t\tthis.stop( url );\n\t}\n}"},"start":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"url"}]},"Source":"PULSE.CLIENT.JqueryJSONPDataManager.prototype.start = function ( url )\n{\n\tif ( this.urls[url] && this.urls[url].timer )\n\t{\n\t\tthis.urls[url].timer.start();\n\t}\n}"},"stop":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"url"}]},"Source":"PULSE.CLIENT.JqueryJSONPDataManager.prototype.stop = function ( url )\n{\n\tif ( this.urls[url] && this.urls[url].timer )\n\t{\n\t\tthis.urls[url].timer.stop();\n\t}\n}"},"removeFeed":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"url"}]},"Source":"PULSE.CLIENT.JqueryJSONPDataManager.prototype.removeFeed = function ( url )\n{\n\tthis.stop( url );\n\t\n\tif ( this.urls[url] )\n\t{\n\t\tthis.urls[url] = undefined;\n\t}\n\t\n}"}}},"JqueryJSONPTimer":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.JqueryJSONPTimer"},{"title":"param","description":null,"type":null,"name":"params"},{"title":"param","description":null,"type":null,"name":"f"},{"title":"param","description":null,"type":null,"name":"e"}]},"Source":"PULSE.CLIENT.JqueryJSONPTimer = function( params, f, e )\n{\n\tthis.initialise( params || {}, f, e );\n\n\tthis.running = false;\n}","prototype":{"initialise":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"params"},{"title":"param","description":null,"type":null,"name":"f"},{"title":"param","description":null,"type":null,"name":"e"}]},"Source":"PULSE.CLIENT.JqueryJSONPTimer.prototype.initialise = function( params, f, e )\n{\n\tthis.url = params.url || '';\n\tthis.interval = params.interval || 0;\n\tthis.params = params.params || {};\n\tthis.callbackName = params.callback || '';\n\tthis.callback = f;\n\tthis.errorCallback = e;\n\tthis.name = params.id || 'un-named';\n}"},"start":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.JqueryJSONPTimer.prototype.start = function()\n{\n\tif ( !this.running )\n\t{\n\t\tthis.running = true;\n\t\tthis.fireTimer( );\n\t}\n}"},"stop":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.JqueryJSONPTimer.prototype.stop = function()\n{\n\tif ( this.running )\n\t{\n\t\tthis.running = false;\n\t\tthis.cancelTimer( );\n\t}\n}"},"fireTimer":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.JqueryJSONPTimer.prototype.fireTimer = function()\n{\n\tvar that = this;\n\n\tiPhoneApp.loadJSONP(this.url, this.interval, false);\n}"},"cancelTimer":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.JqueryJSONPTimer.prototype.cancelTimer = function()\n{\n\tif ( this.timer )\n\t{\n\t\tclearTimeout( this.timer );\n\t}\n}"}}},"Log":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.Log"},{"title":"param","description":null,"type":null,"name":"message"}]},"Source":"PULSE.CLIENT.Log = function( message )\n{\n\tif ( typeof console === \"object\" ) {\n\t    console.log( message )\n\t}\n}"},"MatchFlowOverlay":{"Documentation":{"description":"Constructor.","tags":[{"title":"param","description":"the div name in which this match flow overlay will be created","type":null,"name":"id"},{"title":"param","description":"the configuration parameters","type":null,"name":"config"}]},"Source":"PULSE.CLIENT.MatchFlowOverlay = function ( id, config )\n{\n    this.config = config;\n    this.r = Raphael( id, config.width, config.height );\n    \n    this.player1 = this.r.path().attr( { stroke:config.colors[0], 'stroke-width':2 } );\n    this.player2 = this.r.path().attr( { stroke:config.colors[1], 'stroke-width':2 } );\n\n    if ( config.shadow )\n    {\n        doc = document;\n\t    this.shadow1 = this.r.path().attr( { stroke:'#333', 'stroke-width':2 } );\n\t    this.shadow1.blur( 3 );\n\t    \n\t    this.shadow2 = this.r.path().attr( { stroke:'#333', 'stroke-width':2 } );\n\t    this.shadow2.blur( 3 );\n    }\n}","prototype":{"setData":{"Documentation":{"description":"Sets the value that this swingometer should display.","tags":[{"title":"param","description":"the value, in the range 0-1000","type":null,"name":"data"}]},"Source":"PULSE.CLIENT.MatchFlowOverlay.prototype.setData = function ( data )\n{\n    var points = data.length;\n    if ( this.config.minx && points < this.config.minx )\n    {\n    \tpoints = this.config.minx;\n    }\n\n    var dx = ( this.config.width - this.config.margin.e - this.config.margin.w ) / ( points - 1 );\n    var dy = ( this.config.height - this.config.margin.n - this.config.margin.s ) / 1000;\n\n    var p1 = '';\n    var p2 = '';\n    \n    for ( var i = 0; i < points && i < data.length; i++ )\n    {\n        var v1 = data[i];\n        var v2 = 1000 - v1;\n        \n        var x = Math.round( this.config.margin.w + ( i * dx ) );\n        var y1 = Math.round( this.config.height - this.config.margin.s - ( v1 * dy ) );\n        var y2 = Math.round( this.config.height - this.config.margin.s - ( v2 * dy ) ); \n\n        if ( i === 0 )\n        {\n            p1 = 'M';\n            p2 = 'M';\n        }\n        else\n        {\n            p1 += 'L';\n            p2 += 'L';\n        }\n\n        p1 += x + ',' + y1;\n        p2 += x + ',' + y2; \n    }\n\n    this.player1.attr( { path:p1 } );\n    this.player2.attr( { path:p2 } );\n\n    if ( this.shadow1 )\n    {\n\t    this.shadow1.attr( { path:p1, translation:'3,4' } );\n\t    this.shadow2.attr( { path:p2, translation:'3,4' } );\n    }\n}"}}},"NewJSONPTimer":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.NewJSONPTimer"},{"title":"param","description":null,"type":null,"name":"url"},{"title":"param","description":null,"type":null,"name":"interval"},{"title":"param","description":null,"type":null,"name":"params"}]},"Source":"PULSE.CLIENT.NewJSONPTimer = function ( url, interval, params )\n{\n\tthis.url = url;\n\tthis.interval = interval;\n\tthis.params = params;\n\t\n\tthis.running = false;\n}","prototype":{"start":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.NewJSONPTimer.prototype.start = function ()\n{\n\tif ( !this.running )\n\t{\n\t\tthis.running = true;\n\t\tthis.fireTimer();\n\t}\n}"},"stop":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.NewJSONPTimer.prototype.stop = function ()\n{\n\tif ( this.running )\n\t{\n\t\tthis.running = false;\n\t\tthis.cancelTimer();\n\t}\n}"},"fireTimer":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.NewJSONPTimer.prototype.fireTimer = function ()\n{\n\tvar that = this;\n\t$.ajax( { dataType : 'jsonp',\t    \n\t    \t  url      : that.url,\t    \n\t    \t  data     : that.params,\n\t    \t  timeout  : that.interval,\n\t    \t  complete : function ()\n\t    \t  {\n\t\t\t      that.cancelTimer();\n\t\t\t      if ( that.interval > 0 && that.running )\n\t\t\t      {\n\t\t\t    \t  that.timer = setTimeout( function () { that.fireTimer(); }, that.interval );\n\t\t\t      }\n\t    \t  } } );\n}"},"cancelTimer":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.NewJSONPTimer.prototype.cancelTimer = function()\n{\n\tif ( this.timer )\n\t{\n\t\tclearTimeout( this.timer );\n\t}\n}"}}},"ResponsiveUtils":{"detectMobile":{"Documentation":{"description":"Detect mobile device via user agent - Does not detect various tablets/ipads","tags":[{"title":"return","description":"Returns true if the user's device is mobile","type":{"type":"NameExpression","name":"boolean"}}]},"Source":"PULSE.CLIENT.ResponsiveUtils.detectMobile = function()\n{\n    if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) )\n    {\n        return true;\n    }\n    return false;\n}"},"detectTouchSupport":{"Documentation":{"description":"Detects touch support on launch - removes and re-adds the touch class to the html tag\nRemoval is required to function correctly when running the application in an iframe\n\nREQUIRES MODERNIZR LIB","tags":[]},"Source":"PULSE.CLIENT.ResponsiveUtils.detectTouchSupport = function()\n{\n    if( Modernizr && Modernizr.touch )\n    {\n        Modernizr.addTest('overflowscrolling', Modernizr.testAllProps( 'overflowScrolling', 'touch', true ));\n        if( Modernizr.overflowscrolling )\n        {\n            $('html').removeClass('touch');\n            //add class to element to enable hardware accelerated scrolling\n            document.documentElement.className += \"touch\";\n            $('html').addClass('touch');\n        }\n    }\n}"},"detectWakeFromSleep":{"Documentation":{"description":"Adds a listener to detect if the browser has been running in the background on a mobile device\nand refreshes the page if sufficient time has passed","tags":[]},"Source":"PULSE.CLIENT.ResponsiveUtils.detectWakeFromSleep = function()\n{\n    var _lastTick = +new Date;\n\n    function detectWakeFromSleep()\n    {\n        var now = +new Date;\n        if( (now - _lastTick) > 240000 )\n        {\n            if( window.navigator.onLine === false )\n            {\n                return false; //don't refresh if they are not online\n            }\n\n            window.location.href = window.location.href;\n        }\n\n        _lastTick = now;\n        return true;\n    }\n\n    window.setInterval( detectWakeFromSleep, 2000 );\n}"},"detectFlashSupport":{"Documentation":{"description":"Detect whether current device supports flash","tags":[{"title":"return","description":"True if browser supports flash else false","type":{"type":"NameExpression","name":"boolean"}}]},"Source":"PULSE.CLIENT.ResponsiveUtils.detectFlashSupport = function()\n{\n    if((typeof navigator.plugins != \"undefined\" &&\n        typeof navigator.plugins[\"Shockwave Flash\"] == \"object\") ||\n        (window.ActiveXObject && (new ActiveXObject(\"ShockwaveFlash.ShockwaveFlash\")) != false))\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}"},"detectEndOfWindowResize":{"Documentation":{"description":"Detects when the user has stopped resizing the window","tags":[{"title":"param","description":"Callback function to be called on end of resize","type":{"type":"NameExpression","name":"Function"},"name":"callback"}]},"Source":"PULSE.CLIENT.ResponsiveUtils.detectEndOfWindowResize = function( callback )\n{\n    var rtime = new Date(1, 1, 2000, 12,00,00),\n        timeout = false,\n        delta = 200;\n\n    $( window ).resize( function()\n    {\n        rtime = new Date();\n        if( timeout === false )\n        {\n            timeout = true;\n            setTimeout( resizeend, delta );\n        }\n    });\n\n    function resizeend()\n    {\n        if( new Date() - rtime < delta )\n        {\n            setTimeout( resizeend, delta );\n        }\n        else\n        {\n            timeout = false;\n            if( callback )\n            {\n                callback();\n            }\n        }\n    }\n}"}},"Set":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.Set"}]},"Source":"PULSE.CLIENT.Set = function()\n{\n\tthis.object = {};\n}","prototype":{"add":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"value"}]},"Source":"PULSE.CLIENT.Set.prototype.add = function(value)\n{\t\t\n\tthis.object[value] = true;\t\n}"},"remove":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"value"}]},"Source":"PULSE.CLIENT.Set.prototype.remove = function(value)\n{\t\t\n\tdelete this.object[value];\t\n}"},"contains":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"value"}]},"Source":"PULSE.CLIENT.Set.prototype.contains = function(value)\n{\t\t\t\n\treturn this.object[value] !== undefined;\n}"},"noOfItems":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.Set.prototype.noOfItems = function()\n{\n\tvar counter = 0;\n\t\n\tfor( var property in this.object )\n\t{\t\t\n\t\tcounter++;\t\t\t\n\t}\n\t\n\treturn counter;\n}"}},"fromString":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"string"}]},"Source":"PULSE.CLIENT.Set.fromString = function(string)\n{\t\t\n\tvar set = new PULSE.CLIENT.Set();\n\tvar fieldsArray = string.split(PULSE.CLIENT.Set.Delimiter);\n\tfor(var i = 0; i < fieldsArray.length; i++)\n\t{\n\t\tset.add(fieldsArray[i]);\n\t}\n\treturn set;\n}"}},"SUPERSIZED":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.SUPERSIZED"},{"title":"param","description":null,"type":null,"name":"container"},{"title":"param","description":null,"type":null,"name":"mode"}]},"Source":"PULSE.CLIENT.SUPERSIZED = function( container, mode ) /*Container must be and ID, mode is none, video, other, if you leave blank is photo*/\n{\n\tthis.container = container;\n\tthis.mode = mode;\n\t//this.data = data;\n\tthis.$overlayContainer = $( container + '.photo-overlay');\n\n\tif ( this.$overlayContainer )\n\t{\n\t\tif ( this.$overlayContainer.length < 1 )\n\t\t{\n\t\t\tthis.$overlayContainer = $( container + ' .photo-overlay-relative');\n\t\t}\n\t}\n\n\tthis.$thumbList = this.$overlayContainer.find('#thumb-list');\n\tthis.$closeButton = this.$overlayContainer.find('#close-button');\n\tthis.$fullscreenButton = this.$overlayContainer.find('#fullscreen-button');\n\tthis.$trayButton = this.$overlayContainer.find('#tray-button');\n\t// this.$tbackButton = this.$overlayContainer.find('#thumb-back');\n\t// this.$tfwdButton = this.$overlayContainer.find('#thumb-forward');\n\tthis.$backButton = this.$overlayContainer.find('#prevslide');\n\n\tthis.addlistener();\n}","prototype":{"openModal":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"content_id"},{"title":"param","description":null,"type":null,"name":"start_id"}]},"Source":"PULSE.CLIENT.SUPERSIZED.prototype.openModal = function( content_id,start_id )\n{\n\tvar temp_data = []\n\t$(\".superscroll_data[superscroll-collectionid='\" + content_id + \"']\").each(function( index ) {\n\t\tvar temp_photo = {\n\t\t\timage : $( this ).attr('superscroll-src'),\n\t\t\ttitle : $( this ).attr('superscroll-title'),\n\t\t\tthumb : $( this ).attr('superscroll-thumb'),\n\t\t\turl : '',\n\t\t\tsocial: $( this ).attr('superscroll-social')\n\t\t}\n\t\ttemp_data.push(temp_photo);\n\t});\n\tthis.data = temp_data;\n\tthis.$overlayContainer.show();\n\tthis.initialize(start_id);\n\tthis.$supersizedContainer = this.$overlayContainer.find('#supersized');\n}"},"addlistener":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.SUPERSIZED.prototype.addlistener = function()\n{\n\tvar that = this;\n\n\t// //close modal\n\tthis.$closeButton.bind( \"click\", function() {\n\n\t\tthat.exitFullscreen();\n\n\t\tthat.closeOverlay();\n\t});\n\n\tif (\n\t    document.fullscreenEnabled ||\n\t    document.webkitFullscreenEnabled ||\n\t    document.mozFullScreenEnabled ||\n\t    document.msFullscreenEnabled\n\t) {\n\t\tthis.$fullscreenButton.bind( \"click\", function() {\n\t\t\t// full-screen available?\n\t\t\tthat.toggleFullscreen();\n\t\t});\n\t}\n\telse\n\t{\n\t\tthis.$fullscreenButton.hide();\n\t}\n}"},"closeOverlay":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.SUPERSIZED.prototype.closeOverlay = function()\n{\n\t//delete supersized\n\tthis.$overlayContainer.hide();\n\tthis.$overlayContainer.find('#thumb-tray').empty().append('<div id=\"thumb-back\"></div><div id=\"thumb-forward\"></div>');\n\tthis.$supersizedContainer.empty();\n\t//this.$thumbList.remove();\n\n\t//Fix the thumbs\n\tthis.$trayButton.css('left','10px');\n\tthis.$backButton.css('left','10px');\n\t// this.$tbackButton.off();\n\t// this.$tfwdButton.off();\n\tthis.$trayButton.off();\n}"},"exitFullscreen":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.SUPERSIZED.prototype.exitFullscreen = function()\n{\n\t// exit full-screen\n\tif (document.exitFullscreen) {\n\t    document.exitFullscreen();\n\t} else if (document.webkitExitFullscreen) {\n\t    document.webkitExitFullscreen();\n\t} else if (document.mozCancelFullScreen) {\n\t    document.mozCancelFullScreen();\n\t} else if (document.msExitFullscreen) {\n\t    document.msExitFullscreen();\n\t}\n}"},"toggleFullscreen":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.SUPERSIZED.prototype.toggleFullscreen = function()\n{\n\tvar id = this.container.slice(1);\n\tvar i = document.getElementById(id);\n\n\t// full-screen available?\n\tif (\n\t    document.fullscreenEnabled ||\n\t    document.webkitFullscreenEnabled ||\n\t    document.mozFullScreenEnabled ||\n\t    document.msFullscreenEnabled\n\t) {\n\t\tif (\n\t\t    document.fullscreenElement ||\n\t\t    document.webkitFullscreenElement ||\n\t\t    document.mozFullScreenElement ||\n\t\t    document.msFullscreenElement\n\t\t) {\n\t\t\t// exit full-screen\n\t\t\tthis.exitFullscreen();\n\t\t}\n\t\telse{\n\t\t\t// go full-screen\n\t\t\tif (i.requestFullscreen) {\n\t\t\t    i.requestFullscreen();\n\t\t\t} else if (i.webkitRequestFullscreen) {\n\t\t\t    i.webkitRequestFullscreen();\n\t\t\t} else if (i.mozRequestFullScreen) {\n\t\t\t    i.mozRequestFullScreen();\n\t\t\t} else if (i.msRequestFullscreen) {\n\t\t\t    i.msRequestFullscreen();\n\t\t\t}\n\t\t}\n\t}\n}"},"initialize":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"PULSE.CLIENT.SUPERSIZED.prototype.initialize = function( id )\n{\n\tvar that = this;\n\tvar start_id = id ? id : 0;\n\tjQuery(function($){\n\n\t\t$.supersized({\n\n\t\t\t// Functionality\n\t\t\tslideshow               :   1,\t\t\t// Slideshow on/off\n\t\t\tautoplay\t\t\t\t:\t0,\t\t\t// Slideshow starts playing automatically\n\t\t\tstart_slide             :   start_id,\t\t\t// Start slide (0 is random)\n\t\t\tstop_loop\t\t\t\t:\t0,\t\t\t// Pauses slideshow on last slide\n\t\t\trandom\t\t\t\t\t: \t0,\t\t\t// Randomize slide order (Ignores start slide)\n\t\t\tslide_interval          :   3000,\t\t// Length between transitions\n\t\t\ttransition              :   6, \t\t\t// 0-None, 1-Fade, 2-Slide Top, 3-Slide Right, 4-Slide Bottom, 5-Slide Left, 6-Carousel Right, 7-Carousel Left\n\t\t\ttransition_speed\t\t:\t1000,\t\t// Speed of transition\n\t\t\tnew_window\t\t\t\t:\t1,\t\t\t// Image links open in new window/tab\n\t\t\tpause_hover             :   0,\t\t\t// Pause slideshow on hover\n\t\t\tkeyboard_nav            :   1,\t\t\t// Keyboard navigation on/off\n\t\t\tperformance\t\t\t\t:\t1,\t\t\t// 0-Normal, 1-Hybrid speed/quality, 2-Optimizes image quality, 3-Optimizes transition speed // (Only works for Firefox/IE, not Webkit)\n\t\t\timage_protect\t\t\t:\t1,\t\t\t// Disables image dragging and right click with Javascript\n\n\t\t\t// Size & Position\n\t\t\tmin_width\t\t        :   0,\t\t\t// Min width allowed (in pixels)\n\t\t\tmin_height\t\t        :   0,\t\t\t// Min height allowed (in pixels)\n\t\t\tvertical_center         :   1,\t\t\t// Vertically center background\n\t\t\thorizontal_center       :   1,\t\t\t// Horizontally center background\n\t\t\tfit_always\t\t\t\t:\t1,\t\t\t// Image will never exceed browser width or height (Ignores min. dimensions)\n\t\t\tfit_portrait         \t:   1,\t\t\t// Portrait images will not exceed browser height\n\t\t\tfit_landscape\t\t\t:   1,\t\t\t// Landscape images will not exceed browser width\n\n\t\t\t// Components\n\t\t\tslide_links\t\t\t\t:\t'blank',\t// Individual links for each slide (Options: false, 'num', 'name', 'blank')\n\t\t\tthumb_links\t\t\t\t:\t1,\t\t\t// Individual thumb links for each slide\n\t\t\tthumbnail_navigation    :   0,\t\t\t// Thumbnail navigation\n\t\t\tslides \t\t\t\t\t:  \tthat.data,\n\n\t\t\t// Theme Options\n\t\t\tprogress_bar\t\t\t:\t1,\t\t\t// Timer for each slide\n\t\t\tmouse_scrub\t\t\t\t:\t0,\n\t\t\tcontainer \t\t\t\t: \tthat.container,\n\t\t\tmode \t\t\t\t\t: \tthat.mode\n\n\t\t});\n    });\n}"}}},"Swingometer":{"Documentation":{"description":"Constructor.","tags":[{"title":"param","description":"the div name in which this swingometer will be created","type":null,"name":"id"}]},"Source":"PULSE.CLIENT.Swingometer = function ( id, config )\n{\n    this.radius = config.height - ( 2 * config.margin );\n    \n    this.r = Raphael( id, config.width, config.height );\n    this.r.rect( 0, 0, config.width, config.height ).attr( { fill:'#000' } );\n\n    this.ox = config.width / 2;\n    this.oy = config.margin;\n\n    // Segments\n    var c1 = config.colors[0];\n    this.r.path( 'M' + this.ox + ' ' + this.oy + 'L' + config.margin + ' ' + this.oy +\n            'A' + this.radius + ' ' + this.radius + ' 0 0 0 ' + this.ox + ' ' + \n                ( config.height - config.margin ) +                                  \n            'L' + this.ox + ' ' + this.oy ).attr( { fill:c1, stroke:c1 } );\n\n    var c2 = config.colors[1];\n    this.r.path( 'M' + this.ox + ' ' + this.oy + 'L' + ( config.width - config.margin ) + \n    \t\t     ' ' + this.oy +\n            'A' + this.radius + ' ' + this.radius + ' 0 0 1 ' + this.ox + ' ' + \n                ( config.height - config.margin ) +                                  \n            'L' + this.ox + ' ' + this.oy ).attr( { fill:c2, stroke:c2 } );\n\n    // Ticks\n    var tick = 1;\n    for ( var angle = 3; angle < 180; angle += 3, tick++ )\n    {\n        var rad = Raphael.rad( angle );\n        var cos = Math.cos( rad );\n        var sin = Math.sin( rad );\n\n        var sz = 33;\n        if ( tick % 6 !== 0 )\n        {\n            sz = 37;\n        }\n        \n        this.r.path( 'M' + ( this.ox + ( sz * cos ) ) + ' ' + ( this.oy + ( sz * sin ) ) +\n                     'L' + ( this.ox + ( 40 * cos ) ) + ' ' + ( this.oy + ( 40 * sin ) ) ).\n                     attr( { stroke:'#ccc' } );\n    }  \n\n    var needlePath = 'M' + ( this.ox - 2 ) + ' ' + this.oy +\n                     'L' + ( this.ox - 2 ) + ' ' + ( this.oy + ( config.height * 0.45 ) ) +\n                     'L' + ( this.ox )     + ' ' + ( this.oy + ( config.height * 0.75 ) ) +\n                     'L' + ( this.ox + 2 ) + ' ' + ( this.oy + ( config.height * 0.45 ) ) +\n                     'L' + ( this.ox + 2 ) + ' ' + this.oy;\n\n    this.needle = this.r.path( needlePath ).attr( { fill:'#ccc', stroke:'#242424' } );\n    this.r.circle( this.ox, this.oy, 6 ).attr( { fill:'#000', stroke:'none' } );\n    this.r.circle( this.ox, this.oy, 2 ).attr( { fill:'#ccc', stroke:'none' } );\n}","prototype":{"setData":{"Documentation":{"description":"Sets the value that this swingometer should display.","tags":[{"title":"param","description":"the value, in the range 0-1000","type":null,"name":"data"}]},"Source":"PULSE.CLIENT.Swingometer.prototype.setData = function ( data )\n{\n\tvar theta = ( 180 * data / 1000 ) - 90;\n    this.needle.animate( { rotation: theta + ' ' + this.ox + ' ' + this.oy }, 800, '<>' );\n}"}}},"Template":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.Template"}]},"Source":"PULSE.CLIENT.Template = function()\r\n{\r\n}","fetch":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"path"},{"title":"param","description":null,"type":null,"name":"done"}]},"Source":"PULSE.CLIENT.Template.fetch = function(path, done)\r\n{\r\n\tvar JST = window.JST = window.JST || {};\r\n\tvar targets = PULSE.CLIENT.Template.targets[path] = PULSE.CLIENT.Template.targets[path] || [];\r\n\tvar def = new $.Deferred();\r\n    var needToAdd = true;\r\n\r\n\t// Should be an instant synchronous way of getting the template, if it\r\n\t// exists in the JST object.\r\n\tif (JST[path])\r\n\t{\r\n\t\tif (_.isFunction(done))\r\n\t\t{\r\n\t\t\tdone(JST[path]);\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\r\n    for ( var j = 0, jLimit = targets.length; j < jLimit; j++ )\r\n    {\r\n        if ( targets[ j ] === done )\r\n        {\r\n            needToAdd = false;\r\n            break;\r\n        }\r\n    }\r\n    if ( needToAdd )\r\n    {\r\n        targets.push( done );\r\n    }\r\n\r\n\t// Fetch it asynchronously if not available from JST, ensure that\r\n\t// template requests are never cached and prevent global ajax event\r\n\t// handlers from firing.\r\n\tif( targets.length === 1 )\r\n\t{\r\n\t\t$.ajax({\r\n\t\t\turl: path,\r\n\t\t\ttype: \"get\",\r\n\t\t\tdataType: \"text\",\r\n\t\t\tcache: false,\r\n\t\t\tglobal: false,\r\n\r\n\t\t\tsuccess: function(contents)\r\n\t\t\t{\r\n\t\t\t\tJST[path] = _.template(contents);\r\n\r\n\t\t\t\tfor ( var j = 0, jLimit = targets.length; j < jLimit; j++ )\r\n\t\t\t    {\r\n\t\t\t        if (_.isFunction( targets[ j ] ) )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttargets[ j ](JST[path]);\r\n\t\t\t\t\t}\r\n\t\t\t    }\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}"},"fetchMultiple":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"paths"},{"title":"param","description":null,"type":null,"name":"done"}]},"Source":"PULSE.CLIENT.Template.fetchMultiple = function( paths, done )\r\n{\r\n\tvar templates = {};\r\n\r\n\tfor( var i = 0; i < paths.length; i++ )\r\n\t{\r\n\t\tvar path = paths[i];\r\n\r\n\t\tPULSE.CLIENT.Template.fetch( path, function()\r\n\t\t{\r\n\t\t\tfor( var x = 0; x < paths.length; x++ )\r\n\t\t\t{\r\n\t\t\t\tvar p = paths[x];\r\n\r\n\t\t\t\tif( !JST[p] )\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\ttemplates[p] = JST[p];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (_.isFunction(done))\r\n\t\t\t{\r\n\t\t\t\tdone(templates);\r\n\t\t\t}\r\n\t\t} );\r\n\t}\r\n}"},"publish":{"Documentation":{"description":"Handy functions to insert templates into the page\r\n\r\n -  publish: replaces container contents with template\r\n -  replace: replaces container with template\r\n -  append:  appends template to container","tags":[]},"Source":"PULSE.CLIENT.Template.publish = function( templateUrl, selector, model, callback )\r\n{\r\n\tPULSE.CLIENT.Template.fetch( templateUrl, function(tmpl) {\r\n    \t$( selector ).html( tmpl( model ) );\r\n\r\n    \tif( callback ) \r\n    \t\tcallback();\r\n\t} );\r\n}"},"replace":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"templateUrl"},{"title":"param","description":null,"type":null,"name":"selector"},{"title":"param","description":null,"type":null,"name":"model"},{"title":"param","description":null,"type":null,"name":"callback"}]},"Source":"PULSE.CLIENT.Template.replace = function( templateUrl, selector, model, callback )\r\n{\r\n\tPULSE.CLIENT.Template.fetch( templateUrl, function(tmpl) {\r\n    \t$( selector ).replaceWith( tmpl( model ) );\r\n\r\n    \tif( callback ) \r\n    \t\tcallback();\r\n\t} );\r\n}"},"append":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"templateUrl"},{"title":"param","description":null,"type":null,"name":"selector"},{"title":"param","description":null,"type":null,"name":"model"},{"title":"param","description":null,"type":null,"name":"callback"}]},"Source":"PULSE.CLIENT.Template.append = function( templateUrl, selector, model, callback )\r\n{\r\n\tPULSE.CLIENT.Template.fetch( templateUrl, function(tmpl) {\r\n    \t$( selector ).append( tmpl( model ) );\r\n\r\n    \tif( callback ) \r\n    \t\tcallback();\r\n\t} );\r\n}"},"prepend":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"templateUrl"},{"title":"param","description":null,"type":null,"name":"selector"},{"title":"param","description":null,"type":null,"name":"model"},{"title":"param","description":null,"type":null,"name":"callback"}]},"Source":"PULSE.CLIENT.Template.prepend = function( templateUrl, selector, model, callback )\r\n{\r\n    PULSE.CLIENT.Template.fetch( templateUrl, function(tmpl) {\r\n        $( selector ).prepend( tmpl( model ) );\r\n\r\n        if( callback ) \r\n            callback();\r\n    } );\r\n}"},"compareAndPublish":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"templateUrl"},{"title":"param","description":null,"type":null,"name":"selector"},{"title":"param","description":null,"type":null,"name":"model"},{"title":"param","description":null,"type":null,"name":"callback"}]},"Source":"PULSE.CLIENT.Template.compareAndPublish = function( templateUrl, selector, model, callback )\r\n{\r\n\tPULSE.CLIENT.Template.fetch( templateUrl, function(tmpl) {\r\n\t\tif( $( selector ).get(0) !== $( tmpl( model ) ).get(0) )\r\n\t\t{\r\n\t\t\t$( selector ).replaceWith( tmpl( model ) );\r\n\t\t\tif( callback ) \r\n\t\t\t{\r\n    \t\t\tcallback();\r\n    \t\t}\r\n\t\t}\r\n\t} );\r\n}"},"getHtml":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"templateUrl"},{"title":"param","description":null,"type":null,"name":"model"}]},"Source":"PULSE.CLIENT.Template.getHtml = function( templateUrl, model )\r\n{\r\n    var html = \"\";\r\n    if( JST[ templateUrl ] )\r\n    {\r\n        PULSE.CLIENT.Template.fetch( templateUrl, function( tmpl )\r\n        {\r\n            html = tmpl( model );\r\n        } );\r\n    }\r\n    return html;\r\n}"}},"Timer":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.Timer"}]},"Source":"PULSE.CLIENT.Timer = function()\n{\n\tthis.running = false;\n}","prototype":{"initialise":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"params"}]},"Source":"PULSE.CLIENT.Timer.prototype.initialise = function( params )\n{\n\tthis.callback = params.callback;\n\tthis.interval = params.interval * 1000;\n}"},"start":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"delay"}]},"Source":"PULSE.CLIENT.Timer.prototype.start = function( delay )\n{\n\tif ( !this.running )\n\t{\n\t\tthis.running = true;\n\t\tthis.fireTimer( delay );\n\t}\n}"},"stop":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.Timer.prototype.stop = function()\n{\n\tif ( this.running )\n\t{\n\t\tthis.running = false;\n\t\tthis.cancelTimer( );\n\t}\n}"},"fireTimer":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"delay"}]},"Source":"PULSE.CLIENT.Timer.prototype.fireTimer = function( delay )\n{\n\tvar that = this;\n\n\tif( !delay )\n\t{\n\t\tthat.callback();\n\t}\n\n\tthat.fire();\n}"},"fire":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.Timer.prototype.fire = function()\n{\n\tvar that = this;\n\n\tthat.cancelTimer();\n\n\tif ( that.interval > 0 && that.running )\n\t{\n\t\tthat.timer = setTimeout( function()\n\t\t{\n\t\t\tthat.callback();\n\t\t\tthat.fireTimer( true );\n\t\t}, that.interval );\n\t}\n}"},"cancelTimer":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.Timer.prototype.cancelTimer = function()\n{\n\tif ( this.timer )\n\t{\n\t\tclearTimeout( this.timer );\n\t}\n}"}}},"TwitterController":{"tweetEvent":{"Documentation":{"description":"Creates a new window for a specific twitter event; determines the type of event\nthrough the 'intent' parameter\n\nMore info at: https://dev.twitter.com/docs/intents","tags":[{"title":"param","description":"can be: 'tweet', 'favorite', 'retweet'","type":{"type":"NameExpression","name":"String"},"name":"intent"},{"title":"param","description":"optional; describes additional tweet params","type":{"type":"NameExpression","name":"Object"},"name":"params"},{"title":"param","description":"optional; the width of the pop-up window created","type":{"type":"NameExpression","name":"Number"},"name":"w"},{"title":"param","description":"optional; the height of the pop-up window created","type":{"type":"NameExpression","name":"Number"},"name":"h"}]},"Source":"PULSE.CLIENT.TwitterController.tweetEvent = function(intent, params, w, h)\n{\n    var TC = PULSE.CLIENT.TwitterController;\n\n    var width = w || 575,\n        height = h || 400,\n        left = ($(window).width() - width) / 2,\n        top = ($(window).height() - height) / 2,\n        options = 'status=1' +\n            ',width=' + width +\n            ',height=' + height +\n            ',top=' + top +\n            ',left=' + left;\n\n    var tweetUrl = TC.getIntentUrl(intent, params);\n\n    window.open(tweetUrl, 'twitter', options);\n}"},"getIntentUrl":{"Documentation":{"description":"Returns a URL to call the Twitter API\nMore info at: https://dev.twitter.com/docs/intents","tags":[{"title":"return","description":"the intent URL, complete with added params","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.TwitterController.getIntentUrl = function(intent, params)\n{\n    var TC = PULSE.CLIENT.TwitterController,\n        paramsString = TC.prepareParams(params);\n\n    return \"https://twitter.com/intent/\" + intent + paramsString;\n}"},"getPermalink":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.TwitterController.getPermalink"},{"title":"param","description":null,"type":null,"name":"tweet"}]},"Source":"PULSE.CLIENT.TwitterController.getPermalink = function(tweet)\n{\n    var userName = tweet.user.screen_name;\n    var userUrl = PULSE.CLIENT.TwitterController.getUserAccountUrl(userName);\n\n    return userUrl + \"/status/\" + tweet.id_str;\n}"},"prepareParams":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"params"}]},"Source":"PULSE.CLIENT.TwitterController.prepareParams = function(params)\n{\n    var paramsArray = [];\n    $.each(params, function(key, value)\n    {\n        var keyValuePair = [key, encodeURIComponent(value)];\n        paramsArray.push(keyValuePair.join(\"=\"));\n    });\n\n    return \"?\" + paramsArray.join(\"&\");\n}"},"getUserAccountUrl":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"screenName"}]},"Source":"PULSE.CLIENT.TwitterController.getUserAccountUrl = function(screenName)\n{\n    return \"http://twitter.com/\" + screenName;\n}"},"getSearchTagUrl":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"topic"}]},"Source":"PULSE.CLIENT.TwitterController.getSearchTagUrl = function(topic)\n{\n    return \"http://twitter.com/search?q=%23\" + topic;\n}"},"markUpLinks":{"Documentation":{"description":"Utility method to scan the given String for what look like HTTP links,\nTwitter handles and hashtags (called entities), and mark them up with <a> tags.\n\nFor URLs and media links, use expanded_url as the title and use the\ndisplay_url provided by Twitter as the text of the anchor tag\n\nSee: https://dev.twitter.com/docs/tco-url-wrapper/best-practices","tags":[{"title":"param","description":"the original body of the tweet","type":{"type":"NameExpression","name":"String"},"name":"string"},{"title":"param","description":"mapping of types of entities to an array of entity objects","type":{"type":"NameExpression","name":"Object"},"name":"entities"},{"title":"return","description":"the processed body of the tweet, with anchor tags","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.TwitterController.markUpLinks = function(string, entities)\n{\n    // to support the old way of doing things, when entities weren't use\n    // to determine links to pages or media and the URL was directly processed\n    // from the tweet text body\n    if (!entities)\n    {\n        string = string.replace(/(https{0,1}:\\/\\/\\S+)/g, '<a target=\"_blank\" href=\"$1\">$1</a>')\n            .replace(/@(\\S+)/g, '<a target=\"_blank\" href=\"http://twitter.com/$1\">@$1</a>')\n            .replace(/#(\\S+)/g,\n                '<a target=\"_blank\" href=\"http://twitter.com/#!/search?q=%23$1\">#$1</a>');\n\n        return string;\n    }\n\n    // extrapolate URLs from the identified entities of the tweet\n    var entitiesArray = [];\n\n    if (entities.urls)\n    {\n        for (var i = 0, iLimit = entities.urls.length; i < iLimit; i++)\n        {\n            var entity = entities.urls[i];\n\n            var html = '<a href=\"' +\n                entity.url +\n                '\" title=\"' +\n                entity.expanded_url +\n                '\" target=\"_blank\">' +\n                entity.display_url +\n                '</a>';\n\n            entitiesArray.push(\n            {\n                html: html,\n                original: entity.url,\n                start: entity.indices[0],\n                end: entity.indices[1]\n            });\n        }\n    }\n\n    // extrapolate URLs from the identified entities of the tweet\n    if (entities.media)\n    {\n        for (var i = 0, iLimit = entities.media.length; i < iLimit; i++)\n        {\n            var entity = entities.media[i];\n\n            var html = '<a href=\"' +\n                entity.url +\n                '\" title=\"' +\n                entity.expanded_url +\n                '\" target=\"_blank\">' +\n                entity.display_url +\n                '</a>';\n\n            entitiesArray.push(\n            {\n                html: html,\n                original: entity.url,\n                start: entity.indices[0],\n                end: entity.indices[1]\n            });\n        }\n    }\n\n    if (entities.user_mentions)\n    {\n        for (var i = 0, iLimit = entities.user_mentions.length; i < iLimit; i++)\n        {\n            var entity = entities.user_mentions[i];\n\n            var url = PULSE.CLIENT.TwitterController.getUserAccountUrl(entity.screen_name);\n\n            var html = '<a href=\"' +\n                url +\n                '\" target=\"_blank\">&#64;' +\n                entity.screen_name +\n                '</a>';\n\n            entitiesArray.push(\n            {\n                html: html,\n                original: '@' + entity.screen_name,\n                start: entity.indices[0],\n                end: entity.indices[1]\n            });\n        }\n    }\n\n    if (entities.hashtags)\n    {\n        for (var i = 0, iLimit = entities.hashtags.length; i < iLimit; i++)\n        {\n            var entity = entities.hashtags[i];\n\n            var url = PULSE.CLIENT.TwitterController.getSearchTagUrl(entity.text);\n\n            var html = '<a href=\"' +\n                url +\n                '\" target=\"_blank\">&#35;' +\n                entity.text +\n                '</a>';\n\n            entitiesArray.push(\n            {\n                html: html,\n                original: '#' + entity.text,\n                start: entity.indices[0],\n                end: entity.indices[1]\n            });\n        }\n    }\n\n    /**\n     * Since the entities are ordered by type, sort the array by their start indice,\n     * so they are in the order of appearances\n     */\n    entitiesArray.sort(function(a, b)\n    {\n        return a.start - b.start;\n    });\n\n    // re-do start/end indices for entities\n    // this is a fix accounting for two-byte characters read as ASCII\n    for (var i = 0, iLimit = entitiesArray.length; i < iLimit; i++)\n    {\n        var entity = entitiesArray[i];\n\n        var lowercaseString = string.toLowerCase();\n        var lowercaseOriginal = entity.original.toLowerCase();\n        entity.start = lowercaseString.search( lowercaseOriginal );\n        entity.end = entity.start + entity.original.length;\n    }\n\n    /**\n     * The new tweet body, with anchor tags rather than just plain text\n     * @type {String}\n     */\n    var newString = '';\n\n    /**\n     * Used to determine where in the original tweet body we're last\n     * @type {Number}\n     */\n    var previousIdx = 0;\n\n    /**\n     * Go through all entities (if any) and replace their plain text version with\n     * their anchor-tag equivalents\n     * @type {Number}\n     */\n    for (var i = 0, iLimit = entitiesArray.length; i < iLimit; i++)\n    {\n        var entity = entitiesArray[i];\n        var length = entity.start - previousIdx;\n\n        newString += string.substr(previousIdx, length);\n        newString += entity.html;\n\n        previousIdx = entity.end;\n    }\n\n    /**\n     * At the end, add what's left of the original string\n     */\n    newString += string.substr(previousIdx);\n\n    return newString;\n}"},"parseTwitterDate":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"timestamp"}]},"Source":"PULSE.CLIENT.TwitterController.parseTwitterDate = function(timestamp)\n{\n    var date = new Date(Date.parse(timestamp));\n    if (K.ie)\n    {\n        date = Date.parse(timestamp.replace(/( \\+)/, ' UTC$1'))\n    }\n\n    return date;\n}"},"getMediaImg":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"entities"},{"title":"param","description":null,"type":null,"name":"index"}]},"Source":"PULSE.CLIENT.TwitterController.getMediaImg = function(entities, index)\n{\n\n    var idx = typeof index === 'undefined' ? 0 : index,\n        img;\n\n    for (var type in entities)\n    {\n\n        if (entities.hasOwnProperty(type) && type === 'media')\n        {\n\n            var media = entities[type],\n                entry = media[idx];\n\n            img = entry.media_url;\n        }\n    }\n\n    return img\n}"}},"REDIRECTOR":{"checkRedirectRequired":{"Documentation":{"description":"Check whether or not we require a redirect to a mobile site. First check screen size then check\nour mobile agent string.","tags":[]},"Source":"PULSE.CLIENT.REDIRECTOR.checkRedirectRequired = function( device )\n{\n    var isMobile = this.isMobileAgent() || this.isMobileScreenSize();\n    return device !== ( isMobile ? \"Mobile\" : \"Desktop\" );\n}"},"checkAndRedirect":{"Documentation":{"description":"Check whether or not we require a redirect to a mobile site and redirect by examining the\n'redirect_url' parameter.","tags":[{"title":"param","description":"map of params:\n  device_type: one of MOBILE or DESKTOP\n  mobile_redirect_url: the url to redirect to if we're a mobile site\n  desktop_redirect_url: the url to redirect to if we're a desktop site","type":null,"name":"configValues"}]},"Source":"PULSE.CLIENT.REDIRECTOR.checkAndRedirect = function( configValues )\n{\n    if ( this.checkRedirectRequired( configValues.device_type ) )\n    {\n        var isMobile = this.isMobileAgent() || this.isMobileScreenSize();\n        if ( isMobile )\n        {\n            window.location = configValues.mobile_redirect_url;\n        } else\n        { //assume desktop required.\n            window.location = configValues.desktop_redirect_url;\n        }\n    }\n}"},"isMobileAgent":{"Documentation":{"description":"Is our browser agent registered as a mobile client?","tags":[{"title":"returns","description":"true or false depending on our","type":{"type":"NameExpression","name":"boolean"}}]},"Source":"PULSE.CLIENT.REDIRECTOR.isMobileAgent = function()\n{\n    var agent = navigator.userAgent.toLowerCase();\n    return /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(agent) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(agent.substr(0, 4));\n        //console.log(\"Navigator: \" + navigator.userAgent);\n        // return /(iphone|ipod|ipad|android|blackberry|windows ce|palm|symbian)/i.test(navigator.userAgent);\n}"},"isTabletAgent":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.REDIRECTOR.isTabletAgent"}]},"Source":"PULSE.CLIENT.REDIRECTOR.isTabletAgent = function()\n{\n    var agent = navigator.userAgent.toLowerCase();\n    var pattern = \"(iPad|SCH-I|xoom|NOOK|silk|kindle|GT-P|touchpad|kindle|sch-t|viewpad|bolt|playbook)/i\";\n    var regularExpr = new RegExp(pattern);\n    return (!!(agent.match( regularExpr ) ) );\n}"},"isMobileScreenSize":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.REDIRECTOR.isMobileScreenSize = function ()\n{\n    return screen.width <= 699 ;\n}"}},"Util":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.Util"}]},"Source":"PULSE.CLIENT.Util = function()\n{}","getValueOrBlank":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"value"}]},"Source":"PULSE.CLIENT.Util.getValueOrBlank = function( value )\n{\n\tif ( value === null )\n\t{\n\t    return '';\n\t}\n\telse\n\t{\n\t\treturn value;\n\t}\n}"},"getValueOrNBSP":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"value"}]},"Source":"PULSE.CLIENT.Util.getValueOrNBSP = function( value )\n{\n\tif ( value === null )\n\t{\n\t    return '&nbsp';\n\t}\n\telse\n\t{\n\t\treturn value;\n\t}\n}"},"CreatePlayerLookup":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"teams"},{"title":"param","description":null,"type":null,"name":"withTeam"}]},"Source":"PULSE.CLIENT.Util.CreatePlayerLookup = function( teams, withTeam )\n{\n\tvar playerLookup = {};\n\tfor ( var i = 0, ilimit = teams.length; i < ilimit; i++ )\n\t{\n\t\tvar team = teams[i];\n\t\tvar players = team.players;\n\t\tif( players )\n\t\t{\n\t\t\tfor ( var j = 0, jlimit = players.length; j < jlimit; j++ )\n\t\t\t{\n\t\t\t\tvar player = players[j];\n\t\t\t\tif( withTeam )\n\t\t\t\t{\n\t\t\t\t\tplayer.teamIds = [ team.team.id ];\n\t\t\t\t}\n\t\t\t\tplayerLookup[ player.id ] = player;\n\t\t\t}\n\t\t}\n\t}\n\treturn playerLookup;\n}"},"CreateSquadToMatchesLookup":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"schedule"},{"title":"param","description":null,"type":null,"name":"tournamentName"}]},"Source":"PULSE.CLIENT.Util.CreateSquadToMatchesLookup = function( schedule, tournamentName )\n{\n\tvar squadsLookup = {};\n\tfor ( var i = 0, ilimit = schedule.length; i < ilimit; i++ )\n\t{\n\t\tvar match = schedule[i],\n\t\t\tteam1 = match.team1,\n\t\t\tteam2 = match.team2;\n\n\t\tif( team1 && team2\n\t\t\t&& team1.team\n\t\t\t&& team2.team )\n\t\t{\n\t\t\tif( !squadsLookup[ team1.team.id ] )\n\t\t\t{\n\t\t\t\tsquadsLookup[ team1.team.id ] = [];\n\t\t\t}\n\t\t\tsquadsLookup[ team1.team.id ].push( {\n\t\t\t\tmatchId: match.matchId.name ,\n\t\t\t\ttournamentName: tournamentName\n\t\t\t} );\n\n\t\t\tif( !squadsLookup[ team2.team.id ] )\n\t\t\t{\n\t\t\t\tsquadsLookup[ team2.team.id ] = [];\n\t\t\t}\n\t\t\tsquadsLookup[ team2.team.id ].push( {\n\t\t\t\tmatchId: match.matchId.name ,\n\t\t\t\ttournamentName: tournamentName\n\t\t\t} );\n\t\t}\n\t}\n\treturn squadsLookup;\n}"},"GetCurrentInnings":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.Util.GetCurrentInnings = function( data )\n{\n\tvar innings = null;\n\tif ( data.innings && data.currentState )\n\t{\n\t\tinnings = data.innings[ data.currentState.currentInningsIndex ];\n\t}\n\treturn innings;\n}"},"isInt":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"number"}]},"Source":"PULSE.CLIENT.Util.isInt = function( number )\n{\n\treturn typeof(number)=='number'&&parseInt(number)==number;\n}"},"isUpcomingMatch":{"Documentation":{"description":"Function which determines whether a certain match is upcoming","tags":[{"title":"param","description":"index","type":null,"name":"match"}]},"Source":"PULSE.CLIENT.Util.isUpcomingMatch = function( index, schedule )\n{\n\tvar match = schedule[ index ];\n\tif( match.matchState === \"U\" )\n\t{\n\t\treturn PULSE.CLIENT.DateUtil.parseDateTime( match.matchDate );\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}"},"GetTeamAbbr":{"Documentation":{"description":"This method retrieves team abbreviation based on the index (0|1) in their original case.","tags":[]},"Source":"PULSE.CLIENT.Util.GetTeamAbbr = function ( data, index )\n{\n\tvar teamObj = data.teams[ index ];\n\tif ( teamObj )\n\t{\n\t\treturn teamObj.team.abbreviation;\n\t}\n\n\treturn '';\n}"},"GetBattingTeamObject":{"Documentation":{"description":"Returns an object that wraps batting team related data.","tags":[]},"Source":"PULSE.CLIENT.Util.GetBattingTeamObject = function( data, inningsIdx )\n{\n\tvar teamIdx = data.matchInfo.battingOrder[ inningsIdx ];\n\treturn data.matchInfo.teams[ teamIdx ];\n}"},"getMatchDuration":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"durations"}]},"Source":"PULSE.CLIENT.Util.getMatchDuration = function( durations )\n{\n\tif(durations)\n\t{\n\t\tvar minutes = 0;\n\t\tvar formattedTime = '';\n\n\t\tfor( var i = 0; i < durations.length; i++ )\n\t\t{\n\t\t\tif( !isNaN( parseInt( durations[i] ) ) )\n\t\t\t{\n\t\t\t\tminutes = minutes + parseInt( durations[i] );\n\t\t\t}\n\t\t}\n\n\t\tvar hr = Math.floor( minutes / 60 );\n\t\tvar min = Math.floor( ( minutes % 60 ) );\n\n\t\tif( minutes === 0 )\n\t\t{\n\t\t    return '';\n\t\t}\n\t\telse if( hr === 0 && min !== 0 )\n\t\t{\n\t\t    return min + 'm';\n\t\t}\n\t\telse if(  hr !== 0 && min === 0 )\n\t\t{\n\t\t    return hr + 'h';\n\t\t}\n\t\telse\n\t\t{\n\t\t    return  hr + 'h ' + min + 'm';\n\t\t}\n\t}\n\treturn '';\n}"},"getParamValueByName":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"name"}]},"Source":"PULSE.CLIENT.Util.getParamValueByName = function( name )\n{\n\tif( name )\n\t{\n\t\tvar paramVal = unescape((RegExp(name + '=' + '(.+?)(&|$)').exec(location.search)||[,null])[1]);\n\n\t\treturn paramVal;\n\t}\n\n\treturn 'null';\n}"},"getDataFromJsonCallback":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.Util.getDataFromJsonCallback = function( data )\n{\n\tvar dataObj = data[0];\n\tif ( dataObj )\n\t{\n\t\tif ( dataObj.success )\n\t\t{\n\t\t\treturn dataObj.params;\n\t\t}\n\t}\n\n\treturn null;\n}"},"applyActiveClass":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"selector"},{"title":"param","description":null,"type":null,"name":"selectedIndex"},{"title":"param","description":null,"type":null,"name":"className"}]},"Source":"PULSE.CLIENT.Util.applyActiveClass = function( selector, selectedIndex, className )\n{\n\t$( selector ).removeClass( className );\n\t$( selector ).eq( selectedIndex ).addClass( className );\n}"},"parseUrlParameters":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.Util.parseUrlParameters = function ()\n{\n\tvar url = window.location.href;\n\tvar params = {};\n\tvar idx = url.indexOf( '?' );\n\tif ( idx > -1 )\n\t{\n\t\tvar paramString = url.substr( idx + 1 );\n\t\tvar paramArray = paramString.split( '&' );\n\t\tfor ( var i = 0, ilimit = paramArray.length; i < ilimit; i++ )\n\t\t{\n\t\t\tvar param = paramArray[i];\n\t\t\tvar eq = param.indexOf( '=' );\n\n\t\t\tif ( eq > -1 )\n\t\t\t{\n\t\t\t\tvar key = unescape( param.slice( 0, eq ) );\n\t\t\t\tvar val = param.slice( eq + 1 ).split('#');\n\t\t\t\tval = unescape( val[0] );\n\t\t\t\tparams[ key ] = val;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tparams[ unescape( param ) ] = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn params;\n}"},"isEmptyObject":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"obj"}]},"Source":"PULSE.CLIENT.Util.isEmptyObject = function( obj )\n{\n\tvar counter = 0;\n\n\tfor( var property in obj )\n\t{\n\t\tcounter++;\n\t}\n\n\treturn counter === 0;\n}"},"isSimilarArray":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"arr1"},{"title":"param","description":null,"type":null,"name":"arr2"}]},"Source":"PULSE.CLIENT.Util.isSimilarArray = function( arr1, arr2 )\n{\n\tif ( arr1 && arr2 )\n\t{\n\t\treturn $(arr1).not(arr2).length === 0 && $(arr2).not(arr1).length === 0;\n\t}\n\n\treturn false;\n}"},"objectFoundById":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"arr"},{"title":"param","description":null,"type":null,"name":"obj"}]},"Source":"PULSE.CLIENT.Util.objectFoundById = function ( arr, obj )\n{\n\tfor ( var i = 0; i < arr.length; i++ )\n\t{\n\t\tvar t = arr[i];\n\t\tif ( obj.id === t.id )\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}"},"getFormattedDate":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"ISO8601DateString"},{"title":"param","description":null,"type":null,"name":"desiredFormat"}]},"Source":"PULSE.CLIENT.Util.getFormattedDate = function ( ISO8601DateString, desiredFormat )\n{\n\tvar matchDate = PULSE.CLIENT.DateUtil.parseDateTime( ISO8601DateString );\n\t//console.log(ISO8601DateString + ' ---- ' + matchDate);\n\tif ( matchDate )\n\t{\n\t\treturn matchDate.format( desiredFormat || 'dd mmmm yyyy' );\n\t}\n\treturn \"\";\n}"},"$hide":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"$element"}]},"Source":"PULSE.CLIENT.Util.$hide = function( $element )\n{\n\t$element.css({ position: \"absolute\", visibility: \"hidden\", display: \"block\" });\n}"},"$show":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"$element"}]},"Source":"PULSE.CLIENT.Util.$show = function( $element )\n{\n\t$element.css({ position: \"\", visibility: \"\", display: \"\" });\n}"},"getPlayerNames":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"fullName"}]},"Source":"PULSE.CLIENT.Util.getPlayerNames = function( fullName )\n{\n\tvar names \t\t= fullName.split( ' ' ),\n\t\tfirstName\t= names[0],\n\t\tsecondName \t= names.slice( 1 ).join( ' ' );\n\n\treturn {firstName : firstName, secondName : secondName };\n}"},"toOrdinal":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"n"},{"title":"param","description":null,"type":null,"name":"$wrap"}]},"Source":"PULSE.CLIENT.Util.toOrdinal = function( n, $wrap )\n{\n    var s = [\"th\",\"st\",\"nd\",\"rd\"],\n    \tv = n % 100;\n\n    if( typeof $wrap === \"undefined\" )\n    {\n    \treturn n+(s[(v-20)%10]||s[v]||s[0]);\n    }\n    else\n    {\n    \treturn n + $('<div>').append($wrap.text( s[(v-20)%10]||s[v]||s[0] )).html();\n    }\n}"},"layerIdxInArray":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"array"},{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"PULSE.CLIENT.Util.layerIdxInArray = function( array, id )\n{\n\tfor( var i = 0; i < array.length; i++ )\n\t{\n\t\tif( array[i].playerId === id )\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}"},"keyFromValue":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"object"},{"title":"param","description":null,"type":null,"name":"value"}]},"Source":"PULSE.CLIENT.Util.keyFromValue = function( object, value )\n{\n\tfor( var property in object )\n\t{\n\t\tif( object[property] === value )\n\t\t{\n\t\t\treturn property;\n\t\t}\n\t}\n}"},"addCommaForThousands":{"Documentation":{"description":"","tags":[{"title":"deprecated","description":"Use commafy instead"}]},"Source":"PULSE.CLIENT.Util.addCommaForThousands = function( number )\n{\n\tif( number === \"0\" )\n\t{\n\t\treturn \"0\";\n\t}\n\n\tvar output = [],\n\t\tremainder = number % 1000,\n\t\tresult = Math.floor( number / 1000 );\n\n\tvar normaliseRemainder = function( remainder )\n\t{\n\t\tif( remainder < 100 )\n\t\t{\n\t\t\tif( remainder < 10 )\n\t\t\t{\n\t\t\t\tremainder = \"00\" + remainder;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tremainder = \"0\" + remainder;\n\t\t\t}\n\t\t}\n\n\t\treturn remainder;\n\t};\n\n\toutput.push( result ? normaliseRemainder(remainder) : remainder );\n\twhile( result )\n\t{\n\t\tremainder = result % 1000;\n\t\tresult = Math.floor( result / 1000 );\n\t\toutput.push( result ? normaliseRemainder(remainder) : remainder );\n\t}\n\n\treturn output.reverse().join(',');\n}","normaliseRemainder":{"Documentation":{"description":"","tags":[{"title":"deprecated","description":"Use commafy instead"}]},"Source":"var normaliseRemainder = function( remainder )\n\t{\n\t\tif( remainder < 100 )\n\t\t{\n\t\t\tif( remainder < 10 )\n\t\t\t{\n\t\t\t\tremainder = \"00\" + remainder;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tremainder = \"0\" + remainder;\n\t\t\t}\n\t\t}\n\n\t\treturn remainder;\n\t}"}},"commafy":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"value"}]},"Source":"PULSE.CLIENT.Util.commafy = function ( value )\n{\n\tif ( typeof value === 'undefined' )\n\t{\n\t\treturn '';\n\t}\n\treturn value.toString().replace( /.(?=(?:.{3})+$)/g, '$&,' );\n}"},"getArrayFromString":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"string"}]},"Source":"PULSE.CLIENT.Util.getArrayFromString = function( string )\n{\n\tif( !string )\n\t{\n\t\treturn [];\n\t}\n\n\tvar array = string.split(',');\n\tfor( var i = 0; i < array.length; i++ )\n\t{\n\t\tarray[i] = $.trim( array[i] );\n\t}\n\treturn array;\n}"},"prepareParams":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"params"}]},"Source":"PULSE.CLIENT.Util.prepareParams = function( params )\n{\n\tvar paramsArray = [];\n    $.each( params, function( key, value ) {\n    \t// only add param if its value exists\n    \t// if the value's an array, make sure it's not empty\n    \tif( typeof value !== 'undefined' && ( Object.prototype.toString.call( value ) !== '[object Array]' || value.length ) )\n    \t{\n    \t\tvalue = [].concat( value ).join(\",\");\n\t        var keyValuePair = [ key, encodeURIComponent( value ) ];\n\t        paramsArray.push( keyValuePair.join(\"=\") );\n    \t}\n    } );\n\n    return \"?\" + paramsArray.join( \"&\" );\n}"},"getSafeCssClass":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"teamAbbr"}]},"Source":"PULSE.CLIENT.Util.getSafeCssClass = function(teamAbbr) {\n\treturn teamAbbr.split('&').join('');\n}"},"getKeyValuesFromString":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"string"},{"title":"param","description":null,"type":null,"name":"delimiter"}]},"Source":"PULSE.CLIENT.Util.getKeyValuesFromString = function(string, delimiter)\n{\n\tvar parts = string.split(delimiter),\n\t\tretObj = {};\n\n\t for (var i=0, length = parts.length; i < length; i++)\n\t {\n\t \tvar thisPart = parts[i];\n\t \tvar keyVal = thisPart.split(':');\n\n\t \tretObj[keyVal[0]] = keyVal[1];\n\t }\n\n\treturn retObj;\n}"},"isScoringID":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"meta"}]},"Source":"PULSE.CLIENT.Util.isScoringID = function(meta)\n{\n\tif (meta.fileName && meta.fileName === 'scoring')\n\t{\n\t\treturn true;\n\t}\n}"},"isEmpty":{"Documentation":{"description":"Given a jQuery element, it establishes whether it's empty or not","tags":[{"title":"param","description":null,"type":{"type":"NameExpression","name":"Object"},"name":"$el"},{"title":"return","description":"true if the element is empty (or only has spaces), false otherwise","type":{"type":"NameExpression","name":"Boolean"}}]},"Source":"PULSE.CLIENT.Util.isEmpty = function( $el )\n{\n    return !$.trim( $el.html() );\n}"},"getFontSize":{"Documentation":{"description":"Gets the font size of the body; used to do em to px and vice versa conversions","tags":[{"title":"return","description":"the font size, or undefined, if somehow no font size","type":{"type":"NameExpression","name":"Number"}}]},"Source":"PULSE.CLIENT.Util.getFontSize = function()\n{\n\tvar size = parseFloat( $( 'body' ).css( 'font-size' ) );\n\n\tif( !isNaN( size ) )\n\t{\n\t\treturn size;\n\t}\n}"},"emToPx":{"Documentation":{"description":"Converts em to pixels based on the page's font size; it defaults\nto 16px per em if no font size can be detected","tags":[{"title":"param","description":"value in em to be converted","type":{"type":"NameExpression","name":"Number"},"name":"em"},{"title":"return","description":"value in pixels","type":{"type":"NameExpression","name":"Number"}}]},"Source":"PULSE.CLIENT.Util.emToPx = function( em )\n{\n\tvar fontSize = PULSE.CLIENT.Util.getFontSize() || 16;\n\treturn fontSize * em;\n}"},"pxToEm":{"Documentation":{"description":"Converts pixels to em based on the page's font size; it defaults\nto 16px per em if no font size can be detected","tags":[{"title":"param","description":"value in em to be converted","type":{"type":"NameExpression","name":"Number"},"name":"px"},{"title":"return","description":"value in em","type":{"type":"NameExpression","name":"Number"}}]},"Source":"PULSE.CLIENT.Util.pxToEm = function( px )\n{\n\tvar fontSize = PULSE.CLIENT.Util.getFontSize() || 16;\n\treturn px / fontSize;\n}"}},"VIDEOSCROLL":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.VIDEOSCROLL"},{"title":"param","description":null,"type":null,"name":"container"}]},"Source":"PULSE.CLIENT.VIDEOSCROLL = function( container ) /*Container must be and ID*/\n{\n\tthis.container = container;\n\tthis.$container = $( container );\n\t// this.$tomove = $( container ).find('.video-to-move');\n\tthis.containerHeight = this.$container.outerHeight();\n\n\tthis.addListener();\n}","prototype":{"addListener":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.VIDEOSCROLL.prototype.addListener = function()\n{\n\tvar that = this;\n\tthis.$container.find('.video-scroll-trigger').waypoint(function(direction) {\n\t\tif( direction === 'up' )\n\t\t{\n\t\t\tthat.expand()\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthat.reduce();\n\t\t}\n\t});\n}"},"reduce":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.VIDEOSCROLL.prototype.reduce = function()\n{\n\tthis.$container.css( 'height',this.containerHeight );\n\n\tthis.$container.addClass('video-scroll-reduced');\n}"},"expand":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.VIDEOSCROLL.prototype.expand = function()\n{\n\tthis.$container.css( 'height','' );\n\n\tthis.$container.removeClass('video-scroll-reduced');\n}"}}},"XmlDataManager":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.XmlDataManager"}]},"Source":"PULSE.CLIENT.XmlDataManager = function ()\r\n{\r\n\tthis.urls = {};\r\n}","prototype":{"addFeed":{"Documentation":{"description":"Note that the interval is in SECONDS, and will be multiplied by 1000 to derive a millisecond\r\nvalue.","tags":[]},"Source":"PULSE.CLIENT.XmlDataManager.prototype.addFeed = function ( id, url, interval, targets )\r\n{\r\n    var currentTargets = this.urls[url] && this.urls[url].savedTargets ? this.urls[url].savedTargets : [];\r\n    \r\n\t// Remove any existing feed with this ID\r\n\tthis.removeFeed( url );\r\n\r\n\t// Save the callback name\r\n\tthis.urls[url] = { id:id, url:url, interval:interval };\r\n    \r\n    // Add all the targets to the current targets\r\n    for ( var i = 0, limit = targets.length; i < limit; i++ )\r\n    {\r\n        var needToAdd = true;\r\n        for ( var j = 0, jLimit = currentTargets.length; j < jLimit; j++ )\r\n        {\r\n            if ( targets[ i ] === currentTargets[ j ] )\r\n            {\r\n                needToAdd = false;\r\n                break;\r\n            }\r\n        }\r\n        if ( needToAdd )\r\n        {\r\n            currentTargets.push( targets[ i ] );\r\n        }\r\n    }\r\n    \r\n    this.urls[url].savedTargets = currentTargets;\r\n\t\r\n\t// Dynamically create the callback method\r\n\tvar that = this;\r\n\tvar f = function ( jsonpData )\r\n\t{\r\n\t\tif ( jsonpData )\r\n\t\t{\r\n\t\t\tvar payload = jsonpData.rss ? jsonpData : $.parseJSON( jsonpData );\r\n\t\t\t\r\n\t\t\t// Serialise the payload\r\n\t\t\tvar serialised = jsonpData;\r\n\t\t    if ( that.urls[url] && that.urls[url].lastData !== serialised )\r\n\t\t    {\r\n\t\t    \t// Save the new data\r\n\t\t    \tthat.urls[url].lastData = serialised;\r\n\t\t\t\t// Pass the data to all of the targets...\r\n\t\t\t\tfor ( var t = 0, tlimit = currentTargets.length; t < tlimit; t++ )\r\n\t\t\t\t{\r\n\t\t\t\t\t// ...if they are valid\r\n\t\t\t\t\tvar target = currentTargets[t];\r\n\t\t\t\t\tif ( target && target.onData )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttarget.onData( payload, id );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif( window.console && window.console.log ) console.log(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t    }\r\n\t\t}\r\n\t};\r\n\t\r\n\tvar e = function ( )\r\n\t{\r\n\t\tfor ( var t = 0, tlimit = currentTargets.length; t < tlimit; t++ )\r\n\t\t{\r\n\t\t\t// ...if they are valid\r\n\t\t\tvar target = currentTargets[t];\r\n\t\t\tif ( target && target.onError )\r\n\t\t\t{\r\n\t\t\t\ttarget.onError( id );\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t\r\n\t// Create the timer\r\n\tthat.urls[url].timer = new PULSE.CLIENT.XmlTimer( this.urls[url], f, e );\r\n}","f":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"jsonpData"}]},"Source":"var f = function ( jsonpData )\r\n\t{\r\n\t\tif ( jsonpData )\r\n\t\t{\r\n\t\t\tvar payload = jsonpData.rss ? jsonpData : $.parseJSON( jsonpData );\r\n\t\t\t\r\n\t\t\t// Serialise the payload\r\n\t\t\tvar serialised = jsonpData;\r\n\t\t    if ( that.urls[url] && that.urls[url].lastData !== serialised )\r\n\t\t    {\r\n\t\t    \t// Save the new data\r\n\t\t    \tthat.urls[url].lastData = serialised;\r\n\t\t\t\t// Pass the data to all of the targets...\r\n\t\t\t\tfor ( var t = 0, tlimit = currentTargets.length; t < tlimit; t++ )\r\n\t\t\t\t{\r\n\t\t\t\t\t// ...if they are valid\r\n\t\t\t\t\tvar target = currentTargets[t];\r\n\t\t\t\t\tif ( target && target.onData )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttarget.onData( payload, id );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif( window.console && window.console.log ) console.log(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t    }\r\n\t\t}\r\n\t}"},"e":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"var e = function ( )\r\n\t{\r\n\t\tfor ( var t = 0, tlimit = currentTargets.length; t < tlimit; t++ )\r\n\t\t{\r\n\t\t\t// ...if they are valid\r\n\t\t\tvar target = currentTargets[t];\r\n\t\t\tif ( target && target.onError )\r\n\t\t\t{\r\n\t\t\t\ttarget.onError( id );\r\n\t\t\t}\r\n\t\t}\r\n\t}"}},"startAll":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.XmlDataManager.prototype.startAll = function ()\r\n{\r\n\tfor ( var url in this.urls )\r\n\t{\r\n\t\tthis.start( url );\r\n\t}\r\n}"},"stopAll":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.XmlDataManager.prototype.stopAll = function ()\r\n{\r\n\tfor ( var url in this.urls )\r\n\t{\r\n\t\tthis.stop( url );\r\n\t}\r\n}"},"start":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"url"}]},"Source":"PULSE.CLIENT.XmlDataManager.prototype.start = function ( url )\r\n{\r\n\tif ( this.urls[url] && this.urls[url].timer )\r\n\t{\r\n\t\tthis.urls[url].timer.start();\r\n\t}\r\n}"},"stop":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"url"}]},"Source":"PULSE.CLIENT.XmlDataManager.prototype.stop = function ( url )\r\n{\r\n\tif ( this.urls[url] && this.urls[url].timer )\r\n\t{\r\n\t\tthis.urls[url].timer.stop();\r\n\t}\r\n}"},"removeFeed":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"url"}]},"Source":"PULSE.CLIENT.XmlDataManager.prototype.removeFeed = function ( url )\r\n{\r\n\tthis.stop( url );\r\n\t\r\n\tif ( this.urls[url] )\r\n\t{\r\n\t\tthis.urls[url] = undefined;\r\n\t}\r\n\t\r\n}"}}},"XmlTimer":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.XmlTimer"},{"title":"param","description":null,"type":null,"name":"params"},{"title":"param","description":null,"type":null,"name":"f"},{"title":"param","description":null,"type":null,"name":"e"}]},"Source":"PULSE.CLIENT.XmlTimer = function( params, f, e )\n{\n\tthis.initialise( params || {}, f, e );\n\n\tthis.running = false;\n}","prototype":{"initialise":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"params"},{"title":"param","description":null,"type":null,"name":"f"},{"title":"param","description":null,"type":null,"name":"e"}]},"Source":"PULSE.CLIENT.XmlTimer.prototype.initialise = function( params, f, e )\n{\n\tthis.url = params.url || '';\n\tthis.interval = params.interval * 1000 || '';\n\tthis.params = params.params || {};\n\tthis.callbackName = params.callback || '';\n\tthis.callback = f;\n\tthis.errorCallback = e;\n\tthis.name = params.id || 'un-named';\n}"},"start":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.XmlTimer.prototype.start = function()\n{\n\tif ( !this.running )\n\t{\n\t\tthis.running = true;\n\t\tthis.fireTimer( );\n\t}\n}"},"stop":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.XmlTimer.prototype.stop = function()\n{\n\tif ( this.running )\n\t{\n\t\tthis.running = false;\n\t\tthis.cancelTimer( );\n\t}\n}"},"fireTimer":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.XmlTimer.prototype.fireTimer = function()\n{\n\tvar that = this;\n\n\t$.get(\n\t\tthat.url,\n\t\tfunction( data )\n\t\t{\n\t\t\tthat.cancelTimer( );\n\t\t\tif ( that.interval > 0 && that.running )\n\t\t\t{\n\t\t\t\tthat.timer = setTimeout( function()\n\t\t\t\t{\n\t\t\t\t\tthat.fireTimer( );\n\t\t\t\t}, that.interval );\n\t\t\t}\n\t\t\tthat.callback( $.xmlToJSON( data ) );\n\t\t}\n\t)\n\t.error( function()\n\t\t{\n\t\t\tthat.errorCallback( );\n\t\t\tif ( that.interval > 0 && that.running )\n\t\t\t{\n\t\t\t\tthat.timer = setTimeout( function()\n\t\t\t\t{\n\t\t\t\t\tthat.fireTimer( );\n\t\t\t\t}, that.interval );\n\t\t\t}\n\t\t}\n\t);\n}"},"cancelTimer":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.XmlTimer.prototype.cancelTimer = function()\n{\n\tif ( this.timer )\n\t{\n\t\tclearTimeout( this.timer );\n\t}\n}"}}},"CRICKET":{"Utils":{"getRunsOverWickets":{"Documentation":{"description":"Generate a user-friendly score from the matchschedule2 team1 or team2 ScoringSummary object","tags":[]},"Source":"PULSE.CLIENT.CRICKET.Utils.getRunsOverWickets = function( scoringSummary )\r\n{\r\n\tif( scoringSummary && scoringSummary.innings )\r\n\t{\r\n\t\tif( !scoringSummary.innings[0].allOut )\r\n\t\t{\r\n\t\t\treturn scoringSummary.innings[0].runs + \"/\" + scoringSummary.innings[0].wkts;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn scoringSummary.innings[0].runs;\r\n\t\t}\r\n\t}\r\n\treturn \"\";\r\n}"},"getInningsScore":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.CRICKET.Utils.getInningsScore"},{"title":"param","description":null,"type":null,"name":"runs"},{"title":"param","description":null,"type":null,"name":"wickets"},{"title":"param","description":null,"type":null,"name":"allOut"},{"title":"param","description":null,"type":null,"name":"declared"},{"title":"param","description":null,"type":null,"name":"flip"},{"title":"param","description":null,"type":null,"name":"scoreDelimeter"}]},"Source":"PULSE.CLIENT.CRICKET.Utils.getInningsScore = function( runs, wickets, allOut, declared, flip, scoreDelimeter )\r\n{\r\n\tvar score = \"\";\r\n\r\n\tif( wickets !== undefined || runs !== undefined )\r\n\t{\r\n\t\tif( flip )\r\n\t\t{\r\n\t\t\tscore = ( !allOut ? ( wickets || 0 ) + ( scoreDelimeter || '/' ) : \"\" ) + ( runs || 0 ) + ( declared ? 'd' : '' );\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tscore = ( runs || 0 ) + ( !allOut ? ( scoreDelimeter || '/' ) + ( wickets || 0 ) : '' ) + ( declared ? 'd' : '' );\r\n\t\t}\r\n\t}\r\n\r\n\treturn score;\r\n}"},"getTeamLatestInnings":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"innings"},{"title":"param","description":null,"type":null,"name":"battingOrder"},{"title":"param","description":null,"type":null,"name":"index"}]},"Source":"PULSE.CLIENT.CRICKET.Utils.getTeamLatestInnings = function( innings, battingOrder, index )\r\n{\r\n\tvar lastInnings;\r\n\r\n\tfor( var i = 0; i < innings.length; i++ )\r\n\t{\r\n\t\tvar inning \t\t= innings[i],\r\n\t\t\tbattingIdx\t= battingOrder[i];\r\n\r\n\t\tif( battingIdx === index )\r\n\t\t{\r\n\t\t\tlastInnings = inning;\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn lastInnings;\r\n}"},"getFakeOversFraction":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"innings"}]},"Source":"PULSE.CLIENT.CRICKET.Utils.getFakeOversFraction = function ( innings )\r\n{\r\n\tvar oversFraction = \"\";\r\n\r\n\tif( innings && innings.ballsFaced )\r\n\t{\r\n\t\tvar completeOvers \t= innings.ballsFaced / 6,\r\n\t\t\tincompleteOver \t= innings.ballsFaced % 6,\r\n\t\t\toversFraction \t= parseInt( completeOvers ) + ( incompleteOver !== 0 ? '.' + incompleteOver : '' );\r\n\t}\t\r\n\t\r\n\treturn oversFraction;\r\n}"},"getPlayerNameHtml":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"name"}]},"Source":"PULSE.CLIENT.CRICKET.Utils.getPlayerNameHtml = function( name )\r\n{\r\n\tvar space = name.indexOf( ' ' );\t\t\t\r\n\tif ( space === -1 )\r\n\t{\r\n\t\tspace = 0;\r\n\t}\r\n\tvar start = name.substr( 0, space );\r\n\tvar rest = name.substr( space );\r\n\t\r\n\treturn start + '<span>' + rest + '</span>';\r\n}"},"formatTeamNameAbbr":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"teamname"}]},"Source":"PULSE.CLIENT.CRICKET.Utils.formatTeamNameAbbr = function( teamname )\r\n{\r\n\treturn teamname.split( '&' ).join( '&amp;' );\r\n}"},"compareRuns":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"stats1"},{"title":"param","description":null,"type":null,"name":"stats2"}]},"Source":"PULSE.CLIENT.CRICKET.Utils.compareRuns = function( stats1, stats2 )\r\n{\r\n\tvar run1 = stats1 && stats1.stats && stats1.stats.r !== '-' ? +stats1.stats.r : -1;\r\n\tvar run2 = stats2 && stats2.stats && stats2.stats.r !== '-' ? +stats2.stats.r : -1;\r\n\tvar sr1 = stats1 && stats1.stats && stats1.stats.sr !== '-' ? +stats1.stats.sr : -1;\r\n\tvar sr2 = stats2 && stats2.stats && stats2.stats.sr !== '-' ? +stats2.stats.sr : -1;\r\n\r\n\tvar compareOutput;\r\n\r\n\tif ( run1 < run2 )\r\n\t{\r\n\t\tcompareOutput = 1;\r\n\t}\r\n\telse if ( run1 > run2 )\r\n\t{\r\n\t\tcompareOutput =  -1;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tif ( sr1 || sr2 )\r\n\t\t{\r\n\t\t\tcompareOutput = 0;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif ( sr1 < sr2 )\r\n\t\t\t{\r\n\t\t\t\tcompareOutput = 1;\r\n\t\t\t}\r\n\t\t\telse if ( sr1 > sr2 )\r\n\t\t\t{\r\n\t\t\t\tcompareOutput = -1;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tcompareOutput = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn compareOutput;\r\n}"},"compareEconomy":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"stats1"},{"title":"param","description":null,"type":null,"name":"stats2"}]},"Source":"PULSE.CLIENT.CRICKET.Utils.compareEconomy = function( stats1, stats2 )\r\n{\r\n\tvar e1 = stats1 && stats1.stats && typeof stats1.stats.e !== 'undefined' && stats1.stats.e !== '-' ? +stats1.stats.e : -1;\r\n\tvar e2 = stats2 && stats2.stats && typeof stats1.stats.e !== 'undefined' && stats2.stats.e !== '-' ? +stats2.stats.e : -1;\r\n\r\n\tvar compareOutput;\r\n\t\r\n\tif( e1 === -1 && e2 !== -1 )\r\n\t{\r\n\t\tcompareOutput = 1;\r\n\t}\r\n\telse if( e1 !== -1 && e2 === -1 )\r\n\t{\r\n\t\tcompareOutput = -1;\r\n\t}\r\n\telse\r\n\t{\r\n\t    if ( e1 < e2 )\r\n\t    {\r\n\t        compareOutput = -1;\r\n\t    }\r\n\t    else if ( e1 > e2 )\r\n\t    {\r\n\t        compareOutput = 1;\r\n\t    }\r\n\t    else\r\n\t    {\r\n\t        compareOutput = 0;\r\n\t    }\r\n\t}\r\n    \r\n    return compareOutput;\r\n}"},"compareWickets":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"stats1"},{"title":"param","description":null,"type":null,"name":"stats2"}]},"Source":"PULSE.CLIENT.CRICKET.Utils.compareWickets = function( stats1, stats2 )\r\n{\r\n\tvar w1 = stats1 && stats1.stats && typeof stats1.stats.w !== 'undefined' ? +stats1.stats.w : -1;\r\n\tvar w2 = stats2 && stats2.stats && typeof stats1.stats.w !== 'undefined' ? +stats2.stats.w : -1;\r\n\tvar r1 = stats1 && stats1.stats && typeof stats1.stats.r !== 'undefined' ? +stats1.stats.r : -1;\r\n\tvar r2 = stats2 && stats2.stats && typeof stats1.stats.r !== 'undefined' ? +stats2.stats.r : -1;\r\n\r\n\tvar compareOutput = 0;\r\n\t\r\n    if ( w1 < w2 )\r\n    {\r\n        compareOutput = 1;\r\n    }\r\n    else if ( w1 > w2 )\r\n    {\r\n        compareOutput = -1;\r\n    }\r\n    else\r\n    {\r\n    \tif( w1 > 0 && w2 > 0 )\r\n    \t{\r\n\t        if ( r1 < r2 )\r\n\t\t    {\r\n\t\t        compareOutput = -1;\r\n\t\t    }\r\n\t\t    else if ( r1 > r2 )\r\n\t\t    {\r\n\t\t        compareOutput = 1;\r\n\t\t    }\r\n\t\t    else\r\n\t\t    {\r\n\t\t    \tcompareOutput = PULSE.CLIENT.CRICKET.Utils.compareEconomy( stats1, stats2 );\r\n\t\t    }\r\n    \t}\r\n\t    else\r\n\t    {\r\n\t    \tcompareOutput = PULSE.CLIENT.CRICKET.Utils.compareEconomy( stats1, stats2 );\r\n\t    }\r\n    }\r\n    \r\n    return compareOutput;\r\n}"},"mergeBattingStats":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"stats1"},{"title":"param","description":null,"type":null,"name":"stats2"}]},"Source":"PULSE.CLIENT.CRICKET.Utils.mergeBattingStats = function( stats1, stats2 )\r\n{\r\n\tvar mergedStat =\r\n\t{\r\n\t\tplayerId : -1,\r\n\t\tb: 0,\r\n\t\tr: 0,\r\n\t\t'4s': 0,\r\n\t\t'6s': 0\r\n\t}\r\n\r\n\tfor( var m in mergedStat )\r\n\t{\r\n\t\tif( m === 'playerId' )\r\n\t\t{\r\n\t\t\tmergedStat[m] = stats1[m];\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tmergedStat[m] += ( stats1[m] ? stats1[m] : 0 );\r\n\t\t\tmergedStat[m] += ( stats2[m] ? stats2[m] : 0 );\r\n\t\t}\r\n\t}\r\n\r\n\treturn mergedStat;\r\n}"},"mergeBowlingStats":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"stats1"},{"title":"param","description":null,"type":null,"name":"stats2"}]},"Source":"PULSE.CLIENT.CRICKET.Utils.mergeBowlingStats = function( stats1, stats2 )\r\n{\r\n\tvar mergedStat =\r\n\t{\r\n\t\tplayerId : -1,\r\n\t\tw: 0,\r\n\t\td: 0,\r\n\t\tnb: 0,\r\n\t\tr: 0,\r\n\t\tmaid: 0,\r\n\t\twd: 0\r\n\t}\r\n\r\n\tfor( var m in mergedStat )\r\n\t{\r\n\t\tif( m === 'playerId' )\r\n\t\t{\r\n\t\t\tmergedStat[m] = stats1[m];\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tmergedStat[m] += ( stats1[m] ? stats1[m] : 0 );\r\n\t\t\tmergedStat[m] += ( stats2[m] ? stats2[m] : 0 );\r\n\t\t}\r\n\t}\r\n\r\n\treturn mergedStat;\r\n}"},"fakeOversFractionToOversDecimal":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"string"}]},"Source":"PULSE.CLIENT.CRICKET.Utils.fakeOversFractionToOversDecimal = function( string )\r\n{\r\n\tvar over = 0;\r\n\tvar BALLS_IN_OVER = 6;\r\n\t\r\n    if ( string != null && string.match( \"\\\\d+(\\\\.\\\\d)?\" ) )\r\n    {\r\n        var index = string.indexOf( \".\" );\r\n        if ( index == -1 )\r\n        {\r\n            overs = parseInt( string );\r\n        }\r\n        else\r\n        {\r\n            overs = ( parseInt( string.substring( 0, index ) ) ) +\r\n                \t( parseFloat( string.substring( index + 1 ) / BALLS_IN_OVER ) );\r\n        }\r\n    }\r\n\r\n    return overs;\r\n}"},"getBPString":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"bp"}]},"Source":"PULSE.CLIENT.CRICKET.Utils.getBPString = function( bp )\r\n{\r\n\treturn bp.innings + '.' + bp.over + '.' + bp.ball;\r\n}"},"convertBallsToOvers":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"balls"}]},"Source":"PULSE.CLIENT.CRICKET.Utils.convertBallsToOvers = function( balls )\r\n{\r\n\tif ( balls > 0 )\r\n\t{\r\n\t\treturn Math.floor( balls / 6 ) + '.' + ( balls % 6 );\r\n\t}\r\n\t\r\n\treturn '';\r\n}"},"getStandingsForValue":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"standing"}]},"Source":"PULSE.CLIENT.CRICKET.Utils.getStandingsForValue = function( standing )\r\n{\r\n\tif( standing.totalRunsFor )\r\n\t{\r\n\t\tvar overs = PULSE.CLIENT.CRICKET.Utils.convertBallsToOvers( standing.totalBallsFor );\r\n\t\treturn standing.totalRunsFor + '/' + overs;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn \"\";\r\n\t}\r\n}"},"getStandingsAgainstValue":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"standing"}]},"Source":"PULSE.CLIENT.CRICKET.Utils.getStandingsAgainstValue = function( standing )\r\n{\r\n\tif( standing.totalRunsAgainst )\r\n\t{\r\n\t\tvar overs = PULSE.CLIENT.CRICKET.Utils.convertBallsToOvers( standing.totalBallsAgainst );\r\n\t\treturn standing.totalRunsAgainst + '/' + overs;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn \"\";\r\n\t}\r\n}"}},"Util":{"convertBallsToOvers":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.CRICKET.Util.convertBallsToOvers"},{"title":"param","description":null,"type":null,"name":"balls"}]},"Source":"PULSE.CLIENT.CRICKET.Util.convertBallsToOvers = function( balls )\n{\t\n\tif ( +balls > 0 )\n\t{\n\t\treturn Math.floor( balls / 6 ) + '.' + ( balls % 6 );\n\t}\n\t\n\treturn '';\n}"},"inningsScore":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"runs"},{"title":"param","description":null,"type":null,"name":"wkts"},{"title":"param","description":null,"type":null,"name":"allOut"}]},"Source":"PULSE.CLIENT.CRICKET.Util.inningsScore = function( runs, wkts, allOut )\n{\n\treturn runs + ( !allOut ? \"/\" + (wkts || 0) : \"\" );\n}"},"oversLimit":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"ballsFaced"}]},"Source":"PULSE.CLIENT.CRICKET.Util.oversLimit = function ( ballsFaced )\n{\n\tvar oversLimit = \"\";\n\tvar completeOvers = ballsFaced / 6;\n\tvar incompleteOver = ballsFaced % 6;\n\tif( ballsFaced )\n\t{\n\t\tvar oversFaced = parseInt( completeOvers ) + ( incompleteOver !== 0 ? '.' + incompleteOver : '' );\n\t\toversLimit = oversFaced + '/' + this.MAX_OVERS_LIMIT;\n\t}\n\t\n\treturn oversLimit;\n}"},"getFormattedDateTime":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"dateStr"},{"title":"param","description":null,"type":null,"name":"withYear"}]},"Source":"PULSE.CLIENT.CRICKET.Util.getFormattedDateTime = function ( dateStr, withYear )\n{\n\t// parseDateTime gives you local date-time\n\tvar matchDate = PULSE.CLIENT.DateUtil.parseDateTime( dateStr );\n\tif ( matchDate )\n\t{\t\n\t\tvar matchTimeIST = PULSE.CLIENT.DateUtil.calcTimeByOffset( matchDate, this.IST_OFFSET ).time.substr( 0, 5 );\t\t\n\t\tvar formattedDateTime = dateFormat( matchDate, 'dddd mmmm dS yyyy|HH:MM| Z' ).split( this.DATE_TIME_DELIMITER );\n\t\tvar mDate = formattedDateTime[0]; \n\t\tvar mTime = formattedDateTime[1]; \n\t\tvar timezone = formattedDateTime[2];\t\n\n\t\treturn { date    : mDate, \n\t\t\t\t time    : mTime,\n\t\t\t\t timeIST : mTime === matchTimeIST ? '' : matchTimeIST,\n\t\t\t\t timezone: mTime === matchTimeIST ? ' IST' : timezone };\n\t}\t\n}"},"fakeOversFractionToOversDecimal":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"string"}]},"Source":"PULSE.CLIENT.CRICKET.Util.fakeOversFractionToOversDecimal = function( string )\n{\n\tvar over = 0;\n\tvar BALLS_IN_OVER = 6;\n\n\tif ( string != null && string.match( \"\\\\d+(\\\\.\\\\d)?\" ) )\n\t{\n\t\tvar index = string.indexOf( \".\" );\n\t\tif ( index == -1 )\n\t\t{\n\t\t\tovers = parseInt( string );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tovers = ( parseInt( string.substring( 0, index ) ) )\n\t\t\t\t\t+ ( parseFloat( string.substring( index + 1 )\n\t\t\t\t\t\t\t/ BALLS_IN_OVER ) );\n\t\t}\n\t}\n\n\treturn overs;\n}"},"isInt":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"number"}]},"Source":"PULSE.CLIENT.CRICKET.Util.isInt = function( number )\n{\n\treturn typeof(number) === 'number' && parseInt(number) === number;\n}"},"getNames":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.CRICKET.Util.getNames = function ( data )\n{\n\tvar array = [];\n\tif( data.matchInfo.teams )\n\t{\n\t\tif( data.matchInfo.teams[0] && data.matchInfo.teams[0].team )\n\t\t{\n\t\t\tarray.push( data.matchInfo.teams[0].team.fullName );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tarray.push( 'TBD' );\n\t\t}\n\t\t\n\t\tif( data.matchInfo.teams[1] && data.matchInfo.teams[1].team )\n\t\t{\n\t\t\tarray.push( data.matchInfo.teams[1].team.fullName );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tarray.push( 'TBD' );\n\t\t}\n\t}\n\treturn array;\n}"},"getInningsScore":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"runs"},{"title":"param","description":null,"type":null,"name":"wickets"},{"title":"param","description":null,"type":null,"name":"allOut"},{"title":"param","description":null,"type":null,"name":"declared"},{"title":"param","description":null,"type":null,"name":"flip"},{"title":"param","description":null,"type":null,"name":"scoreDelimeter"}]},"Source":"PULSE.CLIENT.CRICKET.Util.getInningsScore = function( runs, wickets, allOut, declared, flip, scoreDelimeter )\n{\n\tvar score = \"\";\n\n\tif( wickets !== undefined || runs !== undefined )\n\t{\n\t\tif( flip )\n\t\t{\n\t\t\tscore = ( !allOut ? ( wickets || 0 ) + ( scoreDelimeter || '/' ) : \"\" ) + ( runs || 0 ) + ( declared ? 'd' : '' );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tscore = ( runs || 0 ) + ( !allOut ? ( scoreDelimeter || '/' ) + ( wickets || 0 ) : '' ) + ( declared ? 'd' : '' );\n\t\t}\n\t}\n\n\treturn score;\n}"},"getTeamLatestInnings":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"innings"},{"title":"param","description":null,"type":null,"name":"battingOrder"},{"title":"param","description":null,"type":null,"name":"index"}]},"Source":"PULSE.CLIENT.CRICKET.Util.getTeamLatestInnings = function( innings, battingOrder, index )\n{\n\tvar lastInnings;\n\n\tfor( var i = 0; i < innings.length; i++ )\n\t{\n\t\tvar inning \t\t= innings[i],\n\t\t\tbattingIdx\t= battingOrder[i];\n\n\t\tif( battingIdx === index )\n\t\t{\n\t\t\tlastInnings = inning;\n\t\t}\n\t}\n\t\n\treturn lastInnings;\n}"},"getFakeOversFraction":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"innings"}]},"Source":"PULSE.CLIENT.CRICKET.Util.getFakeOversFraction = function ( innings )\n{\n\tvar oversFraction = \"\";\n\n\tif( innings && innings.ballsFaced )\n\t{\n\t\tvar completeOvers \t= innings.ballsFaced / 6,\n\t\t\tincompleteOver \t= innings.ballsFaced % 6,\n\t\t\toversFraction \t= parseInt( completeOvers ) + ( incompleteOver !== 0 ? '.' + incompleteOver : '' );\n\t}\t\n\t\n\treturn oversFraction;\n}"},"getTeamInnings":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"index"},{"title":"param","description":null,"type":null,"name":"matchData"},{"title":"param","description":null,"type":null,"name":"flip"}]},"Source":"PULSE.CLIENT.CRICKET.Util.getTeamInnings = function( index, matchData, flip )\n{\n\tvar scoringData = matchData.scoringData;\n\tvar scheduleData = matchData.scheduleData;\n\tvar innings = [];\n\n\t//if scoring data exists, it takes precedence\n\tif( scoringData )\n\t{\n\t\tvar battingOrder= scoringData.matchInfo.battingOrder,\n\t\t\tcii \t\t= scoringData.currentState.currentInningsIndex;\n\n\t\tif( scoringData.innings )\n\t\t{\n\t\t\tfor( var i = 0; i < scoringData.innings.length; i++ )\n\t\t\t{\n\t\t\t\tvar inning \t\t= scoringData.innings[i],\n\t\t\t\t\tbattingIdx\t= battingOrder[i],\n\t\t\t\t\tbowlingIdx\t= battingIdx === 0 ? 1 : 0,\n\t\t\t\t\tbattingTeam = scoringData.matchInfo.teams[ battingIdx ],\n\t\t\t\t\tbowlingTeam = scoringData.matchInfo.teams[ bowlingIdx ];\n\n\t\t\t\tif( inning.scorecard && battingIdx === index )\n\t\t\t\t{\n\t\t\t\t\tinnings.push( PULSE.CLIENT.CRICKET.Util.getInningsScore( inning.scorecard.runs, inning.scorecard.wkts, inning.scorecard.allOut, inning.declared, flip ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//if a new innings has started and an innings object \n\t\t//doesn't exist for the new innings and\n\t\t//batting index for this innings === index\n\t\t//add an empty score\n\t\tif( ( !scoringData.innings || scoringData.innings.length < ( cii + 1 ) ) && battingOrder && battingOrder[cii] === index )\n\t\t{\n\t\t\tinnings.push( PULSE.CLIENT.CRICKET.Util.getMatchState( matchData ) === 'L' ? '0/0' : '' );\n\t\t}\n\t}\n\telse if( scheduleData && scheduleData['team' + ( index + 1 ) ] && scheduleData['team' + ( index + 1 ) ].innings )\n\t{\n\t\tfor( var i = 0; i < scheduleData['team' + ( index + 1 ) ].innings.length; i++ )\n\t\t{\n\t\t\tvar inning = scheduleData['team' + ( index + 1 ) ].innings[i];\n\n\t\t\t// sometimes the data feed returns an innings object, \n\t\t\t// but with no balls faced means the inns never started, so it needs to be ignored\n\t\t\tif( inning.ballsFaced )\n\t\t\t{\n\t\t\t\tinnings.push( PULSE.CLIENT.CRICKET.Util.getInningsScore( inning.runs, inning.wkts, inning.allOut, inning.declared, flip ) );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn innings;\n}"},"getMatchState":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"matchData"}]},"Source":"PULSE.CLIENT.CRICKET.Util.getMatchState = function( matchData )\n{\n\tvar scoringData = matchData.scoringData;\n\tvar scheduleData = matchData.scheduleData;\n\n\tif( scoringData )\n\t{\n\t\tvar matchState = '';\n\n\t\tswitch( scoringData.currentState.phase )\n\t\t{\n\t\t\tcase 'E':\n\t\t\tcase 'U':\n\t\t\t\tmatchState = 'U';\n\t\t\t\tbreak;\n\t\t\tcase 'C':\n\t\t\tcase 'O':\n\t\t\t\tmatchState = 'C';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tmatchState = 'L';\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn matchState;\n\t}\n\telse if( scheduleData )\n\t{\n\t\tif( PULSE.CLIENT.DateUtil && PULSE.CLIENT.DateUtil.parseDateTime )\n\t\t{\n\t\t\tvar matchDate \t= scheduleData.matchDate,\n\t\t\tdate \t\t= PULSE.CLIENT.DateUtil.parseDateTime( matchDate ),\n\t\t\tnow  \t\t= new Date();\n\n\t\t\tif( date && date - now > 0 )\n\t\t\t{\n\t\t\t\treturn \"U\";\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn scheduleData.matchState;\n\t}\n}"},"getOverProgress":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"index"},{"title":"param","description":null,"type":null,"name":"matchData"}]},"Source":"PULSE.CLIENT.CRICKET.Util.getOverProgress = function( index, matchData )\n{\n\tvar scoringData = matchData.scoringData;\n\tvar scheduleData = matchData.scheduleData;\n\tvar overProgress = '';\n\n\t//if scoring data exists, it takes precedence\n\tif( scoringData && scoringData.innings )\n\t{\n\t\tvar battingOrder= scoringData.matchInfo.battingOrder,\n\t\t\tcii \t\t= scoringData.currentState.currentInningsIndex,\n\t\t\tinning\t\t= PULSE.CLIENT.CRICKET.Util.getTeamLatestInnings( scoringData.innings, battingOrder, index ),\n\t\t\tbatting \t= PULSE.CLIENT.CRICKET.Util.teamIsBatting( index, matchData ),\n\t\t\tlimited\t\t= scoringData.matchInfo.isLimitedOvers,\n\t\t\tmatchType\t= scoringData.matchInfo.matchType,\n\t\t\tmaxOvers\t= matchType === 'ODI' ? 50 : 20;\n\n\t\tif( inning && inning.overProgress )\n\t\t{\n\t\t\tif( limited )\n\t\t\t{\n\t\t\t\toverProgress = inning.overProgress + '/' + ( inning.rodl ? inning.rodl.overs : maxOvers );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//for unlimited overs only add over progress if team is batting\n\t\t\t\t//this means also checking if an innings has started but no innings object exists for it\n\t\t\t\tif(  scoringData.matchInfo.matchState !== 'L' || batting )\n\t\t\t\t{\n\t\t\t\t\tif( scoringData.innings.length < ( cii + 1 ) && batting )\n\t\t\t\t\t{\n\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\toverProgress = inning.overProgress;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n\telse if( scheduleData && scheduleData['team' + ( index + 1 ) ] && scheduleData['team' + ( index + 1 ) ].innings )\n\t{\n\t\tvar innings \t= scheduleData['team' + ( index + 1 )].innings,\n\t\t\tinning \t\t= innings[ innings.length - 1 ],\n\t\t\toverFraction= PULSE.CLIENT.CRICKET.Utils.getFakeOversFraction( inning ),\n\t\t\toversLimit  = inning.maxBalls ? PULSE.CLIENT.CRICKET.Util.getFakeOversFraction( { ballsFaced: inning.maxBalls } ) : undefined,\n\t\t\tmatchType\t= scheduleData.matchType,\n\t\t\tmaxOvers\t= matchType === 'ODI' ? 50 : 20,\n\t\t\tlimited\t\t= matchType === 'TEST' ? false : true;\n\t\t\t\n\t\tif( inning && overFraction )\n\t\t{\n\t\t\tif( limited )\n\t\t\t{\n\t\t\t\toverProgress = overFraction + '/' + ( oversLimit || maxOvers );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\toverProgress = overFraction;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn overProgress;\n}"},"getTeamAbbr":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"index"},{"title":"param","description":null,"type":null,"name":"matchData"},{"title":"param","description":null,"type":null,"name":"defaultString"}]},"Source":"PULSE.CLIENT.CRICKET.Util.getTeamAbbr = function( index, matchData, defaultString )\n{\n\tvar scoringData = matchData.scoringData;\n\tvar scheduleData = matchData.scheduleData;\n\n\tvar abbr \t\t= defaultString || 'TBD',\n\t\tteamNumber \t= 'team' + ( index + 1 );\n\n\tif( scoringData && scoringData.matchInfo && scoringData.matchInfo.teams )\n\t{\n\t\tvar team = scoringData.matchInfo.teams[index];\n\n\t\tabbr = team && team.team ? team.team.abbreviation : 'TBD';\n\t}\n\telse if( scheduleData && scheduleData[teamNumber] && scheduleData[teamNumber].team )\n\t{\n\t\tabbr = scheduleData[teamNumber].team.abbreviation;\n\t}\n\n\treturn abbr;\n}"},"getTeamId":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"index"},{"title":"param","description":null,"type":null,"name":"matchData"}]},"Source":"PULSE.CLIENT.CRICKET.Util.getTeamId = function( index, matchData )\n{\n\tvar scoringData = matchData.scoringData;\n\tvar scheduleData = matchData.scheduleData;\n\n\tvar id = -1,\n\t\tteamNumber \t= 'team' + ( index + 1 );\n\t\n\tif( scoringData && scoringData.matchInfo && scoringData.matchInfo.teams )\n\t{\n\t\tvar team = scoringData.matchInfo.teams[index];\n\n\t\tid = team && team.team ? team.team.id : -1;\n\t}\n\telse if( scheduleData && scheduleData[teamNumber] && scheduleData[teamNumber].team )\n\t{\n\t\tid = scheduleData[teamNumber].team.id;\n\t}\n\n\treturn id;\n}"},"getTeamFullName":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"index"},{"title":"param","description":null,"type":null,"name":"matchData"},{"title":"param","description":null,"type":null,"name":"defaultString"}]},"Source":"PULSE.CLIENT.CRICKET.Util.getTeamFullName = function( index, matchData, defaultString )\n{\n\tvar scoringData = matchData.scoringData;\n\tvar scheduleData = matchData.scheduleData;\n\n\tvar fullName \t= defaultString || 'TBD',\n\t\tteamNumber \t= 'team' + ( index + 1 );\n\n\tif( scoringData && scoringData.matchInfo && scoringData.matchInfo.teams )\n\t{\n\t\tvar team = scoringData.matchInfo.teams[index];\n\n\t\tfullName = team && team.team ? team.team.fullName : 'TBD';\n\t}\n\telse if( scheduleData && scheduleData[teamNumber] && scheduleData[teamNumber].team )\n\t{\n\t\tfullName = scheduleData[teamNumber].team.fullName;\n\t}\n\n\treturn fullName;\n}"},"getTeamShortName":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"index"},{"title":"param","description":null,"type":null,"name":"matchData"},{"title":"param","description":null,"type":null,"name":"defaultString"}]},"Source":"PULSE.CLIENT.CRICKET.Util.getTeamShortName = function( index, matchData, defaultString )\n{\n\tvar scoringData = matchData.scoringData;\n\tvar scheduleData = matchData.scheduleData;\n\n\tvar shortName \t= defaultString || 'TBD',\n\t\tteamNumber \t= 'team' + ( index + 1 );\n\n\tif( scoringData && scoringData.matchInfo && scoringData.matchInfo.teams )\n\t{\n\t\tvar team = scoringData.matchInfo.teams[index];\n\n\t\tshortName = team && team.team ? team.team.shortName : 'TBD';\n\t}\n\telse if( scheduleData && scheduleData[teamNumber] && scheduleData[teamNumber].team )\n\t{\n\t\tshortName = scheduleData[teamNumber].team.shortName;\n\t}\n\n\treturn shortName;\n}"},"teamIsBatting":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"index"},{"title":"param","description":null,"type":null,"name":"matchData"}]},"Source":"PULSE.CLIENT.CRICKET.Util.teamIsBatting = function( index, matchData )\n{\n\tvar scoringData = matchData.scoringData;\n\tvar scheduleData = matchData.scheduleData;\n\n\t//only determined via scoring data\n\t//(schedule doesn't contain enough info)\n\tif( scoringData && scoringData.matchInfo.battingOrder )\n\t{\n\t\tvar cii\t\t\t= scoringData.currentState.currentInningsIndex,\n\t\t\tinProgress\t= scoringData.currentState.inProgress,\n\t\t\tbattingOrder= scoringData.matchInfo.battingOrder,\n\t\t\tbattingIdx\t= battingOrder[cii];\n\n\t\treturn ( inProgress && battingIdx === index );\n\t}\n}"},"teamIsBowling":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"index"},{"title":"param","description":null,"type":null,"name":"matchData"}]},"Source":"PULSE.CLIENT.CRICKET.Util.teamIsBowling = function( index, matchData )\n{\n\tvar scoringData = matchData.scoringData;\n\tvar scheduleData = matchData.scheduleData;\n\n\t//only deermined via scoring data\n\t//(schedule doesn't contain enough info)\n\tif( scoringData && scoringData.matchInfo.battingOrder )\n\t{\n\t\tvar cii\t\t\t= scoringData.currentState.currentInningsIndex,\n\t\t\tinProgress\t= scoringData.currentState.inProgress,\n\t\t\tbattingOrder= scoringData.matchInfo.battingOrder,\n\t\t\tbattingIdx\t= battingOrder[cii],\n\t\t\tbowlingIdx\t= battingIdx === 0 ? 1 : 0;\n\n\t\treturn ( inProgress && bowlingIdx === index );\n\t}\n}"}},"GroupStandingsViewModel":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.CRICKET.GroupStandingsViewModel"}]},"Source":"PULSE.CLIENT.CRICKET.GroupStandingsViewModel = function()\n{\n\tvar that \t\t= this;\n\t\n\tthat.isFirst\t= true;\n}","prototype":{"onData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.CRICKET.GroupStandingsViewModel.prototype.onData = function( data )\n{\n\tif( !this.tournamentId.name() )\n\t{\n\t\t//populate tournamentId information\n\t\tthis.tournamentId.name( data.tournamentId.name );\n\t\tthis.tournamentId.id( data.tournamentId.id );\n\t}\n\t\n\tthis.populateStandings( data );\n}"},"populateStandings":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.CRICKET.GroupStandingsViewModel.prototype.populateStandings = function( data )\n{\n\tvar that = this;\n\tif (   data \n\t\t&& data.tournamentId.name === that.tournamentId.name()\n\t\t&& data.groups \n\t\t&& data.groups.length > 0 )\n\t{\n\t\t//add / update all standings found in the JSON\n\t\tfor( var i = 0; i < data.groups.length; i++ )\n\t\t{\n\t\t\tvar group = data.groups[i];\n\t\t\t\n\t\t\tthat.setGroup( i );\n\t\t\t\n\t\t\tfor( var j = 0; j < group.standings.length; j++ )\n\t\t\t{\n\t\t\t\tvar standing = group.standings[j];\n\t\t\t\tthat.setStanding( standing, i, j );\n\t\t\t}\n\t\t\t\n\t\t\t//find / remove any standings that have since been removed\n\t\t\tthat.removeDeleted( data.groups[i].standings, i );\n\t\t}\n\t\t\n\t}\n}"},"setGroup":{"Documentation":{"description":"sets either the pre-existing team object or a new instance of Standing","tags":[]},"Source":"PULSE.CLIENT.CRICKET.GroupStandingsViewModel.prototype.setGroup = function( i )\n{\n\tvar that = this;\n\t\n\tif( !that.groups().length > i )\n\t{\n\t\tthat.groups.push( { standings: ko.observableArray( [] ) } );\n\t}\n}"},"setStanding":{"Documentation":{"description":"sets either the pre-existing team object or a new instance of Standing","tags":[]},"Source":"PULSE.CLIENT.CRICKET.GroupStandingsViewModel.prototype.setStanding = function( data, i, j )\n{\n\tvar that = this;\n\t\n\tif( that.groups()[i].standings().length > j )\n\t{\n\t\tthat.groups()[i].standings()[j].populate( data );\n\t}\n\telse\n\t{\n\t\tthat.groups()[i].standings.push( new that.Standing( data, that ) );\n\t}\n}"},"removeDeleted":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"standings"},{"title":"param","description":null,"type":null,"name":"i"}]},"Source":"PULSE.CLIENT.CRICKET.GroupStandingsViewModel.prototype.removeDeleted = function( standings, i )\n{\n\tvar that \t= this,\n\t\tdiff \t= that.groups()[i].standings().length - standings.length;\n\t\n\t//if the model has more objects than the data, remove the last ones\n\tif( diff > 0 )\n\t{\n\t\tthat.groups()[i].standings.splice( that.groups()[i].standings().length - diff );\n\t}\n}"},"Standing":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"standing"},{"title":"param","description":null,"type":null,"name":"parent"}]},"Source":"PULSE.CLIENT.CRICKET.GroupStandingsViewModel.prototype.Standing = function( standing, parent )\n{\n\tvar that = this;\n\t\n\tthat.position \t= ko.observable('');\n\tthat.points \t= ko.observable('');\n\tthat.team \t\t= \n\t{\n\t\tabbreviation\t: ko.observable(''),\n\t\tfullname\t\t: ko.observable(''),\n\t\tshortname\t\t: ko.observable(''),\n\t\tprimaryColor\t: ko.observable(''),\n\t\tsecondaryColor\t: ko.observable(''),\n\t\tid\t\t\t\t: ko.observable('')\n\t};\n\t\n\t//custom IPLT20 observables\n\t\n\tthat.team.teamUrl = ko.computed( function()\n\t{\n\t\tvar fullname = that.team.fullname();\n\t\treturn PULSE.CLIENT.IPLT20.Common.getTeamURL( fullname );\n\t} );\n\t\n\tthat.team.teamClass = ko.computed( function()\n\t{\n\t\tvar abbr = that.team.abbreviation().toLowerCase();\n\t\treturn 'tLogo16x30 ' + abbr;\n\t} );\n\t\n\tthat.team.imageUrl = ko.computed( function()\n\t{\n\t\treturn PULSE.CLIENT.IPLT20.Common.makeImgUrl( 'resource/i/css-support/trans.png' );\n\t} );\n\t\n\tthat.team.hasQualified = ko.computed( function()\n\t{\n\t\tvar abbr \t\t= that.team.abbreviation(),\n\t\t\tseasonName \t= parent.tournamentId.name();\n\t\t\n\t\treturn PULSE.CLIENT.IPLT20.Common.hasQualified( seasonName, that.team.abbreviation() );\n\t} );\n\t\n\tthat.team.hasQualifiedText = ko.computed( function()\n\t{\n\t\tvar hasQualified = that.team.hasQualified();\n\t\treturn hasQualified ? 'Q' : that.position();\n\t} );\n\n\tthat.team.inCurrentSeason = ko.computed( function()\n\t{\n\t\tvar abbr = that.team.abbreviation();\n\t\treturn  PULSE.CLIENT.IPLT20.Common.teamInCurrentSeason( abbr );\n\t} );\n\t\n\t//end - custom IPLT20 observables\n\t\n\tthat.played \t\t\t= ko.observable('');\n\tthat.won \t\t\t\t= ko.observable('');\n\tthat.lost \t\t\t\t= ko.observable('');\n\tthat.tied \t\t\t\t= ko.observable('');\n\tthat.noresult \t\t\t= ko.observable('');\n\tthat.netrunrate \t\t= ko.observable('');\n\tthat.totalRunsFor \t\t= ko.observable('');\n\tthat.totalRunsAgainst \t= ko.observable('');\n\tthat.totalBallsFor \t\t= ko.observable('');\n\tthat.totalBallsAgainst \t= ko.observable('');\n\t\n\tthat.totalFor\t= ko.computed( function()\n\t{\n\t\tvar runsFor = that.totalRunsFor(),\n\t\t\tballsFor= that.totalBallsFor();\n\t\t\n\t\treturn runsFor ? runsFor + '/' + ( PULSE.CLIENT.CRICKET.Util.convertBallsToOvers( ballsFor ) ) : \"\";\n\t} );\n\t\n\tthat.totalAgainst= ko.computed( function()\n\t{\n\t\tvar runsAgainst = that.totalRunsAgainst(),\n\t\t\tballsAgainst= that.totalBallsAgainst();\n\t\t\n\t\treturn runsAgainst ? runsAgainst + '/' + ( PULSE.CLIENT.CRICKET.Util.convertBallsToOvers( ballsAgainst ) ) : \"\";\n\t} );\n\n\tthat.recentForm \t= ko.observableArray([]);\n\t\n\tthat.recentFormFive = ko.computed( function()\n\t{\n\t\tvar recentForm \t= that.recentForm(),\n\t\t\tfiltered\t= [],\n\t\t\ti\t\t\t= recentForm.length;\n\t\t\n\t\twhile( i-- )\n\t\t{\n\t\t\tif( recentForm.length - i > 5)break;\n\t\t\t\n\t\t\tfiltered.push( recentForm[i] );\n\t\t}\n\t\t\n\t\treturn filtered;\n\t} );\n\t\n\tif( standing )\n\t{\n\t\tthat.populate( standing );\n\t}\n}","prototype":{"populate":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"standing"}]},"Source":"PULSE.CLIENT.CRICKET.GroupStandingsViewModel.prototype.Standing.prototype.populate = function( standing )\n{\n\tvar that = this;\n\tthat.position( standing.position || '' );\n\tthat.points( standing.points || '0' );\n\t\n\tthat.team.abbreviation( standing.team.abbreviation || '' );\n\tthat.team.fullname( standing.team.fullname || '' );\n\tthat.team.shortname( standing.team.shortname || '' );\n\tthat.team.primaryColor( standing.team.primaryColor || '' );\n\tthat.team.secondaryColor( standing.team.secondaryColor || '' );\n\tthat.team.id( standing.team.id || '' );\n\t\n\tthat.played( standing.played || '0' );\n\tthat.won( standing.won || '0' );\n\tthat.lost( standing.lost || '0' );\n\tthat.tied( standing.tied || '0' );\n\tthat.noresult( standing.noresult || '0' );\n\tthat.netrunrate( standing.netrunrate || '0.000' );\n\tthat.totalRunsFor( standing.totalRunsFor || '0' );\n\tthat.totalRunsAgainst( standing.totalRunsAgainst || '0' );\n\tthat.totalBallsFor( standing.totalBallsFor || '0' );\n\tthat.totalBallsAgainst( standing.totalBallsAgainst || '0' );\n\t\n\t//takes recent form\n\tfor( var i = 0; i < standing.recentForm.length; i++ )\n\t{\n\t\tvar recent = standing.recentForm[i];\n\t\tthat.setForm( recent, i );\n\t}\n\n\t//find / remove any standings that have since been removed\n\tthat.removeDeleted( standing.recentForm );\n}"},"setForm":{"Documentation":{"description":"Adds / updates the recentForm","tags":[]},"Source":"PULSE.CLIENT.CRICKET.GroupStandingsViewModel.prototype.Standing.prototype.setForm = function( data, i )\n{\n\tvar that = this;\n\t\n\tif( that.recentForm().length > i )\n\t{\n\t\tthat.recentForm()[i].update( data );\n\t}\n\telse\n\t{\n\t\tthat.recentForm.push( new that.Form( data ) );\n\t}\n}"},"removeDeleted":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"recentForm"}]},"Source":"PULSE.CLIENT.CRICKET.GroupStandingsViewModel.prototype.Standing.prototype.removeDeleted = function( recentForm )\n{\n\tvar that \t= this,\n\t\tdiff \t= that.recentForm().length - recentForm.length;\n\t\n\t//if the model has more objects than the data, remove the last ones\n\tif( diff > 0 )\n\t{\n\t\tthat.recentForm.splice( that.recentForm().length - diff );\n\t}\n}"},"Form":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.CRICKET.GroupStandingsViewModel.prototype.Standing.prototype.Form = function( data )\n{\n\tvar that = this;\n\t\n\tthat.update( data );\n\t\n\tthat.outcomeClass = ko.computed( function()\n\t{\n\t\tswitch( that.outcome )\n\t\t{\n\t\t\tcase \"T\":\n\t\t\t\treturn \"tie\";\n\t\t\tcase \"W\":\n\t\t\t\treturn \"win\";\n\t\t\tcase \"L\":\n\t\t\t\treturn \"lose\";\n\t\t\tdefault:\n\t\t\t\treturn \"\";\n\t\t}\n\t} );\n}","prototype":{"update":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.CRICKET.GroupStandingsViewModel.prototype.Standing.prototype.Form.prototype.update = function( data )\n{\n\tvar that = this;\n\t\n\tfor( d in data )\n\t{\n\t\tthat[d] = data[d];\n\t}\n}"}}}}},"update":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.CRICKET.GroupStandingsViewModel.prototype.update = function( data )\n{\n\tvar that = this;\n\t\n\tko.mapping.fromJS( data, PULSE.CLIENT.CRICKET.GroupStandingsMapping, that );\n\n\tif( that.isFirst )\n\t{\n\t\t//ipl specific observables\n\t\t\n\t\tthat.iplSeasonText = ko.computed( function()\n\t\t{\n\t\t\tvar name = that.tournamentId.name();\n\t\t\t\n\t\t\tswitch( name )\n\t\t\t{\n\t\t\t\tcase \"ipl2012\":\n\t\t\t\t\treturn \"All teams play 16 matches. Top 4 advance to Play-offs.\";\n\t\t\t\tdefault:\n\t\t\t\t\treturn \"\";\n\t\t\t}\n\t\t} );\n\n\t\tthat.seasonYear = ko.computed( function()\n\t\t{\n\t\t\tvar seasonName = that.tournamentId.name(),\n\t\t\t\tseasonYear = PULSE.CLIENT.IPLT20.Common.getSeasonYearFromSeasonName( seasonName );\n\t\t\treturn seasonYear;\n\t\t} );\n\t\t\n\t\tthat.iplStatsPageUrl = ko.computed( function()\n\t\t{\n\t\t\tvar seasonYear = that.seasonYear();\n\t\t\treturn \"/stats/\" + seasonYear;\n\t\t} );\n\t\t\n\t\t//end - ipl specific observables\n\t\t\n\t\tthat.isFirst = false;\n\t}\n}"}}},"MatchScheduleViewModel":{"prototype":{"addFilter":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.CRICKET.MatchScheduleViewModel.prototype.addFilter"}]},"Source":"PULSE.CLIENT.CRICKET.MatchScheduleViewModel.prototype.addFilter = function()\n{\n\tvar that = this;\n\t\n\tif( !that.filter )\n\t{\n\t\t//TODO: extract into a filter subclass\n\t\tthat.filter =\n\t\t{\n\t\t\tteamId: ko.observable( '' ),\n\t\t\tteamsFilterOpen : ko.observable( false ),\n\t\t\tvenueId: ko.observable( '' ),\n\t\t\tvenueFilterOpen : ko.observable( false )\n\t\t}\n\t\t\n\t\tthat.filter.filteredResults = ko.computed( function ()\n\t\t{\n\t\t\tvar filteredData= [],\n\t\t\t\tteamId \t\t= that.filter.teamId(),\n\t\t\t\tvenueId \t= that.filter.venueId(),\n\t\t\t\ti \t\t\t= that.schedule().length;\n\t\t\t\n\t\t\twhile ( i-- ) \n\t\t\t{\n\t\t\t\tvar ms = that.schedule()[i];\n\t\t\t\tif ( ms.matchState() === 'C' )\n\t\t\t\t{\n\t\t\t\t\tif ( ( !teamId || \n\t\t\t\t\t\t\t( ms.team1.team.id() === +teamId ) || \n\t\t\t\t\t\t\t( ms.team2.team.id() === +teamId ) ) &&\n\t\t\t\t\t\t ( !venueId || ( ms.venue.id() === venueId  ) ) )\n\t\t\t\t\t{\n\t\t\t\t\t\tfilteredData.push( ms );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn filteredData;\n\t\t} );\n\n\t\tthat.filter.filteredSchedule = ko.computed( function ()\n\t\t{\n\t\t\tvar filteredData= [],\n\t\t\t\tteamId \t\t= that.filter.teamId(),\n\t\t\t\tvenueId \t= that.filter.venueId(),\n\t\t\t\tsLength \t= that.schedule().length;\n\t\t\t\n\t\t\tfor ( var i = 0; i < sLength; i++ ) \n\t\t\t{\n\t\t\t\tvar ms = that.schedule()[i];\n\t\t\t\tif ( ms.matchState() === 'U' || ms.matchState() === 'L' )\n\t\t\t\t{\n\t\t\t\t\tif ( ( !teamId || \n\t\t\t\t\t\t\t( ms.team1.team.id() === +teamId ) || \n\t\t\t\t\t\t\t( ms.team2.team.id() === +teamId ) ) &&\n\t\t\t\t\t\t ( !venueId || ( ms.venue.id() === venueId  ) ) )\n\t\t\t\t\t{\n\t\t\t\t\t\tfilteredData.push( ms );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn filteredData;\n\t\t} );\n\t\t\n\t\tthat.filter.getAllTeams = ko.computed( function ()\n\t\t{\n\t\t\tvar teams \t= [],\n\t\t\t\tschedule= that.schedule();\n\t\t\t\t\n\t\t\tvar idIsInTeams = function( id )\n\t\t\t{\n\t\t\t\tfor ( var i = 0; i < teams.length; i++ ) \n\t\t\t\t{\n\t\t\t\t\tvar team = teams[i];\n\t\t\t\t\tif( team.id() === id )return true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < schedule.length; i++ ) \n\t\t\t{\n\t\t\t\tvar team1 = schedule[i].team1;\n\t\t\t\tvar team2 = schedule[i].team2;\n\t\t\t\t\n\t\t\t\tif ( team1.team.id() )\n\t\t\t\t{\n\t\t\t\t\tif ( !idIsInTeams( team1.team.id() ) )\n\t\t\t\t\t{\n\t\t\t\t\t\tteams.push( team1.team );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( team2.team.id() )\n\t\t\t\t{\n\t\t\t\t\tif ( !idIsInTeams( team2.team.id() ) )\n\t\t\t\t\t{\n\t\t\t\t\t\tteams.push( team2.team );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Sort teams array ( by abbreviation ) alphabetically\n\t\t\tteams.sort( function(a, b) \n\t\t\t{\n\t\t        var abbrA = a.abbreviation().toLowerCase(), abbrB = b.abbreviation().toLowerCase();\n\t\t        if ( abbrA < abbrB ) //sort abbreviation ascending\n\t\t        {\n\t\t        \treturn -1;\n\t\t        }\n\t\t        if ( abbrA > abbrB )\n\t\t        {\n\t\t            return 1;\n\t\t        }        \n\t\t        return 0; //default return value (no sorting)\n\t\t    });\n\t\t\t\n\t\t\treturn teams;\n\t\t} );\n\t\t\n\t\tthat.filter.getAllVenues = function ()\n\t\t{\n\t\t\tvar venues \t= [],\n\t\t\t\tschedule= that.schedule();\n\n\t\t\tvar idIsInVenues = function( id )\n\t\t\t{\n\t\t\t\tfor ( var i = 0; i < venues.length; i++ ) \n\t\t\t\t{\n\t\t\t\t\tvar venue = venues[i];\n\t\t\t\t\tif( venue.id() === id )return true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor ( var i = 0; i < schedule.length; i++ ) \n\t\t\t{\n\t\t\t\tvar venue = schedule[i].venue;\n\t\t\t\t\n\t\t\t\tif ( venue )\n\t\t\t\t{\n\t\t\t\t\tif ( !idIsInVenues( venue.id() ) )\n\t\t\t\t\t{\n\t\t\t\t\t\tvenues.push( venue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Sort venues ( by city ) array alphabetically \n\t\t\tvenues.sort( function(a, b) \n\t\t\t{\n\t\t        var cityA = a.city().toLowerCase(), cityB = b.city().toLowerCase();\n\t\t        if ( cityA < cityB ) //sort city ascending\n\t\t        {\n\t\t        \treturn -1;\n\t\t        }\n\t\t        if ( cityA > cityB )\n\t\t        {\n\t\t            return 1;\n\t\t        }        \n\t\t        return 0; //default return value (no sorting)\n\t\t    });\n\t\t\t\n\t\t\treturn venues;\n\t\t};\n\t\t\n\t\tthat.filter.allTeamsDD = ko.computed( function ()\n\t\t{\n\t\t\t//add a temporary team to the all teams list\n\t\t\tvar allTeams= new PULSE.CLIENT.CRICKET.MatchScheduleViewModel.Team( that ),\n\t\t\t\tteams\t= that.filter.getAllTeams();\n\t\t\t\n\t\t\tallTeams.populate( { id: '', abbreviation: 'All Teams' } )\n\t\t\t\n\t\t\tteams.unshift( allTeams );\n\t\t\t\n\t\t\treturn teams;\n\t\t} );\n\n\t\tthat.filter.allVenuesDD = ko.computed( function ()\n\t\t{\n\t\t\t//add a temporary team to the all teams list\n\t\t\tvar allVenues\t= new PULSE.CLIENT.CRICKET.MatchScheduleViewModel.Venue( that ),\n\t\t\t\tvenues\t\t= that.filter.getAllVenues();\n\t\t\t\n\t\t\tallVenues.populate( { id:'', city:'All Venues' } )\n\t\t\t\n\t\t\tvenues.unshift( allVenues );\n\t\t\t\n\t\t\treturn venues;\n\t\t} );\n\n\t\tthat.filter.teamById = function ( id )\n\t\t{\n\t\t\tvar schedule = that.schedule();\n\t\t\t\n\t\t\tfor ( var i = 0; i < schedule.length; i++ ) \n\t\t\t{\n\t\t\t\tvar team1 = schedule[i].team1;\n\t\t\t\tvar team2 = schedule[i].team2;\n\t\t\t\t\n\t\t\t\tif ( team1.team.id() === id )\n\t\t\t\t{\n\t\t\t\t\treturn team1.team;\n\t\t\t\t}\n\n\t\t\t\tif ( team2.team.id() === id )\n\t\t\t\t{\n\t\t\t\t\treturn team2.team;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthat.filter.venueById = function ( id )\n\t\t{\n\t\t\tvar schedule = that.schedule();\n\t\t\t\n\t\t\tfor ( var i = 0; i < schedule.length; i++ ) \n\t\t\t{\n\t\t\t\tvar venue = schedule[i].venue;\n\t\t\t\t\n\t\t\t\tif ( venue.id() === id )\n\t\t\t\t{\n\t\t\t\t\treturn venue;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\tthat.filter.selectedTeamAbbr = ko.computed( function ()\n\t\t{\n\t\t\tvar teamId \t= that.filter.teamId(),\n\t\t\t\tteam\t= that.filter.teamById( teamId );\n\t\t\t\n\t\t\tif( team )\n\t\t\t{\n\t\t\t\treturn team.abbreviation();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn 'All Teams';\n\t\t\t}\n\t\t} );\n\n\t\tthat.filter.selectedVenue = ko.computed( function ()\n\t\t{\n\t\t\tvar venueId = that.filter.venueId(),\n\t\t\t\tvenue\t= that.filter.venueById( venueId );\n\t\t\n\t\t\tif( venue )\n\t\t\t{\n\t\t\t\treturn venue.city();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn 'All Venues';\n\t\t\t}\n\t\t} );\n\t\t\n\t\tthat.filter.teamsFilterClass = ko.computed( function()\n\t\t{\n\t\t\tvar teamsFilterOpen = that.filter.teamsFilterOpen();\n\t\t\t\n\t\t\treturn 'filterCntr' + ( teamsFilterOpen ? ' open' : '' );\n\t\t} );\n\n\t\tthat.filter.venueFilterClass = ko.computed( function()\n\t\t{\n\t\t\tvar venueFilterOpen = that.filter.venueFilterOpen();\n\t\t\t\n\t\t\treturn 'filterCntr' + ( venueFilterOpen ? ' open' : '' );\n\t\t} );\n\t\t\n\t\tthat.filter.toggleTeams = function( d, e )\n\t\t{\n\t\t\tthat.filter.teamsFilterOpen( !that.filter.teamsFilterOpen() );\n\t\t\t\n\t\t\tif( that.filter.venueFilterOpen() )\n\t\t\t{\n\t\t\t\tthat.filter.venueFilterOpen( false );\n\t\t\t}\n\t\t}\n\n\t\tthat.filter.toggleVenue = function( d, e )\n\t\t{\n\t\t\tthat.filter.venueFilterOpen( !that.filter.venueFilterOpen() );\n\n\t\t\tif( that.filter.teamsFilterOpen() )\n\t\t\t{\n\t\t\t\tthat.filter.teamsFilterOpen( false );\n\t\t\t}\n\t\t}\n\t\t\n\t\tthat.filter.filterTeams = function( d, e )\n\t\t{\n\t\t\tthat.filter.teamId( d.id() );\n\t\t\t\n\t\t\tthat.filter.toggleTeams();\n\t\t}\n\n\t\tthat.filter.filterVenues = function( d, e )\n\t\t{\n\t\t\tthat.filter.venueId( d.id() );\n\t\t\t\n\t\t\tthat.filter.toggleVenue();\n\t\t}\n\t}\n}"},"onData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.CRICKET.MatchScheduleViewModel.prototype.onData = function( data )\n{\n\tif( !this.tournamentId.name() )\n\t{\n\t\t//populate tournamentId information\n\t\tthis.tournamentId.name( data.tournamentId.name );\n\t\tthis.tournamentId.id( data.tournamentId.id );\n\t}\n\t\n\tthis.populateSchedule( data );\n}"},"populateSchedule":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.CRICKET.MatchScheduleViewModel.prototype.populateSchedule = function( data )\n{\n\tvar that = this;\n\tif (   data \n\t\t&& data.tournamentId.name === that.tournamentId.name()\n\t\t&& data.schedule.length > 0 )\n\t{\n\t\t//add / update all standings found in the JSON\n\t\t\t\n\t\tfor( var i = 0; i < data.schedule.length; i++ )\n\t\t{\n\t\t\tvar schedule = data.schedule[i];\n\t\t\tthat.setSchedule( schedule, i );\n\t\t}\n\t\t\n\t\t//find / remove any standings that have since been removed\n\t\tthat.removeDeleted( data.schedule );\n\t\t\n\t}\n}"},"setSchedule":{"Documentation":{"description":"sets either the pre-existing team object or a new instance of Standing","tags":[]},"Source":"PULSE.CLIENT.CRICKET.MatchScheduleViewModel.prototype.setSchedule = function( data, i )\n{\n\tvar that = this;\n\t\n\tif( that.schedule().length > i )\n\t{\n\t\tthat.schedule()[i].populate( data );\n\t}\n\telse\n\t{\n\t\tthat.schedule.push( new PULSE.CLIENT.CRICKET.MatchScheduleViewModel.ScheduleEntry( data, that ) );\n\t}\n}"},"removeDeleted":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"schedule"},{"title":"param","description":null,"type":null,"name":"i"}]},"Source":"PULSE.CLIENT.CRICKET.MatchScheduleViewModel.prototype.removeDeleted = function( schedule, i )\n{\n\tvar that \t= this,\n\t\tdiff \t= that.schedule().length - schedule.length;\n\t\n\t//if the model has more objects than the data, remove the last ones\n\tif( diff > 0 )\n\t{\n\t\tthat.schedule().splice( that.schedule().length - diff );\n\t}\n}"}},"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.CRICKET.MatchScheduleViewModel"}]},"Source":"PULSE.CLIENT.CRICKET.MatchScheduleViewModel = function()\n{\n\tvar that \t\t\t= this;\n\tthat.schedule \t\t= ko.observableArray( [] );\n\tthat.tournamentId \t= new PULSE.CLIENT.CRICKET.MatchScheduleViewModel.TournamentId();\n\t\n\t//computed\n\tthat.seasonYear = ko.computed( function()\n\t{\n\t\tvar seasonName = that.tournamentId.name(),\n\t\t\tseasonYear = PULSE.CLIENT.IPLT20.Common.getSeasonYearFromSeasonName( seasonName );\n\t\treturn seasonYear;\n\t} );\n\t\n\tthat.matchCentreLink = ko.computed( function()\n\t{\n\t\tvar year = that.seasonYear();\n\t\t\n\t\treturn '/match/' + year + '/';\n\t} );\n\n\t//bindable event listeners\n\tthat.openMatchCentre = function( d, e )\n\t{\n\t\tvar name \t\t\t= d.matchId.name(),\n\t\t\tmatchNumber \t= PULSE.CLIENT.IPLT20.Common.getMatchNumber( name ),\n\t\t\tmatchCentreLink = that.matchCentreLink(),\n\t\t\tmatchUrl \t\t= matchCentreLink + matchNumber;\n\t\t\n\t\twindow.open( matchUrl, 'IPLT20', \n\t\t\t'height=672,width=980,menubar=no,resizable=no,scrollbars=no,status=no,toolbar=no,location=no' ); \n\t};\n}","ScheduleEntry":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"schedule"},{"title":"param","description":null,"type":null,"name":"root"}]},"Source":"PULSE.CLIENT.CRICKET.MatchScheduleViewModel.ScheduleEntry = function( schedule, root )\n{\n\tvar that = this;\n\t\n\tthat.matchState \t\t= ko.observable('');\n\tthat.matchDate \t\t\t= ko.observable('');\n\tthat.description \t\t= ko.observable('');\n\tthat.matchPreviewLink \t= ko.observable('');\n\tthat.photostreamLink \t= ko.observable('');\n\tthat.reportLink \t\t= ko.observable('');\n\tthat.highlightsLink \t= ko.observable('');\n\tthat.matchType\t\t\t= ko.observable('');\n\tthat.matchStatus =\n\t{\n\t\ttext \t: ko.observable(''),\n\t\toutcome : ko.observable('')\n\t}\n\t\n\tthat.matchId = new PULSE.CLIENT.CRICKET.MatchScheduleViewModel.MatchId();\n\t\n\tthat.venue = new PULSE.CLIENT.CRICKET.MatchScheduleViewModel.Venue( root );\n\t\n\tthat.team1 = new PULSE.CLIENT.CRICKET.MatchScheduleViewModel.ScoringSummary( root );\n\tthat.team2 = new PULSE.CLIENT.CRICKET.MatchScheduleViewModel.ScoringSummary( root );\n\n\tthat.isToday = ko.computed( function() {\n\t\t\n\t\tvar mDate\t\t\t= that.matchDate(),\n\t\t\tmatchDate \t\t= PULSE.CLIENT.DateUtil.parseDateTime( mDate ),\n\t\t\tdate \t\t\t= new Date(),\n\t\t\ttmp_matchDate \t= new Date(matchDate.getTime());\n\t\t\n\t\ttmp_matchDate.setHours(0,0,0,0);\n\t\tdate.setHours(0,0,0,0);\n\t\t\n\t\treturn (tmp_matchDate.getTime() === date.getTime());\n\t} );\n\t\n\tif( schedule )\n\t{\n\t\tthat.populate( schedule );\n\t}\n}","prototype":{"populate":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"schedule"}]},"Source":"PULSE.CLIENT.CRICKET.MatchScheduleViewModel.ScheduleEntry.prototype.populate = function( schedule )\n{\n\tvar that = this;\n\tthat.matchState( schedule.matchState );\n\tthat.matchDate( schedule.matchDate );\n\tthat.description( schedule.description || '' );\n\tthat.matchPreviewLink( schedule.matchPreviewLink || '' );\n\tthat.photostreamLink( schedule.photostreamLink || '' );\n\tthat.reportLink( schedule.reportLink || '' );\n\tthat.highlightsLink( schedule.highlightsLink || '' );\n\tthat.matchType( schedule.matchType || '' );\n\t\n\tif( schedule.matchStatus )\n\t{\n\t\tthat.matchStatus.text( schedule.matchStatus.text );\n\t\tthat.matchStatus.outcome( schedule.matchStatus.outcome );\n\t}\n\n\tif( schedule.matchId )\n\t{\n\t\tthat.matchId.populate( schedule.matchId );\n\t}\n\t\n\tif( schedule.venue )\n\t{\n\t\tthat.venue.populate( schedule.venue )\n\t}\n\n\tif( schedule.team1 )\n\t{\n\t\tthat.team1.populate( schedule.team1 );\n\t}\n\t\n\tif( schedule.team2 )\n\t{\n\t\t//team\n\t\tthat.team2.populate( schedule.team2 );\n\t}\n\t\n\t//computed\n\tthat.formattedDateTime = ko.computed( function()\n\t{\n\t\tvar matchDate = that.matchDate();\n\t\t\n\t\treturn PULSE.CLIENT.CRICKET.Util.getFormattedDateTime( matchDate, true );\n\t} );\n\t\n\tthat.formattedVenue = ko.computed( function()\n\t{\n\t\tvar fullName \t= that.venue.fullName(),\n\t\t\tcity\t\t= that.venue.city();\n\t\t\n\t\treturn fullName + ', ' + city;\n\t} );\n\t\n\tthat.matchDetails = ko.computed( function()\n\t{\n\t\tvar formattedDateTime \t= that.formattedDateTime().date,\n\t\t\tformattedVenue\t\t= that.formattedVenue();\n\t\t\n\t\treturn formattedDateTime + ', ' + formattedVenue;\n\t} );\n\n\tthat.scheduleDetails = ko.computed( function()\n\t{\n\t\tvar formattedDateTime \t= that.formattedDateTime();\n\t\t\n\t\treturn formattedDateTime.time + ' ' + formattedDateTime.timezone + ' (' + formattedDateTime.timeIST + ' IST)';\n\t} );\n}"}}},"ScoringSummary":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"root"}]},"Source":"PULSE.CLIENT.CRICKET.MatchScheduleViewModel.ScoringSummary = function( root )\n{\n\tthis.team \t= new PULSE.CLIENT.CRICKET.MatchScheduleViewModel.Team( root );\n\tthis.innings= ko.observableArray( [] );\n}","prototype":{"populate":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.CRICKET.MatchScheduleViewModel.ScoringSummary.prototype.populate = function( data )\n{\n\tthis.team.populate( data.team );\n\t\n\tif( data.innings && data.innings.length )\n\t{\n\t\tvar diff = data.innings.length - this.innings().length;\n\t\t\n\t\tif( diff > 0 )\n\t\t{\n\t\t\tfor( var i = 0; i < diff; i++ )\n\t\t\t{\n\t\t\t\tthis.innings.push( new PULSE.CLIENT.CRICKET.MatchScheduleViewModel.Innings() );\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor( var i = 0; i < data.innings.length; i++ )\n\t\t{\n\t\t\tvar innings = data.innings[i];\n\t\t\tthis.innings()[i].populate( innings );\n\t\t}\n\t}\n}"}}},"TournamentId":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.CRICKET.MatchScheduleViewModel.TournamentId = function()\n{\n\tthis.id \t= ko.observable('');\n\tthis.name \t= ko.observable('');\n}"},"MatchId":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.CRICKET.MatchScheduleViewModel.MatchId = function()\n{\n\tthis.id\t\t\t\t= ko.observable('');\n\tthis.name\t\t\t= ko.observable('');\n\tthis.tournamentId\t= new PULSE.CLIENT.CRICKET.MatchScheduleViewModel.TournamentId();\n}","prototype":{"populate":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.CRICKET.MatchScheduleViewModel.MatchId.prototype.populate = function( data )\n{\n\tthis.id( data.id || '' );\n\tthis.name( data.name || '' );\n\t\n\tif( data.tournamentId )\n\t{\n\t\tthis.tournamentId.id( data.tournamentId.id );\n\t\tthis.tournamentId.name( data.tournamentId.name );\n\t}\n}"}}},"Team":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"root"}]},"Source":"PULSE.CLIENT.CRICKET.MatchScheduleViewModel.Team = function( root )\n{\n\tvar that = this;\n\tthis.abbreviation\t= ko.observable('');\n\tthis.fullname\t\t= ko.observable('');\n\tthis.shortname\t\t= ko.observable('');\n\tthis.primaryColor\t= ko.observable('');\n\tthis.secondaryColor\t= ko.observable('');\n\tthis.id\t\t\t\t= ko.observable('');\n\tthis.root\t\t\t= function() { return root; };\n\t\n\tthat.teamUrl = ko.computed( function()\n\t{\n\t\tvar fullname = that.fullname();\n\t\treturn PULSE.CLIENT.IPLT20.Common.getTeamURL( fullname );\n\t} );\n\t\n\t//TODO: formulate a better way of adding classes, shouldn't be a part of viewmodel\n\t\n\tthat.teamClass = ko.computed( function()\n\t{\n\t\tvar abbr = that.abbreviation().toLowerCase();\n\t\treturn 'tLogo16x30 ' + abbr;\n\t} );\n\n\tthat.logo100Class = ko.computed( function()\n\t{\n\t\tvar abbr = that.abbreviation().toLowerCase();\n\t\treturn 'tLogo100x ' + abbr;\n\t} );\n\t\n\tthat.imageUrl = ko.computed( function()\n\t{\n\t\treturn PULSE.CLIENT.IPLT20.Common.makeImgUrl( 'resource/i/css-support/trans.png' );\n\t} );\n\n\tthat.inCurrentSeason = ko.computed( function()\n\t{\n\t\tvar abbr = that.abbreviation();\n\t\treturn  PULSE.CLIENT.IPLT20.Common.teamInCurrentSeason( abbr );\n\t} );\n\n\tthat.selectedTeam = ko.computed( function()\n\t{\n\t\tvar selectedId \t= that.root().filter.teamId(),\n\t\t\tid\t\t\t= that.id();\n\t\t\n\t\treturn  selectedId === id;\n\t} );\n\n\tthat.selectedTeamClass = ko.computed( function()\n\t{\n\t\tvar selectedTeam \t= that.selectedTeam();\n\t\t\n\t\treturn selectedTeam ? 'selected' : '';\n\t} );\n\n\tthat.ticketUrl = ko.computed( function()\n\t{\n\t\tvar abbreviation \t= that.abbreviation();\n\t\t\n\t\treturn PULSE.CLIENT.IPLT20.Common.getTicketLinkByAbbreviation( abbreviation );\n\t} );\n}","prototype":{"populate":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"team"}]},"Source":"PULSE.CLIENT.CRICKET.MatchScheduleViewModel.Team.prototype.populate = function( team )\n{\n\t//team\n\tthis.id( team.id );\n\tthis.fullname( team.fullname || '');\n\tthis.shortname( team.shortname || '' );\n\tthis.abbreviation( team.abbreviation || '' );\n\tthis.primaryColor( team.primaryColor || '' );\n\tthis.secondaryColor( team.secondaryColor || '' );\n}"}}},"Innings":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.CRICKET.MatchScheduleViewModel.Innings = function()\n{\n\tvar that \t\t\t= this;\n\tthis.allOut \t\t= ko.observable( false );\n\tthis.inningsNumber \t= ko.observable( '' );\n\tthis.ballsFaced \t= ko.observable( '' );\n\tthis.runs \t\t\t= ko.observable( '' );\n\tthis.wkts \t\t\t= ko.observable( '' );\n\t\n\t//TODO: add once implemented\n\t//this.declared = ko.observable( '' );\n\t//TODO: subclass below functionality\n\t\n\tthis.score = ko.computed( function()\n\t{\n\t\tvar runs = that.runs(),\n\t\t\twkts = that.wkts(),\n\t\t\tallOut = that.allOut();\n\t\t\n\t\treturn PULSE.CLIENT.CRICKET.Util.inningsScore( runs, wkts, allOut );\n\t} );\n\t\n\tthis.oversLimit = ko.computed( function()\n\t{\n\t\tvar ballsFaced = that.ballsFaced();\n\t\t\n\t\treturn PULSE.CLIENT.CRICKET.Util.oversLimit( ballsFaced );\n\t} );\n\n\tthis.oversLimitHtml = ko.computed( function()\n\t{\n\t\tvar oversLimit = that.oversLimit();\n\t\t\n\t\treturn '(' + oversLimit + ')';\n\t} );\n\t\n\tthis.resultHtml = ko.computed( function()\n\t{\n\t\tvar score \t\t= that.score(),\n\t\toversLimitHtml \t= that.oversLimitHtml();\n\t\t\n\t\treturn score + '<span>' + oversLimitHtml + '</span>';\n\t} );\n}","prototype":{"populate":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"innings"}]},"Source":"PULSE.CLIENT.CRICKET.MatchScheduleViewModel.Innings.prototype.populate = function( innings )\n{\n\tthis.allOut( !!innings.allOut );\n\tthis.inningsNumber( innings.inningsNumber );\n\tthis.ballsFaced( innings.ballsFaced );\n\tthis.runs( innings.runs );\n\tthis.wkts( innings.wkts );\n}"}}},"Venue":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"root"}]},"Source":"PULSE.CLIENT.CRICKET.MatchScheduleViewModel.Venue = function( root )\n{\n\tvar that\t\t= this;\n\tthis.id\t\t\t= ko.observable('');\n\tthis.fullName\t= ko.observable('');\n\tthis.shortName\t= ko.observable('');\n\tthis.city\t\t= ko.observable('');\n\tthis.country\t= ko.observable('');\n\tthis.root\t\t= function(){ return root; };\n\t\n\tthat.selectedVenue = ko.computed( function()\n\t{\n\t\tvar selectedId \t= that.root().filter.venueId(),\n\t\t\tid\t\t\t= that.id();\n\t\t\n\t\treturn selectedId === id;\n\t} );\n\n\tthat.selectedVenueClass = ko.computed( function()\n\t{\n\t\tvar selectedVenue \t= that.selectedVenue();\n\t\t\n\t\treturn selectedVenue ? 'selected' : '';\n\t} );\n}","prototype":{"populate":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"venue"}]},"Source":"PULSE.CLIENT.CRICKET.MatchScheduleViewModel.Venue.prototype.populate = function( venue )\n{\n\tthis.id( venue.id );\n\tthis.fullName( venue.fullName || '' );\n\tthis.shortName( venue.shortName || '' );\n\tthis.city( venue.city || '' );\n\tthis.country( venue.country || '' );\n}"}}}}},"CookiesNoticeWidget":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.CookiesNoticeWidget"},{"title":"param","description":null,"type":null,"name":"container"},{"title":"param","description":null,"type":null,"name":"config"}]},"Source":"PULSE.CLIENT.CookiesNoticeWidget = function( container, config )\n{\n    this.$container = $( container );\n\n    if( $.cookie( 'cookies-notice' ) )\n    {\n        this.setCookie();\n        this.$container.hide();\n    }\n    else\n    {\n        this.$container.show();\n    }\n\n    var that = this;\n    this.$container.find( '.button.small' ).click ( function( e )\n    {\n        that.setCookie();\n        that.$container.hide();\n        e.preventDefault();\n    } );\n}","prototype":{"setCookie":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.CookiesNoticeWidget.prototype.setCookie = function()\n{\n    $.cookie( 'cookies-notice', new Date(), { path: '/', expires: 365 * 1000 } );\n}"}}},"GoogleMap":{"Documentation":{"description":"Google map handler","tags":[{"title":"constructor","description":null,"type":null,"name":null},{"title":"param","description":"array of marker objects with label, latitude and longitude properties","type":{"type":"NameExpression","name":"Array"},"name":"markers"},{"title":"param","description":"pin options override with icon, height and width properties","type":{"type":"NameExpression","name":"Object"},"name":"pinOptions"},{"title":"param","description":"default google maps configuration, see documentation for more info","type":{"type":"NameExpression","name":"Object"},"name":"mapOptions"},{"title":"param","description":"override map centering, needs latitude and longitude properties","type":{"type":"NameExpression","name":"Object"},"name":"centreCoordinates"},{"title":"param","description":"whether to init on window load or wait for external init","type":{"type":"NameExpression","name":"Boolean"},"name":"initOnLoad"}]},"Source":"PULSE.CLIENT.GoogleMap = function( $container, options )\n{\n    this.$container = $container;\n    options = options || {};\n    this.markers = $.extend( PULSE.CLIENT.GOOGLE_MAPS_DEFAULTS.markers, options.markers || [] );\n    this.pinOptions = $.extend( PULSE.CLIENT.GOOGLE_MAPS_DEFAULTS.pinOptions, options.pinOptions || {} );\n    this.mapOptions = $.extend( PULSE.CLIENT.GOOGLE_MAPS_DEFAULTS.mapOptions, options.mapOptions || {} );\n    this.bounds = new google.maps.LatLngBounds();\n    this.coordinates = [];\n\n    if( options.centreCoordinates )\n    {\n        this.mapOptions.center = this.getCoordinates( centreCoordinates );\n    }\n    else if( this.markers.length )\n    {\n        this.coordinates = this.getCoordinatesArray( this.markers );\n        this.mapOptions.center = this.getCentreFromPoints( this.coordinates );\n    }\n}","prototype":{"initialise":{"Documentation":{"description":"Creates the map and the pins, if pins have been provided upon creation of the GoogleMaps object","tags":[]},"Source":"PULSE.CLIENT.GoogleMap.prototype.initialise = function()\n{\n    this.pinIcon = this.makePin( this.pinOptions.icon, { width: this.pinOptions.width, height: this.pinOptions.height } );\n\n    this.map = new google.maps.Map( this.$container[0], this.mapOptions );\n    this.map.fitBounds( this.bounds ); \n    this.infoWindow = new google.maps.InfoWindow( { width: 200, height: 200, maxWidth: 200, maxHeight: 200, content: '<div style=\"min-height:200px;\">&nbsp;</div>' } );\n\n    this.addMarkers( this.markers );\n}"},"makePin":{"Documentation":{"description":"Makes a Google Maps pin object","tags":[{"title":"param","description":"URL to pin image to be used","type":{"type":"NameExpression","name":"String"},"name":"image"},{"title":"param","description":"has height and width parameters","type":{"type":"NameExpression","name":"Object"},"name":"dimensions"},{"title":"return","description":"Google Maps JavaScript Object (see docs)","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.GoogleMap.prototype.makePin = function( image, dimensions )\n{\n    return new google.maps.MarkerImage(\n        image,\n        null, /* size is determined at runtime */\n        null, /* origin is 0,0 */\n        null, /* anchor is bottom center of the scaled image */\n        new google.maps.Size( dimensions.width, dimensions.height )\n    );  \n}"},"pinMarker":{"Documentation":{"description":"Pins a marker to the map","tags":[{"title":"param","description":"format expects label, latitude and longitude properties","type":{"type":"NameExpression","name":"Object"},"name":"markerData"},{"title":"return","description":"new Google Maps JavaScript marker object (see docs)","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.GoogleMap.prototype.pinMarker = function( markerData )\n{\n    var that = this;\n    var marker = new google.maps.Marker( {\n        icon: this.pinIcon,\n        position: new google.maps.LatLng( markerData.latitude, markerData.longitude ),\n        map: this.map\n    } );\n    google.maps.event.addListener( marker, 'click', ( function( marker )\n    {\n        return function()\n        {\n            that.infoWindow.setContent( '<div class=\"gmap-popup\">' + markerData.label + '</div>' );\n            that.infoWindow.open( that.map, marker );\n        }\n    } )( marker ) );\n\n    return marker;\n}"},"addMarker":{"Documentation":{"description":"Add a new marker to the map, with the option to also centre the map to include this new item","tags":[{"title":"param","description":"format expects label, latitude and longitude properties","type":{"type":"NameExpression","name":"Object"},"name":"markerData"},{"title":"param","description":"whether or not to recalculate the centre of the map","type":{"type":"NameExpression","name":"Boolean"},"name":"centre"}]},"Source":"PULSE.CLIENT.GoogleMap.prototype.addMarker = function( markerData, centre )\n{\n    var coordinates = this.getCoordinates( markerData );\n    this.coordinates.push( coordinates );\n    this.pinMarker( markerData );\n\n    if( centre )\n    {\n        this.centreMap( this.coordinates );\n    }\n}"},"addMarkers":{"Documentation":{"description":"Add an array of markers to the map, with the option to also centre the map afterwards","tags":[{"title":"param","description":"individual marker format: label, latitude and longitude properties","type":{"type":"NameExpression","name":"Array"},"name":"markers"},{"title":"param","description":"whether or not to recalculate the centre of the map","type":{"type":"NameExpression","name":"Boolean"},"name":"centre"}]},"Source":"PULSE.CLIENT.GoogleMap.prototype.addMarkers = function( markers, centre )\n{\n    for( var i = 0, iLimit = markers.length; i < iLimit; i++ )\n    {\n        var markerData = markers[ i ];\n        this.addMarker( markerData );\n    }\n\n    if( centre )\n    {\n        this.centreMap( this.coordinates );\n    }\n}"},"getCoordinates":{"Documentation":{"description":"Given a location object with latitude and longitude, return a Google Maps LatLng object for that location","tags":[{"title":"param","description":"format expects latitude and longitude properties","type":{"type":"NameExpression","name":"Object"},"name":"location"},{"title":"return","description":"a new Google Maps LatLng object for that location","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.GoogleMap.prototype.getCoordinates = function( location )\n{\n    return new google.maps.LatLng( location.latitude, location.longitude );\n}"},"getCoordinatesArray":{"Documentation":{"description":"Given an array of locations, return an array of Google Maps LatLng objects","tags":[{"title":"param","description":"array of objects with latitude and longitude properties","type":{"type":"NameExpression","name":"Array"},"name":"locations"},{"title":"return","description":"array with Google Maps LatLng objects for those locations","type":{"type":"NameExpression","name":"Array"}}]},"Source":"PULSE.CLIENT.GoogleMap.prototype.getCoordinatesArray = function( locations )\n{\n    var coordinates = [];\n    for( var i = 0, iLimit = locations.length; i < iLimit; i++ )\n    {\n        var location = locations[ i ];\n        coordinates.push( this.getCoordinates( location ) );\n    }\n\n    return coordinates;\n}"},"centreMap":{"Documentation":{"description":"Centres the Google Map on the this.mapOptions.center value","tags":[]},"Source":"PULSE.CLIENT.GoogleMap.prototype.centreMap = function()\n{\n    this.map.setCenter( this.mapOptions.center );\n}"},"getCentreFromPoints":{"Documentation":{"description":"Given an array of LatLng objects, it returns the LatLng for the centre derived from these coords","tags":[{"title":"param","description":"an array of Google Maps JavaScript LatLng objects","type":{"type":"NameExpression","name":"Array"},"name":"coordinates"},{"title":"return","description":"a Google Maps LatLng object for the centre of these coordinates","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.GoogleMap.prototype.getCentreFromPoints = function( coordinates )\n{\n    for( var i = 0, iLimit = coordinates.length; i < iLimit; i++ )\n    {\n        var latLng = coordinates[ i ];\n        this.bounds.extend( latLng );\n    }\n\n    return this.bounds.getCenter();\n}"},"setCentre":{"Documentation":{"description":"Sets the mapOptions.center value from a set of coordinates with the option to also centre the map","tags":[{"title":"param","description":"has latitude and longitude properties","type":{"type":"NameExpression","name":"Object"},"name":"centreLatLng"},{"title":"param","description":"whether to also centre the map on this new point","type":{"type":"NameExpression","name":"Boolean"},"name":"centre"}]},"Source":"PULSE.CLIENT.GoogleMap.prototype.setCentre = function( centreLatLng, centre )\n{\n    this.mapOptions.center = this.getCoordinates( centreLatLng );\n    if( centre )\n    {\n        this.centreMap();\n    }\n}"}}},"LanguageSwitchWidget":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.LanguageSwitchWidget"},{"title":"param","description":null,"type":null,"name":"$container"},{"title":"param","description":null,"type":null,"name":"config"}]},"Source":"PULSE.CLIENT.LanguageSwitchWidget = function( $container, config )\n{\n    this.$container = $container;\n    this.path = '/';\n\n    var pathname = window.location.pathname;\n\n    // IE8 fix\n    if( pathname.charAt( 0 ) != '/' )\n    {\n        pathname = '/' + pathname;\n    }\n\n    if( pathname === '/rwc2019' || pathname === '/sevens-series' || pathname === '/womens-sevens-series' )\n    {\n        this.path = pathname;\n    }\n\n\n    var $options = this.$container.find( '.options' );\n    var $current = this.$container.find( '.current' );\n\n    if( $.cookie( 'req_language' ) )\n    {\n        $options.children().removeClass( 'active' );\n        var $selectedOption = $options.find( '[data-language=\"' + $.cookie( 'req_language' ) + '\"]' );\n        $selectedOption.addClass( 'active' );\n        $current.html( $selectedOption.html() );\n    }\n\n    var that = this;\n\n    $current.off().click( function( e )\n    {\n        $options.toggle();\n        e.preventDefault();\n        e.stopPropagation();\n        if(pathname.match(\"^/media-extranet\"))\n        {\n            $(this).parent().toggleClass(\"active\");\n        }\n    } );\n\n    this.$container.find( '.options li' ).off().click( function( e )\n    {\n        $options.hide();\n        that.setCookie( $( this ).attr('data-language') );\n        $( this ).siblings().removeClass( 'active' );\n        $( this ).addClass( 'active' );\n        $current.html( $( this ).html() );\n        e.preventDefault();\n        e.stopPropagation();\n        window.location.reload();\n    } );\n\n    $( 'body' ).click( function()\n    {\n        $options.hide();\n    } );\n\n    this.$container.show();\n}","prototype":{"setCookie":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"language"}]},"Source":"PULSE.CLIENT.LanguageSwitchWidget.prototype.setCookie = function( language )\n{\n    $.cookie( 'req_language', language, { path: this.path } );\n}"}}},"WelcomeNoticeWidget":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.WelcomeNoticeWidget"},{"title":"param","description":null,"type":null,"name":"container"},{"title":"param","description":null,"type":null,"name":"config"}]},"Source":"PULSE.CLIENT.WelcomeNoticeWidget = function( container, config )\n{\n    this.$container = $( container );\n    this.$modal = this.$container.find( '.md-modal' );\n    this.$overlay = this.$container.find( '.md-overlay' );\n\n    if( $.cookie( 'welcome-notice' ) )\n    {\n        this.setCookie();\n        this.$modal.removeClass( 'md-show' );\n        this.$overlay.hide();\n    }\n    else\n    {\n        this.$modal.addClass( 'md-show' );\n        this.$overlay.show();\n    }\n\n    var that = this;\n    this.$container.find( '.welcomeClose' ).click ( function( e )\n    {\n        that.setCookie();\n        that.$modal.removeClass( 'md-show' );\n        that.$overlay.hide();\n        e.preventDefault();\n    } );\n}","prototype":{"setCookie":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.WelcomeNoticeWidget.prototype.setCookie = function()\n{\n    $.cookie( 'welcome-notice', new Date(), { path: '/' } );\n}"}}},"MediaList":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for a thePlatform list and player\nContainer = container\ntype = list/player"}]},"Source":"PULSE.CLIENT.MediaList = function( options )\n{\n    this.$container = $(options.container);\n    this.options = options;\n\n    this.setSubscriptions();\n    this.setListeners();\n\n    this.mediaEnded = false;\n\n    this.getDurations();\n}","prototype":{"setSubscriptions":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.MediaList.prototype.setSubscriptions = function()\n{\n    var that = this;\n\n    this.$container.on( 'click', this.options.link_click, function( e, params )\n    {\n        if ( window.PULSE.CLIENT.PDK && window.PULSE.CLIENT.PDK.players && window.PULSE.CLIENT.PDK.players[ 0 ] )\n        {\n            e.preventDefault();\n            var $closestParent = $( this ).closest( that.options.link );\n            var id = $closestParent.data( 'media-url' );\n\n            var contentType = $closestParent.data( 'content-type' );\n            var contentId = $closestParent.data( 'content-id' );\n            var href = $( this ).attr( 'href' );\n            that.updateBrowserState( contentType, contentId, href );\n\n            var duration = $closestParent.find( that.options.link_time ).text();\n            var title = $closestParent.find( that.options.link_title ).text();\n            var daysAgo = $closestParent.find( that.options.link_date ).text();\n\n            if ( that.mediaEnded )\n            {\n                duration = '';\n                title = '';\n                daysAgo = '';\n            }\n            // if ( window.PULSE.CLIENT.PDK )\n            // {\n            window.PULSE.CLIENT.PDK.setVideo( window.PULSE.CLIENT.PDK.players[ 0 ].scope, id, duration, title, daysAgo, true, true );\n            $(\"body\").scrollTop( 0 );\n        }\n        // }\n        // else\n        // {\n        //     var mediaId = $closestParent.find( '#mediaId' ).val(),\n        //     //newWindow = window.open(that.options.external_player_url + '?mid=' + mediaId.replace(/,/g , \"\"), 'World Rugby Audio Player', 'resizable,height=802,width=410');\n        //     newWindow = window.open(that.options.external_player_url + '/' + mediaId.replace(/,/g , \"\") + '/external', 'World Rugby Audio Player', 'resizable,height=960,width=589');\n        // }\n    } );\n\n    if ( this.options.external_link_click )\n    {\n        this.$container.on( 'click', this.options.external_link_click, function( e, params )\n        {\n            e.preventDefault();\n            var $closestParent = $( this ).closest( that.options.link ),\n                mediaId = $closestParent.find( '#mediaId' ).val();\n            var windowName = PULSE.I18N.lookup( 'widget.audioplayerexternal.title' );\n            //var newWindow = window.open(that.options.external_player_url + '?mid=' + mediaId.replace(/,/g , \"\"), 'World Rugby Audio Player', 'resizable,height=802,width=410');\n            var newWindow = window.open(that.options.external_player_url + '/' + mediaId.replace(/,/g , \"\") + '/external', windowName, 'resizable,height=960,width=589');\n        } );\n    }\n\n    $( 'body' ).on( PULSE.CLIENT.PDK_EVENTS.VIDEO_END, function( e, params )\n    {\n        if( params.scope === window.PULSE.CLIENT.PDK.players[ 0 ].scope )\n        {\n            that.mediaEnded = true;\n        }\n    } );\n\n    $( 'body' ).on( PULSE.CLIENT.PDK_EVENTS.VIDEO_LOADED, function( e, params )\n    {\n        if( params.scope === window.PULSE.CLIENT.PDK.players[ 0 ].scope )\n        {\n            if ( that.mediaEnded )\n            {\n                var media = params.media;\n                var duration = \"\";\n                var title = \"\";\n                var daysAgo = \"\";\n                if ( media && media.data )\n                {\n                    duration = that.getDuration( Math.round( media.data.mediaLength / 1000 ) + \"\" );\n                    title = media.data.title;\n                }\n                window.PULSE.CLIENT.PDK.setVideoDetails( params.scope, duration, title, daysAgo, true );\n            }\n        }\n    } );\n}"},"updateBrowserState":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"contentType"},{"title":"param","description":null,"type":null,"name":"contentId"},{"title":"param","description":null,"type":null,"name":"href"}]},"Source":"PULSE.CLIENT.MediaList.prototype.updateBrowserState = function( contentType, contentId, href )\n{\n    var url = href;\n\n    if ( contentType && contentId )\n    {\n        var newId = contentId + '';\n        var showId = newId.replace(/,/g , '');\n        url = PULSE.CLIENT.generateUrl( contentType, showId );\n    }\n    try\n    {\n        window.history.pushState( {}, 'World Rugby', url );\n    }\n    catch( err )\n    {\n        // console.log( err );\n    }\n\n}"},"setListeners":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.MediaList.prototype.setListeners = function()\n{\n    var that = this;\n\n    $('body').on('content/update', function()\n    {\n        that.getDurations();\n    });\n}"},"getDurations":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.MediaList.prototype.getDurations = function()\n{\n    var durations = this.$container.find( this.options.link_time ),\n        stringDuration = '';\n\n    for ( var i = 0; i < durations.length; i++ )\n    {\n        var duration = $( durations[ i ] ).text();\n        var thisDuration = this.getDuration( duration );\n        if ( thisDuration )\n        {\n            $( durations[ i ] ).text( thisDuration );\n        }\n    }\n}"},"getDuration":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"duration"}]},"Source":"PULSE.CLIENT.MediaList.prototype.getDuration = function( duration )\n{\n    var text = undefined;\n    if ( duration )\n    {\n        if ( duration.split(' ').length < 2 )\n        {\n\n            var commaSplit = duration.split( ',' );\n            var intDuration = parseInt( commaSplit.join( '' ) );\n\n            if ( intDuration < 60 )\n            {\n                text = intDuration  + ' ' + PULSE.I18N.lookup( 'widget.countdown.seconds.short' );\n            }\n            else if ( intDuration < ( 3600 ) )\n            {\n                var mins = parseInt( intDuration / 60 ) % 60 ;\n                var secs = intDuration % 60;\n                text = mins + ' ' + PULSE.I18N.lookup( 'widget.countdown.minutes.short' ) + ' ' + secs + ' ' + PULSE.I18N.lookup( 'widget.countdown.seconds.short' );\n            }\n            else\n            {\n                var hours = parseInt( intDuration / 3600 ) % 24;\n                var mins = parseInt( intDuration / 60 ) % 60 ;\n                var secs = intDuration % 60;\n                text = hours + ' ' + PULSE.I18N.lookup( 'widget.countdown.hours.short' ) + mins + ' ' + PULSE.I18N.lookup( 'widget.countdown.minutes.short' ) + ' ' + secs + ' ' + PULSE.I18N.lookup( 'label.timesince.seconds.short.one' );\n            }\n        }\n    }\n    return text;\n}"}}},"CANARY2":{"Poll":{"Documentation":{"description":"","tags":[{"title":"Constructor","description":"for Canary2 Poll model"},{"title":"param","description":"Client string used to specify account in url generation","type":{"type":"NameExpression","name":"String"},"name":"client"},{"title":"param","description":"Event string used to specify poll.js under account in url","type":{"type":"NameExpression","name":"String"},"name":"event"},{"title":"param","description":"Configurations object","type":{"type":"NameExpression","name":"Object"},"name":"config"}]},"Source":"PULSE.CLIENT.CANARY2.Poll = function( client, event, config )\n{\n    this.config = config || {};\n    this.interval = this.config.interval !== undefined ? this.config.interval : 120;\n    this.client = client;\n    this.event = event;\n\n    this.VOTE_URL = 'http://canary2.pulselive.com:8080/poll/vote';\n    this.DATA_URL = 'http://dynamic.pulselive.com/dynamic/data/' + client + '/' + event + '/poll.js';\n\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n}","prototype":{"getDataId":{"Documentation":{"description":"Combines the Canary2 account and poll","tags":[{"title":"return","description":"'account-poll'","type":{"type":"NameExpression","name":"String"}}]},"Source":"PULSE.CLIENT.CANARY2.Poll.prototype.getDataId = function()\n{\n    return this.client + '-' + this.event;\n}"},"getData":{"Documentation":{"description":"Generates a poll url and adds feed to the data manager","tags":[{"title":"param","description":"Boolean to determine whether to start feed immediately","type":{"type":"NameExpression","name":"Boolean"},"name":"start"}]},"Source":"PULSE.CLIENT.CANARY2.Poll.prototype.getData = function( start )\n{\n    this.dm.addFeed( this.getDataId(), this.DATA_URL, this.interval, 'onPoll', [ this ] );\n    if( start )\n    {\n        this.dm.start( this.DATA_URL );\n    }\n}"},"onData":{"Documentation":{"description":"Called on receiving poll data","tags":[]},"Source":"PULSE.CLIENT.CANARY2.Poll.prototype.onData = function( data, id )\n{\n    if( id === this.getDataId() )\n    {\n        this.data = data;\n        PULSE.CLIENT.notify( PULSE.CLIENT.RUGBY.POLL_EVENTS.DATA, { id: this.getDataId() } );\n    }\n}"},"onError":{"Documentation":{"description":"Called upon failing to retrieve poll data","tags":[]},"Source":"PULSE.CLIENT.CANARY2.Poll.prototype.onError = function( id )\n{\n    if( id === this.getDataId() )\n    {\n        console.log( 'CANARY2.Poll: Unable to retrieve ' + this.DATA_URL );\n    }\n}"},"getQuestionById":{"Documentation":{"description":"Returns the question that matches a given question id","tags":[{"title":"param","description":"Question id","type":{"type":"NameExpression","name":"String"},"name":"name"},{"title":"return","description":"Question object","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.CANARY2.Poll.prototype.getQuestionById = function( questionId )\n{\n    var iLimit = this.data.length,\n        question, i;\n\n    for( i = 0; i < iLimit; i++ )\n    {\n        question = this.data[ i ];\n        if( question.id === questionId )\n        {\n            return question;\n        }\n    }\n}"},"getIndexOfQuestionWithId":{"Documentation":{"description":"Returns index of the current question in the question list","tags":[{"title":"param","description":"Unique question id","type":{"type":"NameExpression","name":"String"},"name":"name"},{"title":"return","description":"Index of question with given id","type":{"type":"NameExpression","name":"Number"}}]},"Source":"PULSE.CLIENT.CANARY2.Poll.prototype.getIndexOfQuestionWithId = function( questionId )\n{\n    var iLimit = this.data.length,\n        i, index;\n\n    for( i = 0; i < iLimit; i++ )\n    {\n        if( this.data[ i ].id === questionId )\n        {\n            return i;\n        }\n    }\n}"},"getQuestionAtIndex":{"Documentation":{"description":"Returns the question at a given index in the list of questions","tags":[{"title":"param","description":"Question index","type":{"type":"NameExpression","name":"String"},"name":"name"},{"title":"return","description":"Question object","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.CANARY2.Poll.prototype.getQuestionAtIndex = function( index )\n{\n    return this.data[ index ];\n}"},"getLatestQuestion":{"Documentation":{"description":"Returns the last question in the list of questions","tags":[{"title":"return","description":"Question object","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.CANARY2.Poll.prototype.getLatestQuestion = function()\n{\n    return _.last( this.data );\n}"},"vote":{"Documentation":{"description":"Sends a vote request to the voting server","tags":[{"title":"param","description":"Unique question id","type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"String"},{"type":"NameExpression","name":"Number"}]},"name":"questionId"},{"title":"param","description":"Unique option id","type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"String"},{"type":"NameExpression","name":"Number"}]},"name":"optionId"}]},"Source":"PULSE.CLIENT.CANARY2.Poll.prototype.vote = function( questionId, optionId )\n{\n    var that = this;\n    $.ajax(\n    {\n        url: this.VOTE_URL + '?id=' + questionId + '&option=' + optionId,\n        jsonpCallback: 'onVoteSuccess',\n        timeout: 3000,\n        dataType: 'jsonp',\n        error: function( jqXHR, textStatus, errorThrown )\n        {\n            console.log( errorThrown );\n        }\n    } ).done( function()\n    {\n        PULSE.CLIENT.notify( PULSE.CLIENT.RUGBY.POLL_EVENTS.VOTED, { id: that.getDataId(), questionId: questionId, optionId: optionId } );\n    } ).fail( function( jqXHR, textStatus, errorThrown )\n    {\n        PULSE.CLIENT.notify( PULSE.CLIENT.RUGBY.POLL_EVENTS.FAILED, { id: that.getDataId() } );\n        if( window.console && window.console.log )\n        {\n            console.log( 'There was an error with the vote ' + textStatus );\n        }\n    } );\n}"}}}},"getTwitterInstance":{"Documentation":{"description":"Ensure only one instance of the twitter object is ever used","tags":[{"title":"return","description":"the Twitter \"singleton\"","type":{"type":"NameExpression","name":"Object"}}]},"Source":"PULSE.CLIENT.getTwitterInstance = function()\n{\n    if( !window.Twitter )\n    {\n        window.Twitter = new PULSE.CLIENT.Twitter();\n    }\n    return window.Twitter;\n}"},"Twitter":{"Documentation":{"description":"Data-handler/model-maker for Canary-produced Twitter data","tags":[{"title":"constructor","description":null,"type":null,"name":null}]},"Source":"PULSE.CLIENT.Twitter = function()\n{\n    /*\n     * Singleton access\n     */\n    if ( PULSE.CLIENT.Twitter.prototype._singletonInstance )\n    {\n        return PULSE.CLIENT.Twitter.prototype._singletonInstance;\n    }\n    PULSE.CLIENT.Twitter.prototype._singletonInstance = this;\n\n    /**\n     * Stores twitter list data, with the feed name (folder) as key and\n     * the array of tweets as the stored value\n     * @dict\n     */\n    this.listData = {};\n\n    /**\n     * Stores twitter tally/count totals, with feed name (folder) as key and\n     * the total (integer) as the stored value\n     * @dict\n     */\n    this.tallyData = {};\n\n    /**\n     * Stores twitter ranked topics data, with feed name as key and the\n     * array of ranked entries as the stored value\n     * @dict\n     */\n    this.trendingData = {};\n\n    /**\n     * Stores twitter historical data, with feed name as key and the\n     * array of ranked entries as the stored value\n     * @dict\n     */\n    this.historicalData = {};\n\n    /**\n     * The instance of the data manager\n     * @type {Object}\n     */\n    this.dm = PULSE.CLIENT.getJqueryDataManager();\n\n    /**\n     * The instance of the URL generator\n     * @type {Object}\n     */\n    this.urlGenerator = PULSE.CLIENT.RUGBY.getUrlGenerator();\n}","prototype":{"onData":{"Documentation":{"description":"Function called by the Data Manager by default whenever it receives new data,\nif the object (the Twitter instance) has subscribed to a given feed","tags":[{"title":"param","description":"the JSONP payload","type":{"type":"NameExpression","name":"Object"},"name":"data"},{"title":"param","description":"the custom ID for the feed set when the feed request is initialised","type":{"type":"NameExpression","name":"String"},"name":"id"}]},"Source":"PULSE.CLIENT.Twitter.prototype.onData = function( data, id )\n{\n    var name,\n        TWITTER_EVENTS = PULSE.CLIENT.RUGBY.TWITTER_EVENTS;\n\n    if( id.startsWith( 'list_' ) )\n    {\n        name = id.substring( 5 );\n        this.listData[ name ] = data;\n        PULSE.CLIENT.notify( TWITTER_EVENTS.LIST, { success: true, name: name } );\n    }\n    else if( id.startsWith( 'tally_' ) )\n    {\n        name = id.substring( 6 );\n        this.tallyData[ name ] = data.total;\n        PULSE.CLIENT.notify( TWITTER_EVENTS.TALLY, { success: true, name: name } );\n    }\n    else if( id.startsWith( 'trending_' ) )\n    {\n        name = id.substring( 9 );\n        this.trendingData[ name ] = data.entries;\n        PULSE.CLIENT.notify( TWITTER_EVENTS.TRENDING, { success: true, name: name } );\n    }\n    else if( id.startsWith( 'history_' ) )\n    {\n        name = id.substring( 8 );\n        this.historicalData[ name ] = data[0];\n        PULSE.CLIENT.notify( TWITTER_EVENTS.HISTORY, { success: true, name: name } );\n    }\n}"},"onError":{"Documentation":{"description":"Function called by the Data Manager by default whenever it encounters an error,\nallowing the object subscribed to it (the Twitter instance) to handle it","tags":[{"title":"param","description":"the custom ID for the feed set when the feed request is initialised","type":{"type":"NameExpression","name":"String"},"name":"id"}]},"Source":"PULSE.CLIENT.Twitter.prototype.onError = function( id )\n{\n    var name,\n        TWITTER_EVENTS = PULSE.CLIENT.RUGBY.TWITTER_EVENTS;\n\n    if( id.startsWith( 'list_' ) )\n    {\n        name = id.substring( 5 );\n        PULSE.CLIENT.notify( TWITTER_EVENTS.LIST, { success: false, name: name } );\n    }\n    else if( id.startsWith( 'tally_' ) )\n    {\n        name = id.substring( 6 );\n        PULSE.CLIENT.notify( TWITTER_EVENTS.TALLY, { success: false, name: name } );\n    }\n    else if( id.startsWith( 'trending_' ) )\n    {\n        name = id.substring( 9 );\n        PULSE.CLIENT.notify( TWITTER_EVENTS.TRENDING, { success: false, name: name } );\n    }\n    else if( id.startsWith( 'history_' ) )\n    {\n        name = id.substring( 8 );\n        PULSE.CLIENT.notify( TWITTER_EVENTS.HISTORY, { success: false, name: name } );\n    }\n}"},"getList":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"name"},{"title":"param","description":null,"type":null,"name":"options"}]},"Source":"PULSE.CLIENT.Twitter.prototype.getList = function( name, options )\n{\n    if( !options )\n    {\n        options = {};\n    }\n\n    options = $.extend( options, { callback: \"onTwitter\", fileName: ( options.fileName || ( name + \"_list\" ) ) + \"/tweetList\" } );\n    options.interval = typeof options.interval !== \"undefined\" ? options.interval : 20;\n    this.getFeed( name, 'list', options );\n}"},"stopList":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"name"},{"title":"param","description":null,"type":null,"name":"options"}]},"Source":"PULSE.CLIENT.Twitter.prototype.stopList = function( name, options )\n{\n    if( !options )\n    {\n        options = {};\n    }\n\n    var fileName = ( options.fileName || ( name + \"_list\" ) ) + \"/tweetList\";\n    this.stopFeed( fileName );\n}"},"getTally":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"name"},{"title":"param","description":null,"type":null,"name":"options"}]},"Source":"PULSE.CLIENT.Twitter.prototype.getTally = function( name, options )\n{\n    if( !options )\n    {\n        options = {};\n    }\n\n    options = $.extend( options, { callback: \"onTweetTotal\", fileName: ( options.fileName || ( name + \"_count\" ) ) + \"/tally\" } );\n    options.interval = typeof options.interval !== \"undefined\" ? options.interval : 5;\n    this.getFeed( name, 'tally', options );\n}"},"stopTally":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"name"},{"title":"param","description":null,"type":null,"name":"options"}]},"Source":"PULSE.CLIENT.Twitter.prototype.stopTally = function( name, options )\n{\n    if( !options )\n    {\n        options = {};\n    }\n\n    var fileName = ( options.fileName || ( name + \"_count\" ) ) + \"/tally\";\n    this.stopFeed( fileName );\n}"},"getRankedTopics":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"name"},{"title":"param","description":null,"type":null,"name":"options"}]},"Source":"PULSE.CLIENT.Twitter.prototype.getRankedTopics = function( name, options )\n{\n    if( !options )\n    {\n        options = {};\n    }\n\n    options = $.extend( options, { callback: \"onRanking\", fileName: ( options.fileName || ( name + \"_trending\" ) ) + \"/tweetRanking\" } );\n    options.interval = typeof options.interval !== \"undefined\" ? options.interval : 5;\n    this.getFeed( name, 'trending', options );\n}"},"stopRankedTopics":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"name"},{"title":"param","description":null,"type":null,"name":"options"}]},"Source":"PULSE.CLIENT.Twitter.prototype.stopRankedTopics = function( name, options )\n{\n    if( !options )\n    {\n        options = {};\n    }\n\n    var fileName = ( options.fileName || ( name + \"_trending\" ) ) + \"/tweetRanking\";\n    this.stopFeed( fileName );\n}"},"getHistoricalCount":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"name"},{"title":"param","description":null,"type":null,"name":"options"}]},"Source":"PULSE.CLIENT.Twitter.prototype.getHistoricalCount = function( name, options )\n{\n    if( !options )\n    {\n        options = {};\n    }\n\n    options = $.extend( options, { callback: \"onHistory\", fileName: ( options.fileName || ( name + \"_historical\" ) ) + \"/history\" } );\n    options.interval = typeof options.interval !== \"undefined\" ? options.interval : 30;\n    this.getFeed( name, 'history', options );\n}"},"stopHistoricalCount":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"name"},{"title":"param","description":null,"type":null,"name":"options"}]},"Source":"PULSE.CLIENT.Twitter.prototype.stopHistoricalCount = function( name, options )\n{\n    if( !options )\n    {\n        options = {};\n    }\n\n    var fileName = ( options.fileName || ( name + \"_historical\" ) ) + \"/history\";\n    this.stopFeed( fileName );\n}"},"getFeed":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"name"},{"title":"param","description":null,"type":null,"name":"type"},{"title":"param","description":null,"type":null,"name":"options"}]},"Source":"PULSE.CLIENT.Twitter.prototype.getFeed = function( name, type, options )\n{\n    var feed = this.urlGenerator.makeTwitterDataUrl( options.fileName );\n    this.dm.addFeed( type + \"_\" + name, feed, options.interval, options.callback, [ this ].concat( options.targets || [] ) );\n\n    if( options.start )\n    {\n        this.dm.start( feed );\n    }\n}"},"stopFeed":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"fileName"}]},"Source":"PULSE.CLIENT.Twitter.prototype.stopFeed = function( fileName )\n{\n    var feed = this.urlGenerator.makeTwitterDataUrl( fileName );\n    this.dm.stop( feed );\n}"},"getTweetCount":{"Documentation":{"description":"TWITTER AND CANARY MODELS","tags":[]},"Source":"PULSE.CLIENT.Twitter.prototype.getTweetCount = function( name )\n{\n    var tweetCount = this.tallyData[ name ];\n    if( tweetCount )\n    {\n        return PULSE.CLIENT.Util.addCommaForThousands( tweetCount );\n    }\n    return \"\";\n}"},"getTweetsListModel":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"name"},{"title":"param","description":null,"type":null,"name":"limit"}]},"Source":"PULSE.CLIENT.Twitter.prototype.getTweetsListModel = function( name, limit )\n{\n    var array = this.getTweetsArray( this.listData[ name ], limit );\n\n    return { tweets: array };\n}"},"getTweetsArray":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"limit"}]},"Source":"PULSE.CLIENT.Twitter.prototype.getTweetsArray = function( data, limit )\n{\n    if( !data ) return;\n\n    if( !limit || limit > data.length )\n    {\n        limit = data.length;\n    }\n\n    var array = [];\n    for( var i = data.length - 1; i > data.length - 1 - limit; i-- )\n    {\n        var tweet = data[i];\n        var model = PULSE.CLIENT.Twitter.getTweetModel( tweet );\n\n        array.push( model );\n    }\n\n    return array;\n}"},"getTrendingModel":{"Documentation":{"description":"Looks up account name in trending data array.\n    - Returns early if no name is specified or no data exists.\n    - If limit is specified will return top n number of entries.\n    - If no limit is specified will return all entries in this file.\n    - Adds percentage relative to the highest count.","tags":[{"title":"param","description":"Account name string to lookup.","type":{"type":"NameExpression","name":"string"},"name":"name"},{"title":"param","description":"Number of entries to return.","type":{"type":"NameExpression","name":"number"},"name":"limit"},{"title":"return","description":"Array of trending data entries at the specified length.","type":{"type":"NameExpression","name":"array"}}]},"Source":"PULSE.CLIENT.Twitter.prototype.getTrendingModel = function( name, limit )\n{\n    if( !this.trendingData || !name ) return;\n\n    var array = this.trendingData[ name ],\n        calculatedLimit = limit || array.length,\n        model = array.slice( 0, calculatedLimit ),\n        highest = model[0].count;\n\n    for( var i = 0; i < model.length; i++ )\n    {\n        var entry = model[i];\n\n        entry.percentage =  Math.round(( entry.count / highest ) * 100 ) + '%';\n    }\n\n    return model;\n}"},"getHistoricalModel":{"Documentation":{"description":"Looksup historical data after it's been received and stored. Returns count values\nbased on resolution.","tags":[{"title":"param","description":"Value for looking up in historical data","type":{"type":"NameExpression","name":"string"},"name":"name"},{"title":"param","description":"Limitation of how many previous counts to return","type":{"type":"NameExpression","name":"number"},"name":"limit"},{"title":"return","description":"Array of hsitoric counts","type":{"type":"NameExpression","name":"array"}}]},"Source":"PULSE.CLIENT.Twitter.prototype.getHistoricalModel = function( name, limit )\n{\n    var history = this.historicalData[ name ],\n        model = { total: 0, buckets: [] };\n\n    if( history && history.data )\n    {\n        var iLimit = limit ? Math.min( limit, history.data.length ) : history.data.length;\n        for( var i = 0; i < iLimit; i++ )\n        {\n            var pool = history.data[i];\n            if( pool.resolution && pool.resolution.unit === \"MINUTE\" )\n            {\n                model.buckets = $.map( pool.buckets, function( bucket ) {\n                    return bucket.count;\n                });\n                model.buckets = model.buckets.reverse();\n            }\n            else if( pool.resolution && pool.resolution.unit === \"DAY\" )\n            {\n                model.total = pool.buckets[0].count;\n            }\n        }\n    }\n\n    return model;\n}"}},"getTweetModel":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"tweet"}]},"Source":"PULSE.CLIENT.Twitter.getTweetModel = function( tweet )\n{\n    var TC = PULSE.CLIENT.TwitterController,\n        userAccountLink = TC.getUserAccountUrl( tweet.user.screen_name ),\n        tweetDate = tweet.timestamp_ms ? new Date( parseInt( tweet.timestamp_ms, undefined ) ) : TC.parseTwitterDate( tweet.created_at ),\n        timestamp = PULSE.CLIENT.DateUtil.getSinceString( tweetDate ),\n        photo = '',\n        model;\n\n    if( tweet.entities && tweet.entities.media )\n    {\n        for( var i = 0, iLimit = tweet.entities.media.length; i < iLimit; i++ )\n        {\n            if( tweet.entities.media[i].type === 'photo' )\n            {\n                photo = tweet.entities.media[i].media_url;\n            }\n        }\n    }\n\n    model = {\n        timestamp: timestamp,\n        id: tweet.id_str,\n        text: TC.markUpLinks( tweet.text ),\n        link: TC.getPermalink( tweet ),\n        photo: photo,\n        user: {\n            id: tweet.user.id_str,\n            name: tweet.user.name,\n            account: tweet.user.screen_name,\n            link: userAccountLink,\n            description: tweet.user.description,\n            avatarUrl: tweet.user.profile_image_url\n        },\n        favorites: tweet.favorite_count,\n        retweets: tweet.retweet_count\n    };\n\n    return model;\n}"}},"Map":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.Map"},{"title":"param","description":null,"type":null,"name":"options"}]},"Source":"PULSE.CLIENT.Map = function( options ){\n    \n    this.container = document.getElementById(options.id_container);\n    this.box_width = options.box_width\n    this.lat = options.lat || 0;\n    this.leng = options.leng || 0;\n    this.zoom = options.zoom || 1;\n    this.markers = [];\n\n    if(options.icon){\n    \tvar marker_icon = new google.maps.MarkerImage(options.icon, null, null, null, new google.maps.Size(30,42));\n    }\n    this.icon = marker_icon || undefined;\n\n\tthis.container.style.width = options.width || '100%';\n    this.container.style.height = options.height || '600px';\n\n    this.coordinates = new google.maps.LatLng(this.lat, this.leng);\n\n    this.myMapOptions = {\n       \tzoom: this.zoom,\n      \tcenter: this.coordinates,\n      \tmapTypeId: google.maps.MapTypeId.ROADMAP\n    };\n\n    this.map = new google.maps.Map(this.container, this.myMapOptions);\n    //console.log(options.list);\n    for (var i = 0; i < options.list.length; i++) {\n    \t//console.log(options.list[i]);\n    \tthis.createPins( options.list[i], i );\n    };\n\n}","prototype":{"createPins":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"item"},{"title":"param","description":null,"type":null,"name":"item_index"}]},"Source":"PULSE.CLIENT.Map.prototype.createPins = function( item, item_index ){\n\n\tconsole.log(item);\n\tvar that = this;\n\n\n\tvar marker = new google.maps.Marker({\n\t    map: this.map,\n\t    draggable: false,\n\t    raiseOnDrag: false,\n\t    icon: this.icon,\n\t    animation: google.maps.Animation.DROP,\n\t    position: new google.maps.LatLng(item.lat, item.leng)\n\t  });\n\n\tthis.markers.push(marker);\n\n  \tvar html = \n  \t\titem.html ||\n  \t\t'<div class=\"pin_arrow_box\" style=\"width:' + this.box_width + 'px;\"\">' +\n\t        '<div class=\"pin_header\">' + item.name + '</div>' +\n\t        '<div class=\"pin_content\">' +\n\t          \t'<div class=\"pin_img\" style=\"background-image: url(' + item.img + ');\"/>' +\n\t          \t'<div class=\"pin_txt\">' +\n                \t'<div class=\"pin_txt_h1\">' + item.h1 + '</div>' +\n                \t'<div class=\"pin_txt_h2\">' + item.h1 + '</div>' +\n                \t'<a href=' + item.link + ' class=\"pin_txt_button\">' + item.link_txt + '</a>' +\n              \t'</div>' +\n\t        '</div>' +\n      \t'</div>';\n\n  \tvar pin = document.createElement(\"div\");\n  \tpin.innerHTML = html;\n\n\tvar infoBox_options = {\n\t    content: pin,\n\t    disableAutoPan: false,\n\t    pixelOffset: new google.maps.Size(-(this.box_width/2), 18),\n\t    closeBoxMargin: \"10px 8px 2px 2px\",\n\t    closeBoxURL: \"../../../resources/target/i/1/map-assets/close.png\",\n\t    infoBoxClearance: new google.maps.Size(1, 1),\n\t    isHidden: false,\n\t    pane: \"floatPane\",\n\t    enableEventPropagation: false\n\t };\n\n  \tthis.markers[item_index].infoBox = new InfoBox(infoBox_options);\n\n\tgoogle.maps.event.addListener(marker, \"click\", (function (marker, i) {\n\t\treturn function () {\n\t\t    for (h = 0; h < that.markers.length; h++) {\n\t            that.markers[h].infoBox.close();\n\t        }\n\t        that.markers[i].infoBox.open(that.map, this);\n\t    };\n\t})(marker, item_index));\n}"}}},"PollController":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.PollController"},{"title":"param","description":null,"type":null,"name":"target"},{"title":"param","description":null,"type":null,"name":"url"},{"title":"param","description":null,"type":null,"name":"interval"},{"title":"param","description":null,"type":null,"name":"params"}]},"Source":"PULSE.CLIENT.PollController = function( target, url, interval, params )\n{\n\tthis.PLAY2_URL = \"http://play2.pulselive.com/\";\n\tthis.pollModel = target;\n\tthis.lastData = \"\";\t\n\tthis.pollTimer = new PULSE.CLIENT.NewJSONPTimer( url, interval, params );\n\n\tthis.answeredQuestions = new PULSE.CLIENT.Set();\n\tvar ansCookieValue = PULSE.CLIENT.Cookie.getCookieByKey('pulseAnsCookie')\n\tif ( ansCookieValue.length > 0 )\n\t{\n\t\tthis.answeredQuestions = PULSE.CLIENT.Set.fromString(ansCookieValue);\n\t}\n\n\tvar that = this;\n\tPULSE.CLIENT.PollController.getInstance = function () { return that; };\n\t\n\tthis.pollTimer.start();\n}","getInstance":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.PollController.getInstance = function () { return that; }"},"prototype":{"onData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"pollData"},{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"PULSE.CLIENT.PollController.prototype.onData = function( pollData, id )\n{\t\n\tvar thisInstance = PULSE.CLIENT.PollController.getInstance();\n\t\n\tif ( pollData && pollData[0] )\n\t{\n\t\tvar payload = pollData[0];\n\t\t\n\t\t// Serialise the payload\n\t\tvar serialised = $.toJSON( payload );\n\t\t\n\t    if ( thisInstance.lastData !== serialised )\n\t    {\n\t    \t// Save the new data\n\t    \tthisInstance.lastData = serialised;\n\t    \tthisInstance.pollModel.modelChanged( pollData[0] );\n\t    }\n\t}\n}"},"answerQuestion":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"answerIndex"},{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"PULSE.CLIENT.PollController.prototype.answerQuestion = function( answerIndex, id )\n{\n\tvar that = this;\n\t/* add this que id to answeredQuestions Set and store that Set in ever expiring cookie */\n\tthis.answeredQuestions.add( id );\t\n\tdocument.cookie = \n\t\t'pulseAnsCookie=' + this.answeredQuestions.toString() + ';expires=30/12/2051 00:00:00';\t\n\t/* inform CMS about this */\n\t$.ajax(\n\t{\n\t\tdataType: 'jsonp',\n\t    url: that.PLAY2_URL + 'cms/answerQuestion',  //?questionId=1&option=0',\n\t    data: { questionId: id, option: answerIndex }\t    \n\t} );\n}"}}},"PollModel":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.PollModel"},{"title":"param","description":null,"type":null,"name":"parent"}]},"Source":"PULSE.CLIENT.PollModel = function( parent )\n{\t\t\n\tthis.pulse = parent;\n\tthis.popupTimestamp;\n}","prototype":{"modelChanged":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.CLIENT.PollModel.prototype.modelChanged = function( data )\n{\n\tif ( this.pulse.pollView )\n\t{\n\t\tthis.pulse.pollView.opinion = data.results;\t\t\n\t\tthis.pulse.pollView.refreshData();\n\t\t\t\t\n\t\t// Further check for timestamp, if changed then only update/show pop-up box\n\t\tif ( data.popupQuestionId && data.timestamp && this.popupTimestamp !== data.timestamp )\n\t\t{\n\t\t\tthis.pulse.pollView.updatePulsePopup( data.popupQuestionId );\t\t\t\t\n\t\t\tthis.popupTimestamp = data.timestamp;\n\t\t}\t\t\n\t}\n}"}}},"PollView":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.PollView"},{"title":"param","description":null,"type":null,"name":"target"},{"title":"param","description":null,"type":null,"name":"tabPulse"},{"title":"param","description":null,"type":null,"name":"popupSelector"},{"title":"param","description":null,"type":null,"name":"pulsePopupCookieName"},{"title":"param","description":null,"type":null,"name":"hiddenClassName"}]},"Source":"PULSE.CLIENT.PollView = function( target, tabPulse, popupSelector, pulsePopupCookieName,\n                                    hiddenClassName )\n{\n    // a dummy width which will be overridden by the css width property once the element is created\n    this.carouselWidth = 320;\n\n    this.pollController = target;\n    this.pulseTabSelector = tabPulse;\n    this.pollSelector = tabPulse + ' #pulse';\n    this.popupSelector = popupSelector;\n    this.pulsePopupCookieName = pulsePopupCookieName;\n    this.hiddenClass = hiddenClassName;\n\n    this.opinion = [];\n    //Array of all opinions(questions)\n    this.opinion = [];\n    this.selectedQuestion = -1;\n    this.queIdsArray = [];\n    this.showPopup = true;\n\n    var that = this;\n\n    $( this.pollSelector + ' .controls .question-prev' ).click(function()\n    {\n        var selectedIndex = that.queIdsArray.indexOf( that.selectedQuestion );\n        if( selectedIndex === 0 )\n        {\n            that.scrollToQuestion( that.queIdsArray[ that.queIdsArray.length - 1 ], true );\n        }\n        else\n        {\n            that.scrollToQuestion( that.queIdsArray[ selectedIndex - 1 ], true );\n        }\n    });\n\n    $( this.pollSelector + ' .controls .question-next' ).click(function()\n    {\n        var selectedIndex = that.queIdsArray.indexOf( that.selectedQuestion );\n        if( selectedIndex === that.queIdsArray.length - 1 )\n        {\n            that.scrollToQuestion( that.queIdsArray[ 0 ], true );\n        }\n        else\n        {\n            that.scrollToQuestion( that.queIdsArray[ selectedIndex + 1 ], true );\n        }\n    });\n\n    $( this.popupSelector + ' .modal-display input' ).click(function(){\n        that.onCheckboxClick( $(that.popupSelector + ' .modal-display input').is(':checked') );\n    });\n}","prototype":{"refreshData":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.PollView.prototype.refreshData = function()\n{\n    if ( this.selectedQuestion === -1 || this.hasLastViewedQuestionClosed() )\n    {\n        this.selectedQuestion = this.opinion[0].id;\n    }\n    this.updateQuestionCntr();\n    this.updateActiveQuestions();\n}"},"updateQuestionCntr":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.PollView.prototype.updateQuestionCntr = function()\n{\n    var that = this;\n    var queIds = [];\n    $(this.pollSelector + ' .carousel-wrap').empty();\n\n    for ( var i = 0; i < this.opinion.length; i++ )\n    {\n        var options = '';\n        var results = '';\n        var voteCount = '';\n        var optionsCntr = '';\n        var question = this.opinion[i].text;\n        var optionsData = this.opinion[i].options;\n\n        for ( var j=0; j < optionsData.length; j++ )\n        {\n            options += '<div class=\"option\">' + optionsData[j].option + '<span class=\"arrow\"></span></div>';\n        }\n\n        results = this.getResults( optionsData, this.opinion[i].id );\n\n        if ( this.pollController.answeredQuestions.contains( this.opinion[i].id ) )\n        {\n            optionsCntr = '<div class=\"options\"></div>' + '<div class=\"results\">' + results + '</div>';\n        }\n        else\n        {\n            optionsCntr = '<div class=\"options\">' + options + '</div>' + '<div class=\"results\"></div>';\n        }\n\n        $(this.pollSelector + ' .carousel-wrap')\n            .append('<div id=\"' + this.opinion[i].id + '\" class=\"carousel-item\">' +\n                      '<div class=\"question\">' + this.safeQuestion(question) + '</div>' +\n                      optionsCntr +\n                    '</div>');\n        queIds[i] = this.opinion[i].id;\n    }\n\n    this.queIdsArray = queIds;\n    this.carouselWidth = $(this.pulseTabSelector + ' .carousel-item').eq(0).outerWidth( true );\n    this.scrollToQuestion( this.selectedQuestion, false );\n\n    $( this.pollSelector + ' .carousel-wrap .option' ).click( function()\n    {\n        var index = $('#' + that.selectedQuestion + ' .option').index( this );\n        that.showResults( index );\n    });\n}"},"showResults":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"selectedOptionIndex"}]},"Source":"PULSE.CLIENT.PollView.prototype.showResults = function( selectedOptionIndex )\n{\n    $('#' + this.selectedQuestion + ' .options').empty();\n    $('#' + this.selectedQuestion + ' .results').html(\n        this.getResults( this.getOptionsById( this.selectedQuestion ), this.selectedQuestion ) );\n    this.pollController.answerQuestion( selectedOptionIndex, this.selectedQuestion );\n    this.animateBars();\n}"},"getOptionsById":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"queId"}]},"Source":"PULSE.CLIENT.PollView.prototype.getOptionsById = function( queId )\n{\n    for ( var i = 0; i < this.opinion.length; i++ )\n    {\n        var op = this.opinion[i];\n        if( op.id === queId )\n        {\n            return op.options;\n        }\n    }\n    //if you come to execute below line, that means the question you were viewing is closed now.\n    this.refreshData();\n}"},"getResults":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"PULSE.CLIENT.PollView.prototype.getResults = function( data, id )\n{\n    var results = '',\n        winnerIndex = this.getWinnerIndex( data );\n    for ( var i=0; i < data.length; i++ )\n    {\n        results += '<div class=\"result\">';\n\n        if ( this.pollController.answeredQuestions.contains( id ) )\n        {\n            results += '<div class=\"bar ' + (winnerIndex === i ? 'winner' : '') + '\" style=\"width:' + data[i].percentage + '\"></div>';\n        }\n        else\n        {\n            results += '<div class=\"bar '+ (winnerIndex === i ? 'winner' : '') + '\" style=\"width:0%\"></div>';\n        }\n\n        results += '<div class=\"option\">' + data[i].option.replace(/ /g, '&nbsp;') + '</div> <div class=\"percentage\">' + data[i].percentage + '</div> </div>';\n    }\n    return results;\n}"},"getWinnerIndex":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"PULSE.CLIENT.PollView.prototype.getWinnerIndex = function( data, id )\n{\n    var winnerIndex = 0,\n        winnerScore = 0;\n\n    for( var i = 0; i < data.length; i++ )\n    {\n        var string = data[ i ].percentage,\n            number = parseInt( string.slice( 0, (string.length -1) ), undefined );\n\n        if( number > winnerScore )\n        {\n            winnerScore = number;\n            winnerIndex = i;\n        }\n    }\n\n    return winnerIndex;\n}"},"animateBars":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.PollView.prototype.animateBars = function()\n{\n    var index = this.queIdsArray.indexOf( this.selectedQuestion );\n    if( index >= 0 && this.pollController.answeredQuestions.contains( this.selectedQuestion ) )\n    {\n        var that = this;\n        for ( var i=0; i < this.opinion[index].options.length; i++ )\n        {\n            $('#' + this.selectedQuestion + ' .bar').eq(i).css( 'width', that.opinion[index].options[i].percentage );\n\n            // $('#' + this.selectedQuestion + ' .bar').eq(i).animate(\n            // {\n            //     width: that.opinion[index].options[i].percentage\n            // }, '1000');\n        }\n    }\n}"},"scrollToQuestion":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"id"},{"title":"param","description":null,"type":null,"name":"animateBar"}]},"Source":"PULSE.CLIENT.PollView.prototype.scrollToQuestion = function( id, animateBar )\n{\n    this.carouselWidth = $(this.pulseTabSelector + ' .carousel-item').outerWidth( true );\n    this.selectedQuestion = id;\n    var index = this.queIdsArray.indexOf( id );\n\n    if ( index >= 0 )\n    {\n        var amount = this.carouselWidth * ( index ) * -1;\n        var that = this;\n\n        this.applyActiveClass();\n\n        if ( animateBar )\n        {\n            this.resetWidth();\n        }\n\n        $(this.pollSelector + ' .carousel-wrap').animate( { left: amount }, 'slow', function()\n        {\n            if( animateBar )\n            {\n                that.animateBars();\n            }\n        });\n    }\n}"},"resetWidth":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.PollView.prototype.resetWidth = function()\n{\n    $('#' + this.selectedQuestion + ' .resultsBar').css('width', '0%');\n}"},"applyActiveClass":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.PollView.prototype.applyActiveClass = function()\n{\n    PULSE.CLIENT.Util.applyActiveClass( this.pollSelector + ' .active-questions ul li',\n        this.queIdsArray.indexOf(this.selectedQuestion), 'active' )\n}"},"updateActiveQuestions":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.PollView.prototype.updateActiveQuestions = function()\n{\n    var that = this;\n    var className = 'active';\n    $(this.pollSelector + ' .active-questions ul').empty();\n    for ( var i = 0; i < this.opinion.length; i++ )\n    {\n        var row = this.opinion[i];\n\n        if ( this.selectedQuestion === row.id )\n        {\n            className = 'active';\n        }\n        else\n        {\n            className = '';\n        }\n\n        $(this.pollSelector + ' .active-questions ul')\n            .append('<li id=' + row.id + '><a>' + row.text + '</a></li>');\n    }\n\n    this.applyActiveClass();\n\n    $(this.pollSelector + ' .active-questions ul li').click(function(){\n        that.scrollToQuestion( parseInt( this.id ), true );\n    });\n}"},"safeQuestion":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"question"}]},"Source":"PULSE.CLIENT.PollView.prototype.safeQuestion = function(question)\n{\n    if ( question.indexOf('#') === 0 )\n    {\n        return question.substr(1);\n    }\n    else\n    {\n        return question;\n    }\n}"},"updatePulsePopup":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"popupQueId"}]},"Source":"PULSE.CLIENT.PollView.prototype.updatePulsePopup = function( popupQueId )\n{\n    var that = this;\n    var popupOpinion = this.getOpinionById( popupQueId );\n    if ( popupOpinion )\n    {\n        var showCookieValue = this.getShowPopupCookieValue();\n        // show/hide pulse popup based on following conditions\n        if ( ( ! this.showPopup ) || ( ! $(this.pulseTabSelector).hasClass(this.hiddenClass) ) ||\n            ( showCookieValue !== null && showCookieValue.indexOf(':No:') !== -1 ) ||\n            this.pollController.answeredQuestions.contains( popupOpinion.id ) )\n        {\n            $(this.popupSelector).css('display', 'none');\n        }\n        else\n        {\n            var options = '';\n            for ( var i = 0; i < popupOpinion.options.length; i++ )\n            {\n                options = options + '<div class=\"option\">' +\n                                      '<input type=\"radio\" class=\"inputradio\">' +\n                                        '<label>' + popupOpinion.options[i].option + '</label>' +\n                                    '</div>';\n            }\n\n            $('.pulse-popup .question').text( popupOpinion.text );\n            $('.pulse-popup .options').empty();\n            $('.pulse-popup .options').append( options );\n            $('.pulse-popup .options .option').click(function()\n            {\n                var index = $('.pulse-popup .options .option').index(this);\n                $(that.popupSelector).css('display', 'none');\n                that.pollController.answerQuestion(index, popupOpinion.id);\n                that.refreshData();\n            });\n\n            $(this.popupSelector).css('display', 'block');\n        }\n    }\n}"},"getOpinionById":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"queId"}]},"Source":"PULSE.CLIENT.PollView.prototype.getOpinionById = function( queId )\n{\n    for ( var i = 0; i < this.opinion.length; i++ )\n    {\n        if ( this.opinion[i] && this.opinion[i].id === queId )\n        {\n            return this.opinion[i];\n        }\n    }\n\n    return undefined;\n}"},"onCheckboxClick":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"checked"}]},"Source":"PULSE.CLIENT.PollView.prototype.onCheckboxClick = function( checked )\n{\n    var c_expiry = this.getShowPopupCookieExpiryDate();\n    if ( checked )\n    {\n        this.showPopup = true;\n        document.cookie = this.pulsePopupCookieName + '=:Yes:|' + c_expiry + ';expires=' + c_expiry;\n    }\n    else\n    {\n        this.showPopup = false;\n        document.cookie = this.pulsePopupCookieName + '=:No:|' + c_expiry + ';expires=' + c_expiry;\n    }\n}"},"hasLastViewedQuestionClosed":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.PollView.prototype.hasLastViewedQuestionClosed = function()\n{\n    for ( var i = 0; i < this.opinion.length; i++ )\n    {\n        var op = this.opinion[i];\n        if ( op.id === this.selectedQuestion )\n        {\n            return false;\n        }\n    }\n    return true;\n}"},"getShowPopupCookieValue":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.PollView.prototype.getShowPopupCookieValue = function()\n{\n    var val = PULSE.CLIENT.Cookie.getCookieByKey( this.pulsePopupCookieName );\n\n    // if this cookie doesn't exist then set it with Yes & expiry date: 2 weeks from now\n    if ( val.length === 0 )\n    {\n        var exdate = new Date();\n        exdate.setDate( exdate.getDate() + 14 );\n        var expiryDate = exdate.toUTCString();\n        document.cookie = this.pulsePopupCookieName + '=:Yes:|' + expiryDate + ';expires=' +\n            expiryDate;\n        return \":Yes:|\" + expiryDate;\n    }\n\n    return val;\n}"},"getShowPopupCookieExpiryDate":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.PollView.prototype.getShowPopupCookieExpiryDate = function()\n{\n    var c_val = this.getShowPopupCookieValue();\n\n    if ( c_val.indexOf('|') !== -1 )\n    {\n        return c_val.substr( c_val.indexOf('|') + 1 );\n    }\n\n    return '';\n}"}}},"TENNIS":{"makePlayerLabel":{"Documentation":{"description":"Utility method to make a participant string.","tags":[]},"Source":"PULSE.CLIENT.TENNIS.makePlayerLabel = function ( match, index )\n{\n    var label = '';\n    for ( var i = 0, ilimit = match.names[ index ].length; i < ilimit; i++ )\n    {\n        label += match.names[ index ][ i ];\n\n        if ( match.nationalities && match.nationalities[ index ][ i ] )\n        {\n            label += ' (' + match.nationalities[ index ][ i ] + ')';\n        }\n\n        if ( i < ilimit - 1 )\n        {\n            label += '/';\n        }\n    }\n\n    if ( match.seedings && match.seedings[ index ] )\n    {\n        label += ' [' + match.seedings[ index ] + ']';\n    }\n\n    return label;\n}"},"DrawCanvas":{"Documentation":{"description":"Constructor.","tags":[{"title":"param","description":"the ID of the div that the canvas should go in","type":null,"name":"divId"},{"title":"param","description":"configuration parameters for the canvas","type":null,"name":"config"}]},"Source":"PULSE.CLIENT.TENNIS.DrawCanvas = function ( divId, config )\n{\n\tvar that = this;\n\t\n\t// Create drawing context\n\tthis.r = Raphael( divId, config.width, config.height );\n\t\n    // Set up mouse listeners\n\tvar div = document.getElementById( divId );\n    div.onselectstart = function() { return false; }\n    div.onmousedown = function( e ) { \n    \tthat.anchor = PULSE.Utils.getXY( e );\n    }\n    div.onmouseup = function() { that.anchor = undefined; }\n    div.onmousemove = function ( e ) {\n    \tif ( that.anchor )\n    \t{\n\t    \tvar pos = PULSE.Utils.getXY( e );\n\t    \tvar diff = { x: that.anchor.x - pos.x, y: that.anchor.y - pos.y };\n\t    \t\n        \t$(div).css( 'left', diff.x + 'px' );\n        \t$(div).css( 'top', diff.x + 'px' );\n\t    \t\n\t    \tthat.anchor = pos;\n    \t}\n    }\n\t\n\t// Save the configuration\n\tthis.config = config;\n}","prototype":{"setData":{"Documentation":{"description":"Sets the data that this canvas will be showing.","tags":[{"title":"param","description":"the data, consisting of draws for all events","type":null,"name":"data"}]},"Source":"PULSE.CLIENT.TENNIS.DrawCanvas.prototype.setData = function ( data )\n{\n\t// Build event-keyed data\n\tthis.events = {};\n    for ( var i = 0, ilimit = data.events.length; i < ilimit; i++ )\n    {\n        var event = data.events[i];\n        this.events[ event.name ] = event;\n    }\n\n    // Reset data\n\tthis.data = this.events[ this.eventName ];\n    \n    // Render\n\tthis.render();\n}"},"setEvent":{"Documentation":{"description":"Sets the event to show.","tags":[{"title":"param","description":"the event name","type":null,"name":"event"}]},"Source":"PULSE.CLIENT.TENNIS.DrawCanvas.prototype.setEvent = function ( event )\n{\n\tthis.eventName = event;\n\tthis.data = this.events[ this.eventName ];\n\tthis.render();\n}"},"render":{"Documentation":{"description":"Performs the rendering of the data.","tags":[]},"Source":"PULSE.CLIENT.TENNIS.DrawCanvas.prototype.render = function ()\n{\n\tif ( this.data )\n\t{\n\t\t// First do some calculation on the size of the panel\n\t\tvar maxMatches = this.data.rounds[0].matches.length;\n\t\tvar height = maxMatches * this.config.distance;\n\t\t\n\t\tif ( this.config.doubleEnded )\n\t\t{\n\t\t\theight /= 2;\n\t\t}\n\t\t\n\t\tthis.r.height = height;\n\t\t\n\t\tthis.r.clear();\n\t\tvar off = 0;\n\t\tfor ( var round = 0, rounds = this.data.rounds.length; round < rounds; round++ )\n\t\t{\n\t\t\tthis.renderRound( this.data.rounds[round], 200 * ( round + 1 ) - 100, \n\t\t\t\t\t\t      30 + ( off * this.config.distance ),\n\t\t\t\t\t\t      this.config.distance * ( Math.pow( 2, round ) ),\n\t\t\t\t\t\t      round >= rounds - 2 );\n\t\t\t\n\t\t\toff += ( round === 0 ? 0.5 : Math.pow( 2, round - 1 ) );\n\t\t}\n\t}\n}"},"renderRound":{"Documentation":{"description":"Renders a single round's data vertically.","tags":[]},"Source":"PULSE.CLIENT.TENNIS.DrawCanvas.prototype.renderRound = function ( round, x, y, dy, end )\n{\n\tfor ( var m = 0, mlimit = round.matches.length; m < mlimit; m++ )\n\t{\n\t\tvar rhs = this.config.doubleEnded && m >= ( mlimit / 2 );\n\t\tvar index = m;\n\t\tif ( rhs )\n\t\t{\n\t\t\tindex -= ( mlimit / 2 );\n\t\t}\n\t\t\n\t\tthis.renderMatch( round.matches[m], x, y + ( index * dy ), dy, m % 2 === 0, end, rhs );\n\t}\n}"},"renderMatch":{"Documentation":{"description":"Renders a single match's data vertically.","tags":[]},"Source":"PULSE.CLIENT.TENNIS.DrawCanvas.prototype.renderMatch = function ( match, x, y, separation, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  upper, end, rhs )\n{\n\t// If we are in a RHS mode, modify the x and y\n\tvar dx = 100;\n\tif ( rhs )\n\t{\n\t\tx = 2400 - x;\n\t\tdx *= -1;\n\t}\n\t\n\t// Connector, if not at the end\n\tif ( !end )\n\t{\n\t\tvar target = y;\n\t\tif ( upper )\n\t\t{\n\t\t\ttarget += ( separation / 2 )\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttarget -= ( separation / 2 );\n\t\t}\n\t\t\n\t\tvar path = 'M' + x + ' ' + y +\n\t\t           'L' + ( x + dx ) + ' ' + y +\n\t\t           'L' + ( x + dx ) + ' ' + target;\n\t\t\n\t\tif ( upper )\n\t\t{\n\t\t\tpath += 'L' + ( x + ( 2 * dx ) ) + ' ' + ( y + ( separation / 2 ) );\n\t\t}\n\t\t\n\t\tthis.r.path( path ).attr( { stroke:'black' } );\n\t}\n\t\n\t// Container\n\tthis.r.rect( x - 80, y - 23, 160, 46, 0 ).attr( { fill:'#eee', stroke:'#000' } );\n\t\n\t// Text\n\tvar texts = [ this.r.text( x, y - 12, PULSE.CLIENT.TENNIS.makePlayerLabel( match, 0 ) ), \n\t              this.r.text( x, y + 12, PULSE.CLIENT.TENNIS.makePlayerLabel( match, 1 ) ) ]; \n\n\tif ( match.winnerIndex !== undefined && match.winnerIndex !== -1 )\n\t{\n\t\ttexts[match.winnerIndex].attr( { fill:'blue' } );\n\t}\n\t\n\tif ( match.outcomeString )\n\t{\n\t\tthis.r.text( x, y, \n\t\t\t\tmatch.outcomeString.replace( /\\<span\\>/g, '(' ).replace( /\\<\\/span\\>/g, ')' ) );\n\t}\n}"}}},"NormalisePosition":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.TENNIS.NormalisePosition"},{"title":"param","description":null,"type":null,"name":"world"}]},"Source":"PULSE.CLIENT.TENNIS.NormalisePosition = function ( world )\n{\n\tif ( world.x < 0 )\n\t{\n\t\tworld.x = -world.x;\n\t\tworld.y = -world.y;\n\t}\n\treturn world;\n}"},"ShotDataGraph":{"Documentation":{"description":"Constructor.","tags":[{"title":"param","description":"the number of graphs to display (1 or 2)","type":null,"name":"count"},{"title":"param","description":"the prefix of the divs holding the background image","type":null,"name":"bgDivId"},{"title":"param","description":"the prefix of the divs prepared for drawing output","type":null,"name":"fgDivId"},{"title":"param","description":"configuration parameters for the graph","type":null,"name":"config"},{"title":"param","description":"the prefix of the divs prepared for displaying the player names (optional,\n       as it is not driven if we are in single graph mode)","type":null,"name":"nameDivId"}]},"Source":"PULSE.CLIENT.TENNIS.ShotDataGraph = function ( count, bgDivId, fgDivId, config, nameDivId )\n{\n    this.bg = [];\n    this.name = [];\n    this.r = [];\n\n    for ( var i = 0; i < count; i++ )\n    {\n        // Obtain background div reference\n        this.bg[i] = document.getElementById( bgDivId + ( i + 1 ) );\n\n        // Obtain name div reference\n        this.name[i] = document.getElementById( nameDivId + ( i + 1 ) );\n\n        // Create drawing context\n        this.r[i] = Raphael( fgDivId + ( i + 1 ), config.width, config.height );\n    }\n\n    // Save the configuration\n    this.config = config;\n\n    // Initialise filter and data to empty objects\n    this.filter = {};\n    this.data = {};\n\n    // Set the default graph\n    this.setGraph( 'sp' );\n}","prototype":{"setData":{"Documentation":{"description":"Sets the data that this graph will be showing.","tags":[{"title":"param","description":"the data, consisting of all shot data for both players in the whole match","type":null,"name":"data"}]},"Source":"PULSE.CLIENT.TENNIS.ShotDataGraph.prototype.setData = function ( data )\n{\n    // Save P1 name\n    this.p1Name = data.names[0];\n\n    // Update name divs\n    for ( var i = 0, ilimit = this.name.length; i < ilimit; i++ )\n    {\n        if ( this.name[i] )\n        {\n            this.name[i].innerHTML = data.names[i];\n        }\n    }\n\n    // Derive and render data\n    this.data = data;\n    this.generateData();\n    this.draw();\n}"},"setFilter":{"Documentation":{"description":"Sets the filter, determining what data is actually rendered.","tags":[{"title":"param","description":"the filter to set","type":null,"name":"filter"}]},"Source":"PULSE.CLIENT.TENNIS.ShotDataGraph.prototype.setFilter = function ( filter )\n{\n    this.filter = filter;\n    this.generateData();\n    this.draw();\n}"},"setGraph":{"Documentation":{"description":"Displays the given specific shot data graph.","tags":[{"title":"param","description":"the name of the graph to switch to (sp, rsp, p, rhp)","type":null,"name":"graph"}]},"Source":"PULSE.CLIENT.TENNIS.ShotDataGraph.prototype.setGraph = function ( graph )\n{\n    if ( this.config.projections[ graph ] )\n    {\n        // Save graph name\n        this.graph = graph;\n\n        // Set new projection\n        this.projector = new PULSE.Projector( this.config.projections[ graph ] );\n\n        // Set new background\n        this.setBackground( this.config.backgrounds[ graph ] );\n\n        this.generateData();\n        this.draw();\n    }\n}"},"setBackground":{"Documentation":{"description":"Sets the background images for this graph.","tags":[]},"Source":"PULSE.CLIENT.TENNIS.ShotDataGraph.prototype.setBackground = function ( bg )\n{\n    for ( var i = 0, ilimit = this.bg.length; i < ilimit; i++ )\n    {\n        var div = this.bg[i];\n\n        if ( this.config.backgroundMethod === 'image' )\n        {\n            var img = new Image();\n            img.src = bg;\n            while ( div.firstChild )\n            {\n                div.removeChild( div.firstChild );\n            }\n            div.appendChild( img );\n        }\n        else\n        {\n            div.setAttribute( 'class', bg );\n            div.setAttribute( 'className', bg );\n        }\n    }\n}"},"generateData":{"Documentation":{"description":"Private method to regenerate the two data buckets depending on the current complete data set,\nthe current filter, and the current graph.","tags":[]},"Source":"PULSE.CLIENT.TENNIS.ShotDataGraph.prototype.generateData = function ()\n{\n    // Create the stereo data containers\n    this.stereoData = [ [], [] ];\n\n    // Iterate over all data in the complete data set\n    for ( var pp in this.data.data )\n    {\n        var thisSet = +pp.split( '.' )[0];\n\n        // First check for set filtering\n        if ( !this.filter.set || this.filter.set == thisSet )\n        {\n            var ppData = this.data.data[pp];\n            var world;\n\n            // Now filter depending on the graph\n            if ( 'sp' === this.graph && ppData.servePlacement )\n            {\n                if ( !this.filter.shot || this.filter.shot.indexOf( ppData.serveType ) != -1 )\n                {\n                    world = ppData.servePlacement;\n                    world.z = PULSE.CLIENT.TENNIS.BALL_RADIUS;\n                    world.fill = this.config.ballFills[ ppData.serveType ];\n                    this.stereoData[ ppData.serverIndex ].push(\n                            PULSE.CLIENT.TENNIS.NormalisePosition( world ) );\n                }\n            }\n            else if ( 'rsp' === this.graph && ppData.returnStrike )\n            {\n                if ( !this.filter.shot || this.filter.shot.indexOf( ppData.serveType ) != -1 )\n                {\n                    world = ppData.returnStrike;\n                    world.fill = this.config.ballFills[ ppData.serveType ];\n                    this.stereoData[ 1 - ppData.serverIndex ].push(\n                            PULSE.CLIENT.TENNIS.NormalisePosition( world ) );\n                }\n            }\n            else if ( 'p' === this.graph && ppData.placements )\n            {\n                for ( var p = 0; p < 2; p++ )\n                {\n                    if ( ppData.placements[p] )\n                    {\n                        for ( var i = 0, ilimit = ppData.placements[p].length; i < ilimit; i++ )\n                        {\n                            world = ppData.placements[p][i];\n                            world.z = PULSE.CLIENT.TENNIS.BALL_RADIUS;\n                            this.stereoData[p].push(\n                                    PULSE.CLIENT.TENNIS.NormalisePosition( world ) );\n                        }\n                    }\n                }\n            }\n            else if ( 'rhp' === this.graph && ppData.strikes )\n            {\n                for ( var p = 0; p < 2; p++ )\n                {\n                    if ( ppData.strikes[p] )\n                    {\n                        for ( var i = 0, ilimit = ppData.strikes[p].length; i < ilimit; i++ )\n                        {\n                            world = ppData.strikes[p][i];\n                            this.stereoData[p].push(\n                                    PULSE.CLIENT.TENNIS.NormalisePosition( world ) );\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // Finally, order the items in each data bucket by their x-value\n    var sorter = function ( a, b )\n    {\n        return a.x - b.x;\n    };\n    this.stereoData[0].sort( sorter );\n    this.stereoData[1].sort( sorter );\n\n    // If we are in single-graph mode, ensure stereoData[0] contains the correct data\n    if ( this.name.length === 1 )\n    {\n        if ( this.filter.player && this.filter.player !== this.p1Name )\n        {\n            this.stereoData[0] = this.stereoData[1];\n        }\n    }\n}","sorter":{"Documentation":{"description":"Private method to regenerate the two data buckets depending on the current complete data set,\nthe current filter, and the current graph.","tags":[]},"Source":"var sorter = function ( a, b )\n    {\n        return a.x - b.x;\n    }"}},"draw":{"Documentation":{"description":"Private method to update the scene to show the current balls (based on the filter) using the\ncurrent projection.","tags":[]},"Source":"PULSE.CLIENT.TENNIS.ShotDataGraph.prototype.draw = function ()\n{\n    this.drawPlayerData( this.r[0], 0 );\n    this.drawPlayerData( this.r[1], 1 );\n}"},"drawPlayerData":{"Documentation":{"description":"Private method to draw a single player's data.","tags":[]},"Source":"PULSE.CLIENT.TENNIS.ShotDataGraph.prototype.drawPlayerData = function ( r, index )\n{\n    if ( r )\n    {\n        r.clear();\n\n        // If this is an in-the-air graph, draw stalks first\n        if ( 'rsp' === this.graph || 'rhp' === this.graph )\n        {\n            for ( var i = 0, ilimit = this.stereoData[index].length; i < ilimit; i++ )\n            {\n                var point = this.stereoData[index][i];\n\n                // Do not show balls in the serve box for rsp graph\n                if( 'rsp' === this.graph && point.x < 7 ) continue;\n\n                var floor = { x:point.x, y:point.y, z:PULSE.CLIENT.TENNIS.BALL_RADIUS };\n                var floorScreen = this.projector.project( floor );\n\n                // In-the-air graph, so draw stalks\n                var pointScreen = this.projector.project( point );\n\n                r.path( 'M' + pointScreen.x + ' ' + pointScreen.y +\n                        'L' + floorScreen.x + ' ' + floorScreen.y ).attr(\n                                     { stroke:this.config.stalkStroke } );\n            }\n        }\n\n        var easing = '';\n        var t0 = 0;\n        var t1 = 0;\n        if ( this.config.easing && this.config.easing[ this.graph ] )\n        {\n            easing = this.config.easing[ this.graph ][0];\n            t0 = this.config.easing[ this.graph ][1];\n            t1 = this.config.easing[ this.graph ][2];\n        }\n\n        var fallHeight = 1;\n        if ( this.config.fallHeights && this.config.fallHeights[ this.graph ] )\n        {\n            fallHeight = this.config.fallHeights[ this.graph ];\n        }\n\n        for ( var i = 0, ilimit = this.stereoData[index].length; i < ilimit; i++ )\n        {\n            var point = this.stereoData[index][i];\n\n            // Do not show balls in the serve box for rsp graph\n            if( 'rsp' === this.graph && point.x < 7 ) continue;\n\n            var before = { x:point.x, y:point.y, z:fallHeight };\n            var beforeScreen = this.projector.project( before );\n            var afterScreen = this.projector.project( point );\n            var time = t0 + ( t1 * Math.random() );\n\n            // If this is a ground shot graph, draw and animate shadow\n            if ( 'p' === this.graph || 'sp' == this.graph )\n            {\n                var e = r.ellipse( afterScreen.x, afterScreen.y + 3, 0, 0 ).attr(\n                                { fill:this.config.shadowFill, stroke:'none' } );\n                e.animate( { rx:this.config.ballSize, ry:this.config.ballSize * 0.6 }, time, easing );\n            }\n\n            // Work out the ball fill\n            var ballFill = point.fill ? point.fill : this.config.ballFills.def;\n\n            // Now animate the ball, from the heavens to their final position\n            var c = r.circle( beforeScreen.x, beforeScreen.y, this.config.ballSize ).attr(\n                    { fill:ballFill, stroke:'none' } );\n            c.animate( { cx:afterScreen.x, cy:afterScreen.y }, time, easing );\n        }\n    }\n}"}}},"StereoShotDataGraph":{"Documentation":{"description":"Constructor.","tags":[{"title":"param","description":"the prefix of the divs holding the background image","type":null,"name":"bgDivId"},{"title":"param","description":"the prefix of the divs prepared for drawing output","type":null,"name":"fgDivId"},{"title":"param","description":"the prefix of the divs prepared for displaying the player names","type":null,"name":"nameDivId"},{"title":"param","description":"configuration parameters for the graph","type":null,"name":"config"}]},"Source":"PULSE.CLIENT.TENNIS.StereoShotDataGraph = function ( bgDivId, fgDivId, nameDivId, config )\n{\n\t// Obtain background div references\n\tthis.bg1 = document.getElementById( bgDivId + '1' );\n\tthis.bg2 = document.getElementById( bgDivId + '2' );\n\t\n\t// Obtain name div references\n\tthis.name1 = document.getElementById( nameDivId + '1' );\n\tthis.name2 = document.getElementById( nameDivId + '2' );\n\t\n\t// Create drawing contexts\n\tthis.r1 = Raphael( fgDivId + '1', config.width, config.height );\n\tthis.r2 = Raphael( fgDivId + '2', config.width, config.height );\n\t\n\t// Save the configuration\n\tthis.config = config;\n\n\t// Initialise filter and data to empty objects\n\tthis.filter = {};\n\tthis.data = {};\n\t\n    // Set the default graph\n    this.setGraph( 'sp' );\n}","prototype":{"setData":{"Documentation":{"description":"Sets the data that this graph will be showing.","tags":[{"title":"param","description":"the data, consisting of all shot data for both players in the whole match","type":null,"name":"data"}]},"Source":"PULSE.CLIENT.TENNIS.StereoShotDataGraph.prototype.setData = function ( data )\n{\n\t// Update name divs\n\tthis.name1.innerHTML = data.names[0];\n\tthis.name2.innerHTML = data.names[1];\n\t\n\t// Derive and render data \n\tthis.data = data;\n\tthis.generateData();\n\tthis.draw();\n}"},"setFilter":{"Documentation":{"description":"Sets the filter, determining what data is actually rendered.","tags":[{"title":"param","description":"the filter to set","type":null,"name":"filter"}]},"Source":"PULSE.CLIENT.TENNIS.StereoShotDataGraph.prototype.setFilter = function ( filter )\n{\n\tthis.filter = filter;\n\tthis.generateData();\n\tthis.draw();\n}"},"setGraph":{"Documentation":{"description":"Displays the given specific shot data graph.","tags":[{"title":"param","description":"the name of the graph to switch to (sp, rsp, p, rhp)","type":null,"name":"graph"}]},"Source":"PULSE.CLIENT.TENNIS.StereoShotDataGraph.prototype.setGraph = function ( graph )\n{\n\t// Save graph name\n\tthis.graph = graph;\n\t\n\t// Set new projection\n\tthis.projector = new PULSE.Projector( this.config.projections[ graph ] );\n\n\t// Set new background\n\tthis.setBackground( this.config.backgrounds[ graph ] );\n\t\n\tthis.generateData();\n\tthis.draw();\n}"},"setBackground":{"Documentation":{"description":"Sets the background images for this graph.","tags":[]},"Source":"PULSE.CLIENT.TENNIS.StereoShotDataGraph.prototype.setBackground = function ( bg )\n{\n\tvar divs = [ this.bg1, this.bg2 ];\n\tfor ( var i = 0, ilimit = divs.length; i < ilimit; i++ )\n\t{\n\t\tvar div = divs[i];\n\t\t\n\t\tif ( this.config.backgroundMethod === 'image' )\n\t\t{\n\t\t\tvar img = new Image();\n\t\t    img.src = bg;\n\t\t\twhile ( div.firstChild )\n\t\t\t{\n\t\t\t\tdiv.removeChild( div.firstChild );\n\t\t\t}\n\t\t\tdiv.appendChild( img );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiv.setAttribute( 'class', bg );\n\t\t\tdiv.setAttribute( 'className', bg );\n\t\t}\n\t}\n}"},"generateData":{"Documentation":{"description":"Private method to regenerate the two data buckets depending on the current complete data set,\nthe current filter, and the current graph.","tags":[]},"Source":"PULSE.CLIENT.TENNIS.StereoShotDataGraph.prototype.generateData = function ()\n{\n\t// Create the stereo data containers\n\tthis.stereoData = [ [], [] ];\n\n\t// Iterate over all data in the complete data set\n\tfor ( var pp in this.data.data )\n\t{\n        var thisSet = +pp.split( '.' )[0];\n        \n        // First check for set filtering\n        if ( !this.filter.set || this.filter.set == thisSet )\n        {\n        \tvar ppData = this.data.data[pp];\n        \tvar world;\n        \t\n        \t// Now filter depending on the graph\n        \tif ( 'sp' === this.graph && ppData.servePlacement )\n        \t{\n        \t\tif ( !this.filter.shot || this.filter.shot.indexOf( ppData.serveType ) != -1 )\n        \t\t{\n\t        \t\tworld = ppData.servePlacement;\n\t        \t\tworld.z = PULSE.CLIENT.TENNIS.BALL_RADIUS;\n\t        \t\tworld.fill = this.config.ballFills[ ppData.serveType ];\n\t        \t\tthis.stereoData[ ppData.serverIndex ].push( \n\t        \t\t\t\tPULSE.CLIENT.TENNIS.NormalisePosition( world ) );\n        \t\t}\n        \t}\n        \telse if ( 'rsp' === this.graph && ppData.returnStrike )\n        \t{\n        \t\tif ( !this.filter.shot || this.filter.shot.indexOf( ppData.serveType ) != -1 )\n        \t\t{\n\t        \t\tworld = ppData.returnStrike;\n\t        \t\tworld.fill = this.config.ballFills[ ppData.serveType ];\n\t        \t\tthis.stereoData[ 1 - ppData.serverIndex ].push( \n\t        \t\t\t\tPULSE.CLIENT.TENNIS.NormalisePosition( world ) );\n        \t\t}\n        \t}\n        \telse if ( 'p' === this.graph && ppData.placements )\n        \t{\n        \t\tfor ( var p = 0; p < 2; p++ )\n        \t\t{\n        \t\t\tif ( ppData.placements[p] )\n        \t\t\t{\n\t\t\t            for ( var i = 0, ilimit = ppData.placements[p].length; i < ilimit; i++ )\n\t\t\t            {\n\t\t\t            \tworld = ppData.placements[p][i];\n\t\t\t            \tworld.z = PULSE.CLIENT.TENNIS.BALL_RADIUS;\n\t\t\t            \tthis.stereoData[p].push( \n\t\t\t            \t\t\tPULSE.CLIENT.TENNIS.NormalisePosition( world ) );\n\t\t\t            }\n        \t\t\t}\n        \t\t}\n        \t}\n        \telse if ( 'rhp' === this.graph && ppData.strikes )\n        \t{\n        \t\tfor ( var p = 0; p < 2; p++ )\n        \t\t{\n        \t\t\tif ( ppData.strikes[p] )\n        \t\t\t{\n\t\t\t            for ( var i = 0, ilimit = ppData.strikes[p].length; i < ilimit; i++ )\n\t\t\t            {\n\t\t\t            \tworld = ppData.strikes[p][i];\n\t\t\t            \tthis.stereoData[p].push( \n\t\t\t            \t\t\tPULSE.CLIENT.TENNIS.NormalisePosition( world ) );\n\t\t\t            }\n\t\t            }\n        \t\t}\n        \t}\n        }\n\t}\n\t\n\t// Finally, order the items in each data bucket by their x-value\n\tvar sorter = function ( a, b )\n\t{\n\t\treturn a.x - b.x;\n\t};\n\t\n\tthis.stereoData[0].sort( sorter );\n\tthis.stereoData[1].sort( sorter );\n}","sorter":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"a"},{"title":"param","description":null,"type":null,"name":"b"}]},"Source":"var sorter = function ( a, b )\n\t{\n\t\treturn a.x - b.x;\n\t}"}},"draw":{"Documentation":{"description":"Private method to update the scene to show the current balls (based on the filter) using the\ncurrent projection.","tags":[]},"Source":"PULSE.CLIENT.TENNIS.StereoShotDataGraph.prototype.draw = function ()\n{\n\tthis.drawPlayerData( this.r1, 0 );\n\tthis.drawPlayerData( this.r2, 1 );\n}"},"drawPlayerData":{"Documentation":{"description":"Private method to draw a single player's data.","tags":[]},"Source":"PULSE.CLIENT.TENNIS.StereoShotDataGraph.prototype.drawPlayerData = function ( r, index )\n{\n\tr.clear();\n\t\n\t// If this is an in-the-air graph, draw stalks first\n\tif ( 'rsp' === this.graph || 'rhp' === this.graph )\n\t{\n\t\tfor ( var i = 0, ilimit = this.stereoData[index].length; i < ilimit; i++ )\n\t\t{\n\t\t\tvar point = this.stereoData[index][i];\n\t\t\t\n\t\t\tvar floor = { x:point.x, y:point.y, z:PULSE.CLIENT.TENNIS.BALL_RADIUS };\n\t\t\tvar floorScreen = this.projector.project( floor );\n\t\t\t\n\t\t\t// In-the-air graph, so draw stalks\n\t\t\tvar pointScreen = this.projector.project( point );\n\t\t\t\n\t\t\tr.path( 'M' + pointScreen.x + ' ' + pointScreen.y +\n\t\t\t        'L' + floorScreen.x + ' ' + floorScreen.y ).attr( \n\t\t\t\t\t    \t\t { stroke:this.config.stalkStroke } );\n\t\t}\n\t}\t\t\n\t\n\tvar easing = this.config.easing[ this.graph ][0];\n\tvar t0 = this.config.easing[ this.graph ][1];\n\tvar t1 = this.config.easing[ this.graph ][2];\n\t\n\tfor ( var i = 0, ilimit = this.stereoData[index].length; i < ilimit; i++ )\n\t{\n\t\tvar point = this.stereoData[index][i];\n\t\t\n\t\tvar before = { x:point.x, y:point.y, z:this.config.fallHeights[ this.graph ] };\n\t\tvar beforeScreen = this.projector.project( before );\n\t\tvar afterScreen = this.projector.project( point );\n\t\tvar time = t0 + ( t1 * Math.random() );\n\n\t\t// If this is a ground shot graph, draw and animate shadow\n\t\tif ( 'p' === this.graph || 'sp' == this.graph )\n\t\t{\n\t\t    var e = r.ellipse( afterScreen.x, afterScreen.y + 3, 0, 0 ).attr( \n\t\t\t\t\t\t\t{ fill:this.config.shadowFill, stroke:'none' } );\n\t\t\te.animate( { rx:this.config.ballSize, ry:this.config.ballSize * 0.6 }, time, easing );\n\t\t}\n\n\t\t// Work out the ball fill\n\t\tvar ballFill = point.fill ? point.fill : this.config.ballFills.def;\n\t\t\n\t\t// Now animate the ball, from the heavens to their final position\n\t\tvar c = r.circle( beforeScreen.x, beforeScreen.y, this.config.ballSize ).attr( \n\t\t\t\t{ fill:ballFill, stroke:'none' } );\n\t\tc.animate( { cx:afterScreen.x, cy:afterScreen.y }, time, easing );\n\t}\n}"}}},"TennisTimelineLabel":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.TENNIS.TennisTimelineLabel"},{"title":"param","description":null,"type":null,"name":"r"},{"title":"param","description":null,"type":null,"name":"config"}]},"Source":"PULSE.CLIENT.TENNIS.TennisTimelineLabel = function ( r, config )\n{\n\tthis.r = r;\n\tthis.config = config;\n\t\n\t// Label background\n\tthis.bg = r.rect( 0, 0, config.label.width, config.label.height, config.label.rounding )\n\t           .attr( { stroke:config.label.stroke, fill:config.label.fill, 'stroke-width':0.5 } );\n\n\t// Pointer attributes\n\tthis.pattr = { stroke:'none', fill:config.label.fill, 'stroke-width':0.5 };\n\t\n\t// Speed text\n\tthis.textValue = r.text( 0, PULSE.IE78 ? 13 : 10, '' )\n                      .attr( { 'font-family':config.label['font-family'], \n                    \t       'font-size':config.label['font-size'],\n                \t           'font-weight':config.label['font-weight'], \n                \t           fill:config.label.text, stroke:'none' } );\n\t\n\t// Speed text label\n\tthis.textLabel = r.text( 0, PULSE.IE78 ? 24 : 21, 'mph' )\n                      .attr( { 'font-family':config.label.label['font-family'], \n                    \t       'font-size':config.label.label['font-size'],\n                \t           'font-weight':config.label.label['font-weight'], \n                \t           fill:config.label.text, stroke:'none' } );\n\t\n\tthis.set = r.set();\n\tthis.set.push( this.textValue );\n\tthis.set.push( this.textLabel );\n\tthis.set.push( this.bg );\n\tthis.set.attr( { opacity:0 } );\n}","prototype":{"show":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"text"},{"title":"param","description":null,"type":null,"name":"x"}]},"Source":"PULSE.CLIENT.TENNIS.TennisTimelineLabel.prototype.show = function ( text, x )\n{\n\tif ( !isNaN( text ) && text > 0 )\n\t{\n//\t\tthis.x = x;\n//\t\t\n//\t\t// Check whether we are off the page\n//\t\tvar displayX = x;\n//\t\tvar pointerDisplayX = x + 1;\n//\t\tvar normalisation = 0;\n//\t\tvar hw = this.config.label.width / 2;\n//\t\t\n//\t\tif ( x <= hw )\n//\t\t{\n//\t\t\tdisplayX = hw + 1;\n//\t\t\tnormalisation = -2;\n//\t\t\tpointerDisplayX = this.config.slider.width / 2 + 2;\n//\t\t}\n//\t\telse if ( x >= this.config.width - hw )\n//\t\t{\n//\t\t\tdisplayX = this.config.width - hw - 1;\n//\t\t\tpointerDisplayX = this.config.width - ( this.config.slider.width / 2 ) - 2;\n//\t\t}\n//\t\t\n//\t\tthis.textValue.attr( { text:text, x:displayX + normalisation } );\n//\t\tthis.textLabel.attr( { x:displayX + normalisation } );\n//\t\t\n//\t\tthis.bg.attr( { x: displayX - hw } );\n//\n//\t\t// Build a new pointer\n//\t\tif ( this.pointer )\n//\t\t{\n//\t\t\tthis.pointer.remove();\n//\t\t}\n//\t\tthis.pointer = this.r.path( 'M' + pointerDisplayX + ' 36L' + (pointerDisplayX-5) + \n//\t\t\t\t                    ' 27L' + (pointerDisplayX+5) + ' 27z' )\n//        \t\t\t     \t .attr( this.pattr );\n//\t\t\n//\t\t// Show and then fade the set\n//\t\tthis.set.attr( { opacity:1 } );\n//\t\t\n//\t\tvar fader = { opacity:0 };\n//\t\tthis.set.animate( fader, 5000 );\n//\t\tthis.pointer.animate( fader, 5000 );\n\t}\n}"}}},"TennisTimeline":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"divId"},{"title":"param","description":null,"type":null,"name":"config"}]},"Source":"PULSE.CLIENT.TENNIS.TennisTimeline = function ( divId, config )\n{\n\tthis.config = config;\n\t\n\t// Create drawing context\n\tthis.r = Raphael( divId, config.width, config.height );\n\n\t// Disclosure bar\n\tthis.disclosure = this.r.rect( 0, config.bar.offset, config.width, config.bar.height )\n\t                        .attr( { fill:config.disclosure.fill, stroke:'none' } );\n\n\t// Slider button\n\tthis.slider = this.r.rect( 0, config.bar.offset, config.slider.width, config.slider.height ) \n\t\t.attr( { stroke:config.slider.stroke, fill:config.slider.fill, 'stroke-width':0.5 } );\n\n\t// Speed label\n\tthis.label = new PULSE.CLIENT.TENNIS.TennisTimelineLabel( this.r, config );\n\t\n\t// No shader bars yet\n\tthis.shaders = [];\n\n\t// Over the top, place a transparent element to capture mouse events\n\tvar that = this;\n\tthis.focuser = this.r.rect( 0, config.bar.offset, config.width, config.bar.height )\n    \t\t\t\t\t .attr( { fill:'#fff', stroke:'none', opacity:0 } );\n\t$(this.focuser.node)\n\t\t\t\t   .mouseover( function ( e ) { that.focus( true ); } )\n\t   \t\t \t   .mouseout(  function ( e ) { that.focus( false ); } )\n\t   \t\t \t   .click(     function ( e ) { that.jumpTo( e ); } )\n\t   \t\t \t   .mousedown( function ( e ) { that.mouse( 'down', Utils.getXY( e ).x );\n\t   \t\t \t   \t\t\t\t\t\t\t\treturn false; } )\n\t   \t\t \t   .mouseup(   function ( e ) { that.mouse( 'up',   Utils.getXY( e ).x ); } )\n\t   \t\t \t   .mousemove( function ( e ) { that.mouse( 'move', Utils.getXY( e ).x ); } );\n}","prototype":{"focus":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"focused"}]},"Source":"PULSE.CLIENT.TENNIS.TennisTimeline.prototype.focus = function ( focused )\n{\n\tif ( focused )\n\t{\n    \tthis.vr.isAnimationPaused = true;\n    \t$(this.focuser.node).css('cursor','pointer');\n\t}\n\telse\n\t{\n    \t$(this.focuser.node).css('cursor','default');\n    \tthis.vr.isAnimationPaused = false;\n        this.vr.increment();\n        this.mouseGrab = false;\n\t}\t\t\n}"},"jumpTo":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"event"}]},"Source":"PULSE.CLIENT.TENNIS.TennisTimeline.prototype.jumpTo = function ( event )\n{\n\tvar xy = Utils.getXY( event );\n\tvar clientCallback = window.setToAnimationMode;\n\tthis.vr.jumpToTime( this.xToTime( xy.x ) ); \n\tif ( clientCallback )\n\t{\n\t\tclientCallback();\n\t}\n}"},"mouse":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"op"},{"title":"param","description":null,"type":null,"name":"x"}]},"Source":"PULSE.CLIENT.TENNIS.TennisTimeline.prototype.mouse = function ( op, x )\n{\n\tvar inSlider = x > ( this.x - ( this.config.slider.width / 2 ) ) &&\n    \t\t\t   x < ( this.x + ( this.config.slider.width / 2 ) ); \n\t\n\tif ( 'down' === op )\n\t{\n\t\tif ( inSlider )\n\t\t{\n\t\t\tthis.mouseGrab = true;\n\t\t}\n\t}\n\telse if ( 'up' === op )\n\t{\n\t\tthis.mouseGrab = false;\n\t}\n\telse if ( 'move' === op )\n\t{\n\t\tif ( this.mouseGrab )\n\t\t{\n\t\t\tthis.vr.jumpToTime( this.xToTime( x ) );\n\t\t}\n\t}\n}"},"setTrajectory":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"traj"},{"title":"param","description":null,"type":null,"name":"resetDisclosure"}]},"Source":"PULSE.CLIENT.TENNIS.TennisTimeline.prototype.setTrajectory = function ( traj, resetDisclosure )\n{\n\t// Save the start/end\n\tthis.meta = traj.getRange();\n\t\n\t// Clear out any current shaders\n\tfor ( var s = 0, slimit = this.shaders.length; s < slimit; s++ )\n\t{\n\t\t// Remove from DOM\n\t\tthis.shaders[s].remove();\n\t}\n\t// Reset array\n\tthis.shaders = [];\n\t\n\t// Reset disclosure enablement\n\tif ( resetDisclosure )\n\t{\n\t\tthis.disclosureActive = true;\n\t}\n\t\n\t// Reset data\n\tthis.setData( this.meta.start, 0, 0, true );\n\t\n\t// Now build shaders\n\tthis.boundaries = [];\n\n\tvar lastEndX = 0;\n\tvar playerIndex = traj.serverIndex;\n\tvar lastDirection;\n\tfor ( var a = 0, alimit = traj.getNumArcs(); a < alimit; a++ )\n\t{\n\t\tvar change = false;\n\t\tvar arc = traj.getArc( a );\n\t\tif ( a === 0 )\n\t\t{\n\t\t\tlastDirection = arc.dx < 0 ? -1 : 1;\n\t\t\tchange = true;\n\t\t}\n\t\telse if ( arc.dx !== 0 )\n\t\t{\n\t\t\tvar direction = arc.dx < 0 ? -1 : 1;\n\t\t\tif ( direction !== lastDirection )\n\t\t\t{\n\t\t\t\tplayerIndex = 1 - playerIndex;\n\t\t\t\tlastDirection = direction;\n\t\t\t\t\n\t\t\t\tchange = true;\n\t\t\t}\n\t\t}\t\t\n\t\t\n\t\tvar startX = a === 0 ? 0 : this.timeToX( arc.time.start );\n\t\tvar endX = a === alimit - 1 ? this.config.width : this.timeToX( arc.time.end );\n\t\t\n\t\t// Ensure we close any gaps from the last end\n\t\tif ( startX >= lastEndX )\n\t\t{\n\t\t\tstartX = lastEndX - 1;\n\t\t}\n\n\t\tif ( change )\n\t\t{\n\t\t\tthis.boundaries.push( startX );\n\t\t}\n\t\t\n \t\tvar c1 = this.config.bar.colors[playerIndex][0];\n\t\tvar c2 = this.config.bar.colors[playerIndex][1];\n\t\tvar fill = '270-rgba(' + c1 + ',0.8)-rgba(' + c2 + ',0.8)';\n\t\t\n\t\tvar shader = this.r.rect( startX, this.config.bar.offset, endX - startX, this.config.bar.height )\n\t\t                   .attr( { stroke:'none', fill:fill } );\n\t\t\n\t\tshader.toBack();\n\t\tthis.shaders.push( shader );\n\t\t\n\t\t// Save the endX\n\t\tlastEndX = endX;\n\t}\n}"},"setData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"time"},{"title":"param","description":null,"type":null,"name":"speed"},{"title":"param","description":null,"type":null,"name":"dx"},{"title":"param","description":null,"type":null,"name":"immediate"}]},"Source":"PULSE.CLIENT.TENNIS.TennisTimeline.prototype.setData = function ( time, speed, dx, immediate )\n{\n\tif ( immediate )\n\t{\n\t\tdelete this.xdirection;\n\t}\n\n\tthis.setTime( time, immediate );\n\t\n\tif ( dx !== 0 )\n\t{\n\t\tvar dir = dx < 0 ? -1 : 1;\n\t\tif ( this.xdirection !== dir )\n\t\t{\n\t\t\tthis.xdirection = dir;\n\t\t    this.showSpeed( time, speed );\n\t\t}\n\t}\n}"},"timeToX":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"time"}]},"Source":"PULSE.CLIENT.TENNIS.TennisTimeline.prototype.timeToX = function ( time )\n{\n\tvar fraction = ( time - this.meta.start ) / ( this.meta.end - this.meta.start );\n\tvar x = Math.round( ( this.config.slider.width / 2 ) + \n\t        ( fraction * ( this.config.width - this.config.slider.width ) ) );\n\n\tif ( x < this.config.slider.width / 2 )\n\t{\n\t\tx = this.config.slider.width / 2;\n\t}\n\t\n\treturn Math.round( x );\n}"},"xToTime":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"x"}]},"Source":"PULSE.CLIENT.TENNIS.TennisTimeline.prototype.xToTime = function ( x )\n{\n\tvar period = this.meta.end - this.meta.start;\n\tvar fraction = ( x - ( this.config.slider.width / 2 ) ) / ( this.config.width - this.config.slider.width );\n\t\n\tvar t = this.meta.start + ( period * fraction );\n\t\n\treturn t;\n}"},"setTime":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"time"},{"title":"param","description":null,"type":null,"name":"immediate"}]},"Source":"PULSE.CLIENT.TENNIS.TennisTimeline.prototype.setTime = function ( time, immediate )\n{\t\n\tthis.x = this.timeToX( time );\n\tvar attr = { x: this.x - ( this.config.slider.width / 2 ) };\n\t\n\tvar dattr = { x: attr.x, width: this.config.width - attr.x };\n\t\n\tvar animate = false;\n\tif ( animate && !immediate && attr.x > 0 )\n\t{\n\t\tthis.slider.animate( attr, immediate ? 0 : 50 );\n\t\tif ( this.disclosureActive )\n\t\t{\n\t\t\tthis.disclosure.animate( dattr, immediate ? 0 : 50 );\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.slider.attr( attr );\n\t\tif ( this.disclosureActive )\n\t\t{\n\t\t\tthis.disclosure.attr( dattr );\n\t\t}\n\t}\n}"},"showSpeed":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"time"},{"title":"param","description":null,"type":null,"name":"speed"}]},"Source":"PULSE.CLIENT.TENNIS.TennisTimeline.prototype.showSpeed = function ( time, speed )\n{\n\t// Find real x value\n\tvar realX = this.timeToX( time );\n\tvar x = realX;\n\t\n\t// Now snap to the nearest value in the boundaries array\n\tif ( this.boundaries )\n\t{\n\t\tvar dist = undefined;\n\t\tfor ( var b = 0, blimit = this.boundaries.length; b < blimit; b++ )\n\t\t{\n\t\t\tvar thisDist = Math.abs( realX - this.boundaries[b] );\n\t\t\tif ( dist !== undefined && thisDist > dist )\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tdist = thisDist;\n\t\t\tx = this.boundaries[b];\n\t\t}\n\t}\n\t\n\tif ( x === 0 )\n\t{\n\t\tx = realX + 2;\n\t}\n\t\n\tthis.label.show( speed, x );\n}"},"disableDisclosure":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CLIENT.TENNIS.TennisTimeline.prototype.disableDisclosure = function ()\n{\n\tthis.disclosureActive = false;\n\tthis.disclosure.attr( { width:0 } );\n}"}}},"VirtualReplayGraph":{"Documentation":{"description":"Constructor.","tags":[{"title":"param","description":"the name of the div holding the background image","type":null,"name":"bgDivId"},{"title":"param","description":"the name of the div prepared for drawing output","type":null,"name":"fgDivId"},{"title":"param","description":"configuration parameters for the graph","type":null,"name":"config"},{"title":"param","description":"the timeline, if one exists","type":null,"name":"timeline"}]},"Source":"PULSE.CLIENT.TENNIS.VirtualReplayGraph = function ( bgDivId, fgDivId, config, timeline )\n{\n    // Save timeline, and reverse reference\n    this.timeline = timeline;\n    if ( this.timeline )\n    {\n        this.timeline.vr = this;\n    }\n\n    // Obtain background div reference\n    this.bg = document.getElementById( bgDivId )\n\n    // Create drawing context\n    this.r = Raphael( fgDivId, config.width, config.height );\n\n    // Save the configuration\n    this.config = config;\n\n    // Calculate number of positions to accommodate tail\n    this.maxPositions = this.config.tailLength / this.config.interval;\n\n    // Flag that identifies if the animation has to be paused\n    this.isAnimationPaused = false;\n\n    // Flag that identifies if animation should loop\n    this.continueLooping = true;\n\n    // Create UI components\n    this.shadow = this.r.ellipse( 0, 0, 0, 0 ).attr( { fill:'rgba(0,0,0,0.5)', stroke:'none' } );\n    this.path = this.r.path();\n    this.ball = this.r.circle( 0, 0, 0 ).attr( { fill:'90-#aa0-#ff0', stroke:'none' } );\n\n\n    this.labelContainers = [ this.r.rect().attr( this.config.labelcontainerattr ),\n                             this.r.rect().attr( this.config.labelcontainerattr ) ];\n    this.config.labelattr.text = ' ';\n    this.labels = [ this.r.text().attr( this.config.labelattr ),\n                    this.r.text().attr( this.config.labelattr ) ];\n\n    // Set the default view\n    this.setView( 1 );\n}","prototype":{"setData":{"Documentation":{"description":"Sets the data that this graph will be showing.","tags":[{"title":"param","description":"the data, as a Base64 encoded arc coefficients string","type":null,"name":"data"}]},"Source":"PULSE.CLIENT.TENNIS.VirtualReplayGraph.prototype.setData = function ( data )\n{\n    this.traj = PULSE.TENNIS.parseTrajectory( data );\n\n    if ( this.timeline )\n    {\n        this.timeline.setTrajectory( this.traj, true );\n    }\n    this.reset();\n    this.refreshLabels();\n}"},"setNames":{"Documentation":{"description":"Sets the names that the graph will be showing.","tags":[{"title":"param","description":"a 2-element names array","type":null,"name":"names"}]},"Source":"PULSE.CLIENT.TENNIS.VirtualReplayGraph.prototype.setNames = function ( names )\n{\n    this.names = names;\n    this.refreshLabels();\n}"},"reset":{"Documentation":{"description":"Resets the animation.","tags":[]},"Source":"PULSE.CLIENT.TENNIS.VirtualReplayGraph.prototype.reset = function ()\n{\n    var range = this.traj.getRange();\n    this.range = { start : range.start - ( this.config.timeMargin / 4000 ),\n                   end   : range.end   + ( this.config.timeMargin / 1000 ) };\n\n    this.time = this.range.start;\n    this.balls = [];\n    this.shadows = [];\n    this.positionIndex = -1;\n    this.startDirection = undefined;\n\n    if ( this.timerId )\n    {\n        clearTimeout( this.timerId );\n    }\n\n    this.increment();\n}"},"setView":{"Documentation":{"description":"Sets the view to the given view.","tags":[{"title":"param","description":"the name of the view to switch to","type":null,"name":"viewName"}]},"Source":"PULSE.CLIENT.TENNIS.VirtualReplayGraph.prototype.setView = function ( viewName )\n{\n    // Set new projection\n    this.projector = new PULSE.Projector( this.config.projections[ viewName ] );\n\n    // Save ball scale\n    this.ballScale = this.config.ballscales[ viewName ];\n\n    // Set new background\n    var bg = this.config.backgrounds[ viewName ];\n\n    if ( this.config.backgroundMethod === 'image' )\n    {\n        var img = new Image();\n        img.src = bg;\n        while ( this.bg.firstChild )\n        {\n            this.bg.removeChild( this.bg.firstChild );\n        }\n        this.bg.appendChild( img );\n    }\n    else\n    {\n        this.bg.setAttribute( 'class', bg );\n        this.bg.setAttribute( 'className', bg );\n    }\n\n    // Reset animation, if we have an active traj\n    if ( this.traj )\n    {\n        this.reset();\n\n        // Reset the timeline too\n        if ( this.timeline )\n        {\n            this.timeline.setTrajectory( this.traj, false );\n        }\n    }\n\n    // Move the labels\n    this.moveLabels( this.config.labelpositions[ viewName ] );\n}"},"moveLabels":{"Documentation":{"description":"Sets the label positions.","tags":[]},"Source":"PULSE.CLIENT.TENNIS.VirtualReplayGraph.prototype.moveLabels = function ( positions )\n{\n    this.labelPositions = positions;\n    this.refreshLabels();\n}"},"refreshLabels":{"Documentation":{"description":"Resizes and positions the labels.","tags":[]},"Source":"PULSE.CLIENT.TENNIS.VirtualReplayGraph.prototype.refreshLabels = function ()\n{\n    if ( this.traj && this.names && this.names.length >= 2 )\n    {\n        var colorSwitch = 0;\n        if ( ( this.traj.serverIndex === 1 && this.traj.getInitialX() < 0 ) ||\n             ( this.traj.serverIndex === 0 && this.traj.getInitialX() > 0 ) )\n        {\n            colorSwitch = 1;\n        }\n\n        for ( var p = 0; p < 2; p++ )\n        {\n            var colorIdx = Math.abs( p - colorSwitch );\n\n            this.labels[p].attr( { text: decodeURI( this.names[colorIdx] ) } );\n\n            var label = this.labels[p];\n            var container = this.labelContainers[p];\n\n            // Flip label positions to match the kludge we did to fix the Hawk-Eye kludge that\n            // flipped VR ends\n            var pos = this.labelPositions[1 - p];\n\n            // Get size of label and container\n            var bb = label.getBBox();\n            var width = bb.width + ( 2 * this.config.labelcontainerattr.hmargin );\n            var height = bb.height + ( 2 * this.config.labelcontainerattr.vmargin );\n\n            var labelattr = {};\n            var containerattr = { width:width, height:height, r:5,\n                                  fill:'rgb(' + this.config.colors[colorIdx] + ')' };\n\n            if ( pos.anchor.indexOf('e') !== -1 )\n            {\n                labelattr.x = pos.x - ( width / 2 );\n                containerattr.x = pos.x - width;\n            }\n            else if ( pos.anchor.indexOf('w') !== -1 )\n            {\n                labelattr.x = pos.x + ( width / 2 );\n                containerattr.x = pos.x;\n            }\n            else\n            {\n                labelattr.x = pos.x;\n                containerattr.x = pos.x - ( width / 2 );\n            }\n\n            if ( pos.anchor.indexOf('n') !== -1 )\n            {\n                labelattr.y = pos.y + ( height / 2 );\n                containerattr.y = pos.y;\n            }\n            else if ( pos.anchor.indexOf('s') !== -1 )\n            {\n                labelattr.y = pos.y - ( height / 2 );\n                containerattr.y = pos.y - height;\n            }\n            else\n            {\n                labelattr.y = pos.y;\n                containerattr.y = pos.y - ( height / 2 );\n            }\n\n            label.attr( labelattr );\n            container.attr( containerattr );\n        }\n    }\n}"},"jumpToTime":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CLIENT.TENNIS.VirtualReplayGraph.prototype.jumpToTime"},{"title":"param","description":null,"type":null,"name":"time"}]},"Source":"PULSE.CLIENT.TENNIS.VirtualReplayGraph.prototype.jumpToTime = function ( time )\n{\n    this.balls = [];\n    this.shadows = [];\n    this.positionIndex = -1;\n\n    // Ensure we snap to a proper increment\n    this.time = this.range.start + ( ( this.config.interval / 1000 ) *\n        Math.round( ( time - this.range.start ) / ( this.config.interval / 1000 ) ) );\n\n    // Do a one-off increment\n    this.increment( true );\n}"},"increment":{"Documentation":{"description":"Private method to increment the VR time, with looping back to start.","tags":[]},"Source":"PULSE.CLIENT.TENNIS.VirtualReplayGraph.prototype.increment = function ( jumped )\n{\n    if ( !this.isAnimationPaused || jumped )\n    {\n        this.positionIndex++;\n        if ( this.positionIndex >= this.maxPositions )\n        {\n            this.positionIndex = 0;\n        }\n\n        var pos = this.traj.getPositionAtTime( this.time );\n\n        if ( pos )\n        {\n            // Apply this hack until we understand how Hawk-Eye tennis VR reverses the x-value\n            pos.x *= -1.0;\n            pos.y *= -1.0;\n\n            if ( !this.startDirection )\n            {\n                this.startDirection = ( pos.dx < 0 ? -1 : 1 );\n            }\n\n            this.balls[ this.positionIndex ] = this.projector.project( pos );\n\n            var gpos = { x: pos.x, y: pos.y, z: 0 };\n            this.shadows[ this.positionIndex ] = this.projector.project( gpos );\n\n            // Work out the color direction\n            var server = this.traj.serverIndex;\n            var other = false;\n\n            if ( pos.dx !== 0 )\n            {\n                var dir = pos.dx < 0 ? -1 : 1;\n                other = this.startDirection !== dir;\n            }\n\n            var colorIndex = Math.abs( server - ( other ? 1 : 0 ) );\n\n            this.cometColor = 'rgba(';\n            this.cometColor += this.config.colors[colorIndex];\n            this.cometColor += ',0.8)';\n\n            if ( this.timeline )\n            {\n                this.timeline.setData( this.time, jumped ? 0 :\n                        Math.round( PULSE.TENNIS.linearMph( this.traj.getSpeedAtTime( this.time ) ) ),\n                        pos.dx );\n            }\n        }\n        else\n        {\n            this.balls[ this.positionIndex ] = null;\n        }\n\n        this.time += ( this.config.interval / 1000 );\n\n        if ( this.time >= this.range.end )\n        {\n            if ( this.timeline )\n            {\n                this.timeline.disableDisclosure();\n            }\n\n            if ( this.continueLooping )\n            {\n                this.time = this.range.start;\n\n                if ( this.timeline )\n                {\n                    this.timeline.setData( this.time, jumped ? 0 :\n                            Math.round( PULSE.TENNIS.linearMph( this.traj.getSpeedAtTime( this.time ) ) ),\n                            0, true );\n                }\n            }\n            else if ( !this.continueLooping && window.animationEndsCallback )\n            {\n                this.isAnimationPaused = true;\n                window.animationEndsCallback();\n            }\n        }\n\n        this.draw( jumped );\n\n        if ( !jumped )\n        {\n            var that = this;\n            if ( this.timerId )\n            {\n                clearTimeout( this.timerId );\n            }\n            this.timerId = setTimeout( function() { that.increment() }, this.config.interval );\n//          requestAnimFrame( function() { that.increment() } );\n        }\n    }\n}"},"draw":{"Documentation":{"description":"Private method to update the scene to show the current ball position and comet tail.","tags":[]},"Source":"PULSE.CLIENT.TENNIS.VirtualReplayGraph.prototype.draw = function ( jumped )\n{\n    var path = '';\n\n    var startIdx = this.positionIndex - this.maxPositions + 1;\n    if ( startIdx < 0 )\n    {\n        startIdx += this.maxPositions;\n    }\n\n    if ( jumped )\n    {\n        startIdx--;\n    }\n\n    // Draw the comet tail as a line\n    var lastBall;\n    var lastShadow;\n    var moved = false;\n\n    for ( var idx = startIdx, i = 1; i < this.maxPositions; idx++, i++ )\n    {\n        if ( idx >= this.maxPositions )\n        {\n            idx = 0;\n        }\n\n        var pos = this.balls[idx];\n\n        if ( pos )\n        {\n            if ( !moved )\n            {\n                path += 'M';\n                moved = true;\n            }\n            else\n            {\n                path += 'L';\n            }\n\n            path += pos.x + ' ' + pos.y;\n\n            lastBall = pos;\n            lastShadow = this.shadows[idx];\n        }\n    }\n\n    // Set comet path\n    this.path.attr( { path:path, stroke:this.cometColor, 'stroke-width':3 } );\n\n    if ( lastBall )\n    {\n        var dist = Math.sqrt( lastBall.dsquared );\n        var size = 3 + ( 2 * ( 30 - dist ) / 30 );\n\n        while ( size < 0 )\n        {\n            size += 2;\n        }\n\n        if ( this.ballScale )\n        {\n            size *= this.ballScale;\n        }\n\n        this.ball.attr( { cx:lastBall.x, cy:lastBall.y, r:size } );\n        this.shadow.attr( { cx:lastShadow.x, cy:lastShadow.y, rx:size, ry:size*0.6 } );\n    }\n    else\n    {\n        this.ball.attr( { r:0 } );\n        this.shadow.attr( { rx:0, ry:0 } );\n    }\n}"}}}}},"I18N":{"lookup":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.I18N.lookup = function()\n    {\n        return Translator.lookup.apply( Translator, arguments );\n    }"}},"Projector":{"Documentation":{"description":"Constructor.","tags":[{"title":"param","description":"the projection parameters","type":null,"name":"p"}]},"Source":"PULSE.Projector = function ( p )\n{\n\tif ( p )\n\t{\n\t\tthis.p = p;\n\t\n\t\tvar mRoll  = PULSE.axisRotation( 2, p.r );\n\t\tvar mPitch = PULSE.axisRotation( 0, p.p );\n\t\tvar mYaw   = PULSE.axisRotation( 2, p.y );\n\t\n\t\tvar m = PULSE.matrixMatrixMultiply( mRoll, mPitch );\n\t\tthis.rot = PULSE.matrixMatrixMultiply( m, mYaw );\n\t}\n}","prototype":{"project":{"Documentation":{"description":"Projects world coordinates into screen ones.","tags":[{"title":"param","description":"the xyz world coordinates","type":null,"name":"world"}]},"Source":"PULSE.Projector.prototype.project = function ( world )\n{\n\tvar newWorld = [ world.x - this.p.tx, world.y - this.p.ty, world.z - this.p.tz ]; \n\tvar cam = PULSE.matrixVectorMultiply( this.rot, newWorld );\n\t\t\t\n\tif ( cam[2] < 1e-9 )\n\t{\n\t\tcam[2] = -1e-9;\n\t}\n\t\t\n    var x = this.p.cx + ( ( cam[0] / cam[2] ) * this.p.fl );\n    var y = this.p.cy + ( ( cam[1] / cam[2] ) * this.p.fl * this.p.ar );\n\n    var dx = world.x - this.p.tx;\n    var dy = world.y - this.p.ty;\n    var dz = world.z - this.p.tz;\n    var dsquared = dx*dx + dy*dy + dz*dz;\n\t        \n    return { x:x, y:y, dsquared:dsquared };\n}"}}},"axisRotation":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.axisRotation"},{"title":"param","description":null,"type":null,"name":"axis"},{"title":"param","description":null,"type":null,"name":"angle"}]},"Source":"PULSE.axisRotation = function ( axis, angle )\n{\n    var i0 = PULSE.LUT[axis][0];\n    var i1 = PULSE.LUT[axis][1];\n    var i2 = PULSE.LUT[axis][2];\n\n    var rot = [ [0,0,0], [0,0,0], [0,0,0] ]; \n    rot[i0][i0] = 1.0;\n    rot[i1][i1] = Math.cos( angle );\n    rot[i2][i2] = Math.cos( angle );\n    rot[i1][i2] = Math.sin( angle );\n    rot[i2][i1] = -rot[i1][i2];\n\n    return rot;\n}"},"matrixMatrixMultiply":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"a"},{"title":"param","description":null,"type":null,"name":"b"}]},"Source":"PULSE.matrixMatrixMultiply = function ( a, b )\n{\n\treturn [\n\t    [ a[0][0]*b[0][0] + a[0][1]*b[1][0] + a[0][2]*b[2][0], \n\t      a[0][0]*b[0][1] + a[0][1]*b[1][1] + a[0][2]*b[2][1], \n\t      a[0][0]*b[0][2] + a[0][1]*b[1][2] + a[0][2]*b[2][2] ],\n\t    [ a[1][0]*b[0][0] + a[1][1]*b[1][0] + a[1][2]*b[2][0], \n\t      a[1][0]*b[0][1] + a[1][1]*b[1][1] + a[1][2]*b[2][1],\t\n\t      a[1][0]*b[0][2] + a[1][1]*b[1][2] + a[1][2]*b[2][2] ],\n        [ a[2][0]*b[0][0] + a[2][1]*b[1][0] + a[2][2]*b[2][0], \n          a[2][0]*b[0][1] + a[2][1]*b[1][1] + a[2][2]*b[2][1],\t\n          a[2][0]*b[0][2] + a[2][1]*b[1][2] + a[2][2]*b[2][2] ]\n\t];\n}"},"matrixVectorMultiply":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"a"},{"title":"param","description":null,"type":null,"name":"b"}]},"Source":"PULSE.matrixVectorMultiply = function ( a, b )\n{\n\treturn [ a[0][0]*b[0] + a[0][1]*b[1] + a[0][2]*b[2],\n\t         a[1][0]*b[0] + a[1][1]*b[1] + a[1][2]*b[2],\n\t         a[2][0]*b[0] + a[2][1]*b[1] + a[2][2]*b[2] ];\n}"},"CameraPosition":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.CameraPosition"},{"title":"param","description":null,"type":null,"name":"altitude"},{"title":"param","description":null,"type":null,"name":"azimuth"},{"title":"param","description":null,"type":null,"name":"distance"}]},"Source":"PULSE.CameraPosition = function ( altitude, azimuth, distance )\n{\n\tthis.altitude = altitude;\n\tthis.azimuth = azimuth;\n\tthis.distance = distance;\n\tthis.offset = { x:0, y:0 };\n}","prototype":{"getXYZ":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CameraPosition.prototype.getXYZ = function ()\n{\n\tvar ralt = Math.PI * this.altitude / 180;\n\tvar razi = Math.PI * this.azimuth / 180;\n\t\n\tvar base = this.distance * Math.cos( ralt );\n\n\treturn { \n\t\tx: ( -base * Math.sin( razi ) ) + this.offset.x,\n\t\ty: ( base * Math.cos( razi ) ) + this.offset.y,\n\t\tz: this.distance * Math.sin( ralt )\n\t};\n}"},"getRPY":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.CameraPosition.prototype.getRPY = function ()\n{\n\tvar ralt = Math.PI * this.altitude / 180;\n\tvar razi = Math.PI * this.azimuth / 180;\n\tvar result = {};\n\t\n\t// Roll is always zero\n\tresult.r = 0;\n\t\n\t// Pitch is negated camera altitude\n\tresult.p = ( Math.PI / -2 ) - ralt;\n\t\n\t// Yaw is circle-inverse of azimuth\n\tresult.y = razi + Math.PI;\n\t\n\treturn result;\n}"}}},"Color":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.Color"},{"title":"param","description":null,"type":null,"name":"spec"}]},"Source":"PULSE.Color = function ( spec )\n{\n\tif ( spec && spec.charAt( 0 ) === '#' )\n\t{\n\t\tif ( spec.length === 4 )\n\t\t{\n\t \t    this.r = 16 * parseInt( spec.charAt( 1 ), 16 );\n\t\t    this.g = 16 * parseInt( spec.charAt( 2 ), 16 );\n\t\t    this.b = 16 * parseInt( spec.charAt( 3 ), 16 );\n\t\t}\n\t\telse if ( spec.length === 7 )\n\t\t{\t\t\t\n\t\t\tthis.r = parseInt( spec.substr( 1, 2 ), 16 );\n\t\t\tthis.g = parseInt( spec.substr( 3, 2 ), 16 );\n\t\t\tthis.b = parseInt( spec.substr( 5, 2 ), 16 );\n\t\t}\n\t}\n}","prototype":{"darken":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.Color.prototype.darken = function ()\n{\n\tvar newColor = new PULSE.Color( '' );\n\tnewColor.r = Math.round( 0.7 * this.r );\n\tnewColor.g = Math.round( 0.7 * this.g );\n\tnewColor.b = Math.round( 0.7 * this.b );\n\treturn newColor;\n}"},"normalise":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.Color.prototype.normalise = function ( )\n{\n\tvar normalised = { r:Math.round( this.r ), g:Math.round( this.g ), b:Math.round( this.b ) };\n\tfor ( var property in normalised )\n\t{\n\t\tif ( normalised[property] > 255 )\n\t\t{\n\t\t\tnormalised[property] = 255;\n\t\t}\n\t\telse if ( normalised[property] < 0 )\n\t\t{\n\t\t\tnormalised[property] = 0;\n\t\t} \n\t}\n\treturn normalised;\n}"},"toCSS":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.Color.prototype.toCSS = function ()\n{\n\tvar n = this.normalise();\n\treturn 'rgb(' + n.r + ',' + n.g + ',' + n.b + ')';\n}"},"toHex":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.Color.prototype.toHex = function ()\n{\n\tvar n = this.normalise();\n\tvar rr = n.r.toString( 16 );\n\tvar gg = n.g.toString( 16 );\n\tvar bb = n.b.toString( 16 );\n\t\n\tif ( rr.length < 2 )\n\t{\n\t\trr = '0' + rr;\n\t}\n\tif ( gg.length < 2 )\n\t{\n\t\tgg = '0' + gg;\n\t}\n\tif ( bb.length < 2 )\n\t{\n\t\tbb = '0' + bb;\n\t}\n\t\n\treturn '#' + rr + gg + bb;\n}"},"toCSSA":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.Color.prototype.toCSSA = function ()\n{\n\tvar n = this.normalise();\n\tif ( this.a )\n\t{\n\t\treturn 'rgba(' + n.r + ',' + n.g + ',' + n.b + ',' + this.a + ')';\t\n\t}\n\t\n\treturn 'rgba(' + n.r + ',' + n.g + ',' + n.b + ',1)';\n}"}},"createColorHtmlSpec":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"spec"}]},"Source":"PULSE.Color.createColorHtmlSpec = function( spec )\n{\n\t//rgb(255,255,255)\n\t//rgba(255,255,255,0.2)\n\t\n\tif ( spec )\n\t{\n\t\tvar arr = spec.split( '(' );\n\t\tif ( arr && arr.length > 1 )\n\t\t{\n\t\t\tvar type = arr[0];\n\t\t\tarr[1] = arr[1].replace( ')', '' ); \n\t\t\tvar vals = arr[1].split( ',' );\n\t\t\tvar color = new PULSE.Color( null );\n\t\t\t\n\t\t\tif ( type === 'rgb' || type === 'rgba' )\n\t\t\t{\n\t\t\t\tcolor.r = parseInt( vals[0] );\n\t\t\t\tcolor.g = parseInt( vals[1] );\n\t\t\t\tcolor.b = parseInt( vals[2] );\n\t\t\t}\n\t\t\t\n\t\t\tif ( type === 'rgba' )\n\t\t\t{\n\t\t\t\tcolor.a = parseFloat( vals[3] );\n\t\t\t}\n\t\t\t\n\t\t\treturn color;\n\t\t}\n\t}\n}"}},"DataMonitor":{"Documentation":{"description":"This class provides a means of querying the given database at specified intervals to\ndetermine whether the data has changed, and if it has, invoke a callback with the data.","tags":[{"title":"param","description":"the monitor interval, in milliseconds","type":null,"name":"interval"},{"title":"param","description":"the database to query","type":null,"name":"db"},{"title":"param","description":"the callback function to invoke when data is updated","type":null,"name":"callback"}]},"Source":"PULSE.DataMonitor = function ( interval, db, callback )\n{\n\tPULSE.Tracer.info( 'DataMonitor created' );\n\n\tthis.interval = interval;\n\tthis.db = db;\n\tthis.callback = callback; \n\tthis.timerId = null;\n\tthis.downloading = true;\n}","prototype":{"start":{"Documentation":{"description":"Starts the monitor.","tags":[]},"Source":"PULSE.DataMonitor.prototype.start = function ()\n{\n\tPULSE.Tracer.info( 'DataMonitor started' );\n\t\n\t// Stop any existing timer\n\tif ( this.timerId !== null )\n\t{\n\t\tthis.stop();\n\t}\n\t\n\t// Start a new timer\n\tvar that = this;\n\t\n\t// Perform an immediate update\n\tthat.onTimer();\n\t\n\t// Then set up the timer\n\tthis.timerId = setInterval( function() { that.onTimer(); }, this.interval );\n}"},"onTimer":{"Documentation":{"description":"Called when the timer is fired.","tags":[]},"Source":"PULSE.DataMonitor.prototype.onTimer = function ()\n{\n\tif ( this.downloading )\n\t{\n\t\tPULSE.Tracer.info( 'DataMonitor timer fired' );\n\t\tvar that = this;\n\t\tthis.db.checkForUpdate( function() { that.db.loadData( that.callback ); } );\n\t}\n}"},"stop":{"Documentation":{"description":"Stops the monitor.","tags":[]},"Source":"PULSE.DataMonitor.prototype.stop = function ()\n{\n\tPULSE.Tracer.info( 'DataMonitor stopped' );\n\n\tclearInterval( this.timerId );\n\tthis.timerId = null;\n}"}}},"Font":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.Font"},{"title":"param","description":null,"type":null,"name":"family"},{"title":"param","description":null,"type":null,"name":"size"},{"title":"param","description":null,"type":null,"name":"weight"}]},"Source":"PULSE.Font = function ( family, size, weight )\n{\n\tthis['font-family'] = family;\n\tthis['font-size'] = size;\n\tthis['font-weight'] = weight;\n}"},"HtmlSelect":{"Documentation":{"description":"Create an HtmlSelect object by ID reference.","tags":[]},"Source":"PULSE.HtmlSelect = function ( id, callback, click )\n{\n\t// Obtain HTML Select element\n\tthis.element = document.getElementById( id );\n\tif ( this.element === null )\n\t{\n\t\tPULSE.Tracer.error( 'Could not find an HtmlSelect element with the ID ' + id );\n\t\treturn;\n\t}\n\t\n\t// Obtain the parent div\n\tthis.parent = this.element.parentNode;\n\t\n\tthis.selected = undefined;\n\t\n\t// Apply callback to onChange\n\tvar that = this;\n\t$(this.element).change( function() \n\t{\n\t\tthat.selected = that.element.options[ that.element.selectedIndex ];\n\t\t\n\t\tPULSE.Tracer.info( 'HtmlSelect callback of ' + that.element.id + '=' + that.selected.value );\n\t\tcallback( that.element.id, that.selected.value ); \n\t} );\n\t\n\tif ( click )\n\t{\n\t\t$(this.element).click( click );\n\t}\n\t\n\t// Dummy data setup\n\tthis.setData( [] );\n}","prototype":{"setClassname":{"Documentation":{"description":"Sets the CSS classname for the HtmlSelect's parent div.","tags":[]},"Source":"PULSE.HtmlSelect.prototype.setClassname = function ( classname )\n{\n\tthis.parent.setAttribute( 'class', classname );\n}"},"setSelectedLabel":{"Documentation":{"description":"Sets the selected label in this HTML Select, if we can.","tags":[]},"Source":"PULSE.HtmlSelect.prototype.setSelectedLabel = function ( label )\n{\n\tfor ( var i = 0, limit = this.element.options.length; i < limit; i++ )\n\t{\n\t\tvar item = this.element.options[i];\n\t\tif ( item.text === label )\n\t\t{\n\t\t\tthis.element.selectedIndex = i;\n\t\t\tthis.selected = item;\n\t\t\tbreak;\n\t\t}\n\t}\n}"},"setSelectedValue":{"Documentation":{"description":"Sets the selected value in this HTML Select, if we can.","tags":[]},"Source":"PULSE.HtmlSelect.prototype.setSelectedValue = function ( value )\n{\n\tfor ( var i = 0, limit = this.element.options.length; i < limit; i++ )\n\t{\n\t\tvar item = this.element.options[i];\n\t\tif ( item.value === value )\n\t\t{\n\t\t\tthis.element.selectedIndex = i;\n\t\t\tthis.selected = item;\n\t\t\tbreak;\n\t\t}\n\t}\n}"},"setData":{"Documentation":{"description":"Clears out the current select options and applies new ones. Ensures that any previously-\nselected option is reselected, if it exists. If it doesn't, then show either the first\nor last value (depending on the showLast flag)","tags":[]},"Source":"PULSE.HtmlSelect.prototype.setData = function ( data, showLast )\n{\n\t// Save the data. We only need this to check whether the item exists during a\n\t// setSelectedItem call\n\tthis.data = data;\n\n\t// Save selection\n\tvar selectedLabel = undefined;\n\tif ( this.selected )\n\t{\n\t\tselectedLabel = this.selected.text;\n\t\tif ( !selectedLabel )\n\t\t{\n\t\t\t// IE8/7 do not have a text property\n\t\t\tselectedLabel = this.selected.value;\n\t\t}\n\t}\n\t\n\t// Remove all children currently inside the HTML Select \n\twhile ( this.element.firstChild )\n\t{\n\t\tthis.element.removeChild( this.element.firstChild );\n\t}\n\t\n\t// Add Option children\n\tvar hit = false;\n\tfor ( var i = 0, limit = data.length; i < limit; i++ )\n\t{\n\t\tvar item = data[i];\n\t\t\n\t\t// Extract label and value\n\t\tvar label = item.label;\n\t\tvar value = item.value;\n\t\tif ( value === undefined )\n\t\t{\n\t\t\t// Default value to label\n\t\t\tvalue = label;\n\t\t\titem.value = value;\n\t\t}\n\t\t\n\t\t// Create an option element\n\t\tvar option = PULSE.NewUI.createElement( 'option' );\n\t\t// Set innerText for IE7/8\n        option.innerText = label;\n        // Set text for modern browsers\n        option.text = label;\n\t\toption.value = value;\n\n\t\t// Add option as child of select\n\t\tthis.element.appendChild( option );\n\n\t\t// Check if we have hit the selected label\n\t\tif ( label == selectedLabel ) // Coerce!\n\t\t{\n\t\t\tthis.element.selectedIndex = i;\n\t\t\tthis.selected = option;\n\t\t\thit = true;\n\t\t}\n\t}\n\t\n\t// Try to select the previously-selected label. If there wasn't one, or it no longer\n\t// exists, then just select the first or last item\n\tvar newSelection = false;\n\tif ( !hit ) \n\t{\n\t\tnewSelection = true;\n\t\tif ( data.length > 0 )\n\t\t{\n\t\t\tthis.element.selectedIndex = showLast ? data.length - 1 : 0;\n\t\t\tthis.selected = this.element.options[ this.element.selectedIndex ];\n\t\t}\n\t}\n\t\n\t// Return true if there was a new selection\n\tPULSE.Tracer.info( 'setData resulted in newSelection=' + newSelection );\n\t\n\treturn newSelection;\n}"}}},"Levenshtein":{"bestMatch":{"Documentation":{"description":"Returns the best-matching string in the candidates array when scored\nusing the Levenshtein distance against the input string.\n\nSee http://en.wikipedia.org/wiki/Levenshtein_distance for more info.","tags":[{"title":"param","description":"the array of candidate strings","type":null,"name":"candidates"},{"title":"param","description":"the input string","type":null,"name":"input"}]},"Source":"PULSE.Levenshtein.bestMatch = function ( candidates, input )\n{\n\tvar best;\n\tvar bestScore = PULSE.Levenshtein.MAX_LENGTH + 1;\n\tvar normInput = PULSE.Levenshtein.normalise( input );\n\n\tfor ( var i = 0, j = candidates.length; i < j; i++ )\n\t{\n\t\tvar candidate = candidates[i];\n\t\tvar normCandidate = PULSE.Levenshtein.normalise( candidate ); \n\t\tvar score = PULSE.Levenshtein.score( normInput, normCandidate );\n\t\t\n\t\tif ( score === 0 )\n\t\t{\n\t\t\t// These matched perfectly, so return early\n\t\t\treturn candidate;\n\t\t}\n\t\telse if ( score < bestScore )\n\t\t{\n\t\t\t// This beat the last best score, so save it\n\t\t\tbestScore = score;\n\t\t\tbest = candidate;\n\t\t}\n\t}\n\t\n\treturn best;\n}"},"normalise":{"Documentation":{"description":"Normalises a String to all lower case, no non-letters. Also trims the\nstring to MAX_LENGTH.","tags":[{"title":"param","description":"the input string","type":null,"name":"input"}]},"Source":"PULSE.Levenshtein.normalise = function ( input )\n{\n\tif ( input )\n\t{\n\t\t// Take out non-letters\n\t\tvar ret = input.replace( /[^a-zA-Z]/g, '' );\n\t\t\n\t\t// Lower case\n\t\tret = ret.toLowerCase();\n\t\t\n\t\t// Trim\n\t\tif ( ret.length > PULSE.Levenshtein.MAX_LENGTH )\n\t\t{\n\t\t\tret = ret.substr( 0, PULSE.Levenshtein.MAX_LENGTH );\n\t\t}\n\t\t\n\t\treturn ret;\n\t}\n}"},"score":{"Documentation":{"description":"Internal function to score one string against another using the\nLevenshtein distance.","tags":[{"title":"param","description":"one string","type":null,"name":"s1"},{"title":"param","description":"the other","type":null,"name":"s2"}]},"Source":"PULSE.Levenshtein.score = function ( s1, s2 )\n{\n\tvar i, j, dist = [];\n\tvar s1len = s1.length, s2len = s2.length;\n\t\n    for ( i = 0; i <= s1len; i++ )\n    {\n    \tdist[i] = [];\n    \tdist[i][0] = i;\n    }\n    for ( j = 0; j <= s2len; j++ )\n    {\n        dist[0][j] = j;\n    }\n\n    for ( j = 1; j <= s2len; j++ )\n    {\n        for ( i = 1; i <= s1len; i++ )\n        {\n            if ( s2.charAt( j - 1 ) === s1.charAt( i - 1 ) )\n            {\n                dist[i][j] = dist[i-1][j-1];\n            }\n            else\n            {\n                dist[i][j] = Math.min( Math.min( dist[i-1][j] + 1, dist[i][j-1] + 1),\n                                       dist[i-1][j-1] + 1 );\n            }\n        }\n    }\n    return dist[s1len][s2len];\n}"}},"ManagedDatabase":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.ManagedDatabase"},{"title":"param","description":null,"type":null,"name":"name"}]},"Source":"PULSE.ManagedDatabase = function ( name )\n{\n\tvar that = this;\n\tPULSE.ManagedDatabase.prototype.clearQueue = function ()\n\t{\n\t\tthat.outstandingOperations = 0;\n\t\tthat.sql = [];\n\t\tthat.params = [];\n\t\tthat.callback = [];\n\t};\n\t\n\tthis.clearQueue();\n\tthis.db = openDatabase( name, '', '', 1000000 );\n}","prototype":{"clearQueue":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.ManagedDatabase.prototype.clearQueue = function ()\n\t{\n\t\tthat.outstandingOperations = 0;\n\t\tthat.sql = [];\n\t\tthat.params = [];\n\t\tthat.callback = [];\n\t}"},"queueTransaction":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"sql"},{"title":"param","description":null,"type":null,"name":"params"},{"title":"param","description":null,"type":null,"name":"callback"}]},"Source":"PULSE.ManagedDatabase.prototype.queueTransaction = function ( sql, params, callback )\n{\n\tthis.outstandingOperations++;\n\tthis.sql.push( sql );\n\tthis.params.push( params );\n\tthis.callback.push( callback );\n}"},"runTransactions":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.ManagedDatabase.prototype.runTransactions = function ()\n{\n\tfor ( var i = 0, j = this.sql.length; i < j; i++ )\n\t{\n\t\tthis.transaction( this.sql[i], this.params[i], this.callback[i] );\n\t}\n}"},"resolve":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.ManagedDatabase.prototype.resolve = function ()\n{\n\tthis.outstandingOperations--;\n\tif ( this.outstandingOperations === 0 )\n\t{\n\t\tthis.clearQueue();\n\t}\n}"},"transaction":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"sql"},{"title":"param","description":null,"type":null,"name":"params"},{"title":"param","description":null,"type":null,"name":"callback"}]},"Source":"PULSE.ManagedDatabase.prototype.transaction = function ( sql, params, callback )\n{\t\n\tvar that = this;\n\tthis.db.transaction( function ( tx ) { \n\t\ttx.executeSql( sql, params,\n\t\t\tfunction ( tx, result )\n\t\t\t{\n\t\t\t\tcallback( result );\n\t\t\t\tthat.resolve();\n\t\t\t},\n\t\t\tfunction ( tx, error )\n\t\t\t{\n\t\t\t\tPULSE.Tracer.error( 'Error during database operation: ' + error );\n\t\t\t\tthat.resolve();\n\t\t\t}\n\t\t)\n\t} );\n}"},"ready":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.ManagedDatabase.prototype.ready = function ()\n{\n\treturn this.outstandingOperations === 0;\n}"}}},"RaphaelAxis":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.RaphaelAxis"},{"title":"param","description":null,"type":null,"name":"title"},{"title":"param","description":null,"type":null,"name":"min"},{"title":"param","description":null,"type":null,"name":"max"},{"title":"param","description":null,"type":null,"name":"start"},{"title":"param","description":null,"type":null,"name":"end"},{"title":"param","description":null,"type":null,"name":"fixed"},{"title":"param","description":null,"type":null,"name":"numLabels"},{"title":"param","description":null,"type":null,"name":"labels"},{"title":"param","description":null,"type":null,"name":"overdraw"},{"title":"param","description":null,"type":null,"name":"shift"},{"title":"param","description":null,"type":null,"name":"titleShift"},{"title":"param","description":null,"type":null,"name":"colour"}]},"Source":"PULSE.RaphaelAxis = function ( title, min, max, start, end, fixed, numLabels, labels, overdraw, shift, titleShift, colour )\n{\n\tthis.title = title;\n\tthis.min = min;\n\tthis.max = max;\n\tthis.configuredMax = max;\n\tthis.start = start;\n\tthis.end = end;\n\tthis.configuredEnd = end;\n\tthis.fixed = fixed;\n\tthis.numLabels = numLabels;\n\tthis.labels = labels;\n\tthis.overdraw \t= overdraw   === undefined ? 0 : overdraw;\n\tthis.shift \t\t= shift \t === undefined ? 0 : shift;\n\tthis.titleShift = titleShift === undefined ? 0 : titleShift;\n    this.colour = colour || '#fff';\n}","prototype":{"project":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"value"}]},"Source":"PULSE.RaphaelAxis.prototype.project = function ( value )\n{\n\t// Clamp the value to within the range\n\tvar clamped = value;\n\tif ( clamped < this.min )\n\t{\n\t\tclamped = this.min;\n\t}\n\tif ( clamped > this.max )\n\t{\n\t\tclamped = this.max;\n\t}\n\n\treturn this.shift + this.start +\n\t\t( ( ( clamped - this.min ) / ( this.max - this.min ) ) * ( this.end - this.start ) );\n}"},"drawTo":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"r"},{"title":"param","description":null,"type":null,"name":"isX"}]},"Source":"PULSE.RaphaelAxis.prototype.drawTo = function ( r, isX )\n{\n\tvar attrs = this.font;\n\tattrs.fill = this.colour;\n\n\tvar path = 'M';\n\tif ( isX )\n\t{\n\t\tpath += this.start + ' ' + this.fixed;\n\t\tpath += 'L' + ( this.end + this.overdraw ) + ' ' + this.fixed;\n\t}\n\telse\n\t{\n\t\tpath += this.fixed + ' ' + this.start;\n\t\tpath += 'L' + this.fixed + ' ' + ( this.end + this.overdraw );\n\t}\n\n\tr.path( path )\n\t .attr( { stroke: this.colour, fill:'none', 'stroke-width':2, 'stroke-linecap':'square' } );\n\n\t// Draw tick labels\n\tvar spacing = Math.round( ( this.max - this.min ) / this.numLabels );\n\n\t// Round spacing to the nearest 10, if we can\n\tvar newSpacing = 10 * ( Math.round( spacing / 10 ) );\n\tif ( newSpacing > 0 )\n\t{\n\t\tspacing = newSpacing;\n\t}\n\n\tfor ( var val = this.min; val <= this.max; val += spacing )\n\t{\n\t\tvar pos = this.project( val );\n\n\t\tvar label = val;\n\t\tif ( this.labels !== undefined && this.labels[ val ] !== undefined )\n\t\t{\n\t\t\tlabel = this.labels[ val ];\n\t\t}\n\n\t\tif ( isX )\n\t\t{\n\t\t\tr.text( pos, PULSE.Browser.y( this.fixed + 9 ), label )\n\t\t\t .attr( attrs );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr.text( this.fixed - 6, PULSE.Browser.y( pos ), label )\n\t\t\t .attr( attrs ).attr( { 'text-anchor':'end' } );\n\t\t}\n\t}\n\n\t// Draw axis title\n\tvar pos = this.project( ( this.min + this.max ) / 2 );\n\tif ( isX )\n\t{\n\t\tr.text( pos, PULSE.Browser.y( this.fixed + 25 + this.titleShift ), this.title )\n\t\t .attr( attrs );\n\t}\n\telse\n\t{\n\t\tvar x = this.fixed - 37 - this.titleShift;\n\t\tvar y = PULSE.Browser.y( pos );\n\n\t\tr.text( x, y, this.title ).rotate( -90 ).attr( attrs );\n\t}\n}"}}},"RaphaelFlexikey":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.RaphaelFlexikey"},{"title":"param","description":null,"type":null,"name":"config"}]},"Source":"PULSE.RaphaelFlexikey = function ( config )\n{\n\tthis.entries = [];\n\tthis.config = config;\n}","prototype":{"addEntry":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"label"},{"title":"param","description":null,"type":null,"name":"color"}]},"Source":"PULSE.RaphaelFlexikey.prototype.addEntry = function ( label, color )\n{\n\tthis.entries.push( { label:label, color:color } );\n}"},"render":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"r"}]},"Source":"PULSE.RaphaelFlexikey.prototype.render = function ( r )\n{\n\t// Create a set to group all Raphael components\n\tvar set = r.set();\n\n\t// Calculate the size of the flexikey\n\tvar height = this.config.margin.top;\n\tvar width = this.config.margin.left;\n\n\tvar maxWidth = 0;\n\tvar sheight = 0;\n\n\t// Create background and add it to the set\n\tvar bg = r.rect()\n    \t\t  .attr( { fill:this.config.background.color, stroke:'none',\n    \t\t\t  \t   opacity:this.config.background.opacity } );\n\tset.push( bg );\n\n\t// Create common label attributes\n\tvar attrs = this.config.font;\n\tattrs.fill = this.config.colour || '#fff';\n\tattrs.stroke = 'none';\n\tattrs['text-anchor'] = 'start';\n\tattrs.x = width + this.config.swatch.size + this.config.swatch.spacing;\n\n\t// Iterate over labels, adding text objects and calculating overall size\n\tvar y = this.config.margin.top + ( this.config.spacing * 1.5 );\n\tfor ( var i = 0, j = this.entries.length; i < j; i++ )\n\t{\n\t\tvar entry = this.entries[i];\n\n\t\tattrs.y = PULSE.Browser.y( y );\n\n\t\t// Add label\n\t\tvar label = r.text( 0, 0, entry.label ).attr( attrs );\n\t\tset.push( label );\n\n\t\tvar ss = label.getBBox();\n\n\t\theight += ss.height + this.config.spacing;\n\t\tsheight = ss.height;\n\n\t\tif ( ss.width > maxWidth )\n\t\t{\n\t\t\tmaxWidth = ss.width;\n\t\t}\n\n\t\t// Add swatch\n\t\tvar swatch = r.circle( this.config.margin.left + ( this.config.swatch.size / 2 ), y,\n\t\t\t\t               this.config.swatch.size / 2 )\n\t\t  \t\t \t  .attr( { fill:entry.color, stroke:'none' } );\n\t\tset.push( swatch );\n\n\t\ty += ss.height + this.config.spacing;\n\t}\n\n\t// Update size of background\n\theight += this.config.margin.bottom - this.config.spacing;\n\twidth += this.config.swatch.size + this.config.swatch.spacing + maxWidth + this.config.margin.right;\n\n\tbg.attr( { width:width, height:height } );\n\n\t// Calculate new origin\n\tvar origin = Utils.adjustForAnchor( this.config.position.x, this.config.position.y,\n\t\t\t   { width:width, height:height }, this.config.position.anchor );\n\n\t// Move all components to new origin\n\tset.translate( origin.x, origin.y );\n}"}}},"RaphaelNonLinearAxis":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.RaphaelNonLinearAxis"},{"title":"param","description":null,"type":null,"name":"title"},{"title":"param","description":null,"type":null,"name":"min"},{"title":"param","description":null,"type":null,"name":"max"},{"title":"param","description":null,"type":null,"name":"start"},{"title":"param","description":null,"type":null,"name":"end"},{"title":"param","description":null,"type":null,"name":"fixed"},{"title":"param","description":null,"type":null,"name":"numLabels"},{"title":"param","description":null,"type":null,"name":"spec"},{"title":"param","description":null,"type":null,"name":"labels"},{"title":"param","description":null,"type":null,"name":"colour"}]},"Source":"PULSE.RaphaelNonLinearAxis = function ( title, min, max, start, end, fixed, numLabels, spec, labels, colour )\n{\n\tthis.title = title;\n\tthis.min = min;\n\tthis.max = max;\n\tthis.start = start;\n\tthis.end = end;\n\tthis.fixed = fixed;\n\tthis.numLabels = numLabels;\n\tthis.spec = spec;\n\tthis.labels = labels;\n    this.colour = colour;\n\n\tthis.overdraw = 0;\n\tthis.shift = 0;\n\tthis.titleShift = 0;\n}","prototype":{"project":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"value"}]},"Source":"PULSE.RaphaelNonLinearAxis.prototype.project = function ( value )\n{\n\t// Clamp the value to within the range\n\tvar clamped = value;\n\tif ( clamped < this.min )\n\t{\n\t\tclamped = this.min;\n\t}\n\tif ( clamped > this.max )\n\t{\n\t\tclamped = this.max;\n\t}\n\n\t// Now apply the non-linear spec\n\tvar proportion;\n\tfor ( var i = 1, j = this.spec.length; i < j; i++ )\n\t{\n\t\tvar limit = this.spec[i][0];\n\t\tvar fraction = this.spec[i][1];\n\n\t\tif ( clamped <= limit )\n\t\t{\n\t\t\t// Add the fraction from the previous limit\n\t\t\tproportion = this.spec[i-1][1];\n\n\t\t\t// Add the proportional size in this limit\n\t\t\tvar dx = this.spec[i][0] - this.spec[i-1][0];\n\t\t\tvar xx = clamped - this.spec[i-1][0];\n\t\t\tvar dy = this.spec[i][1] - this.spec[i-1][1];\n\n\t\t\tproportion += ( xx / dx ) * dy;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn this.start + ( proportion * ( this.end - this.start ) );\n}"}}},"RaphaelTextField":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.RaphaelTextField"},{"title":"param","description":null,"type":null,"name":"config"}]},"Source":"PULSE.RaphaelTextField = function ( config )\n{\n\tthis.lines = [];\n\tthis.config = config;\n\t\n\tthis.additional = {};\n\tthis.additional.height = 0;\n\tthis.additional.width = 0;\n}","prototype":{"addLine":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"line"}]},"Source":"PULSE.RaphaelTextField.prototype.addLine = function ( line )\n{\n\tthis.lines.push( line );\n}"},"setLines":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"lines"}]},"Source":"PULSE.RaphaelTextField.prototype.setLines = function ( lines )\n{\n\tthis.lines = lines;\n}"},"fallsWithin":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"xy"}]},"Source":"PULSE.RaphaelTextField.prototype.fallsWithin = function ( xy )\n{\n\treturn xy.x >= this.bounds.x && xy.x <= ( this.bounds.x + this.bounds.width ) &&\n\t       xy.y >= this.bounds.y && xy.y <= ( this.bounds.y + this.bounds.height );\n}"},"render":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"r"},{"title":"param","description":null,"type":null,"name":"set"}]},"Source":"PULSE.RaphaelTextField.prototype.render = function ( r, set )\n{\n\t// Calculate the size of the container\n\tvar height = this.config.margin.top;\n\tvar width = this.config.margin.left;\n\tvar texts = [];\n\tvar bg = r.rect();\n\t\n\tset.push( bg );\n\t\n\tvar maxWidth = 0;\n\tvar sheight = 0;\n\tvar y = this.config.margin.top + ( this.config.spacing * 2 );\n\t\n\tfor ( var i = 0, j = this.lines.length; i < j; i++ )\n\t{\n\t\tvar lineWidth = 0;\n\t\tvar components = PULSE.RaphaelTextField.getTextComponents( this.lines[i] );\n\n\t\tfor ( var c = 0, climit = components.length; c < climit; c++ )\n\t\t{\n\t\t\tvar attrs = this.config.font;\n\t\t\tattrs['text-anchor'] = 'start';\n\t\t\tattrs.stroke = 'none';\n\t\t\tattrs.fill = components[c].color ? components[c].color : '#fff';\n\t\t\tattrs.x = this.config.margin.left + lineWidth;\n\t\t\tattrs.y = PULSE.Browser.y( y );\n\n\t\t\tvar text = r.text( 0, 0, components[c].text )\n\t\t\t            .attr( attrs ); \n\t\t\ttexts.push( text );\n\t\t\tset.push( text );\n\t\t\t\n\t\t\tvar bb = text.getBBox();\n\t\t\tsheight = bb.height;\n\t\t\t\n\t\t\tlineWidth += bb.width;\n\t\t\tif ( ( components[c].text.charAt(components[c].text.length-1) === ' ' ) \n\t\t\t\t\t&& PULSE.Browser && PULSE.Browser.addSpacer )\n\t\t\t{\n\t\t\t\tlineWidth += ( bb.width / components[c].text.length ) * 0.75;\n\t\t\t}\n\t\t}\n\n\t\tif ( lineWidth > maxWidth )\n\t\t{\n\t\t\tmaxWidth = lineWidth;\n\t\t\tbg.attr( { width:maxWidth } );\n\t\t}\t\t\t\n\t\t\n\t\theight += ( bb ? bb.height : 0 ) + this.config.spacing;\n\t\ty += sheight + this.config.spacing;\n\t}\n\t\n\theight += this.config.margin.bottom - this.config.spacing + this.additional.height;\n\twidth += maxWidth + this.config.margin.right + this.additional.width;\n\t\n\t// Position the background\n\tbg.attr( { x:0, y:0, width:width, height:height, \n\t\t       fill:this.config.background.color, opacity:this.config.background.opacity } );\n\t\n\t// Draw the optional border\n\tif ( this.config.border )\n\t{\n\t\tset.push( r.rect( 0, 0, width, height )\n\t\t\t\t   .attr( { 'stroke-width':this.config.border.width, stroke:this.config.border.color,\n\t\t\t\t\t        opacity:this.config.border.opacity } ) );\n\t\t\n\t\t// Draw the optional anchor indicator\n\t\tif ( this.config.border.indicator > 0 )\n\t\t{\n\t\t\tvar points = [];\n\t\t\tswitch ( this.config.position.anchor )\n\t\t\t{\n\t\t\t\tcase 'nw':\n\t\t\t\t\tpoints = [ { x:0, y:this.config.border.indicator }, \n\t\t\t\t\t           { x:0, y:0 }, \n\t\t\t\t\t           { x:this.config.border.indicator, y:0 } ];\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'ne':\n\t\t\t\t\tpoints = [ { x:0 + width - this.config.border.indicator, y:0 }, \n\t\t\t\t\t           { x:0 + width, y:0 }, \n\t\t\t\t\t           { x:0 + width, y:this.config.border.indicator } ];\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'se':\n\t\t\t\t\tpoints = [ { x:0 + width - this.config.border.indicator, y:height }, \n\t\t\t\t\t           { x:0 + width, y:height }, \n\t\t\t\t\t           { x:0 + width, y:height - this.config.border.indicator } ];\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'sw':\n\t\t\t\t\tpoints = [ { x:0, y:height - this.config.border.indicator }, \n\t\t\t\t\t           { x:0, y:height }, \n\t\t\t\t\t           { x:0 + this.config.border.indicator, y:height } ];\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tvar path = '';\n\t\t\tfor ( var p = 0, plimit = points.length; p < plimit; p++ )\n\t\t\t{\n\t\t\t\tvar point = points[p];\n\t\t\t\tif ( p === 0 )\n\t\t\t\t{\n\t\t\t\t\tpath += 'M';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpath += 'L';\n\t\t\t\t}\n\t\t\t\tpath += point.x;\n\t\t\t\tpath += ' ';\n\t\t\t\tpath += point.y;\n\t\t\t}\n\t\t\t\n\t\t\tset.push( r.path( path + 'z' ).attr( { fill:this.config.border.color,\n\t\t\t\t                                   opacity:this.config.border.opacity,\n\t\t\t\t                                   stroke:'none' } ) );\n\t\t}\n\t}\n\t\n\t// Move everthing to the correct position\n\tvar origin = Utils.adjustForAnchor( this.config.position.x, this.config.position.y,\n\t\t\t           { width:width, height:height }, this.config.position.anchor );\n\tset.translate( origin.x, origin.y );\n\t\n\t// Save bounds\n\tthis.bounds = { x:origin.x, y:origin.y, width:width, height:height };\n}"},"setHighlight":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"hl"},{"title":"param","description":null,"type":null,"name":"ctx"}]},"Source":"PULSE.RaphaelTextField.prototype.setHighlight = function ( hl, ctx )\n{\n\tctx.save();\n\tctx.lineWidth = hl ? this.config.hlborder.width : this.config.border.width;\n\tctx.strokeStyle = hl ? this.config.hlborder.color : this.config.border.color;\n\tctx.beginPath();\n\tctx.rect( this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height );\n\tctx.stroke();\n\tctx.restore();\n}"}},"getTextComponents":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"string"}]},"Source":"PULSE.RaphaelTextField.getTextComponents = function ( string )\n{\n\tvar components = [];\n\t\n\tvar scan = 0;\n\tvar more = true;\n\n\twhile ( more )\n\t{\n\t\tvar fragment = string.substring( scan );\n\t\tvar color = undefined;\n\t\t\n\t\tvar tagStart = string.indexOf( '<c:', scan );\n\t\tif ( tagStart !== -1 )\n\t\t{\t\n\t\t\tvar tagClose = string.indexOf( '>', tagStart );\n\t\t\tvar tagEnd = string.indexOf( '</c>', tagStart );\n\t\t\t\n\t\t\tvar color = string.substring( tagStart + 3, tagClose );\n\t\t\tfragment = string.substring( tagClose + 1, tagEnd );\n\n\t\t\t// Draw the prefragment\n\t\t\tvar preFragment = string.substring( scan, tagStart );\n\t\t\t\n\t\t\tif ( preFragment.length > 0 )\n\t\t\t{\n\t\t\t\tcomponents.push( { text:preFragment } );\n\t\t\t}\n\t\t\t\n\t\t\tscan = tagEnd + 4;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmore = false;\n\t\t}\n\t\t\n\t\tif ( fragment.length > 0 )\n\t\t{\n\t\t\tcomponents.push( { text:fragment, color:color } );\n\t\t}\n\t}\n\t\n\treturn components;\n}"}},"SelectorList":{"Documentation":{"description":"Constructor.","tags":[{"title":"param","description":"the id of the div, which is expected to exist already","type":null,"name":"id"},{"title":"param","description":"the callback function, taking id and value arguments","type":null,"name":"callback"}]},"Source":"PULSE.SelectorList = function ( id, callback )\n{\n\t// Set up scroll behavioural constants\n\tPULSE.SelectorList.SCROLLING = { threshold:12,\n\t\t\t\t\t\t\t\t\t met:    { activeClass:'activeDD',      lastClass:'' },\n\t\t\t\t\t\t\t\t\t notmet: { activeClass:'activeSmallDD', lastClass:'last' } };\n\t\n\tvar that = this;\n\t\n\t// Obtain the div from the DOM\n\tthis.div = document.getElementById( id );\n\tif ( this.div === null )\n\t{\n\t\tPULSE.Tracer.error( 'Could not find a SelectorList element with the ID ' + id );\n\t\treturn;\n\t}\n\t\n\t// Obtain reference to parent LI, if it has been tagged\n\tthis.li = document.getElementById( id + 'Li' );\n\t\n\t// Nothing yet selected\n\tthis.selected = null;\n\tthis.expanded = false;\n\t\n\t// Save selection callback\n\tthis.callback = callback;\n\t\n\t// Create toplink, ul-containing div and ul itself\n\tthis.topLink = PULSE.NewUI.createElement( 'a', { 'class':'button' } );\n\tthis.topLink.addEventListener( 'click', function() { that.onTopLink( this.item ); }, false );\n\n\t// Build container divs\n\tvar outerDiv = PULSE.NewUI.createElement( 'div', { 'class':'dropCntr' } );\n\tthis.innerDiv = PULSE.NewUI.createElement( 'div', { 'class':'dropCntrInner' } );\n\tvar scrollIndicator = PULSE.NewUI.createElement( 'div', { 'class':'scrollIndicator' } );\n\t\n\touterDiv.appendChild( this.innerDiv );\n\touterDiv.appendChild( scrollIndicator );\n\t\n\t// Build a new list to populate the drop-down\n\tthis.ul = PULSE.NewUI.createElement( 'ul' );\n\n\t// Add ul to innerDiv\n\tthis.innerDiv.appendChild( this.ul );\n\t\n\t// Add the drop-down link\n\tthis.div.appendChild( this.topLink );\n\tthis.div.appendChild( outerDiv );\n\t\n\t// Setup touch scrolling if we need to\n\tif ( isiPad() )\n\t{\n\t\tif ( !TouchScroll )\n\t\t{\n\t\t\tPULSE.Tracer.error( 'No TouchScroll support found' );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.touchScroll = new TouchScroll( this.innerDiv, { elastic:false } );\n\t    } \n\t}\t\t\n\t\n\t// Dummy data setup\n\tthis.setData( [] );\n}","prototype":{"setData":{"Documentation":{"description":"Sets the data displayed by this SelectorList.","tags":[{"title":"param","description":"an array of selectable objects, each having at least a label property, plus\nan optional value property.","type":null,"name":"data"}]},"Source":"PULSE.SelectorList.prototype.setData = function ( data )\n{\n\tthis.scrollBehaviour = \n\t\t( data !== undefined && data.length >= PULSE.SelectorList.SCROLLING.threshold ) ?\n\t\tPULSE.SelectorList.SCROLLING.met : PULSE.SelectorList.SCROLLING.notmet;\n\t\n\t// Save the data. We only need this to check whether the item exists during a\n\t// setSelectedItem call\n\tthis.data = data;\n\t\n\tvar that = this;\n\tvar hit = false;\n\t\n\t// Remove all children currently inside the ul \n\twhile ( this.ul.firstChild )\n\t{\n\t\tthis.ul.removeChild( this.ul.firstChild );\n\t}\n\n\t// Setup callback\n\tvar f = function() { that.onSelect( this.item ); };\n\t\n\t// Add li children, each containing an anchor, to the ul\n\tfor ( var i = 0, j = data.length; i < j; i++ )\n\t{\n\t\tvar item = data[i];\n\t\t\n\t\t// Extract label and value\n\t\tvar label = item.label;\n\t\tvar value = item.value;\n\t\tif ( value === undefined )\n\t\t{\n\t\t\t// Default value to label\n\t\t\tvalue = label;\n\t\t\titem.value = value;\n\t\t}\n\t\t\n\t\t// Check if we have hit the selected item\n\t\tif ( this.selected !== null && label == this.selected.label )\n\t\t{\n\t\t\thit = true;\n\t\t}\n\t\t\n\t\t// Create anchor\n\t\tvar a = PULSE.NewUI.createElement( 'a' );\n\t\ta.item = item;\n\t\ta.addEventListener( 'click', f, false );\n\t\ta.innerHTML = label;\n\t\t\n\t\tvar li = document.createElement( 'li' );\n\t\tif ( i === j - 1 && !Utils.isNullish( this.scrollBehaviour.lastClass ) )\n\t\t{\n\t\t\tli.setAttribute( 'class', this.scrollBehaviour.lastClass );\n\t\t}\n\t\t\n\t\tli.appendChild( a );\n\t\tthis.ul.appendChild( li );\n\t}\n\t\n\t// Try to select the previously-selected label. If there wasn't one, or it no longer\n\t// exists, then just select the first item\n\tvar newSelection = false;\n\tif ( this.selected === null || !hit ) \n\t{\n\t\tnewSelection = true;\n\t\tif ( data.length > 0 )\n\t\t{\n\t\t\tthis.selected = data[0];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.selected = null;\n\t\t}\n\t}\n\t\n\t// Update the top link\n\tif ( this.selected !== null )\n\t{\n\t\tthis.topLink.innerHTML = this.selected.label;\n\t}\n\t\t\n\t// Reset touch scroller\n\tif ( this.touchScroll )\n\t{\n\t\twhile ( this.innerDiv.firstChild )\n\t\t{\n\t\t\tthis.innerDiv.removeChild( this.innerDiv.firstChild );\n\t\t}\n\t\tthis.innerDiv.appendChild( this.ul );\n\t\tthis.innerDiv.setAttribute( 'class', 'dropCntrInner' );\n\t\tthis.touchScroll = new TouchScroll( this.innerDiv, { elastic:false } );\n\t}\n\t\n\t// Return true if there was a new selection\n\treturn newSelection;\n}","f":{"Documentation":{"description":"Sets the data displayed by this SelectorList.","tags":[{"title":"param","description":"an array of selectable objects, each having at least a label property, plus\nan optional value property.","type":null,"name":"data"}]},"Source":"var f = function() { that.onSelect( this.item ); }"}},"onSelect":{"Documentation":{"description":"Called when a value in a dropdown is selected.","tags":[]},"Source":"PULSE.SelectorList.prototype.onSelect = function ( item )\n{\n\tthis.topLink.innerHTML = item.label;\n\tthis.selected = item;\n\t\n\tthis.callback( this.div.id, item.value );\n}"},"onTopLink":{"Documentation":{"description":"Called when a top link is selected.","tags":[]},"Source":"PULSE.SelectorList.prototype.onTopLink = function ( item )\n{\n\tthis.callback( this.div.id );\n}"},"setExpanded":{"Documentation":{"description":"Sets the expanded state of this selector.","tags":[]},"Source":"PULSE.SelectorList.prototype.setExpanded = function ( expanded )\n{\n\tthis.expanded = expanded;\n\tthis.div.setAttribute( 'class', 'dropdowncntr' + \n\t\t\t( expanded ? ' ' + this.scrollBehaviour.activeClass : '' ) );\n\tif ( expanded && this.touchScroll )\n\t{\n\t\tthis.touchScroll.setupScroller( true );\n\t}\n}"},"setSelectedItem":{"Documentation":{"description":"Sets the selected item in this selector. This is a no-op if the item does not exist.","tags":[]},"Source":"PULSE.SelectorList.prototype.setSelectedItem = function ( value )\n{\n\tfor ( var i = 0, j = this.data.length; i < j; i++ )\n\t{\n\t\tif ( this.data[i].value === value )\n\t\t{\n\t\t\tthis.topLink.innerHTML = this.data[i].label;\n\t\t\tthis.selected = this.data[i];\n\t\t\tbreak;\n\t\t}\n\t}\n}"}}},"TextDataDiv":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.TextDataDiv"},{"title":"param","description":null,"type":null,"name":"dataDivConfig"},{"title":"param","description":null,"type":null,"name":"config"}]},"Source":"PULSE.TextDataDiv = function ( dataDivConfig, config )\n{\n\tthis.lines = [];\n\tthis.dataDivConfig = dataDivConfig;\n\tthis.config = config;\n\tthis.containerDiv = document.createElement( 'div' );\n\t\n\tthis.applyConfig();\n}","prototype":{"applyConfig":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.TextDataDiv.prototype.applyConfig = function()\n{\n\tthis.containerDiv.setAttribute( 'id', this.config.id );\n\tthis.containerDiv.setAttribute( 'class', this.config.classes );\n}"},"setContent":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"innerHTML"}]},"Source":"PULSE.TextDataDiv.prototype.setContent = function( innerHTML )\n{\n\tthis.containerDiv.innerHTML = Utils.toHTML( innerHTML );\t\n}"},"setPosition":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"dataDiv"}]},"Source":"PULSE.TextDataDiv.prototype.setPosition = function( dataDiv )\n{\n//\twindow.alert( 'in setPosition' );\n\t\n//\twindow.alert( 'dataDiv = ' + dataDiv );\n\tvar ddWidth = dataDiv.offsetWidth;\n\tvar ddHeight = dataDiv.offsetHeight;\n\t\n\t// grid elements dimensions\n//\twindow.alert( 'dataDivConfig=' + this.dataDivConfig );\n\t\n\tvar colSize = Math.round( ddWidth / this.dataDivConfig.cols );\n\tvar rowSize = Math.round( ddHeight / this.dataDivConfig.rows );\n\t\n//\twindow.alert( 'after col and row size' );\n\t\n\t//position of the div in the grid\n\tvar colPos = this.config.position.col;\n\tvar rowPos = this.config.position.row;\n\t\n\t// apply anchor\n\tvar anchor = this.config.position.anchor;\n\t\n\t// inital position of the div relative to the container\n\tvar position = { \t\t\t\n\t\t\t\tx : colSize * colPos,\n\t\t\t\ty : rowSize * rowPos\t\t\t\n\t\t\t};\n\t\n\tvar height = this.containerDiv.offsetHeight;\n\tvar width = this.containerDiv.offsetWidth;\t\n\t\n//\twindow.alert( 'before anchor' );\n\n\tswitch ( anchor )\n\t{\n\t\tcase 'n':\n\t\t\tposition.x += Math.round( colSize/2 - width/2 );\n\t\t\tbreak;\n\t\t\t\n\t\tcase 'e':\n\t\t\tposition.x += colSize - width;\n\t\t\tposition.y += Math.round( rowSize/2 - height/2 );\n\t\t\tbreak;\n\t\t\t\n\t\tcase 's':\n\t\t\tposition.x += Math.round( colSize/2 - width/2 );\n\t\t\tposition.y += rowSize - height;\n\t\t\tbreak;\n\t\t\t\n\t\tcase 'w':\n\t\t\tposition.y += Math.round( rowSize/2 - height/2 );\t\t\t\n\t\t\tbreak;\n\t\t\t\n\t\tcase 'nw':\n//\t\t\tposition.x += marginLeft;\n//\t\t\tposition.y += marginTop;\n\t\t\tbreak;\n\t\t\t\n\t\tcase 'ne':\n\t\t\tposition.x += colSize - width;\n//\t\t\tposition.y += marginTop;\n\t\t\tbreak;\n\t\t\t\n\t\tcase 'se':\n\t\t\tposition.x += colSize - width;\n\t\t\tposition.y += rowSize - height;\n\t\t\tbreak;\n\t\t\t\n\t\tcase 'sw':\n//\t\t\tposition.x += marginLeft;\n\t\t\tposition.y += rowSize - height;\n\t\t\tbreak;\n\t\t\t\n\t\tcase 'c':\n\t\t\tposition.x += Math.round( colSize/2 - width/2 );\n\t\t\tposition.y += Math.round( rowSize/2 - height/2 );\n\t}\n\t\n\tvar ref = this.containerDiv.style; \n\tif ( !ref )\n\t{ \n\t\tref = this.containerDiv;\n\t}\t\n\tref.left = position.x + 'px';\n\tref.top = position.y + 'px';\t\n\t\n//\twindow.alert( 'end of setPosition' );\n}"}},"setChildrenFromTextDataDivs":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"textDataDivs"},{"title":"param","description":null,"type":null,"name":"parent"}]},"Source":"PULSE.TextDataDiv.setChildrenFromTextDataDivs = function( textDataDivs, parent )\n{\n\t// Remove all children\n\tUtils.clearContent( parent );\n\t\n\tfor ( var i = 0, limit = textDataDivs.length; i < limit; i++ )\n\t{\n\t\tparent.appendChild( textDataDivs[ i ].containerDiv );\n\t}\n}"},"clearTextDataDivs":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"textDataDivs"}]},"Source":"PULSE.TextDataDiv.clearTextDataDivs = function( textDataDivs )\n{\n\tfor ( var i = 0, limit = textDataDivs.length; i < limit; i++ )\n\t{\n\t\ttextDataDivs[ i ].setContent( '' );\n\t}\n}"},"updateTextDataDivsPosition":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"textDataDivs"},{"title":"param","description":null,"type":null,"name":"dataDiv"}]},"Source":"PULSE.TextDataDiv.updateTextDataDivsPosition = function( textDataDivs, dataDiv )\n{\n\t// Update div containers position\n\tfor ( var i = 0, limit = textDataDivs.length; i < limit; i++ )\n\t{\n\t\ttextDataDivs[ i ].setPosition( dataDiv );\n\t}\n}"},"setDefaultValsDataDivs":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"textDataDivs"}]},"Source":"PULSE.TextDataDiv.setDefaultValsDataDivs = function( textDataDivs )\n{\n\tvar value = null;\n\tfor ( var i = 0, limit = textDataDivs.length; i < limit; i++ )\n\t{\n\t\tvalue = textDataDivs[ i ].config.value;\n\t\tif ( value )\n\t\t{\n\t\t\ttextDataDivs[ i ].setContent( value );\n\t\t}\t\t\n\t}\t\n}"}},"TextField":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.TextField"},{"title":"param","description":null,"type":null,"name":"config"}]},"Source":"PULSE.TextField = function ( config )\n{\n\tthis.lines = [];\n\tthis.config = config;\n\t\n\tthis.additional = {};\n\tthis.additional.height = 0;\n\tthis.additional.width = 0;\n}","prototype":{"addLine":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"line"}]},"Source":"PULSE.TextField.prototype.addLine = function ( line )\n{\n\tthis.lines.push( line );\n}"},"setLines":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"lines"}]},"Source":"PULSE.TextField.prototype.setLines = function ( lines )\n{\n\tthis.lines = lines;\n}"},"fallsWithin":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"xy"}]},"Source":"PULSE.TextField.prototype.fallsWithin = function ( xy )\n{\n\treturn xy.x >= this.bounds.x && xy.x <= ( this.bounds.x + this.bounds.width ) &&\n\t       xy.y >= this.bounds.y && xy.y <= ( this.bounds.y + this.bounds.height );\n}"},"render":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"ctx"}]},"Source":"PULSE.TextField.prototype.render = function ( ctx )\n{\n\tctx.save();\n\tctx.font = this.config.font;\n\t\n\t// Calculate the size of the flexikey\n\tvar height = this.config.margin.top;\n\tvar width = this.config.margin.left;\n\t\n\tvar maxWidth = 0;\n\tvar sheight = 0;\n\tfor ( var i = 0, j = this.lines.length; i < j; i++ )\n\t{\n\t\tvar line = this.lines[i];\n\t\tvar ss = Utils.stringSize( ctx, line );\n\t\t\n\t\theight += ss.height + this.config.spacing;\n\t\tsheight = ss.height;\n\t\t\n\t\tif ( ss.width > maxWidth )\n\t\t{\n\t\t\tmaxWidth = ss.width;\n\t\t}\n\t}\n\t\n\theight += this.config.margin.bottom - this.config.spacing + this.additional.height;\n\twidth += maxWidth + this.config.margin.right + this.additional.width;\n\n\tvar origin = Utils.adjustForAnchor( this.config.position.x, this.config.position.y,\n\t\t\t  { width:width, height:height }, this.config.position.anchor );\n\t\n\t// Draw the background\n\t//ctx.save();\n\tctx.beginPath();\n\tctx.fillStyle = this.config.background;\n\tctx.rect( origin.x, origin.y, width, height );\n\tctx.fill();\n\t//ctx.restore();\n\t\n\t// Draw each key entry\n\tvar x = origin.x + this.config.margin.left;\n\tvar y = origin.y + this.config.margin.top + ( sheight / 2 );\n\t\n\tctx.fillStyle = 'white';\n\tfor ( var i = 0, j = this.lines.length; i < j; i++ )\n\t{\n\t\tthis.drawString( ctx, this.lines[i], x, y );\n\t\ty += sheight + this.config.spacing;\n\t}\n\t\n\t// Draw the optional border\n\tif ( this.config.border )\n\t{\n\t\tctx.lineWidth = this.config.border.width;\n\t\tctx.strokeStyle = this.config.border.color;\n\t\tctx.beginPath();\n\t\tctx.rect( origin.x, origin.y, width, height );\n\t\tctx.stroke();\n\n\t\t// Draw the optional anchor indicator\n\t\tif ( this.config.border.indicator > 0 )\n\t\t{\n\t\t\tvar points = [];\n\t\t\tswitch ( this.config.position.anchor )\n\t\t\t{\n\t\t\t\tcase 'nw':\n\t\t\t\t\tpoints = [ { x:origin.x, y:origin.y + this.config.border.indicator }, \n\t\t\t\t\t           { x:origin.x, y:origin.y }, \n\t\t\t\t\t           { x:origin.x + this.config.border.indicator , y:origin.y } ];\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'ne':\n\t\t\t\t\tpoints = [ { x:origin.x + width - this.config.border.indicator, y:origin.y }, \n\t\t\t\t\t           { x:origin.x + width, y:origin.y }, \n\t\t\t\t\t           { x:origin.x + width, y:origin.y + this.config.border.indicator } ];\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'se':\n\t\t\t\t\tpoints = [ { x:origin.x + width - this.config.border.indicator, y:origin.y + height }, \n\t\t\t\t\t           { x:origin.x + width, y:origin.y + height }, \n\t\t\t\t\t           { x:origin.x + width, y:origin.y + height - this.config.border.indicator } ];\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'sw':\n\t\t\t\t\tpoints = [ { x:origin.x, y:origin.y + height - this.config.border.indicator }, \n\t\t\t\t\t           { x:origin.x, y:origin.y + height }, \n\t\t\t\t\t           { x:origin.x + this.config.border.indicator, y:origin.y + height } ];\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tctx.fillStyle = this.config.border.color;\n\t\t\tUtils.polygon( ctx, points );\n\t\t\tctx.fill();\n\t\t}\n\t}\n\t\n\tctx.restore();\n\t\n\t// Save bounds\n\tthis.bounds = { x:origin.x, y:origin.y, width:width, height:height };\n}"},"setHighlight":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"hl"},{"title":"param","description":null,"type":null,"name":"ctx"}]},"Source":"PULSE.TextField.prototype.setHighlight = function ( hl, ctx )\n{\n\tctx.save();\n\tctx.lineWidth = hl ? this.config.hlborder.width : this.config.border.width;\n\tctx.strokeStyle = hl ? this.config.hlborder.color : this.config.border.color;\n\tctx.beginPath();\n\tctx.rect( this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height );\n\tctx.stroke();\n\tctx.restore();\n}"},"drawString":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"ctx"},{"title":"param","description":null,"type":null,"name":"string"},{"title":"param","description":null,"type":null,"name":"x"},{"title":"param","description":null,"type":null,"name":"y"}]},"Source":"PULSE.TextField.prototype.drawString = function ( ctx, string, x, y )\n{\n\tvar standardColor = ctx.fillStyle;\n\t\n\tvar xx = x;\n\tvar scan = 0;\n\tvar more = true;\n\n\twhile ( more )\n\t{\n\t\tvar fragment = string.substring( scan );\n\t\t\n\t\tvar tagStart = string.indexOf( '<c:', scan );\n\t\tif ( tagStart !== -1 )\n\t\t{\t\n\t\t\tvar tagClose = string.indexOf( '>', tagStart );\n\t\t\tvar tagEnd = string.indexOf( '</c>', tagStart );\n\t\t\t\n\t\t\tvar color = string.substring( tagStart + 3, tagClose );\n\t\t\tfragment = string.substring( tagClose + 1, tagEnd );\n\n\t\t\t// Draw the prefragment\n\t\t\tvar preFragment = string.substring( scan, tagStart );\n\t\t\tctx.fillStyle = standardColor;\n\t\t\tctx.beginPath();\n\t\t\tUtils.anchoredFillText( ctx, preFragment, xx, y, 'w' );\t\t\n\t\t\txx += Utils.stringSize( ctx, preFragment ).width;\n\t\t\t\n\t\t\tctx.fillStyle = color;\n\t\t\tscan = tagEnd + 4;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tctx.fillStyle = standardColor;\n\t\t\tmore = false;\n\t\t}\n\t\t\n\t\tctx.beginPath();\n\t\tUtils.anchoredFillText( ctx, fragment, xx, y, 'w' );\t\t\n\t\txx += Utils.stringSize( ctx, fragment ).width;\n\t}\n\t\n\tctx.fillStyle = standardColor;\n}"}}},"Tower":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.Tower"},{"title":"param","description":null,"type":null,"name":"x"},{"title":"param","description":null,"type":null,"name":"y"},{"title":"param","description":null,"type":null,"name":"width"},{"title":"param","description":null,"type":null,"name":"depth"},{"title":"param","description":null,"type":null,"name":"height"}]},"Source":"PULSE.Tower = function ( x, y, width, depth, height )\n{\n\tthis.x = x;\n\tthis.y = y;\n\tthis.width = width;\n\tthis.depth = depth;\n\tthis.height = height;\n}","prototype":{"face":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"ctx"},{"title":"param","description":null,"type":null,"name":"projection"},{"title":"param","description":null,"type":null,"name":"face"}]},"Source":"PULSE.Tower.prototype.face = function ( ctx, projection, face )\n{\n\tvar points = [];\n\tswitch ( face )\n\t{\n\t\tcase 't':\n\t\t\tpoints.push( { x:this.x, y:this.y, z:this.height } );\n\t\t\tpoints.push( { x:this.x, y:this.y + this.width, z:this.height } );\n\t\t\tpoints.push( { x:this.x + this.depth, y:this.y + this.width, z:this.height } );\n\t\t\tpoints.push( { x:this.x + this.depth, y:this.y, z:this.height } );\n\t\t\tbreak;\n\t\tcase 'b':\n\t\t\tpoints.push( { x:this.x, y:this.y, z:0 } );\n\t\t\tpoints.push( { x:this.x, y:this.y + this.width, z:0 } );\n\t\t\tpoints.push( { x:this.x + this.depth, y:this.y + this.width, z:0 } );\n\t\t\tpoints.push( { x:this.x + this.depth, y:this.y, z:0 } );\n\t\t\tbreak;\n\t\tcase 'n':\n\t\t\tpoints.push( { x:this.x + this.depth, y:this.y, z:0 } );\n\t\t\tpoints.push( { x:this.x + this.depth, y:this.y, z:this.height } );\n\t\t\tpoints.push( { x:this.x + this.depth, y:this.y + this.width, z:this.height } );\n\t\t\tpoints.push( { x:this.x + this.depth, y:this.y + this.width, z:0 } );\n\t\t\tbreak;\n\t\tcase 'e':\n\t\t\tpoints.push( { x:this.x, y:this.y + this.width, z:0 } );\n\t\t\tpoints.push( { x:this.x, y:this.y + this.width, z:this.height } );\n\t\t\tpoints.push( { x:this.x + this.depth, y:this.y + this.width, z:this.height } );\n\t\t\tpoints.push( { x:this.x + this.depth, y:this.y + this.width, z:0 } );\n\t\t\tbreak;\n\t\tcase 's':\n\t\t\tpoints.push( { x:this.x, y:this.y, z:0 } );\n\t\t\tpoints.push( { x:this.x, y:this.y, z:this.height } );\n\t\t\tpoints.push( { x:this.x, y:this.y + this.width, z:this.height } );\n\t\t\tpoints.push( { x:this.x, y:this.y + this.width, z:0 } );\n\t\t\tbreak;\n\t\tcase 'w':\n\t\t\tpoints.push( { x:this.x, y:this.y, z:0 } );\n\t\t\tpoints.push( { x:this.x, y:this.y, z:this.height } );\n\t\t\tpoints.push( { x:this.x + this.depth, y:this.y, z:this.height } );\n\t\t\tpoints.push( { x:this.x + this.depth, y:this.y, z:0 } );\n\t\t\tbreak;\n\t}\t\t\n\t\n\tctx.beginPath();\n\tfor ( var i = 0, j = points.length; i < j; i++ )\n\t{\n\t\tvar pos = projection.project( points[i] );\n\t\tif ( i === 0 )\n\t\t{\n\t\t\tctx.moveTo( pos.x, pos.y );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tctx.lineTo( pos.x, pos.y );\n\t\t}\n\t}\n\tctx.closePath();\n}"}}},"Tracer":{"init":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.Tracer.init"},{"title":"param","description":null,"type":null,"name":"acceptedLevels"}]},"Source":"PULSE.Tracer.init = function ( acceptedLevels )\n{\n\t// Save the accepted levels\n\tPULSE.Tracer.acceptedLevel = {};\n\tfor ( var i = 0, j = acceptedLevels.length; i < j; i++ )\n\t{\n\t\tPULSE.Tracer.acceptedLevel[ acceptedLevels[i] ] = true;\n\t}\n\t\n\t// Obtain the tracing element if it exists\n\t//var tracingElement = document.getElementById( PULSE.Tracer.TRACING_ELEMENT_ID );\n\t//if ( tracingElement === null )\n\t//{\n\t\t// Create a new one\n\t\t//tracingElement = document.createElement( 'div' );\n\t\t//tracingElement.id = PULSE.Tracer.TRACING_ELEMENT_ID;\n\t\t\n\t\t// Attach it to the head\n\t\t//document.getElementsByTagName('head')[0].appendChild( tracingElement );\n\t//}\n\t\n\t// Save the reference\n\t//PULSE.Tracer.tracingElement = tracingElement;\n}"},"debug":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"message"}]},"Source":"PULSE.Tracer.debug = function ( message )\n{\n\tPULSE.Tracer.addTrace( 'debug', message );\n}"},"info":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"message"}]},"Source":"PULSE.Tracer.info = function ( message )\n{\n\tPULSE.Tracer.addTrace( 'info', message );\n}"},"warn":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"message"}]},"Source":"PULSE.Tracer.warn = function ( message )\n{\n\tPULSE.Tracer.addTrace( 'warn', message );\n}"},"error":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"message"}]},"Source":"PULSE.Tracer.error = function ( message )\n{\n\tPULSE.Tracer.addTrace( 'error', message );\n}"},"addTrace":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"level"},{"title":"param","description":null,"type":null,"name":"message"}]},"Source":"PULSE.Tracer.addTrace = function ( level, message )\n{\n\tvar format = function ( value, size, pad )\n\t{\n\t\tif ( size === undefined )\n\t\t{\n\t\t\tsize = 2;\n\t\t}\n\t\tif ( pad === undefined )\n\t\t{\n\t\t\tpad = '0';\n\t\t}\n\t\tvar s = String( value );\n\t\twhile ( s.length < Math.abs( size ) )\n\t\t{\n\t\t\tif ( size > 0 )\n\t\t\t{\n\t\t\t\ts = pad + s;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ts = s + pad;\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t};\n\t\n\tif ( PULSE.Tracer.acceptedLevel !== undefined && PULSE.Tracer.acceptedLevel[ level ] )\n\t{\n\t\tvar date = new Date();\n\t\tvar ts = date.getFullYear() + '-' + format( date.getMonth() + 1 ) + '-' + \n\t\t\t\t format( date.getDate() ) + ' ' + format( date.getHours() ) + ':' + \n\t\t\t\t format( date.getMinutes() ) + ':' + format( date.getSeconds() ) + '.' +\n\t\t\t\t format( date.getMilliseconds(), 3 );\n\t\t\n\t\tvar msg = ts + ' [' + format( level, -5, ' ' ) + '] ' + message;\n\t\t\n\t\t// No longer trace to the head div\n\t\t//PULSE.Tracer.tracingElement.appendChild( document.createTextNode( msg ) );\n\t\t\n\t\t// Also log to console\n\t\tif ( window.console )\n\t\t{\n\t\t\tif ( 'info' === level )\n\t\t\t{\n\t\t\t\tconsole.info( msg );\n\t\t\t}\n\t\t\telse if ( 'warn' === level )\n\t\t\t{\n\t\t\t\tconsole.warn( msg );\n\t\t\t}\n\t\t\telse if ( 'error' === level )\n\t\t\t{\n\t\t\t\tconsole.error( msg );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tconsole.log( msg );\n\t\t\t}\n\t\t}\n\t}\n}","format":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"value"},{"title":"param","description":null,"type":null,"name":"size"},{"title":"param","description":null,"type":null,"name":"pad"}]},"Source":"var format = function ( value, size, pad )\n\t{\n\t\tif ( size === undefined )\n\t\t{\n\t\t\tsize = 2;\n\t\t}\n\t\tif ( pad === undefined )\n\t\t{\n\t\t\tpad = '0';\n\t\t}\n\t\tvar s = String( value );\n\t\twhile ( s.length < Math.abs( size ) )\n\t\t{\n\t\t\tif ( size > 0 )\n\t\t\t{\n\t\t\t\ts = pad + s;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ts = s + pad;\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}"}},"clear":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.Tracer.clear = function ()\n{\n\t//while ( PULSE.Tracer.tracingElement.firstChild )\n\t//{\n\t//\tPULSE.Tracer.tracingElement.removeChild( PULSE.Tracer.tracingElement.firstChild );\n\t//}\n}"}},"Video":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.Video"},{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"PULSE.Video = function ( id )\n{\n\tthis.video = document.getElementById( id );\n\tthis.videoDiv = document.getElementById( id + 'div' );\n\tif ( this.video === null || this.videoDiv === null )\n\t{\n\t\tPULSE.Tracer.error( 'Expected video tag ' + id + ' was missing' );\n\t}\n}","prototype":{"load":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"filename"}]},"Source":"PULSE.Video.prototype.load = function ( filename )\n{\n\tthis.video.src = filename;\n}"},"play":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.Video.prototype.play = function ()\n{\n\tthis.video.play();\n}"},"setVisible":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"visible"}]},"Source":"PULSE.Video.prototype.setVisible = function ( visible )\n{\n\tthis.videoDiv.setAttribute( 'style', visible ? '' : 'display:none' );\n}"}}},"BallProgress":{"Documentation":{"description":"Class to encapsulate a ball progress.","tags":[]},"Source":"PULSE.BallProgress = function ( rawBp )\n{\n\tvar fields = rawBp.split( '.' );\n\tthis.innings = fields[0];\n\tthis.over = fields[1];\n\t\n\tif ( fields.length > 2 )\n\t{\n\t\tthis.ball = fields[2];\n\t}\n}","matches":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.BallProgress.matches"},{"title":"param","description":null,"type":null,"name":"raw"}]},"Source":"PULSE.BallProgress.matches = function ( raw )\n{\n\treturn !Utils.isNullish( raw ) && raw.match( /\\d+\\.\\d+\\.\\d+/ ) !== null;\n}"},"prototype":{"description":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.BallProgress.prototype.description = function ()\n{\n\treturn this.innings + '.' + this.over + '.' + this.ball;\n}"},"compareTo":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"rawBp"}]},"Source":"PULSE.BallProgress.prototype.compareTo = function ( rawBp )\n{\n\tvar other = new PULSE.BallProgress( rawBp );\n\t\n    var compare = +this.innings - +other.innings;\n    if ( compare === 0 )\n    {\n        compare = +this.over - +other.over;\n        if ( compare === 0 )\n        {\n            compare = +this.ball - +other.ball;\n        }\n    }\n\n    return compare;\n}"}}},"GraphProvider":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.GraphProvider"}]},"Source":"PULSE.GraphProvider = function ()\n{\n    this.dbType = 'UdsHawkeyeDatabase';\n    this.resync();\n}","prototype":{"setEnvironment":{"Documentation":{"description":"Sets the match type and DB type for this provider to use.","tags":[]},"Source":"PULSE.GraphProvider.prototype.setEnvironment = function ( matchType, dbType )\n{\n    PULSE.Tracer.info( 'setEnvironment matchType=' + matchType + ' dbType=' + dbType );\n    \n    if ( this.matchType !== matchType || this.dbType !== dbType )\n    {\n        this.matchType = matchType;\n        this.dbType = dbType;\n        this.resync();\n    }\n}"},"getAvailableGraphs":{"Documentation":{"description":"Gets all available graph names for the current environment.","tags":[]},"Source":"PULSE.GraphProvider.prototype.getAvailableGraphs = function ()\n{\n    return this.graphNames;\n}"},"current":{"Documentation":{"description":"Returns the currently selected graph.","tags":[]},"Source":"PULSE.GraphProvider.prototype.current = function ()\n{\n    if ( this.index >= this.graphNames.length || this.index < 0 )\n    {\n        return undefined;\n    }\n    else\n    {\n        return this.graphNames[ this.index ];\n    }\n}"},"next":{"Documentation":{"description":"Returns the next graph in the list of graph names. Can be undefined if there are no\navailable graphs.","tags":[]},"Source":"PULSE.GraphProvider.prototype.next = function ()\n{\n    this.index++;\n    if ( this.index >= this.graphNames.length )\n    {\n        this.index = 0;\n    }\n    return this.current();\n}"},"previous":{"Documentation":{"description":"Returns the previous graph in the list of graph names. Can be undefined if there are no\navailable graphs.","tags":[]},"Source":"PULSE.GraphProvider.prototype.previous = function ()\n{\n    this.index--;\n    if ( this.index < 0 )\n    {\n        this.index = this.graphNames.length - 1;\n    }\n    return this.current();\n}"},"currentGraphIdx":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.GraphProvider.prototype.currentGraphIdx = function() {\n\n\tvar current \t= this.current();\n\tvar available \t= this.getAvailableGraphs();\n\t\n\tfor(var i = 0; i < available.length; i++) {\n\t\t\n\t\tvar graph = available[i];\n\t\t\n\t\tif(graph === current)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t}\n\t\n\treturn -1;\n\t\n}"},"graphIdxByName":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"graphName"}]},"Source":"PULSE.GraphProvider.prototype.graphIdxByName = function( graphName )\n{\n    for( var i = 0; i < this.graphNames.length; i++ )\n    {\n        var graph = this.graphNames[i];\n\n        if( graphName === graph )\n        {\n            return i;\n        }\n    }\n\n    return -1;\n}"},"resync":{"Documentation":{"description":"Resync the list of available graph names supported in the current environment.","tags":[]},"Source":"PULSE.GraphProvider.prototype.resync = function ()\n{\n    this.graphNames = [];\n    \n    this.graphNames.push( 'Trajectory Viewer' );\n    this.index = this.graphNames.length - 1;\n\n    // Those also supported in limited overs\n    if ( CricketMatchType.TEST !== this.matchType )\n    {\n        this.graphNames.push( 'Runs Per Over' );\n        this.graphNames.push( 'Worms' );\n    }\n\n    // Graphs always supported\n    \n    this.graphNames.push( 'Speed Pitch Map' );\n    this.graphNames.push( 'Bowl Speeds' );\n        \n    this.graphNames.push( 'Wagon Wheel' );\n    this.graphNames.push( 'Pitch Map' );\n    this.graphNames.push( 'Beehive Placement' );\n    this.graphNames.push( 'Pitch Map Mountain' );\n\n    // Those also supported in UDS environments\n    if ( 'UdsHawkeyeDatabase' === this.dbType )\n    {\n        this.graphNames.push( 'Win Likelihood' );\n    }\n    \n    this.graphNames.push( 'Partnerships' );\n    this.graphNames.push( 'Variable Bounce' );\n    this.graphNames.push( 'Run Rate' );\n    \n    // Iterate over array, removing graphs that have browser-specific exclusions\n    if ( PULSE.Browser && PULSE.Browser.getExcludedGraphs )\n    {\n        var exclusions = PULSE.Browser.getExcludedGraphs();\n        var newGraphs = [];\n        for ( var i = 0, ilimit = this.graphNames.length; i < ilimit; i++ )\n        {\n            if ( !Utils.isInArray( exclusions, this.graphNames[i] ) )\n            {\n                newGraphs.push( this.graphNames[i] );\n            }\n        }\n        this.graphNames = newGraphs;\n    }\n    \n    PULSE.Tracer.info( 'Available graphs are now: ' + this.graphNames );\n}"},"syncTo":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"name"}]},"Source":"PULSE.GraphProvider.prototype.syncTo = function ( name )\n{\n    for ( var i = 0, j = this.graphNames.length; i < j; i++ )\n    {\n        if ( name === this.graphNames[i] )\n        {\n            this.index = i;\n            break;\n        }\n    }\n}"},"getBestMatch":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"graphName"}]},"Source":"PULSE.GraphProvider.prototype.getBestMatch = function( graphName )\n{\n\tvar graphList = this.getAvailableGraphs();\n\tvar name = PULSE.Levenshtein.bestMatch( graphList, graphName );\n\n\treturn name;\n}"},"graphNameByIdx":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"idx"}]},"Source":"PULSE.GraphProvider.prototype.graphNameByIdx = function( idx )\n{\n    return this.graphNames[idx];\n}"}}},"RaphaelPitchMapRenderer":{"Documentation":{"description":"*********","tags":[]},"Source":"PULSE.RaphaelPitchMapRenderer = function ( config ) \n{\n\tthis.config = config;\n}","isSameCategory":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.RaphaelPitchMapRenderer.isSameCategory"},{"title":"param","description":null,"type":null,"name":"a"},{"title":"param","description":null,"type":null,"name":"b"}]},"Source":"PULSE.RaphaelPitchMapRenderer.isSameCategory = function ( a, b )\n{\n\treturn ( a === b || ( a >= 1 && a <= 3 && b >= 1 && b <= 3 ) || ( a >= 4 && b >= 4 ) );\n}"},"prototype":{"isValid":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"row"}]},"Source":"PULSE.RaphaelPitchMapRenderer.prototype.isValid = function ( row )\n{\n\treturn true;\n}"},"render":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"db"},{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"ctx"}]},"Source":"PULSE.RaphaelPitchMapRenderer.prototype.render = function ( db, data, ctx )\n{\n\tthis.db = db;\n\tthis.data = this.prepareData( data );\n\tthis.ctx = ctx;\n\t\n\tthis.tooltipData = undefined;\n\tthis.draw();\n}"},"getColorKey":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"row"}]},"Source":"PULSE.RaphaelPitchMapRenderer.prototype.getColorKey = function ( row )\n{\n\treturn row.get( CricketField.IS_WICKET ) ? 'w' : row.get( CricketField.DEBIT );\n}"},"compare":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"a"},{"title":"param","description":null,"type":null,"name":"b"}]},"Source":"PULSE.RaphaelPitchMapRenderer.prototype.compare = function ( a, b )\n{\n\tvar aw = a.get( CricketField.IS_WICKET );\n\tvar bw = b.get( CricketField.IS_WICKET );\n\t\n\tif ( aw && !bw )\n\t{\n\t\treturn 1;\n\t}\n\telse if ( !aw && bw )\n\t{\n\t\treturn -1;\n\t}\n\telse\n\t{\n\t\tvar ar = +a.get( CricketField.DEBIT );\n\t\tvar br = +b.get( CricketField.DEBIT );\n\n\t\tif ( PULSE.RaphaelPitchMapRenderer.isSameCategory( ar, br ) )\n\t\t{\n\t\t\tif ( a.get( CricketField.PITCHED ) !== undefined && b.get( CricketField.PITCHED ) !== undefined )\n\t\t\t{\n\t\t\t\treturn ( +a.get( CricketField.PITCHED ).x ) - ( +b.get( CricketField.PITCHED ).x );\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn ar - br;\n\t\t}\n\t}\n\treturn 0;\n}"},"prepareData":{"Documentation":{"description":"This function sorts and projects the balls passed in. It results in an array\nof objects that each have a ball.x/y, a shadow.x/y and a color. It also sets the background image\nappropriately.","tags":[]},"Source":"PULSE.RaphaelPitchMapRenderer.prototype.prepareData = function ( data )\n{\n\tthis.tooltipDataCache = {};\n\n\t// Need to clone the array, so we can sort on BounceX\n\tvar dataArray = Utils.cloneArray( data );\n\t\n\t// Sort the array; also track handedness so we don't need to iterate again\n\tvar hasRight = false;\n\tvar hasLeft = false;\n\tvar that = this;\n\t\n\t// if records are more than 1 then sort them based on handedness\n\tif ( dataArray.length === 1 )\n\t{\n\t\tvar handedness = dataArray[0].get( CricketField.HANDEDNESS );\n\t\tif ( !hasRight && CricketHandedness.RIGHT === handedness )\n\t\t{\n\t\t\thasRight = true;\n\t\t}\n\t\tif ( !hasLeft && CricketHandedness.LEFT === handedness )\n\t\t{\n\t\t\thasLeft = true;\n\t\t}\n\t}\n\telse \n\t{\n\t\tdataArray.sort( function ( a, b ) \n\t\t{\n\t\t\tvar handedness = a.get( CricketField.HANDEDNESS );\n\t\t\tif ( !hasRight && CricketHandedness.RIGHT === handedness )\n\t\t\t{\n\t\t\t\thasRight = true;\n\t\t\t}\n\t\t\tif ( !hasLeft && CricketHandedness.LEFT === handedness )\n\t\t\t{\n\t\t\t\thasLeft = true;\n\t\t\t}\n\t\t\t\n\t\t\treturn that.compare( a, b );\n\t\t} );\n\t}\n\t\n\t// Set background based upon hasLeft/hasRight\n\tif ( hasLeft && hasRight )\n\t{\n\t\tthis.controller.setBackground( this.config.variants.mix.background );\n\t}\n\telse if ( hasLeft )\n\t{\n\t\tthis.controller.setBackground( this.config.variants.lh.background );\n\t}\n\telse if ( hasRight )\n\t{\n\t\tthis.controller.setBackground( this.config.variants.rh.background );\n\t}\n\t\n\t// Iterate through sorted balls\n\tvar preparedData = [];\n\tfor ( var i = 0, j = dataArray.length; i < j; i++ )\n\t{\n\t\tvar row = dataArray[i];\n\t\tvar xyz = row.get( CricketField.PITCHED );\n\t\tif ( xyz !== undefined )\n\t\t{\n\t\t\txyz = this.db.normalise( xyz );\n\t\t\t\n\t\t\tif ( xyz.x > -999 && xyz.y > -999 && this.isValid( row ) )\n\t\t\t{\n\t\t\t\tvar shadow = this.config.projection.project( xyz );\n\t\t\t\txyz.z = 0.036;\n\t\t\t\tvar ball = this.config.projection.project( xyz );\n\t\t\t\t\t\t\t\t\n\t\t\t\tif ( hasLeft && hasRight )\n\t\t\t\t{\n\t\t\t\t\tif ( CricketHandedness.LEFT === row.get( CricketField.HANDEDNESS ) )\n\t\t\t\t\t{\n\t\t\t\t\t\tshadow.x += this.config.variants.lh.offset;\n\t\t\t\t\t\tball.x += this.config.variants.lh.offset;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tshadow.x += this.config.variants.rh.offset;\n\t\t\t\t\t\tball.x += this.config.variants.rh.offset;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tshadow.x -= 3;\n\t\t\t\tshadow.y += 1;\n\t\t\t\t\n\t\t\t\tvar colorKey = this.getColorKey( row );\n\t\t\t\tpreparedData.push( { ball:ball, shadow:shadow, color:this.config.colors[ colorKey ] } );\n\n\t\t\t\tthis.updateTooltipCache( ball, row );\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn preparedData;\n}"},"updateTooltipCache":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"ball"},{"title":"param","description":null,"type":null,"name":"row"}]},"Source":"PULSE.RaphaelPitchMapRenderer.prototype.updateTooltipCache = function ( ball, row )\n{\n\t// Update tooltip cache\n\tvar ix = Math.round( ball.x );\n\tvar iy = Math.round( ball.y );\t\t\t\t\n\tvar tx = this.tooltipDataCache[ ix ];\n\tif ( tx === undefined )\n\t{\n\t\ttx = {};\n\t\tthis.tooltipDataCache[ ix ] = tx;\n\t}\n\t\n\tvar lines = [];\n\tlines.push( '<c:#bbb>Ball </c>' + row.get( CricketField.INNINGS ) + '.' + \n\t\t\t( +row.get( CricketField.OVER ) - 1 ) + '.' +\n\t\t\trow.get( CricketField.COUNTING_BALL ) );\n\tlines.push( row.get( CricketField.BOWLER ) + \n\t\t\t' <c:#bbb>to </c>' + row.get( CricketField.BATSMAN ) );\n\t\n\tvar line3 = '';\n\t\n\tvar bs = row.get( CricketField.BOWL_SPEED );\n\tif ( !Utils.isNullish( bs ) && +bs >= 40 )\n\t{\n\t\tline3 += +bs.toFixed(1) + 'mph';\n\t}\n\t\n\tvar summary = row.generateSummary();\n\tif ( !Utils.isNullish( summary ) )\n\t{\n\t\tif ( line3.length > 0 )\n\t\t{\n\t\t\tline3 += ' <c:#bbb>resulting in </c>';\n\t\t}\n\t\tline3 += summary;\n\t}\n\t\n\tif ( !Utils.isNullish( line3 ) )\n\t{\n\t\tlines.push( line3 );\n\t}\n\t\n\tlines.push( '<c:#888>Click to view trajectory</c>' );\n\t\n\tvar ttd = { lines:lines, x:ix, y:iy, bp:row.get( CricketField.ID ) };\n\tthis.tooltipDataCache[ ix ][ iy ] = ttd;\n}"},"draw":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.RaphaelPitchMapRenderer.prototype.draw = function () \n{\n\t// Parse ball size\n\tvar sz = this.config.ballSize;\n\tvar idx = this.config.ballSize.indexOf('px');\n\tif ( idx !== -1 )\n\t{\n\t\tsz = +( this.config.ballSize.substr( 0, idx ) );\n\t}\n\tsz /= 2;\n\t\n\t// Clear paper\n\tthis.ctx.r.clear();\n\n\t// Add all shadows (pushing them to the back) and balls\n\tfor ( var i = 0, j = this.data.length; i < j; i++ )\n    {\n\t    this.ctx.r.ellipse( this.data[i].shadow.x, this.data[i].shadow.y, sz, sz * 0.6 )\n                  .attr( { fill:'black', opacity:0.3, stroke:'none' } ); \n    }\n\tfor ( var i = 0, j = this.data.length; i < j; i++ )\n\t{\n\t\tvar img = this.config.ballImagePath + this.config.ballSize + '/phe_' + this.data[i].color + '_ball.png';\n\t\tthis.ctx.r.image( img, this.data[i].ball.x - sz, this.data[i].ball.y - sz, sz * 2, sz * 2 );\n\t}\n}"},"updateTooltip":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.RaphaelPitchMapRenderer.prototype.updateTooltip = function ()\n{\n\tif ( this.tooltipData )\n\t{\n\t\t// Remove any current tooltip set\n\t\tif ( this.ttSet )\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tthis.ttSet.remove();\n\t\t\t}\n\t\t\tcatch ( exception )\n\t\t\t{\n\t\t\t\t// Potentially tries to remove an object already cleared\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar cfg = this.config.tooltip;\n\t\tvar anchorv = 'n';\n\t\tvar anchorh = 'w';\n\t\t\n\t\tif ( this.tooltipData.x > this.config.width / 2 )\n\t\t{\n\t\t\tanchorh = 'e';\n\t\t}\n\t\tif ( this.tooltipData.y > this.config.height / 2 )\n\t\t{\n\t\t\tanchorv = 's';\n\t\t}\n\t\t\n\t\tcfg.position = { x:this.tooltipData.x, y:this.tooltipData.y, anchor:anchorv + anchorh };\n\n\t\t// Create a new set and build Raphael object stack for a text field in it\n\t\tthis.ttSet = this.ctx.r.set();\n\t\tvar tf = new PULSE.RaphaelTextField( cfg );\n\t\ttf.setLines( this.tooltipData.lines );\n\t\ttf.render( this.ctx.r, this.ttSet );\n\t}\n\telse\n\t{\n\t\tthis.ttSet.animate( { opacity:0 }, 1000 );\n\t}\n}"},"onMouse":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"event"}]},"Source":"PULSE.RaphaelPitchMapRenderer.prototype.onMouse = function ( event )\n{\n\t// Get XY and then infer ball\n\tvar xy = Utils.getXY( event );\n\tif ( xy !== undefined )\n\t{\n\t\tvar tooltipData = this.findNearbyTooltip( xy );\n\t\tif ( 'mousedown' === event.type )\n\t\t{\n\t\t\tif ( tooltipData !== undefined )\n\t\t\t{\n\t\t\t\tthis.controller.showTrajectory( tooltipData.bp );\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif ( this.tooltipData !== tooltipData )\n\t{\n\t\tthis.tooltipData = tooltipData;\n\t\tthis.updateTooltip();\n\t}\n}"},"findNearbyTooltip":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"xy"}]},"Source":"PULSE.RaphaelPitchMapRenderer.prototype.findNearbyTooltip = function ( xy )\n{\n\tfor ( var s = 0; s < 10; s++ )\n\t{\n\t\tfor ( var x = xy.x - s; x <= xy.x + s; x++ )\n\t\t{\n\t\t\tfor ( var y = xy.y - s; y <= xy.y + s; y++ )\n\t\t\t{\n\t\t\t\tif ( this.tooltipDataCache[ x ] !== undefined &&\n\t\t\t\t\t this.tooltipDataCache[ x ][ y ] !== undefined )\n\t\t\t\t{\n\t\t\t\t\treturn this.tooltipDataCache[ x ][ y ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"}}},"RaphaelVariableBounceRenderer":{"Documentation":{"description":"***************","tags":[]},"Source":"PULSE.RaphaelVariableBounceRenderer = function ( config ) \n{\n\tthis.config = config;\n}","prototype":{"getColorKey":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"row"}]},"Source":"PULSE.RaphaelVariableBounceRenderer.prototype.getColorKey = function ( row )\n{\n\tvar stumps = row.get( CricketField.STUMPS );\n\tif ( row.get( CricketField.IS_WICKET ) )\n\t{\n\t\treturn 'w';\n\t}\n\telse if ( stumps.z > 0.745 )\n\t{\n\t\treturn 'a';\n\t}\n\telse\n\t{\n\t\treturn 's';\n\t}\n}"},"isValid":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"row"}]},"Source":"PULSE.RaphaelVariableBounceRenderer.prototype.isValid = function ( row )\n{\n\tvar pitched = row.get( CricketField.PITCHED );\n\tvar stumps = row.get( CricketField.STUMPS );\n\t\n\tif ( pitched !== undefined && stumps !== undefined )\n\t{\n\t\tvar xyz = { x:pitched.x, y:pitched.y, z:stumps.z };\n\t\txyz = this.db.normalise( xyz );\n\t\t\n\t\treturn xyz.x > -999 && xyz.y > -999 && xyz.z > -999;\n\t}\n\t\n\treturn false;\n}"},"compare":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"a"},{"title":"param","description":null,"type":null,"name":"b"}]},"Source":"PULSE.RaphaelVariableBounceRenderer.prototype.compare = function ( a, b )\n{\n\tvar aw = a.get( CricketField.IS_WICKET );\n\tvar bw = b.get( CricketField.IS_WICKET );\n\t\n\tif ( aw && !bw )\n\t{\n\t\treturn 1;\n\t}\n\telse if ( !aw && bw )\n\t{\n\t\treturn -1;\n\t}\n\telse\n\t{\n\t\tif ( a.get( CricketField.PITCHED ) !== undefined && b.get( CricketField.PITCHED ) !== undefined )\n\t\t{\n\t\t\treturn +a.get( CricketField.PITCHED ).x - +b.get( CricketField.PITCHED ).x;\n\t\t}\n\t}\n\treturn 0;\n}"}}},"RaphaelSpeedPitchMapRenderer":{"Documentation":{"description":"***************","tags":[]},"Source":"PULSE.RaphaelSpeedPitchMapRenderer = function ( config ) \n{\n\tthis.config = config;\n}","prototype":{"getColorKey":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"row"}]},"Source":"PULSE.RaphaelSpeedPitchMapRenderer.prototype.getColorKey = function ( row )\n{\n\tvar speed = +row.get( CricketField.BOWL_SPEED );\n\t\n\t// Convert the speed unit\n    if ( PULSE.SpeedModeController.mode === PULSE.SpeedModeController.MODE_KMH )\n    {\n    \tspeed = PULSE.SpeedModeController.mpsToKmh( speed );\n    }\n\t\n\tfor ( var b = 0, c = this.config.buckets.length; b < c; b++ )\n\t{\n\t\tif ( speed < this.config.buckets[b] )\n\t\t{\n\t\t\treturn b;\n\t\t}\n\t}\n\t\n\treturn this.config.buckets.length;\n}"},"isValid":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"row"}]},"Source":"PULSE.RaphaelSpeedPitchMapRenderer.prototype.isValid = function ( row )\n{\n\tvar bs = row.get( CricketField.BOWL_SPEED );\n\treturn !Utils.isNullish( bs ) && +bs >= 10;\n}"},"compare":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"a"},{"title":"param","description":null,"type":null,"name":"b"}]},"Source":"PULSE.RaphaelSpeedPitchMapRenderer.prototype.compare = function ( a, b )\n{\n\tif ( a.get( CricketField.PITCHED ) !== undefined && b.get( CricketField.PITCHED ) !== undefined )\n\t{\n\t\treturn ( +a.get( CricketField.PITCHED ).x ) - ( +b.get( CricketField.PITCHED ).x );\n\t}\n\treturn 0;\n}"}}},"RaphaelPitchMapMountainRenderer":{"Documentation":{"description":"******************","tags":[]},"Source":"PULSE.RaphaelPitchMapMountainRenderer = function ( config ) \n{\n\tthis.config = config;\n}","prototype":{"bucketise":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"x"},{"title":"param","description":null,"type":null,"name":"y"}]},"Source":"PULSE.RaphaelPitchMapMountainRenderer.prototype.bucketise = function ( x, y )\n{\n\tif ( x >= this.config.boundary.x.min && x <= this.config.boundary.x.max &&\n\t\t y >= this.config.boundary.y.min && y <= this.config.boundary.y.max )\n\t{\n\t\treturn { x : Math.floor( ( x - this.config.boundary.x.min ) / this.config.bucketSize ),\n\t\t\t     y : Math.floor( ( y - this.config.boundary.y.min ) / this.config.bucketSize ) };\n\t}\n}"},"render":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"db"},{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"ctx"}]},"Source":"PULSE.RaphaelPitchMapMountainRenderer.prototype.render = function ( db, data, ctx )\n{\n\tthis.projectedPoints = {};\n\n\tthis.ctx = ctx;\n\tthis.db = db;\n\t\n\tthis.controller.setBackground( this.config.background );\n\t\n\tctx.r.clear();\n\t\n\tvar bubble1 = Math.sqrt( 8 ) / 3;\n\tvar bubble2 = Math.sqrt( 7 ) / 3;\n\tvar bubble3 = Math.sqrt( 5 ) / 3;\n\tvar bubble4 = 2 / 3;\n\tvar bubble5 = 1 / 3;\n\t\n\t// Bucketise the data\n\tvar heights = {};\n\tvar total = 0;\n\tfor ( var i = 0, j = data.length; i < j; i++ )\n\t{\n\t\tvar row = data[i];\n\t\tvar xyz = row.get( CricketField.PITCHED );\n\t\t\n\t\tif ( xyz !== undefined )\n\t\t{\n\t\t\tvar bucket = this.bucketise( xyz.x, xyz.y );\n\t\t\tif ( bucket !== undefined )\n\t\t\t{\n\t\t\t\tvar x = bucket.x;\n\t\t\t\tvar y = bucket.y;\n\t\t\t\t// Centre point\n\t\t\t\tthis.incrementBucket( heights, x, y, 1 );\n\t\t\t\t// Points one unit away\n\t\t\t\tthis.incrementBucket( heights, x - 1, y, bubble1 );\n\t\t\t\tthis.incrementBucket( heights, x + 1, y, bubble1 );\n\t\t\t\tthis.incrementBucket( heights, x, y - 1, bubble1 );\n\t\t\t\tthis.incrementBucket( heights, x, y + 1, bubble1 );\n\t\t\t\t// Points two steps away (diagonally)\n\t\t\t\tthis.incrementBucket( heights, x - 1, y - 1, bubble2 );\n\t\t\t\tthis.incrementBucket( heights, x - 1, y + 1, bubble2 );\n\t\t\t\tthis.incrementBucket( heights, x + 1, y - 1, bubble2 );\n\t\t\t\tthis.incrementBucket( heights, x + 1, y + 1, bubble2 );\n\t\t\t\t// Points two steps away (linearly)\n\t\t\t\tthis.incrementBucket( heights, x - 2, y, bubble3 );\n\t\t\t\tthis.incrementBucket( heights, x + 2, y, bubble3 );\n\t\t\t\tthis.incrementBucket( heights, x, y - 2, bubble3 );\n\t\t\t\tthis.incrementBucket( heights, x, y + 2, bubble3 );\n\t\t\t\t// Points three steps away\n\t\t\t\tthis.incrementBucket( heights, x - 2, y + 1, bubble4 );\n\t\t\t\tthis.incrementBucket( heights, x - 2, y - 1, bubble4 );\n\t\t\t\tthis.incrementBucket( heights, x + 2, y + 1, bubble4 );\n\t\t\t\tthis.incrementBucket( heights, x + 2, y - 1, bubble4 );\n\t\t\t\tthis.incrementBucket( heights, x - 1, y + 2, bubble4 );\n\t\t\t\tthis.incrementBucket( heights, x + 1, y + 2, bubble4 );\n\t\t\t\tthis.incrementBucket( heights, x - 1, y - 2, bubble4 );\n\t\t\t\tthis.incrementBucket( heights, x + 1, y - 2, bubble4 );\n\t\t\t\t// Points four steps away\n\t\t\t\tthis.incrementBucket( heights, x - 2, y - 2, bubble5 );\n\t\t\t\tthis.incrementBucket( heights, x - 2, y + 2, bubble5 );\n\t\t\t\tthis.incrementBucket( heights, x + 2, y - 2, bubble5 );\n\t\t\t\tthis.incrementBucket( heights, x + 2, y + 2, bubble5 );\n\n\t\t\t\ttotal++;\n\t\t\t}\n\t\t}\n\t}\n\n\tvar triangles = [];\n\t\n\tif ( total > 0 )\n\t{\n\t\tvar xs = ( this.config.boundary.x.max - this.config.boundary.x.min ) / this.config.bucketSize;\n\t\tvar ys = ( this.config.boundary.y.max - this.config.boundary.y.min ) / this.config.bucketSize;\n\t\t\n\t\t// Quickly loop over all the points and work out the max height\n\t\tvar maxHeight = 0;\n\t\tfor ( var x = 0; x <= xs; x++ )\n\t\t{\n\t\t\tfor ( var y = 0; y <= ys; y++ )\n\t\t\t{\n\t\t\t\tmaxHeight = Math.max( maxHeight, this.getHeight( heights, x, y ) );\n\t\t\t}\n\t\t}\n\t\tif ( maxHeight == 0 )\n\t\t{\n\t\t\tmaxHeight = 1;\n\t\t}\n\t\t\n\t\tmaxHeight /= this.config.maxHeight;\n\t\t\n\t\tfor ( var x = 0; x <= xs; x++ )\n\t\t{\n\t\t\tvar xpos1 = this.config.boundary.x.min + ( x * this.config.bucketSize );\n\t\t\tvar xpos2 = xpos1 + this.config.bucketSize;\n\t\t\tfor ( var y = 0; y <= ys; y++ )\n\t\t\t{\n\t\t\t\tvar ypos1 = this.config.boundary.y.min + ( y * this.config.bucketSize );\n\t\t\t\tvar ypos2 = ypos1 + this.config.bucketSize;\n\t\t\t\t\n\t\t\t\t// Get the height at the four corners\n\t\t\t\tvar height1 = this.getHeight( heights, x, y ) / maxHeight;\n\t\t\t\tvar height2 = this.getHeight( heights, x + 1, y ) / maxHeight;\n\t\t\t\tvar height3 = this.getHeight( heights, x, y + 1 ) / maxHeight;\n\t\t\t\tvar height4 = this.getHeight( heights, x + 1, y + 1 ) / maxHeight;\n\t\t\t\t\n\t\t\t\t// Triangle 1\n\t\t\t\tif ( height2 > 0 || height3 > 0 || height4 > 0 )\n\t\t\t\t{\n\t\t\t\t\ttriangles.push( {\n\t\t\t\t\t\tp1 : { x: xpos2, y: ypos1, z: height2 },\n\t\t\t\t\t\tp2 : { x: xpos2, y: ypos2, z: height4 },\n\t\t\t\t\t\tp3 : { x: xpos1, y: ypos2, z: height3 }\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Triangle 2\n\t\t\t\tif ( height1 > 0 || height2 > 0 || height3 > 0 )\n\t\t\t\t{\n\t\t\t\t\ttriangles.push( {\n\t\t\t\t\t\tp1 : { x: xpos1, y: ypos1, z: height1 },\n\t\t\t\t\t\tp2 : { x: xpos2, y: ypos1, z: height2 },\n\t\t\t\t\t\tp3 : { x: xpos1, y: ypos2, z: height3 }\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.renderMesh( triangles );\n\t}\n}"},"incrementBucket":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"heights"},{"title":"param","description":null,"type":null,"name":"x"},{"title":"param","description":null,"type":null,"name":"y"},{"title":"param","description":null,"type":null,"name":"amount"}]},"Source":"PULSE.RaphaelPitchMapMountainRenderer.prototype.incrementBucket = function ( heights, x, y, amount )\n{\n\tif ( heights[ x ] === undefined )\n\t{\n\t\theights[ x ] = {};\n\t}\n\tif ( heights[ x ][ y ] === undefined )\n\t{\n\t\theights[ x ][ y ] = 0;\n\t}\n\n\theights[ x ][ y ] += amount;\n}"},"getHeight":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"heights"},{"title":"param","description":null,"type":null,"name":"x"},{"title":"param","description":null,"type":null,"name":"y"}]},"Source":"PULSE.RaphaelPitchMapMountainRenderer.prototype.getHeight = function ( heights, x, y )\n{\n\tvar height = 0;\n\tif ( heights[ x ] !== undefined && heights[ x ][ y ] !== undefined )\n\t{\n\t\theight = heights[ x ][ y ];\n\t}\n\treturn height;\n}"},"renderMesh":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"triangles"}]},"Source":"PULSE.RaphaelPitchMapMountainRenderer.prototype.renderMesh = function ( triangles )\n{\n\tfor ( var i = 0, limit = triangles.length; i < limit; i++ )\n\t{\n\t\tvar triangle = triangles[ i ];\n\t\t\n\t\tvar p1 = this.db.normalise( { x:triangle.p1.x, y:triangle.p1.y, z:triangle.p1.z } );\n\t\tvar p2 = this.db.normalise( { x:triangle.p2.x, y:triangle.p2.y, z:triangle.p2.z } );\n\t\tvar p3 = this.db.normalise( { x:triangle.p3.x, y:triangle.p3.y, z:triangle.p3.z } );\n\t\t\n\t\tvar d1 = { x: p2.x - p1.x, y: p2.y - p1.y, z: p2.z - p1.z };\n\t\tvar d2 = { x: p3.x - p2.x, y: p3.y - p2.y, z: p3.z - p2.z };\n\t\t\n\t\t// Calculate the normal vector for the triangle using the cross product\n\t\tvar crossProduct = { x: d1.y * d2.z - d1.z * d2.y,\n\t\t\t\t             y: d1.z * d2.x - d1.x * d2.z,\n\t\t\t\t             z: d1.x * d2.y - d1.y * d2.x };\n\t\t// Work out the length of the vector\n\t\tvar crossProductSize = Math.sqrt( crossProduct.x * crossProduct.x + \n\t\t\t\tcrossProduct.y * crossProduct.y + crossProduct.z * crossProduct.z );\n\t\t// Normalise the cross product vector\n\t\tcrossProduct.x /= crossProductSize;\n\t\tcrossProduct.y /= crossProductSize;\n\t\tcrossProduct.z /= crossProductSize;\n\t\t\n\t\t// Work out the dot product of the normal and light vector to work out the angle between them\n\t\tvar dotProduct = crossProduct.x * this.config.light.x + \n\t\t                 crossProduct.y * this.config.light.y +\n\t\t                 crossProduct.z * this.config.light.z;\n\t\t\n\t\tif ( dotProduct < 0 )\n\t\t{\n\t\t\t// The triangle is facing away from the camera, so skip this one\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tdotProduct = dotProduct * this.config.lightStrength + 1 - this.config.lightStrength;\n\t\t\n\t\tvar color = { r : dotProduct * this.config.color.r,\n\t\t\t\t      g : dotProduct * this.config.color.g,\n\t\t\t\t      b : dotProduct * this.config.color.b };\n\t\t\n\t\tvar colorString = 'rgb(' + +Math.round( color.r * 255 ) + ',' + +Math.round( color.g * 255 ) + ',' + +Math.round( color.b * 255 ) + ')';\n\t\tvar pos1 = this.project( p1 );\n\t\tvar pos2 = this.project( p2 );\n\t\tvar pos3 = this.project( p3 );\n\n\t\tvar pathString = 'M' + pos1.x + ' ' + pos1.y +\n\t\t\t\t\t\t 'L' + pos2.x + ' ' + pos2.y +\n\t\t\t\t\t\t 'L' + pos3.x + ' ' + pos3.y + 'z';\n\t\t\n\t\tthis.ctx.r.path( pathString ).attr( { fill:colorString, stroke:colorString } );\n\t}\n}"},"project":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"xyz"}]},"Source":"PULSE.RaphaelPitchMapMountainRenderer.prototype.project = function ( xyz )\n{\n\t// This projects a world point to a screen point, but caches the result so that subsequent\n\t// invocations are quicker\n\n\tvar key = xyz.x + ',' + xyz.y + ',' + xyz.z;\n\tvar projected = this.projectedPoints[ key ];\n\t\n\tif ( !projected )\n\t{\n\t\tprojected = this.config.projection.project( xyz );\n\t\tthis.projectedPoints[ key ] = projected;\n\t}\n\t\n\treturn projected;\n}"}}},"RaphaelWagonWheelRenderer":{"Documentation":{"description":"***********","tags":[]},"Source":"PULSE.RaphaelWagonWheelRenderer = function ( config )\n{\n\tthis.config = config;\n\tthis.selected = -1;\n}","prototype":{"render":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.RaphaelWagonWheelRenderer.prototype.render"},{"title":"param","description":null,"type":null,"name":"db"},{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"ctx"}]},"Source":"PULSE.RaphaelWagonWheelRenderer.prototype.render = function ( db, data, ctx )\n{\n\tctx.r.clear();\n\tthis.sets = [ ctx.r.set(), ctx.r.set(), ctx.r.set(), ctx.r.set() ];\n\tthis.selected = -1;\n\n\t// Get the scales\n\tvar yscale = this.config.scale.y;\n\tvar xscale = this.config.scale.x;\n\n\tvar screenOrigin = this.config.transform( 0, 0, 1 );\n\n\tvar sign = db.getParameter( 'ww-sign' );\n\tvar origin = this.config.transform( db.getParameter( 'ww-origin-x' ), 0, sign );\n\n\tthis.controller.setBackground( this.config.background, this.config.selector );\n\n\t// Stats object which is used to populate the annotated key\n\tvar stats = { runs:0, balls:0, scoring:0, runsleg:0, runsoff:0 };\n\n\tvar keyStats = { singles:0, twothrees:0, fours:0, sixes:0 };\n\n\t// Clone the data so we can sort on number of runs; singles are nearest the top, as other\n\t// shots will typically be longer and poke out from underneath; the exception is that 6s\n\t// should appear on top of 4/5s\n\tvar dataArray = Utils.cloneArray( data );\n\n\t// Sort the array\n\tdataArray.sort( function ( a, b )\n\t{\n\t\tvar ar = +a.get( CricketField.CREDIT );\n\t\tvar br = +b.get( CricketField.CREDIT );\n\n\t\tif ( ar === 6 && br >= 4 )\n\t\t{\n\t\t\treturn ar - br;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn br - ar;\n\t\t}\n\t} );\n\n\tfor ( var i = 0, ilimit = dataArray.length; i < ilimit; i++ )\n\t{\n\t\tvar row = dataArray[i];\n\t\tvar extraType = row.get( CricketField.EXTRA_TYPE );\n\t\t// ignore wide and wide-bye balls as they are not batsman-faced-balls\n\t\tif ( extraType !== \"Wd\" && extraType !== \"WdB\" )\n\t\t{\n\t\t\tstats.balls++;\n\t\t}\n\n\t\tvar landing = row.get( CricketField.WW );\n\t\t// if ( landing !== undefined && landing.x > -999 && landing.y > -999 )\n\t\t// if( true )\n\t\t// {\n\t\t\tvar runs = ( +row.get( CricketField.CREDIT ) );\n\t\t\tif ( runs > 0 )\n\t\t\t{\n\t\t\t\t// Update stats\n\t\t\t\tstats.scoring++;\n\t\t\t\tstats.runs += runs;\n\n\t\t\t\tswitch ( runs )\n\t\t\t\t{\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tkeyStats.singles++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tkeyStats.twothrees++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\tcase 5:\n\t\t\t\t\t\tkeyStats.fours++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 6:\n\t\t\t\t\t\tkeyStats.sixes++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tvar lh = ( row.get( CricketField.HANDEDNESS ) === CricketHandedness.LEFT );\n\n\t\t\t\tif( landing && landing.x > -999 && landing.y > -999 )\n\t\t\t\t{\n\t\t\t\t\tif ( ( lh && landing.y < 0 ) || ( !lh && landing.y >= 0 ) )\n\t\t\t\t\t{\n\t\t\t\t\t\tstats.runsleg += runs;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstats.runsoff += runs;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Transform to screen position\n\t\t\t\t\tvar screenPos = this.config.transform( landing.x, landing.y, sign );\n\n\t\t\t\t\t// Scale to ensure 4+ runs go to the rope\n\t\t\t\t\tif ( runs >= 4 )\n\t\t\t\t\t{\n\t\t\t\t\t\tscreenPos = Utils.scaleLine( origin, screenPos, 200 );\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar len = this.config.scaleback ? this.config.scaleback.length : 170;\n\t\t\t\t\t\tvar amt = this.config.scaleback ? this.config.scaleback.amount : 0.8;\n\n\t\t\t\t\t\tscreenPos = Utils.scaleLineRel( origin, screenPos, len, amt );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check for intersection of the current line and the current clip.\n\t\t\t\t\t// This uses the 2D library from http://www.kevlindev.com/ (no obvious licensing issues)\n\t\t\t\t\tvar c = { x:screenOrigin.x, y:screenOrigin.y + 2 };\n\t\t\t\t    var rx = 184 * xscale;\n\t\t\t\t    var ry = 184 * yscale;\n\t\t\t\t    var a1 = new Point2D( origin.x, origin.y );\n\t\t\t\t    var a2 = new Point2D( screenPos.x, screenPos.y );\n\n\t\t\t\t\tvar inter = Intersection.intersectEllipseLine( c, rx, ry, a1, a2 );\n\t\t\t\t    if ( 'Intersection' === inter.status && inter.points.length > 0 )\n\t\t\t\t    {\n\t\t\t\t    \tscreenPos = { x:inter.points[0].x, y:inter.points[0].y };\n\t\t\t\t    }\n\n\t\t\t\t\tvar bucket = PULSE.RaphaelWagonWheelRenderer.BUCKETS[ runs ];\n\t\t\t\t\tvar line = ctx.r.path( 'M' + origin.x + ' ' + origin.y +\n\t\t\t\t\t\t\t               'L' + screenPos.x + ' ' + screenPos.y )\n\t\t\t\t\t\t\t        .attr( { stroke:this.config.colors[ runs ][1],\n\t\t\t\t\t\t\t       \t        'stroke-width':this.config.lineWidth } );\n\n\t\t\t\t\tthis.sets[bucket].push( line );\n\t\t\t\t}\n\n\t\t\t}\n\t\t// }\n\t}\n\n\t// Convert runs to leg/off to percentages\n\tvar tot = stats.runsleg + stats.runsoff;\n\tif ( tot > 0 )\n\t{\n\t\tstats.runsleg = ( Math.round( 100 * stats.runsleg / tot ) );\n\t\tstats.runsoff = ( 100 - stats.runsleg ) + '%';\n\t\tstats.runsleg += '%';\n\t}\n\telse\n\t{\n\t\tstats.runsleg = '';\n\t\tstats.runsoff = '';\n\t}\n\n\t// Write stats annotations\n\tvar attrs = this.config.font;\n\tfor ( var key in stats )\n\t{\n\t\tif ( key !== 'x' )\n\t\t{\n\t\t\tvar cfg = this.config.key[ key ];\n\n            if( !cfg )\n            {\n                continue;\n            }\n\n\t\t\tvar color = cfg.color;\n\t\t\tvar color2 = cfg.lcolor || cfg.color;\n            var offset = cfg.x || [ 0, 0 ];\n\n\t\t\tif ( this.config.keyDisplayMode === 'values' )\n\t\t\t{\n\t\t\t}\n\t\t\telse if ( this.config.keyDisplayMode === 'labelsandvalues' )\n            {\n                attrs['text-anchor'] = 'start';\n                attrs['fill'] = color2;\n                ctx.r.text( this.config.key.x[0] + offset[0], PULSE.Browser.y( cfg.y ), cfg.label ).attr( attrs );\n\n                attrs['text-anchor'] = 'end';\n                attrs['fill'] = color;\n                ctx.r.text( this.config.key.x[1] + offset[1], PULSE.Browser.y( cfg.y ), stats[ key ] ).attr( attrs );\n            }\n\t\t}\n\t}\n\n\t// Now write any freetext\n\tif ( this.config.freetext && this.config.freetext.text )\n\t{\n\t\tvar tf = new PULSE.RaphaelTextField( this.config.freetext );\n\t\ttf.addLine( this.config.freetext.text );\n\t\ttf.render( ctx.r, ctx.r.set() );\n\t}\n\n\t// tell the controll to update WW key values if setWWKeyValues exists\n\tif( PULSE.GraphController.setWWKeyValues )\n\t{\n\t\tPULSE.GraphController.setWWKeyValues( keyStats );\n\t}\n\telse\n\t{\n\t\t// Write stats annotations\n\t\tvar attrs = this.config.font;\n\t\tfor ( var key in keyStats )\n\t\t{\n\t\t\tif ( key !== 'x' )\n\t\t\t{\n\t\t\t\tvar cfg = this.config.key[ key ];\n\n                if( !cfg )\n                {\n                    continue;\n                }\n\n\t\t\t\tvar color = cfg.color;\n\t\t\t\tvar color2 = cfg.lcolor || cfg.color;\n                var offset = cfg.x || [ 0, 0 ];\n\n\t\t\t\tif ( this.config.keyDisplayMode === 'values' )\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse if ( this.config.keyDisplayMode === 'labelsandvalues' )\n                {\n                    attrs['text-anchor'] = 'start';\n                    attrs['fill'] = color2;\n                    ctx.r.text( this.config.key.x[0] + offset[0], PULSE.Browser.y( cfg.y ), cfg.label ).attr( attrs );\n\n                    attrs['text-anchor'] = 'end';\n                    attrs['fill'] = color;\n                    ctx.r.text( this.config.key.x[1] + offset[1], PULSE.Browser.y( cfg.y ), keyStats[ key ] ).attr( attrs );\n                }\n\t\t\t}\n\t\t}\n\t}\n}"},"updateToSelection":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.RaphaelWagonWheelRenderer.prototype.updateToSelection = function ()\n{\n\tfor ( var s = 0, slimit = this.sets.length; s < slimit; s++ )\n\t{\n\t\tvar opacity = this.selected === s || this.selected === -1 ? 1 : 0;\n\t\tthis.sets[s].animate( { opacity:opacity }, 500 );\n\t}\n}"},"onMouse":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"event"}]},"Source":"PULSE.RaphaelWagonWheelRenderer.prototype.onMouse = function ( event )\n{\n\t// Get XY and then infer run class selection index\n\tvar xy = Utils.getXY( event );\n\tvar selection = -1;\n\t\n\tif ( xy !== undefined && xy.x >= this.config.keyLabelLeftLimit && xy.x <= this.config.keyLabelRightLimit\n\t\t\t&& xy.y >= this.config.keyLabelTopLimit && xy.y <= this.config.keyLabelBottomLimit )\n\t{\n\t\tselection = Math.floor( ( xy.y - this.config.keyLabelTopLimit ) / this.config.keyLabelWidth );\n\t}\n\t\n\tif ( selection !== this.selected )\n\t{\n\t\tthis.selected = selection;\n\t\tthis.updateToSelection();\n\t}\n}"}},"pointDownLine":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"start"},{"title":"param","description":null,"type":null,"name":"end"},{"title":"param","description":null,"type":null,"name":"amount"},{"title":"param","description":null,"type":null,"name":"isFraction"}]},"Source":"PULSE.RaphaelWagonWheelRenderer.pointDownLine = function ( start, end, amount, isFraction )\n{\n\tvar dx = end.x - start.x;\n\tvar dy = end.y - start.y;\n\n\tif ( isFraction )\n\t{\n\t\treturn { x: start.x + ( amount * dx ),\n\t\t\t     y: start.y + ( amount * dy ) };\n\t}\n\telse\n\t{\n\t\tvar theta = Math.atan2( dy, dx );\n\t\tif ( Math.sqrt( ( dx * dx ) + ( dy * dy ) ) <= amount )\n\t\t{\n\t\t\treturn { x: end.x + ( 3 * Math.cos( theta ) ),\n\t\t\t\t     y: end.y + ( 3 * Math.sin( theta ) ) };\n\t\t\t// Ignore, as the current length is smaller than the target\n\t\t\t//return end;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn { x: start.x + ( amount * Math.cos( theta ) ),\n\t\t\t\t\t y: start.y + ( amount * Math.sin( theta ) ) };\n\t\t}\n\t}\n}"}},"RaphaelBeehiveRenderer":{"Documentation":{"description":"*****************","tags":[]},"Source":"PULSE.RaphaelBeehiveRenderer = function ( config )\n{\n\tthis.config = config;\n}","prototype":{"render":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"db"},{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"ctx"}]},"Source":"PULSE.RaphaelBeehiveRenderer.prototype.render = function ( db, data, ctx )\n{\n\tvar that = this;\n\tctx.r.clear();\n\n\t// Need to clone the array, so we can sort on type of ball\n\tvar dataArray = Utils.cloneArray( data );\n\n\t// Sort the array\n\tdataArray.sort( function ( a, b )\n\t{\n\t\tvar aw = a.get( CricketField.IS_WICKET );\n\t\tvar bw = b.get( CricketField.IS_WICKET );\n\n\t\tif ( aw && !bw )\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\telse if ( !aw && bw )\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar ar = a.get( CricketField.CREDIT );\n\t\t\tvar br = b.get( CricketField.CREDIT );\n\t\t\treturn ar - br;\n\t\t}\n\t\treturn 0;\n\t} );\n\n\t// Determine what variant of graph this is: left only, right only or mix\n\tvar hasRight = false;\n\tvar hasLeft = false;\n\tfor ( var i = 0, j = dataArray.length; i < j; i++ )\n\t{\n\t\tvar row = dataArray[i];\n\t\tvar handedness = row.get( CricketField.HANDEDNESS );\n\n\t\tif ( CricketHandedness.RIGHT === handedness )\n\t\t{\n\t\t\thasRight = true;\n\t\t}\n\t\telse if ( CricketHandedness.LEFT === handedness )\n\t\t{\n\t\t\thasLeft = true;\n\t\t}\n\n\t\tif ( hasLeft && hasRight )\n\t\t{\n\t\t\t// Early exit, as we now know this is a mix graph\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Set background based upon hasLeft/hasRight\n\tif ( hasLeft && hasRight )\n\t{\n\t\tthis.controller.setBackground( this.config.variants.mix.background );\n\t}\n\telse if ( hasLeft )\n\t{\n\t\tthis.controller.setBackground( this.config.variants.lh.background );\n\t}\n\telse if ( hasRight )\n\t{\n\t\tthis.controller.setBackground( this.config.variants.rh.background );\n\t}\n\n\t// Parse ball size\n\tvar sz = this.config.ballSize;\n\tvar idx = this.config.ballSize.indexOf('px');\n\tif ( idx !== -1 )\n\t{\n\t\tsz = +( this.config.ballSize.substr( 0, idx ) );\n\t}\n\tsz /= 2;\n\n\t// Render all the balls\n\tfor ( var i = 0, j = dataArray.length; i < j; i++ )\n\t{\n\t\tvar row = dataArray[i];\n\t\tvar xyz = row.get( CricketField.STUMPS );\n\n\t\tif ( xyz !== undefined )\n\t\t{\n\t\t\txyz = db.normalise( xyz );\n\n\t\t\tif ( xyz.x > -999 && xyz.y > -999 && xyz.z > -999 )\n\t\t\t{\n\t\t\t\t// Flip data for lefties\n\t\t\t\tif ( ( CricketHandedness.LEFT === row.get( CricketField.HANDEDNESS ) ) && hasRight )\n\t\t\t\t{\n\t\t\t\t\txyz.y = -xyz.y;\n\t\t\t\t}\n\n\t\t\t\tvar runs = row.get( CricketField.CREDIT );\n\t\t\t\tvar screenPos = this.config.projection.project( xyz );\n\n\t\t\t\tvar colorKey;\n\t\t\t\tif ( row.get( CricketField.IS_WICKET ) )\n\t\t\t\t{\n\t\t\t\t\tcolorKey = 'w';\n\t\t\t\t}\n\t\t\t\telse if ( runs == 0 )\n\t\t\t\t{\n\t\t\t\t\tcolorKey = 'd';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar ww = row.get( CricketField.WW );\n\t\t\t\t\tif ( ww !== undefined )\n\t\t\t\t\t{\n\t\t\t\t\t\tvar ly = ww.y;\n\t\t\t\t\t\tif ( ly > -999 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar leg = ly > 0;\n\t\t\t\t\t\t\tif ( CricketHandedness.LEFT === row.get( CricketField.HANDEDNESS ) )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tleg = !leg;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( runs >= 4 )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcolorKey = leg ? 'lb' : 'ob';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcolorKey = leg ? 'l' : 'o';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar img = this.config.ballImagePath + this.config.ballSize + '/phe_' + this.config.colors[ colorKey ] + '_ball.png';\n\t\t\t\tctx.r.image( img, screenPos.x - sz, screenPos.y - sz, sz * 2, sz * 2 );\n\t\t\t}\n\t\t}\n\t}\n}"}}},"RaphaelBowlSpeedsRenderer":{"Documentation":{"description":"***********","tags":[]},"Source":"PULSE.RaphaelBowlSpeedsRenderer = function ( config )\n{\n\tthis.config = config;\n\tthis.selected = -1;\n\tthis.stickies = [];\n}","prototype":{"render":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"db"},{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"ctx"}]},"Source":"PULSE.RaphaelBowlSpeedsRenderer.prototype.render = function ( db, data, ctx )\n{\n\tthis.db = db;\n\tthis.data = data;\n\tthis.ctx = ctx;\n\tthis.selected = -1;\n\tthis.stickies = [];\n\n\t// Prepare the data\n\t// Place balls into bowler buckets\n\tthis.bowlerData = {};\n\tthis.wicketData = {};\n\tthis.maxPoints = 20;\n\n\tfor ( var i = 0, j = this.data.length; i < j; i++ )\n\t{\n\t\tvar row = this.data[i];\n\t\tvar bowler = this.db.lookupPlayer( row.get( CricketField.BOWLER ) );\n\t\tvar speed = row.get( CricketField.BOWL_SPEED );\n\n\t\tif ( !Utils.isNullish( bowler ) && speed >= 10 )\n\t\t{\n\t\t\t// Convert speed to units currently in use\n\t        if ( PULSE.SpeedModeController.mode === PULSE.SpeedModeController.MODE_KMH )\n\t        {\n\t        \tspeed = PULSE.SpeedModeController.mpsToKmh( speed );\n\t        }\n\n\t\t\t// Handle speed data for this bowler\n\t\t\tvar bd = this.bowlerData[ bowler ];\n\t\t\tif ( bd === undefined )\n\t\t\t{\n\t\t\t\tbd = [];\n\t\t\t\tthis.bowlerData[ bowler ] = bd;\n\t\t\t}\n\t\t\tbd.push( speed );\n\n\t\t\t// Ensure we keep track of the lengthiest series\n\t\t\tif ( bd.length > this.maxPoints )\n\t\t\t{\n\t\t\t\tthis.maxPoints = bd.length;\n\t\t\t}\n\n\t\t\t// Handle a wicket fall\n\t\t\tif ( row.get( CricketField.IS_WICKET ) )\n\t\t\t{\n\t\t\t\tvar wf = this.wicketData[ bowler ];\n\t\t\t\tif ( wf === undefined )\n\t\t\t\t{\n\t\t\t\t\twf = [];\n\t\t\t\t\tthis.wicketData[ bowler ] = wf;\n\t\t\t\t}\n\t\t\t\twf.push( { x:bd.length, y:speed } );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Get the maximum bowler name width, so we can adjust the key/graph width\n\tthis.maxWidth = 90;\n\tfor ( var bowler in this.bowlerData )\n\t{\n\t\tvar temp = this.ctx.r.text( 0, 0, bowler ).attr( this.config.font );\n\t\tvar size = temp.getBBox();\n\t\tif ( size.width > this.maxWidth )\n\t\t{\n\t\t\tthis.maxWidth = size.width;\n\t\t}\n\t\ttemp.remove();\n\t}\n\n\tthis.draw();\n}"},"draw":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.RaphaelBowlSpeedsRenderer.prototype.draw = function ()\n{\n\tthis.ctx.r.clear();\n\tthis.bowlerObjects = [];\n\n\t// Draw key shading box\n\tvar keyMarginR = this.config.keyMarginR ? this.config.keyMarginR : this.config.keyMargin;\n\tvar boxWidth = this.maxWidth + this.config.keyMargin + keyMarginR;\n\n\tthis.ctx.r.rect( this.config.width - boxWidth, 0, boxWidth, this.config.height )\n\t          .attr( { fill:this.config.keyFill.color, opacity:this.config.keyFill.opacity,\n\t        \t       stroke:'none' } );\n\n\t// And size the x-axis\n\tthis.config.xAxis.end = this.config.width - boxWidth - ( 2 * this.config.keyMargin );\n\n\t// Dynamically set the xAxis range\n\tthis.config.xAxis.max = this.maxPoints;\n\n\t// Draw the axes\n\tthis.config.xAxis.font = this.config.font;\n\tthis.config.yAxis.font = this.config.font;\n\tthis.config.xAxis.drawTo( this.ctx.r, true );\n\tthis.config.yAxis.drawTo( this.ctx.r, false );\n\n\t// Now create objects for each bowler's stats\n\tvar y = 20;\n\tvar i = 0;\n\tvar selectedBowler;\n\tfor ( var bowler in this.bowlerData )\n\t{\n\t\tvar bowlerObjects = {};\n\n\t\tvar speeds = this.bowlerData[ bowler ];\n\t\tvar falls = this.wicketData[ bowler ];\n\t\tvar stats = Utils.getStats( speeds );\n\n\t\t// Create name label\n\t\tbowlerObjects.name = this.ctx.r.text( this.config.width - keyMarginR, PULSE.Browser.y( y ), bowler )\n\t\t                               .attr( this.config.font )\n\t\t                               .attr( { 'text-anchor':'end', stroke:'none' } );\n\n\t\ty += 15;\n\n\t\t// Create speeds label\n\t\tbowlerObjects.speeds = this.ctx.r.text( this.config.width - keyMarginR, PULSE.Browser.y( y ),\n\t\t\t\t\t\t\t\t\t\t\t\tstats.mean.toFixed( 1 ) + ' / ' + stats.maximum.toFixed( 1 ) )\n\t\t\t\t\t\t\t\t\t\t .attr( this.config.font )\n\t\t\t\t\t\t\t\t\t\t .attr( { 'text-anchor':'end', stroke:'none' } );\n\n\t\ty += 27;\n\n\t\t// Create stickies background\n\t\tbowlerObjects.bg = this.ctx.r.rect( this.config.width - boxWidth + ( this.config.keyMargin / 2 ),\n\t\t\t\t\t\t\t\t\t\t    y - 52,\tboxWidth - keyMarginR, 37 )\n\t\t\t\t\t\t\t\t     .attr( { fill:'#fff', stroke:'none', opacity:0 } );\n\n\t\t// Create the line and wicket set, adding them to the container\n\t\tthis.renderSeries( bowlerObjects,\n\t\t\t\tthis.config.boxWhisker, this.ctx.r, bowler, speeds, falls, this.config.colors[i], i );\n\n\t\t// Add Raphael object container to list of containers\n\t\tthis.bowlerObjects.push( bowlerObjects );\n\n\t\t// Maximum of 8 bowlers\n\t\tif ( ++i > 7 )\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tthis.bowlerCount = i;\n\n\t// Finally drive an initial updateToSelection to set colors and thicknesses\n\tthis.updateToSelection();\n\n\t//render background\n\tthis.controller.setBackground( this.config.background );\n}"},"updateToSelection":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.RaphaelBowlSpeedsRenderer.prototype.updateToSelection = function ()\n{\n\tfor ( var bowler = 0; bowler < this.bowlerCount; bowler++ )\n\t{\n\t\tvar color = this.getColor( this.config.colors[bowler], bowler, this.selected, this.stickies );\n\t\tvar bo = this.bowlerObjects[ bowler ];\n\t\tvar sticky = Utils.isInArray( this.stickies, bowler );\n\n\t\t// Calculate sizes, colours and focus\n\t\tvar width = 2;\n\t\tvar marker = 3;\n\t\tvar wicketStroke = '#000';\n\t\tvar front = false;\n\n\t\tif ( this.selected !== -1 )\n\t\t{\n\t\t\tif ( this.selected === bowler || sticky )\n\t\t\t{\n\t\t\t\twidth = 3;\n\t\t\t\tmarker = 4;\n\t\t\t\tfront = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\twidth = 1;\n\t\t\t\twicketStroke = '#444';\n\t\t\t}\n\t\t}\n\n\t\t// Update line rendering\n\t\tbo.line.animate( { stroke:color, 'stroke-width':width, opacity:1 },\n\t\t\t\t\t\t PULSE.RaphaelBowlSpeedsRenderer.ANIM_PERIOD );\n\n\t\t// Update wicket rendering\n\t\tif ( bo.wickets.length > 0 )\n\t\t{\n\t\t\tbo.wickets.animate( { stroke:wicketStroke, fill:color, r:marker },\n\t\t\t\t\t\t\t\tPULSE.RaphaelBowlSpeedsRenderer.ANIM_PERIOD );\n\t\t}\n\n\t\t// Bring to front if we need to\n\t\tif ( front )\n\t\t{\n\t\t\tbo.line.toFront();\n\t\t\tbo.wickets.toFront();\n\t\t}\n\n\t\t// Update label rendering\n\t\tvar color2 = this.getColor( '#fff', bowler, this.selected, this.stickies, '#bbb' );\n\t\tbo.name.animate( { fill:color }, PULSE.RaphaelBowlSpeedsRenderer.ANIM_PERIOD );\n\t\tbo.speeds.animate( { fill:color2 }, PULSE.RaphaelBowlSpeedsRenderer.ANIM_PERIOD );\n\n\t\t// Update sticky rendering\n\t\tbo.bg.animate( { opacity: sticky ? 0.1 : 0 }, PULSE.RaphaelBowlSpeedsRenderer.ANIM_PERIOD );\n\t}\n}"},"onMouse":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"event"}]},"Source":"PULSE.RaphaelBowlSpeedsRenderer.prototype.onMouse = function ( event )\n{\n\t// Get XY and then infer bowler selection index\n\tvar xy = Utils.getXY( event );\n\tvar selection = -1;\n\n\tif ( xy !== undefined && xy.x > 490 &&\n\t\t\t( !this.config.keyMarginR || xy.x < this.config.width - this.config.keyMarginR ) )\n\t{\n\t\tselection = Math.round( ( xy.y - 27 ) / 42 );\n\t\tif ( selection >= this.bowlerCount )\n\t\t{\n\t\t\tselection = -1;\n\t\t}\n\t}\n\n\tvar update = false;\n\tif ( 'mousemove' === event.type )\n\t{\n\t\tif ( this.selected !== selection )\n\t\t{\n\t\t\tthis.selected = selection;\n\t\t\tupdate = true;\n\t\t}\n\t}\n\telse if ( 'mousedown' === event.type )\n\t{\n\t\tthis.stickies = Utils.toggleExistence( this.stickies, selection );\n\t\tupdate = true;\n\t}\n\n\tif ( update )\n\t{\n\t\tthis.updateToSelection();\n\t}\n}"},"getColor":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"color"},{"title":"param","description":null,"type":null,"name":"index"},{"title":"param","description":null,"type":null,"name":"selection"},{"title":"param","description":null,"type":null,"name":"others"},{"title":"param","description":null,"type":null,"name":"alt"}]},"Source":"PULSE.RaphaelBowlSpeedsRenderer.prototype.getColor = function ( color, index, selection, others, alt )\n{\n\tif ( selection === -1 || selection === index || Utils.isInArray( others, index ) )\n\t{\n\t\treturn color;\n\t}\n\telse if ( alt !== undefined )\n\t{\n\t\treturn alt;\n\t}\n\telse\n\t{\n\t\treturn '#888';\n\t}\n}"},"renderSeries":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"container"},{"title":"param","description":null,"type":null,"name":"boxWhisker"},{"title":"param","description":null,"type":null,"name":"r"},{"title":"param","description":null,"type":null,"name":"bowler"},{"title":"param","description":null,"type":null,"name":"speeds"},{"title":"param","description":null,"type":null,"name":"falls"},{"title":"param","description":null,"type":null,"name":"color"},{"title":"param","description":null,"type":null,"name":"index"}]},"Source":"PULSE.RaphaelBowlSpeedsRenderer.prototype.renderSeries =\n\tfunction ( container, boxWhisker, r, bowler, speeds, falls, color, index )\n{\n\tif ( boxWhisker )\n\t{\n\t\tthis.renderSeriesBW( container, r, bowler, speeds, falls, color, index );\n\t}\n\telse\n\t{\n\t\tthis.renderSeriesLine( container, r, bowler, speeds, falls, color, index );\n\t}\n}"},"renderSeriesLine":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"container"},{"title":"param","description":null,"type":null,"name":"r"},{"title":"param","description":null,"type":null,"name":"bowler"},{"title":"param","description":null,"type":null,"name":"speeds"},{"title":"param","description":null,"type":null,"name":"falls"},{"title":"param","description":null,"type":null,"name":"color"},{"title":"param","description":null,"type":null,"name":"index"}]},"Source":"PULSE.RaphaelBowlSpeedsRenderer.prototype.renderSeriesLine =\n\tfunction ( container, r, bowler, speeds, falls, color, index )\n{\n\tvar path = 'M';\n\tfor ( var i = 0, j = speeds.length; i < j; i++ )\n\t{\n\t\tif ( i > 0 )\n\t\t{\n\t\t\tpath += 'L';\n\t\t}\n\n\t\tvar x = this.config.xAxis.project( i + 1 );\n\t\tvar y = this.config.yAxis.project( speeds[i] );\n\n\t\tpath += x + ' ' + y;\n\t}\n\tcontainer.line = r.path( path ).attr( { fill:'none', opacity:0 } );\n\tcontainer.wickets = r.set();\n\n\tif ( falls !== undefined )\n\t{\n\t\tfor ( var i = 0, j = falls.length; i < j; i++ )\n\t\t{\n\t\t\tvar point = falls[i];\n\t\t\tvar x = this.config.xAxis.project( point.x );\n\t\t\tvar y = this.config.yAxis.project( point.y );\n\n\t\t\tcontainer.wickets.push( r.circle( x, y, 0 ) );\n\t\t}\n\t}\n}"},"renderSeriesBW":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"ctx"},{"title":"param","description":null,"type":null,"name":"bowler"},{"title":"param","description":null,"type":null,"name":"speeds"},{"title":"param","description":null,"type":null,"name":"falls"},{"title":"param","description":null,"type":null,"name":"color"},{"title":"param","description":null,"type":null,"name":"index"}]},"Source":"PULSE.RaphaelBowlSpeedsRenderer.prototype.renderSeriesBW = function ( ctx, bowler, speeds, falls, color, index )\n{\n\tvar fns = Utils.getFiveNumberSummary( speeds );\n\tvar hw = 10;\n\n\tvar values = [ fns.min, fns.lq, fns.median, fns.uq, fns.max ];\n\tvar projected = [];\n\tfor ( var i = 0, ilimit = values.length; i < ilimit; i++ )\n\t{\n\t\tprojected.push( this.config.yAxis.project( values[i] ) );\n\t}\n\n\tvar x = this.config.xAxis.project( ( index + 1 ) * 10 );\n\n\tctx.beginPath();\n\tctx.moveTo( x - hw, projected[0] );\n\tctx.lineTo( x + hw, projected[0] );\n\tctx.moveTo( x - hw, projected[4] );\n\tctx.lineTo( x + hw, projected[4] );\n\tctx.moveTo( x, projected[0] );\n\tctx.lineTo( x, projected[4] );\n\tctx.stroke();\n\n\tctx.rect( x - hw, projected[3], hw * 2, projected[1] - projected[3] );\n\tctx.fillStyle = 'blue';\n\tctx.fill();\n\n\tctx.moveTo( x - hw, projected[2] );\n\tctx.lineTo( x + hw, projected[2] );\n\tctx.stroke();\n}"}}},"RaphaelPartnershipsRenderer":{"Documentation":{"description":"************","tags":[]},"Source":"PULSE.RaphaelPartnershipsRenderer = function ( config )\n{\n\tthis.config = config;\n}","prototype":{"render":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"db"},{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"ctx"}]},"Source":"PULSE.RaphaelPartnershipsRenderer.prototype.render = function ( db, data, ctx )\n{\n\tctx.r.clear();\n\n\tthis.controller.setBackground( this.config.background );\n\n\tvar stats = { b1name:null, b2name:null, b1runs:0, b2runs:0, pruns:0 };\n\tvar first = true;\n\tvar y = 0;\n\n\tfor ( var i = 0, j = data.length; i < j; i++ )\n\t{\n\t\tvar row = data[i];\n\n\t\tvar facing = db.lookupPlayer( row.get( CricketField.BATSMAN ) );\n\t\tvar nonfacing = db.lookupPlayer( row.get( CricketField.NF_BATSMAN ) );\n\n\t\tif ( Utils.isNullish( facing ) || Utils.isNullish( nonfacing ) )\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n        if ( ( facing !== stats.b1name && facing !== stats.b2name ) ||\n        \t ( nonfacing !== stats.b1name && nonfacing !== stats.b2name ) )\n        {\n         \tif ( first )\n         \t{\n         \t\tfirst = false;\n         \t}\n         \telse\n         \t{\n         \t\tthis.renderPartnership( ctx.r, stats, y++ );\n         \t}\n\n        \tif ( nonfacing === stats.b1name )\n        \t{\n        \t    stats.b1name = nonfacing;\n        \t    stats.b2name = facing;\n        \t}\n        \telse\n        \t{\n        \t\tstats.b1name = facing;\n        \t\tstats.b2name = nonfacing;\n        \t}\n\n        \tstats.b1runs = 0;\n        \tstats.b2runs = 0;\n        \tstats.pruns = 0;\n        }\n\n        var credit = +row.get( CricketField.CREDIT );\n        if ( stats.b1name === facing )\n        {\n            stats.b1runs += credit;\n        }\n        else\n        {\n        \tstats.b2runs += credit;\n        }\n\n        stats.pruns += ( +row.get( CricketField.RUNS ) );\n    }\n\n\tthis.renderPartnership( ctx.r, stats, y++ );\n}"},"renderPartnership":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"r"},{"title":"param","description":null,"type":null,"name":"stats"},{"title":"param","description":null,"type":null,"name":"pship"}]},"Source":"PULSE.RaphaelPartnershipsRenderer.prototype.renderPartnership = function ( r, stats, pship )\n{\n\tif ( pship < 10 )\n\t{\n\t\tvar y = this.config.ystart + ( pship * this.config.yspacing );\n\t\tvar x = this.config.width / 2;\n\n\t\t// Draw bars\n\t\tvar gradient = '270-' + this.config.bars.colorStops[0] + '-' + this.config.bars.colorStops[1];\n\t\tvar gradientSet = r.set();\n\n\t\tvar yshift = 0;\n\t\tif ( this.config.bars.yshift )\n\t\t{\n\t\t\tyshift = this.config.bars.yshift;\n\t\t}\n\n\t\tvar bl;\n\t\tif ( stats.b1runs > 0 )\n\t\t{\n\t\t\tbl = this.barLength( stats.b1runs );\n\n\t\t\tgradientSet.push( r.circle( x-this.config.tabs[1]-bl, y + yshift, this.config.bars.width / 2 ) );\n\t\t\tgradientSet.push( r.rect( x-this.config.tabs[1] - bl, y + yshift - (this.config.bars.width/2),\n\t\t\t\t\t\t\t  bl, this.config.bars.width ) );\n\t\t}\n\n\t\tif ( stats.b2runs > 0 )\n\t\t{\n\t\t\tbl = this.barLength( stats.b2runs );\n\n\t\t\tgradientSet.push( r.circle( x+this.config.tabs[1]+bl, y + yshift, this.config.bars.width / 2 ) );\n\t\t\tgradientSet.push( r.rect( x+this.config.tabs[1], y + yshift - (this.config.bars.width/2),\n\t\t\t\t\t\t\t  bl, this.config.bars.width ) );\n\t\t}\n\n\t\tgradientSet.attr( { fill:gradient, stroke:'none' } );\n\n\t\t// Draw text labels\n\t\tattr = this.config.otherText.font;\n\t\tattr.fill = this.config.otherText.style;\n\t\tattr.stroke = 'none';\n\t\tattr['text-anchor'] = 'start';\n\n\t\tr.text( x+this.config.tabs[0], PULSE.Browser.y( y ), stats.b2runs ).attr( attr );\n\t\tr.text( x+this.config.tabs[2], PULSE.Browser.y( y ), stats.b2name ).attr( attr );\n\n\t\tattr['text-anchor'] = 'end'\n\n\t\tr.text( x-this.config.tabs[0], PULSE.Browser.y( y ), stats.b1runs ).attr( attr );\n\t\tr.text( x-this.config.tabs[2], PULSE.Browser.y( y ), stats.b1name ).attr( attr );\n\n\t\tattr = this.config.pshipText.font;\n\t\tattr.fill = this.config.pshipText.style;\n\t\tattr['text-anchor'] = 'middle'\n\t\tr.text( x, PULSE.Browser.y( y ), stats.pruns ).attr( attr );\n\t}\n}"},"barLength":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"runs"}]},"Source":"PULSE.RaphaelPartnershipsRenderer.prototype.barLength = function ( runs )\n{\n\treturn Math.min( runs + this.config.bars.minLength, this.config.bars.maxLength );\n}"}}},"RaphaelRunsPerOverRenderer":{"Documentation":{"description":"*************","tags":[]},"Source":"PULSE.RaphaelRunsPerOverRenderer = function ( config )\n{\n\tthis.config = config;\n}","prototype":{"render":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"db"},{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"ctx"}]},"Source":"PULSE.RaphaelRunsPerOverRenderer.prototype.render = function ( db, data, ctx )\n{\n\tthis.db = db;\n\tthis.variant = obtainVariant( this.config, this.db );\n\tthis.data = this.prepareData( data );\n\tthis.r = ctx.r;\n\n\tthis.tooltipData = undefined;\n\tthis.draw();\n}"},"prepareData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.RaphaelRunsPerOverRenderer.prototype.prepareData = function ( data )\n{\n\tthis.tooltipDataCache = {};\n\n\tvar overStats = [];\n\n\tvar lastOver = 0;\n\tvar stats = { r:0, w:0, dismissed:[] };\n\tfor ( var i = 0, j = data.length; i < j; i++ )\n\t{\n\t\tvar row = data[i];\n\n\t\tvar over = +row.get( CricketField.OVER );\n\t\tif ( over !== lastOver )\n\t\t{\n\t\t\t// New over\n\t\t\t// If this isn't the first over, render the previous one\n\t\t\tif ( over !== 1 )\n\t\t\t{\n\t\t\t\toverStats.push( this.prepareRecord( lastOver, stats ) );\n\t\t\t}\n\n\t\t\tlastOver = over;\n\n\t\t\t// Reset stats\n\t\t\tstats.r = 0;\n\t\t\tstats.w = 0;\n\t\t\tstats.dismissed = [];\n\t\t}\n\n\t\tstats.r += ( +row.get( CricketField.RUNS ) );\n\t\tif ( row.get( CricketField.IS_WICKET ) )\n\t\t{\n\t\t\tstats.w++;\n\t\t\tstats.dismissed.push( row.get( CricketField.DISMISSED ) );\n\t\t}\n\t}\n\n\toverStats.push( this.prepareRecord( lastOver, stats ) );\n\treturn overStats;\n}"},"prepareRecord":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"over"},{"title":"param","description":null,"type":null,"name":"stats"}]},"Source":"PULSE.RaphaelRunsPerOverRenderer.prototype.prepareRecord = function ( over, stats )\n{\n\tvar x = this.variant.xAxis.project( over );\n\tvar y = this.variant.yAxis.project( stats.r );\n\n\t// Add to tooltip cache\n\tvar ix = Math.round( x );\n\tvar iy = Math.round( y );\n\tthis.tooltipDataCache[ ix ] = { x:ix, y:iy, dismissed:stats.dismissed };\n\n\treturn { x:x, y:y, w:stats.w };\n}"},"draw":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.RaphaelRunsPerOverRenderer.prototype.draw = function ()\n{\n\tthis.r.clear();\n\n\t// Draw axes\n\tthis.variant.xAxis.font = this.config.font;\n\tthis.variant.yAxis.font = this.config.font;\n\tthis.variant.xAxis.drawTo( this.r, true );\n\tthis.variant.yAxis.drawTo( this.r, false );\n\n\t// Iterate over bars\n\tvar y0 = this.variant.yAxis.project( 0 ) - 1;\n\tvar ymax = this.variant.yAxis.project( this.variant.yAxis.max );\n\n\tfor ( var i = 0, ilimit = this.data.length; i < ilimit; i++ )\n\t{\n\t\tvar record = this.data[i];\n\n\t\t// Calculate fraction of total y axis height\n\t\tvar fraction = ( record.y - y0 ) / ( ymax - y0 );\n\t\tif ( fraction > 1 )\n\t\t{\n\t\t\tfraction = 1;\n\t\t}\n\n\t\tvar color = Utils.intermediateColor( this.variant.bars.colorStops[0],\n\t\t\t\t\t\t\t\t\t\t\t this.variant.bars.colorStops[1], fraction );\n\t\tvar fill = '90-' + this.variant.bars.colorStops[0] + '-' + color;\n\n\t\tif ( y0 - record.y > 0 )\n\t\t{\n\t\t\tthis.r.rect( record.x - ( this.variant.bars.width / 2 ), record.y,\n\t\t\t\t\t     this.variant.bars.width, y0 - record.y )\n\t\t\t\t  .attr( { fill:fill, stroke:'none' } );\n\t\t}\n\n\t\tfor ( var j = 0, jlimit = record.w; j < jlimit; j++ )\n\t\t{\n\t\t\tthis.r.circle( record.x, record.y - ( j * this.variant.bars.fowsize ), this.variant.bars.fowsize / 2 )\n\t\t\t      .attr( { stroke:this.config.fow.stroke, fill:this.config.fow.fill, 'stroke-width':1 } );\n\t\t}\n\t}\n\t//render background\n\tthis.controller.setBackground( this.config.background );\n}"},"updateTooltip":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.RaphaelRunsPerOverRenderer.prototype.updateTooltip = function ()\n{\n\tif ( this.tooltipData )\n\t{\n\t\t// Remove any current tooltip set\n\t\tif ( this.ttSet )\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tthis.ttSet.remove();\n\t\t\t}\n\t\t\tcatch ( exception )\n\t\t\t{\n\t\t\t\t// Potentially tries to remove an object already cleared\n\t\t\t}\n\t\t}\n\n\t\tvar cfg = this.config.tooltip;\n\t\tvar anchorv = 'n';\n\t\tvar anchorh = 'w';\n\n\t\tif ( this.tooltipData.x > this.config.width / 2 )\n\t\t{\n\t\t\tanchorh = 'e';\n\t\t}\n\t\tif ( this.tooltipData.y > this.config.height / 2 )\n\t\t{\n\t\t\tanchorv = 's';\n\t\t}\n\n\t\tcfg.position = { x:this.tooltipData.x, y:this.tooltipData.y, anchor:anchorv + anchorh };\n\n\t\t// Create a new set and build Raphael object stack for a text field in it\n\t\tthis.ttSet = this.r.set();\n\t\tvar tf = new PULSE.RaphaelTextField( cfg );\n\t\ttf.setLines( this.tooltipData.dismissed );\n\t\ttf.render( this.r, this.ttSet );\n\t}\n\telse\n\t{\n\t\tthis.ttSet.animate( { opacity:0 }, 1000 );\n\t}\n}"},"onMouse":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"event"}]},"Source":"PULSE.RaphaelRunsPerOverRenderer.prototype.onMouse = function ( event )\n{\n\t// Get XY and then infer over bar\n\tvar xy = Utils.getXY( event );\n\tvar tt = this.findNearbyTooltip( xy );\n\n\tif ( tt !== this.tooltipData )\n\t{\n\t\tthis.tooltipData = tt;\n\t\tthis.updateTooltip();\n\t}\n}"},"findNearbyTooltip":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"xy"}]},"Source":"PULSE.RaphaelRunsPerOverRenderer.prototype.findNearbyTooltip = function ( xy )\n{\n\tif ( xy )\n\t{\n\t\tfor ( var x = xy.x - ( this.variant.bars.width / 2 );\n\t\t          x <= xy.x + ( this.variant.bars.width / 2 ); x++ )\n\t\t{\n\t\t\tvar tt = this.tooltipDataCache[ x ];\n\t\t\tif ( tt && tt.dismissed.length > 0 )\n\t\t\t{\n\t\t\t\treturn tt;\n\t\t\t}\n\t\t}\n\t}\n}"}}},"RaphaelRunRateRenderer":{"Documentation":{"description":"********","tags":[]},"Source":"PULSE.RaphaelRunRateRenderer = function ( config )\n{\n\tthis.config = config;\n}","prototype":{"render":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"db"},{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"ctx"}]},"Source":"PULSE.RaphaelRunRateRenderer.prototype.render = function ( db, data, ctx )\n{\n\tthis.db = db;\n\tthis.variant = obtainVariant( this.config, this.db );\n\tthis.data = this.prepareData( data );\n\tthis.ctx = ctx;\n\n\tctx.r.clear();\n\tthis.tooltipData = undefined;\n\tthis.tooltipLines = [ ctx.r.path(), ctx.r.path(), ctx.r.path(), ctx.r.path() ];\n\n\tthis.draw();\n}"},"prepareData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"PULSE.RaphaelRunRateRenderer.prototype.prepareData = function ( data )\n{\n\tthis.tooltipDataCache = {};\n\n\tvar inningsSeries = {};\n\n\tif ( data.length > 0 )\n\t{\n\t\t// Place data into innings buckets (for performance reasons, we should look at combining\n\t\t// this bucketisation with the actual data series creation below)\n\t\tvar inningsData = {};\n\t\tfor ( var i = 0, ilimit = data.length; i < ilimit; i++ )\n\t\t{\n\t\t\tvar row = data[i];\n\t\t\tvar innings = +row.get( CricketField.INNINGS );\n\n\t\t\t// Obtain or create bucket\n\t\t\tvar inningsDataItem = inningsData[ innings ];\n\t\t\tif ( inningsDataItem === undefined )\n\t\t\t{\n\t\t\t\tinningsDataItem = [];\n\t\t\t\tinningsData[ innings ] = inningsDataItem;\n\t\t\t}\n\n\t\t\t// Add item to bucket\n\t\t\tinningsDataItem.push( row );\n\t\t}\n\n\t\t// Keep track of maximum number of overs (for Test cricket)\n\t\tvar maxOvers = 0;\n\n\t\t// Get the participants\n\t\tvar participants = this.db.getParticipants();\n\n\n\t\t// determine the max\n\t\tfor ( var innings = 1; innings <= 4; innings++ )\n\t\t{\n\t\t\tvar inningsRecords = inningsData[ innings ];\n\t\t\tif ( inningsRecords === undefined || inningsRecords.length === 0 )\n\t\t\t{\n\t\t\t\t// Break out\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tvar lastOver = 0;\n\n\t\t\tfor ( var i = 0, j = inningsRecords.length; i < j; i++ )\n\t\t\t{\n\t\t\t\tvar row = inningsRecords[ i ];\n\t\t\t\tvar over = +row.get( CricketField.OVER );\n\n\t\t\t\tif ( over !== lastOver )\n\t\t\t\t{\n\t\t\t\t\tlastOver = over;\n\t\t\t\t}\n\n\t\t\t\t// Update max overs\n\t\t\t\tif ( over > maxOvers )\n\t\t\t\t{\n\t\t\t\t\tmaxOvers = over;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Scale the xAxis if need be\n\t\tthis.variant.xAxis.max = this.variant.xAxis.configuredMax;\n\t\tif ( maxOvers > this.variant.xAxis.max )\n\t\t{\n\t\t\tthis.variant.xAxis.max = maxOvers;\n\t\t}\n\n\t\t// END - determine the max\n\n\t\t// Now iterate over all all balls in each innings bucket\n\t\tfor ( var innings = 1; innings <= 4; innings++ )\n\t\t{\n\t\t\t// Get the participant name\n\t\t\tvar pIndex = this.db.getBattingTeamIndex( innings );\n\t\t\tvar pName = participants[ pIndex ].abbreviation;\n\n\t\t\tinningsSeries[ innings ] = [];\n\n\t\t\tvar inningsRecords = inningsData[ innings ];\n\t\t\tif ( inningsRecords === undefined || inningsRecords.length === 0 )\n\t\t\t{\n\t\t\t\t// Break out\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tvar stats = { runs:0, wickets:0, over:0 };\n\t\t\tvar lastOver = 0;\n\n\t\t\tfor ( var i = 0, j = inningsRecords.length; i < j; i++ )\n\t\t\t{\n\t\t\t\tvar row = inningsRecords[ i ];\n\t\t\t\tvar over = +row.get( CricketField.OVER );\n\n\t\t\t\tif ( over !== lastOver )\n\t\t\t\t{\n\t\t\t\t\t// New over\n\t\t\t\t\t// If this isn't the first over, add the previous one\n\t\t\t\t\tif ( over !== 1 )\n\t\t\t\t\t{\n\t\t\t\t\t\tinningsSeries[ innings ].push( this.prepareRecord( stats, pName ) );\n\t\t\t\t\t}\n\n\t\t\t\t\tlastOver = over;\n\n\t\t\t\t\t// Reset stats\n\t\t\t\t\tstats.wickets = 0;\n\t\t\t\t\tstats.over = over;\n\t\t\t\t}\n\n\t\t\t\tstats.runs += ( +row.get( CricketField.RUNS ) );\n\t\t\t\tif ( row.get( CricketField.IS_WICKET ) )\n\t\t\t\t{\n\t\t\t\t\tstats.wickets++;\n\t\t\t\t}\n\n\t\t\t\t// Update max overs\n\t\t\t\tif ( over > maxOvers )\n\t\t\t\t{\n\t\t\t\t\tmaxOvers = over;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add final stats\n\t\t\tinningsSeries[ innings ].push( this.prepareRecord( stats, pName ) );\n\t\t}\n\n\t\t// Scale the xAxis if need be\n\t\tthis.variant.xAxis.max = this.variant.xAxis.configuredMax;\n\t\tif ( maxOvers > this.variant.xAxis.max )\n\t\t{\n\t\t\tthis.variant.xAxis.max = maxOvers;\n\t\t}\n\t}\n\n\treturn inningsSeries;\n}"},"prepareRecord":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"stats"},{"title":"param","description":null,"type":null,"name":"participant"}]},"Source":"PULSE.RaphaelRunRateRenderer.prototype.prepareRecord = function ( stats, participant )\n{\n\tvar yvalue = this.getYValue( stats );\n\tvar x = this.variant.xAxis.project( stats.over );\n\tvar y = this.variant.yAxis.project( yvalue );\n\n\t// Add to tooltip cache\n\tvar ix = Math.round( x );\n\tvar iy = Math.round( y );\n\tvar xcache = this.tooltipDataCache[ ix ];\n\tif ( !xcache )\n\t{\n\t\txcache = { x:ix, xvalue:stats.over };\n\t\tthis.tooltipDataCache[ ix ] = xcache;\n\t}\n\txcache[ iy ] = { y:iy, yvalue:yvalue, participant:participant };\n\n\treturn { x:x, y:y, w:stats.wickets };\n}"},"draw":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.RaphaelRunRateRenderer.prototype.draw = function ()\n{\n\tthis.variant.xAxis.font = this.config.font;\n\tthis.variant.yAxis.font = this.config.font;\n\n\tthis.variant.xAxis.drawTo( this.ctx.r, true );\n\tthis.variant.yAxis.drawTo( this.ctx.r, false );\n\n\t// Now render each series\n\tvar flexikey = new PULSE.RaphaelFlexikey( this.config.flexikey );\n\tvar participants = this.db.getParticipants();\n\n\tvar gt = this.db.getMatchType();\n\tvar suffix = '';\n\n\tfor ( var i = 1; i <= 4; i++ )\n\t{\n\t\tvar thisInningsSeries = this.data[ i ];\n\n\t\tif ( thisInningsSeries === undefined || thisInningsSeries.length < 1 )\n\t\t{\n\t\t\t// Early exit\n\t\t\tbreak;\n\t\t}\n\n\t\tvar pIndex = this.db.getBattingTeamIndex( i );\n\t\tvar color;\n\t\tif ( i <= 2 )\n\t\t{\n\t\t\tcolor = participants[ pIndex ].primaryColor;\n\t\t\tsuffix = ' 1st inns';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcolor = participants[ pIndex ].secondaryColor;\n\t\t\tsuffix = ' 2nd inns';\n\t\t}\n\n\t\tthis.renderSeries( this.ctx.r, thisInningsSeries, color );\n\n\t\tvar label = participants[ pIndex ].fullName;\n\t\tif ( CricketMatchType.TEST === gt )\n\t\t{\n\t\t\tlabel += suffix;\n\t\t}\n\n\t\tflexikey.addEntry( label, color );\n\t}\n\t//render background\n\tthis.controller.setBackground( this.config.background );\n\n\t// Finally render the Flexikey\n\tflexikey.render( this.ctx.r );\n}"},"renderSeries":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"r"},{"title":"param","description":null,"type":null,"name":"series"},{"title":"param","description":null,"type":null,"name":"color"}]},"Source":"PULSE.RaphaelRunRateRenderer.prototype.renderSeries = function ( r, series, color )\n{\n\t// Create the line\n\tvar path = '';\n\tfor ( var i = 0, ilimit = series.length; i < ilimit; i++ )\n\t{\n\t\tvar item = series[i];\n\t\tif ( i === 0 )\n\t\t{\n\t\t\tpath += 'M';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpath += 'L';\n\t\t}\n\t\tpath += item.x + ' ' + item.y;\n\t}\n\tr.path( path ).attr( { 'stroke-width':3, stroke:color, fill:'none' } );\n\n\t// Create the wicket falls\n\tfor ( var i = 0, ilimit = series.length; i < ilimit; i++ )\n\t{\n\t\tvar item = series[i];\n\t\tif ( item.w > 0 )\n\t\t{\n\t\t\tfor ( var k = 0, l = item.w; k < l; k++ )\n\t\t\t{\n\t\t\t\tr.circle( item.x, item.y - ( k * this.config.fow.size ), this.config.fow.size / 2 )\n\t\t\t\t .attr( { 'stroke-width':1, stroke:this.config.fow.stroke, fill:color } );\n\t\t\t}\n\t\t}\n\t}\n}"},"onMouse":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"event"}]},"Source":"PULSE.RaphaelRunRateRenderer.prototype.onMouse = function ( event )\n{\n\t// Get XY and then infer over bar\n\tvar xy = Utils.getXY( event );\n\tvar tooltipData = this.findNearbyTooltip( xy );\n\n\tif ( this.tooltipData !== tooltipData )\n\t{\n\t\tthis.tooltipData = tooltipData;\n\t\tthis.updateTooltip();\n\t}\n}"},"updateTooltip":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.RaphaelRunRateRenderer.prototype.updateTooltip = function ()\n{\n\t// Remove any current tooltip set\n\tif ( this.ttSet )\n\t{\n\t\ttry\n\t\t{\n\t\t\tthis.ttSet.remove();\n\t\t}\n\t\tcatch ( exception )\n\t\t{\n\t\t\t// Potentially tries to remove an object already cleared\n\t\t}\n\t}\n\n\tvar idx = 0;\n\tif ( this.tooltipData )\n\t{\n\t\tif ( this.config.textField )\n\t\t{\n\t\t\tthis.ttSet = this.ctx.r.set();\n\t\t\tthis.tf = new PULSE.RaphaelTextField( this.config.textField );\n\t\t\tthis.tf.addLine( '<c:#bbb>Over </c>' + this.tooltipData.xvalue );\n\t\t}\n\n\t\tvar line = '';\n\t\tfor ( var ttditem in this.tooltipData )\n\t\t{\n\t\t\tif ( ttditem !== 'x' && ttditem !== 'xvalue' )\n\t\t\t{\n\t\t\t\tvar t = this.tooltipData[ttditem];\n\n\t\t\t\tvar path = 'M' + this.variant.xAxis.start + ' ' + t.y +\n\t\t\t\t           'L' + this.tooltipData.x + ' ' + t.y +\n\t\t\t\t           'L' + this.tooltipData.x + ' ' + this.variant.yAxis.start;\n\n\t\t\t\tthis.tooltipLines[idx].attr( { stroke:'#fff', opacity:0.6, path:path,\n\t\t\t\t\t                           'stroke-width':2 } );\n\n\t\t\t\tline += '<c:#bbb>' + t.participant + ' </c>' + this.format( t.yvalue ) + ', ';\n\t\t\t\tidx++;\n\t\t\t}\n\t\t}\n\n\t\tif ( this.tf )\n\t\t{\n\t\t\tif ( line.length > 2 )\n\t\t\t{\n\t\t\t\tline = line.substr( 0, line.length - 2 );\n\t\t\t}\n\t\t\tthis.tf.addLine( line );\n\t\t\tthis.tf.render( this.ctx.r, this.ttSet );\n\t\t}\n\t}\n\n\t// Clear out unused lines\n\tfor ( var idx2 = idx; idx2 < this.tooltipLines.length; idx2++ )\n\t{\n\t\tthis.tooltipLines[idx2].attr( { path:'M0 0 L0 0' } );\n\t}\n}"},"findNearbyTooltip":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"xy"}]},"Source":"PULSE.RaphaelRunRateRenderer.prototype.findNearbyTooltip = function ( xy )\n{\n\tif ( xy )\n\t{\n\t\tif ( xy.x <= this.variant.xAxis.end && xy.x >= this.variant.xAxis.start &&\n\t\t     xy.y >= this.variant.yAxis.end && xy.y <= this.variant.yAxis.start )\n\t\t{\n\t\t\tvar search = xy.x;\n\n\t\t\twhile ( search >= this.variant.xAxis.start )\n\t\t\t{\n\t\t\t\tif ( this.tooltipDataCache[ search ] )\n\t\t\t\t{\n\t\t\t\t\treturn this.tooltipDataCache[ search ];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// If there was no data for this x value, try using one to the left\n\t\t\t\t\tsearch--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"},"getYValue":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"item"}]},"Source":"PULSE.RaphaelRunRateRenderer.prototype.getYValue = function ( item )\n{\n\treturn item.runs / item.over;\n}"},"format":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"value"}]},"Source":"PULSE.RaphaelRunRateRenderer.prototype.format = function ( value )\n{\n\treturn value.toFixed( 2 ) + ' <c:#bbb>rpo</c>';\n}"}}},"RaphaelWormsRenderer":{"Documentation":{"description":"*****","tags":[]},"Source":"PULSE.RaphaelWormsRenderer = function ( config )\n{\n\tthis.config = config;\n}","prototype":{"format":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"value"}]},"Source":"PULSE.RaphaelWormsRenderer.prototype.format = function ( value )\n{\n\treturn value + ' <c:#bbb>runs</c>';\n}"},"getYValue":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"item"}]},"Source":"PULSE.RaphaelWormsRenderer.prototype.getYValue = function ( item )\n{\n\treturn item.runs;\n}"}}},"RaphaelWinLikelihoodRenderer":{"Documentation":{"description":"**************","tags":[]},"Source":"PULSE.RaphaelWinLikelihoodRenderer = function ( config )\n{\n\tthis.config = config;\n\tthis.font = Utils.cloneObject( config.font );\n}","prototype":{"render":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"db"},{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"ctx"}]},"Source":"PULSE.RaphaelWinLikelihoodRenderer.prototype.render = function ( db, data, ctx )\n{\n\tthis.db = db;\n\tthis.data = data;\n\tthis.ctx = ctx;\n\n\tthis.ctx.r.clear();\n\n\tthis.tooltipData = undefined;\n\tthis.dismissalData = undefined;\n\tthis.tooltipDataCache = {};\n\tthis.draw();\n}"},"draw":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.RaphaelWinLikelihoodRenderer.prototype.draw = function ()\n{\n\tvar currentInnings = 0;\n\tvar currentOver = 0;\n\tvar dismissals = [];\n\tvar x = 1;\n\tvar battingIndex = 0;\n\tvar series = [ [], [], [] ];\n\n\tvar likelihoods;\n\tvar lastLikelihoods;\n\tfor ( var i = 0, j = this.data.length; i < j; i++ )\n\t{\n\t\tvar row = this.data[ i ];\n\n\t\tlikelihoods = row.get( CricketField.WIN_LIKELIHOODS );\n\t\tif ( likelihoods === undefined )\n\t\t{\n\t\t\t// No likelihoods for this record, so simply copy the last one\n\t\t\tlikelihoods = lastLikelihoods;\n\t\t}\n\n\t\tif ( likelihoods === undefined )\n\t\t{\n\t\t\t// No likelihoods yet, so break\n\t\t\tcontinue;\n\t\t}\n\n\t\tvar over = row.get( CricketField.OVER );\n\t\tif ( over !== currentOver )\n\t\t{\n\t\t\tif ( currentOver != 0 )\t// Allow coercion\n\t\t\t{\n\t\t\t\tthis.addData( series, x, likelihoods, battingIndex, dismissals );\n\t\t\t}\n\n\t\t\tdismissals = [];\n\t\t\tcurrentOver = over;\n\t\t\tx++;\n\t\t}\n\n\t\tvar innings = row.get( CricketField.INNINGS );\n\t\tif ( innings !== currentInnings )\n\t\t{\n\t\t\tcurrentInnings = innings;\n\t\t\tbattingIndex = this.db.getBattingTeamIndex( innings );\n\t\t}\n\n\t\tif ( row.get( CricketField.IS_WICKET ) )\n\t\t{\n\t\t\tdismissals.push( row.get( CricketField.DISMISSED ) );\n\t\t}\n\n\t\tlastLikelihoods = likelihoods;\n\t}\n\n\tif ( likelihoods !== undefined )\n\t{\n\t\tthis.addData( series, x, likelihoods, battingIndex, dismissals );\n\t}\n\n\t// Scale the x-axis if necessary\n\tthis.config.xAxis.max = this.config.xAxis.configuredMax;\n\tif ( x > this.config.xAxis.max )\n\t{\n\t\tthis.config.xAxis.max = x;\n\t}\n\n\t// Also scale back the y-axis if there will be 3 items in the key\n\tthis.config.yAxis.end = this.config.yAxis.configuredEnd;\n\tvar testMatch = ( CricketMatchType.TEST === this.db.getMatchType() );\n\tif ( testMatch )\n\t{\n\t\t// Shift y-axis down to allow for larger key\n\t\tthis.config.yAxis.end += 30;\n\t}\n\n\t// Draw the axes\n\tthis.config.xAxis.font = this.font;\n\tthis.config.yAxis.font = this.font;\n\tthis.config.xAxis.drawTo( this.ctx.r, true );\n\tthis.config.yAxis.drawTo( this.ctx.r, false );\n\n\t// Create flexikey\n\tvar flexikey = new PULSE.RaphaelFlexikey( this.config.flexikey );\n\n\t// Render the draw series first, if we need to\n\tif ( testMatch )\n\t{\n\t\tthis.renderSeries( this.ctx.r, series[1], this.config.drawColor, 'Draw' );\n\t}\n\n\t// Now draw the team series\n\tvar participants = this.db.getParticipants();\n\tfor ( var team = 0; team < 2; team++ )\n\t{\n\t\tvar color = participants[ team ].primaryColor;\n\t\tthis.renderSeries( this.ctx.r, series[ 2 * team ], color, participants[ team ].fullName );\n\t\tflexikey.addEntry( participants[ team ].fullName, color );\n\n\t\t// Add the draw item to the key now\n\t\tif ( team === 0 && testMatch )\n\t\t{\n\t\t\tflexikey.addEntry( 'Draw', this.config.drawColor );\n\t\t}\n\t}\n\n\t// Render the Flexikey\n\tflexikey.render( this.ctx.r );\n\n\t// Finally create tooltip objects\n\tvar bgAttr = { fill:this.config.tooltips.background.color, stroke:'none', opacity:0 };\n\n\tvar textAttr = this.config.font;\n\ttextAttr.fill = this.config.tooltips.foreground;\n\ttextAttr.stroke = 'none';\n\ttextAttr.opacity = 0;\n\n\tthis.tooltipObjects = { line          : this.ctx.r.path()\n\t\t\t                                          .attr( { stroke:this.config.tooltips.background.color,\n\t\t\t                                        \t       'stroke-width':2,\n\t\t\t                                        \t       fill:'none',\n\t\t\t                                        \t       opacity:0 } ),\n\t\t\t                bgs          : [ this.ctx.r.rect().attr( bgAttr ),\n\t\t\t                                 this.ctx.r.rect().attr( bgAttr ),\n\t\t\t                                 this.ctx.r.rect().attr( bgAttr ) ],\n\t\t\t                texts        : [ this.ctx.r.text().attr( textAttr ),\n\t\t\t                                 this.ctx.r.text().attr( textAttr ),\n\t\t\t                                 this.ctx.r.text().attr( textAttr ) ] };\n    this.dismissal = this.ctx.r.set();\n}"},"updateTooltip":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.RaphaelWinLikelihoodRenderer.prototype.updateTooltip = function ()\n{\n\t// Finally render the tooltip data\n\tif ( this.tooltipData )\n\t{\n\t\tvar path = 'M' + this.tooltipData.x + ' ' + ( this.config.yAxis.start - 1 ) +\n\t\t           'L' + this.tooltipData.x + ' ' + this.config.yAxis.end;\n\t\tthis.tooltipObjects.line.attr( {\n\t\t\t\tpath:path,\n\t\t\t\topacity:this.config.tooltips.background.opacity } );\n\n\t\tvar idx = 0;\n\t\tfor ( var labelName in this.tooltipData.labels )\n\t\t{\n\t\t\tvar label = this.tooltipData.labels[ labelName ];\n\n\t\t\t// If this label overlaps with another one that has a higher value, then simply\n\t\t\t// skip the rendering of this label\n\t\t\t// 1. Find all other labels within spitting distance of this one\n\t\t\tvar others = [];\n\t\t\tfor ( var labelCheck in this.tooltipData.labels )\n\t\t\t{\n\t\t\t\tif ( labelCheck === labelName )\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tvar other = this.tooltipData.labels[ labelCheck ];\n\t\t\t\tif ( Math.abs( other.y - label.y ) <= this.config.tooltips.height )\n\t\t\t\t{\n\t\t\t\t\tothers.push( other );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 2. Find out if there is one bigger (i.e. lower y value)\n\t\t\tvar skip = false;\n\t\t\tfor ( var i = 0, j = others.length; i < j && !skip; i++ )\n\t\t\t{\n\t\t\t\tif ( others[i].y < label.y )\n\t\t\t\t{\n\t\t\t\t\tskip = true;\n\t\t\t\t}\n\t\t\t\telse if ( others[i].y === label.y )\n\t\t\t\t{\n\t\t\t\t\t// They are the same, so choose the one alphabetically first\n\t\t\t\t\tskip = others[i].string < label.string;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( !skip )\n\t\t\t{\n\t\t\t\t// Render this team label\n\t\t\t\tvar temp = this.ctx.r.text( -1000, -1000, label.string ).attr( this.config.font );\n\t\t\t\tvar size = temp.getBBox();\n\t\t\t\ttemp.remove();\n\n\t\t\t\tvar width = size.width + this.config.tooltips.border.left + this.config.tooltips.border.right;\n\t\t\t\tvar anchor = 'start';\n\t\t\t\tvar offset = 0;\n\t\t\t\tvar textOff = this.config.tooltips.border.left;\n\n\t\t\t\tif ( this.tooltipData.x + width > this.config.xAxis.end )\n\t\t\t\t{\n\t\t\t\t\toffset = -width;\n\t\t\t\t\tanchor = 'end';\n\t\t\t\t\ttextOff = -this.config.tooltips.border.right;\n\t\t\t\t}\n\n\t\t\t\tthis.tooltipObjects.bgs[idx].attr( { x:this.tooltipData.x + offset,\n\t\t\t\t\t\t\t\t\t\t\t\t\t y:label.y - this.config.tooltips.height / 2,\n\t\t\t\t\t\t\t\t\t\t\t\t\t width:width,\n\t\t\t\t\t\t\t\t\t\t\t\t\t height:this.config.tooltips.height,\n\t\t\t\t\t\t\t\t\t\t\t\t\t opacity:this.config.tooltips.background.opacity } );\n\n\t\t\t\tthis.tooltipObjects.texts[idx].attr( { x:this.tooltipData.x + textOff,\n\t\t\t\t\t \t\t\t\t\t\t\t\t   y:PULSE.Browser.y( label.y ),\n\t\t\t\t\t \t\t\t\t\t\t\t\t   text:label.string,\n\t\t\t\t\t \t\t\t\t\t\t\t\t   'text-anchor':anchor,\n\t\t\t\t\t \t\t\t\t\t\t\t\t   opacity:1 } );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.tooltipObjects.bgs[idx].attr( { opacity:0 } );\n\t\t\t\tthis.tooltipObjects.texts[idx].attr( { opacity:0 } );\n\t\t\t}\n\n\t\t\tidx++;\n\t\t}\n\n\t\t// If there were dismissals associated with this value, or one very close to it,\n\t\t// then display this information in the top-left corner\n\t\tthis.dismissal.remove();\n\t\tif ( this.dismissalData !== undefined )\n\t\t{\n\t\t\tvar d = '';\n\t\t\tfor ( dd = 0, ee = this.dismissalData.length; dd < ee; dd++ )\n\t\t\t{\n\t\t\t\tif ( dd !== 0 )\n\t\t\t\t{\n\t\t\t\t\tif ( dd === ee - 1 )\n\t\t\t\t\t{\n\t\t\t\t\t\td += ' and ';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\td += ', ';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\td += this.dismissalData[dd];\n\t\t\t}\n\n\t\t\tvar tf = new PULSE.RaphaelTextField( this.config.dismissalTextField );\n\t\t\ttf.addLine( d + ' dismissed' );\n\t\t\ttf.render( this.ctx.r, this.dismissal );\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Reset all components to 0 opacity to hide them\n\t\tfor ( var prop in this.tooltipObjects )\n\t\t{\n\t\t\tif ( this.tooltipObjects[prop].length )\n\t\t\t{\n\t\t\t\tfor ( var i = 0, ilimit = this.tooltipObjects[prop].length; i < ilimit; i++ )\n\t\t\t\t{\n\t\t\t\t\tthis.tooltipObjects[prop][i].attr( { opacity:0 } );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.tooltipObjects[prop].attr( { opacity:0 } );\n\t\t\t}\n\t\t}\n\t}\n}"},"renderSeries":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"r"},{"title":"param","description":null,"type":null,"name":"series"},{"title":"param","description":null,"type":null,"name":"color"},{"title":"param","description":null,"type":null,"name":"label"}]},"Source":"PULSE.RaphaelWinLikelihoodRenderer.prototype.renderSeries = function ( r, series, color, label )\n{\n\t// Create the line\n\tvar path = 'M';\n\tfor ( var i = 0, j = series.length; i < j; i++ )\n\t{\n\t\tif ( i > 0 )\n\t\t{\n\t\t\tpath += 'L';\n\t\t}\n\n\t\tvar item = series[i];\n\t\tvar x = this.config.xAxis.project( item.x );\n\t\tvar y = this.config.yAxis.project( item.y );\n\n\t\tpath += x + ' ' + y;\n\n\t\t// Retrieve or create the tooltip cache\n\t\tvar index = Math.round( x );\n\t\tvar cacheRecord = this.tooltipDataCache[ index ];\n\t\tif ( !cacheRecord )\n\t\t{\n\t\t\tcacheRecord = { x:x, labels:{} };\n\t\t\tthis.tooltipDataCache[ index ] = cacheRecord;\n\t\t}\n\n\t\t// Add a label into the record\n\t\tvar rec = { string:label + ': ' + Math.round( item.y ) + '%', y:y };\n\t\tif ( item.dismissals !== undefined )\n\t\t{\n\t\t\trec.z = item.dismissals.length;\n\t\t\tcacheRecord.dismissals = item.dismissals;\n\t\t}\n\t\tcacheRecord.labels[ label ] = rec;\n\t}\n\tr.path( path ).attr( { stroke:color, fill:'none', 'stroke-width':3 } );\n\n\t// Create the wicket falls\n\tfor ( var i = 0, j = series.length; i < j; i++ )\n\t{\n\t\tvar item = series[i];\n\t\tif ( item.z > 0 )\n\t\t{\n\t\t\tvar x = this.config.xAxis.project( item.x );\n\t\t\tvar y = this.config.yAxis.project( item.y );\n\n\t\t\tfor ( var k = 0, l = item.z; k < l; k++ )\n\t\t\t{\n\t\t\t\tr.circle( x, y - ( k * this.config.fow.size ), this.config.fow.size / 2 )\n\t\t\t\t .attr( { fill:color, stroke:this.config.fow.stroke , 'stroke-width':1 } );\n\t\t\t}\n\t\t}\n\t}\n}"},"addData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"series"},{"title":"param","description":null,"type":null,"name":"x"},{"title":"param","description":null,"type":null,"name":"likelihoods"},{"title":"param","description":null,"type":null,"name":"battingIndex"},{"title":"param","description":null,"type":null,"name":"dismissals"}]},"Source":"PULSE.RaphaelWinLikelihoodRenderer.prototype.addData = function ( series, x, likelihoods, battingIndex, dismissals )\n{\n\t// Add the 3 values to the 3 series\n\tfor ( var k = 0; k < 3; k++ )\n\t{\n\t\t// Remember to normalise y value to 0-100 from 0-1000\n\t\tvar item = { x:x, y:likelihoods[k]/10, z:0 };\n\t\tif ( dismissals.length > 0 && k === battingIndex * 2 )\n\t\t{\n\t\t\titem.z = dismissals.length;\n\t\t\titem.dismissals = dismissals;\n\t\t}\n\n\t\tseries[k].push( item );\n\t}\n}"},"onMouse":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"event"}]},"Source":"PULSE.RaphaelWinLikelihoodRenderer.prototype.onMouse = function ( event )\n{\n\tvar xy = Utils.getXY( event );\n\tvar ttd = undefined;\n\n\tif ( xy !== undefined && xy.y >= this.config.yAxis.end && xy.y <= this.config.yAxis.start &&\n\t\t\txy.x >= this.config.xAxis.start && xy.x <= this.config.xAxis.end )\n\t{\n\t\tttd = this.tooltipDataCache[ xy.x ];\n\n\t\tvar search = xy.x;\n\t\twhile ( ttd === undefined && search >= this.config.xAxis.start )\n\t\t{\n\t\t\tsearch--;\n\t\t\t// If there was no data for this x value, try using one to the left\n\t\t\tttd = this.tooltipDataCache[ search ];\n\t\t}\n\n\t\t// Also search for dismissals close by, so the mouse doesn't have to be exactly on it\n\t\tif ( ttd === undefined || ttd.dismissals === undefined )\n\t\t{\n\t\t\tvar dismissalData = undefined;\n\t\t\tfor ( var offset = 1; offset <= 3; offset++ )\n\t\t\t{\n\t\t\t\tvar neighbour = this.tooltipDataCache[ xy.x - offset ];\n\t\t\t\tif ( neighbour !== undefined && neighbour.dismissals !== undefined )\n\t\t\t\t{\n\t\t\t\t\tdismissalData = neighbour.dismissals;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tneighbour = this.tooltipDataCache[ xy.x + offset ];\n\t\t\t\tif ( neighbour !== undefined && neighbour.dismissals !== undefined )\n\t\t\t\t{\n\t\t\t\t\tdismissalData = neighbour.dismissals;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdismissalData = ttd.dismissals;\n\t\t}\n\t}\n\n\tif ( ttd !== this.tooltipData || dismissalData !== this.dismissalData )\n\t{\n\t\tthis.tooltipData = ttd;\n\t\tthis.dismissalData = dismissalData;\n\n\t\tthis.updateTooltip();\n\t}\n}"}}},"RaphaelTrajectoryRenderer":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.RaphaelTrajectoryRenderer"},{"title":"param","description":null,"type":null,"name":"config"}]},"Source":"PULSE.RaphaelTrajectoryRenderer = function ( config )\n{\n\tthis.config = config;\n\tthis.timerId = null;\n\tthis.animationPeriod = null;\n\tthis.time = null;\n\tthis.speed = config.speed;\n\tthis.viewIndex = 0;\n\t\n\t// Configurable properties of the renderer\n\tthis.defer = true;\n\tthis.renderBounce = true;\n\tthis.renderEnd = true;\n\n\tPULSE.RaphaelTrajectoryRenderer.prototype.augmentConfig = function ()\n\t{\n\t\tif ( this.viewIndex < this.config.views.length )\n\t\t{\n\t\t\tvar subconfig = this.config.views[ this.viewIndex ];\n\t\t\tfor ( var property in subconfig )\n\t\t\t{\n\t\t\t\tthis.config[ property ] = subconfig[ property ];\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.augmentConfig();\n}","prototype":{"augmentConfig":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.RaphaelTrajectoryRenderer.prototype.augmentConfig = function ()\n\t{\n\t\tif ( this.viewIndex < this.config.views.length )\n\t\t{\n\t\t\tvar subconfig = this.config.views[ this.viewIndex ];\n\t\t\tfor ( var property in subconfig )\n\t\t\t{\n\t\t\t\tthis.config[ property ] = subconfig[ property ];\n\t\t\t}\n\t\t}\n\t}"},"setView":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"viewIndex"}]},"Source":"PULSE.RaphaelTrajectoryRenderer.prototype.setView = function ( viewIndex )\n{\n\tthis.resetRendering();\n\tthis.viewIndex = viewIndex;\n\tthis.augmentConfig();\n\tthis.controller.setBackground( this.config.background );\n\tthis.controller.setMask( this.config.mask, this.config.maskIsCss );\n}"},"nextView":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.RaphaelTrajectoryRenderer.prototype.nextView = function ()\n{\n\tvar viewIndex = this.viewIndex + 1;\n\tif ( viewIndex >= this.config.views.length )\n\t{\n\t\tviewIndex = 0;\n\t}\n\tthis.setView( viewIndex );\n}"},"setSpeed":{"Documentation":{"description":"This function augments the renderers configuration with the configuration contained in\nthe current view.","tags":[]},"Source":"PULSE.RaphaelTrajectoryRenderer.prototype.setSpeed = function ( speed )\n{\n\tthis.speed = speed;\n}"},"showDescription":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.RaphaelTrajectoryRenderer.prototype.showDescription = function ()\n{\n\tif ( this.data.length > this.activeBall )\n    {\n        PULSE.GraphController.setInfo( this.data[ this.activeBall ].generateDescription(), true ); \n    }\n}"},"render":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"db"},{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"ctx"},{"title":"param","description":null,"type":null,"name":"immediate"}]},"Source":"PULSE.RaphaelTrajectoryRenderer.prototype.render = function ( db, data, ctx, immediate )\n{\n\tctx.r.clear();\n\t\n\tPULSE.Tracer.info( 'TrajectoryRenderer.render called with immediate=' + immediate );\n\t\n\t// Ensure view is correctly set \n\tthis.augmentConfig();\n\tthis.controller.setBackground( this.config.background );\n\tthis.controller.setMask( this.config.mask );\n\t\n\tif ( this.defer && !immediate )\n\t{\n\t\t// If there is no data, return\n\t\tif ( data === undefined || data === null || data.length === 0 )\n\t\t{\n\t\t\tPULSE.Tracer.info( 'No data, returning' );\n\t\t\treturn;\n\t\t}\n\t\t// Never render this data immediately, unless this is the first render attempt, as it\n\t\t// will force the animation to restart.\n\t\telse if ( this.deferredRenderCall !== undefined )\n\t\t{\n\t\t\t// We have previously set data, so save the call as deferred and return. The deferred\n\t\t\t// data will be used once the current animation loop has ended.\n\t\t\tPULSE.Tracer.info( 'Deferring call' );\n\t\t\t\n\t\t\tthis.deferredRenderCall = { db:db, data:data, ctx:ctx };\n\t\t\treturn;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Otherwise continue, but give the deferred data a null value so that we know we\n\t\t\t// have now rendered\n\t\t\tPULSE.Tracer.info( 'Continuing' );\n\t\t\t\n\t\t\tthis.deferredRenderCall = null;\n\t\t}\n\t}\n\t\n\t// Save balls, up to the maximum\n\tif ( this.config.maxBalls !== undefined )\n\t{\n\t\tthis.data = data.slice( 0, this.config.maxBalls );\t\t\n\t}\n\telse\n\t{\n\t\tthis.data = data;\n\t}\n\n\t// Only use balls that have valid trajectories\n\tvar validData = [];\n\tfor ( var i = 0, j = this.data.length; i < j; i++ )\n\t{\n\t\tvar row = this.data[i];\n\t\tvar traj = row.get( CricketField.TRAJECTORY );\n\n\t\tif ( traj !== undefined && traj.trackApproved )\n\t\t{\n\t\t\tvalidData.push( row );\n\t\t}\n\t}\n\tthis.data = validData;\n\t\t\n\t// Save the context, as we need it in the timer callback\n\tthis.ctx = ctx;\n\t\n\t// Reset render/offset array\n\tthis.renderData = [];\n\tthis.activeBall = 0;\n\tthis.offsets = [0];\n\n\tthis.showDescription();\n\t\n\t// Iterate over balls to find start/end/offset times\n\tvar anim = { start:Number.MAX_VALUE, end:Number.MIN_VALUE };\n\t\n\tPULSE.Tracer.info( 'Rendering ' + this.data.length + ' trajectories' );\n\t\n\tvar total = 0;\n\tfor ( var i = 0, j = this.data.length; i < j; i++ )\n\t{\n\t\t// Obtain trajectory\n\t\tvar row = this.data[i];\n\t\tvar traj = row.get( CricketField.TRAJECTORY );\n\n\t\tPULSE.Tracer.info( 'Traj ' + i + ' period ' + Utils.toString( traj.period, true ) );\n\t\t\n\t\tif ( 'serial' === this.config.ordering )\n\t\t{\n\t\t\t// Update total\n\t\t\tvar length = traj.period.end - traj.period.start;\n\t\t\ttotal += length;\n\t\t\t\n\t\t\t// First traj\n\t\t\tif ( i === 0 )\n\t\t\t{\n\t\t\t\tanim.start = 0;\n\t\t\t}\n\t\t\t\n\t\t\t// Last traj (can also be the first!)\n\t\t\tif ( i === j-1 )\n\t\t\t{\n\t\t\t\tanim.end = total + this.config.timeMargin.end;\n\t\t\t}\n\t\t\t\n\t\t\tthis.offsets[ i+1 ] = total;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Parallel processing\n\t\t\tvar start = traj.period.start - this.config.timeMargin.start;\n\t\t\tvar end = traj.period.end + this.config.timeMargin.end;\n\t\t\t\n\t\t\tif ( start < anim.start )\n\t\t\t{\n\t\t\t\tanim.start = start;\n\t\t\t}\n\t\t\tif ( end > anim.end )\n\t\t\t{\n\t\t\t\tanim.end = end;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tPULSE.Tracer.info( 'Offsets: ' + Utils.toString( this.offsets, true ) );\n\t\n\t// Set up timing parameters\n\tthis.animationPeriod = anim;\n\tthis.time = this.animationPeriod.start;\n\t\n\tPULSE.Tracer.info( 'Animation period is ' + Utils.toString( anim, true ) ); \n\t\n\t// Start timer, stopping any previous one\n\tif ( this.timerId !== null )\n\t{\n\t\tclearInterval( this.timerId );\n\t}\n\t\n\tvar that = this;\n\tthis.timerId = setInterval( function() { that.increment(); }, this.config.refresh );\n}"},"unrender":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.RaphaelTrajectoryRenderer.prototype.unrender = function ()\n{\n\tthis.deferredRenderCall = undefined;\n\tif ( this.timerId !== null )\n\t{\n\t\tclearInterval( this.timerId );\n\t\tthis.timerId = null;\n\t}\n}"},"resetRendering":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.RaphaelTrajectoryRenderer.prototype.resetRendering = function ()\n{\n\tthis.time = this.animationPeriod.start;\n\tthis.renderData = [];\n\tthis.activeBall = 0;\n\tthis.showDescription();\n\t\n\tthis.ctx.r.clear();\n\n\tif ( this.deferredRenderCall )\n\t{\n\t\t// We have a deferred render call outstanding, so make that call now\n\t\tPULSE.Tracer.info( 'Making deferred rendering call' );\n\t\tthis.render( this.deferredRenderCall.db, this.deferredRenderCall.data, this.deferredRenderCall.ctx, true );\n\t\t\n\t\t// Reset the render call data\n\t\tthis.deferredRenderCall = null;\n\t}\n}"},"increment":{"Documentation":{"description":"Increments the point in time the animation is currently representing.","tags":[]},"Source":"PULSE.RaphaelTrajectoryRenderer.prototype.increment = function ()\n{\n\tthis.time += ( this.config.interval * this.speed );\n\t\n\tif ( this.time > this.animationPeriod.end )\n\t{\n\t\tthis.resetRendering();\n\t}\n\t\n\t// Move onto next active ball if we need to\n\tif ( this.time > this.offsets[ this.activeBall + 1 ] )\n\t{\n\t\tif ( this.renderEnd )\n\t\t{\n\t\t\t// Ensure we have rendered the last point for the current ball\n\t\t\tvar thisTraj = this.data[this.activeBall].get( CricketField.TRAJECTORY );\n\t\t\tvar thisRd = this.renderData[this.activeBall];\n\n\t\t\tPULSE.RaphaelTrajectoryRenderer.addRenderData( \n\t\t\t\t\tthis.activeBall, this.config, thisRd, thisTraj, thisTraj.period.end );\n\t\t}\n\t\t\n\t\tthis.activeBall++;\n\t\tthis.showDescription();\n\t}\n\t\n\t// Add render data for the active ball\n\tfor ( var i = 0, j = this.data.length; i < j; i++ )\n\t{\n\t\tif ( 'parallel' === this.config.ordering || i === this.activeBall )\n\t\t{\n\t\t\t// Obtain trajectory\n\t\t\tvar row = this.data[i];\n\t\t\tvar traj = row.get( CricketField.TRAJECTORY );\n\t\t\t\n\t\t\t// Create or obtain render data for this traj\n\t\t\tvar rd = this.renderData[i];\n\t\t\tif ( !rd )\n\t\t\t{\n\t\t\t\trd = {};\n\t\t\t\trd.shadowPath = '';\n\t\t\t\trd.trailPath = '';\n\t\t\t\trd.shadow = this.ctx.r.path();\n\t\t\t\trd.trail = this.ctx.r.path();\n\t\t\t\t\n\t\t\t\tvar img = this.config.ballImagePath + '12px/phe_red_ball.png';\n\t\t\t\trd.ball = this.ctx.r.image( img, 0, 0, 0, 0 );\n\t\t\t\t\n\t\t\t\tthis.renderData[i] = rd;\n\t\t\t}\n\t\n\t\t\tvar offset = this.offsets[i] === undefined ? 0 : this.offsets[i];\n\t\t\tvar t1 = this.time - offset + traj.period.start;\n\t\t\t\n\t\t\tPULSE.RaphaelTrajectoryRenderer.addRenderData( i, this.config, rd, traj, t1 );\n\t\t\t\n\t\t\t// Check to see if the next timing point is after the bounce time; if it is,\n\t\t\t// add the bounce time render point now\n\t\t\tif ( this.renderBounce )\n\t\t\t{\n\t\t\t\tvar t2 = t1 + ( this.config.interval * this.config.speed );\n\t\t\t\tif ( t1 < traj.bt && t2 > traj.bt )\n\t\t\t\t{\n\t\t\t\t\tPULSE.RaphaelTrajectoryRenderer.addRenderData( i, this.config, rd, traj, traj.bt );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"}},"addRenderData":{"Documentation":{"description":"Utility method to get render data for a given trajectory at a given point in time.","tags":[]},"Source":"PULSE.RaphaelTrajectoryRenderer.addRenderData = function ( i, config, rd, traj, time )\n{\n\t// Obtain ball-on-screen information\n\tvar bos = PULSE.RaphaelTrajectoryRenderer.getBallOnScreen( config, traj, time );\n\n\t// Add the data to the paths\n\tif ( !rd.shadowPath )\n\t{\n\t\trd.shadowPath = 'M';\n\t\trd.trailPath = 'M';\n\t}\n\telse\n\t{\n\t\trd.shadowPath += 'L';\n\t\trd.trailPath += 'L';\n\t}\n\t\t\n\trd.shadowPath += bos.shadow.x + ' ' + bos.shadow.y;\n\trd.trailPath += bos.ball.x + ' ' + bos.ball.y;\n\t\n\t// Obtain colours\n\tvar trailColor = config.trailColors[i % config.trailColors.length];\n\n\t// Update Raphael objects\n    rd.trail.attr( { path:rd.trailPath, stroke:trailColor, 'stroke-width':4, 'stroke-linejoin':'round', opacity:config.trailOpacity } ).toFront();\n    rd.shadow.attr( { path:rd.shadowPath, stroke:config.shadowStyle, 'stroke-width':4, opacity:config.shadowOpacity } ).toBack();\n    rd.ball.attr( { x:bos.ball.x - bos.size, y:bos.ball.y - bos.size, width:bos.size * 2, height:bos.size * 2 } ) \n           .toFront();\n}"},"getBallOnScreen":{"Documentation":{"description":"Gets screen-based ball information for a given time. Returns an object with properties:\n\nshadow   { x, y } - on-screen location of shadow\nball     { x, y } - on-screen location of ball\nsize              - on-screen ball radius","tags":[]},"Source":"PULSE.RaphaelTrajectoryRenderer.getBallOnScreen = function ( config, traj, time )\n{\n\t// Get ball position in real-world coordinates\n\tvar xyz;\n\t\n\tif ( time > traj.period.end )\n\t{\n\t\txyz = traj.getPositionAtTime( traj.period.end );\n\t}\n\telse if ( time < traj.period.start )\n\t{\n\t\txyz = traj.getPositionAtTime( traj.period.start );\n\t}\n\telse\n\t{\n\t\txyz = traj.getPositionAtTime( time );\n\t}\n\t\n\t// Approximate the ball size\n\tvar size = config.ballSize.max - ( xyz.x * ( ( config.ballSize.max - \n\t\t\t\t\t\t\t\t\t\tconfig.ballSize.min ) /\n\t\t\t\t\t\t\t\t\t\tconfig.releaseX ) );\n\n\t// Convert to VR coordinates\n\txyz.x -= 10.06;\n\n\t// Project shadow\n\tvar shadowScreen = config.projection.project( { x:xyz.x, y:xyz.y, z:0 } );\n\t\n\t// Project ball\n\tvar ballScreen = config.projection.project( xyz );\n\t\n\t// Return object\n\treturn { shadow:shadowScreen, ball:ballScreen, size:size }; \n}"}},"UdsHawkeyeDatabase":{"prototype":{"getData":{"Documentation":{"description":"Provide no-ops for getData, getMetadata and getHighestInnings.","tags":[]},"Source":"PULSE.UdsHawkeyeDatabase.prototype.getData = function()\n\t{ \n\t\treturn [];\n\t}"},"getMetadata":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.UdsHawkeyeDatabase.prototype.getMetadata = function()\n\t{ \n\t\treturn {};\n\t}"},"getHighestInnings":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.UdsHawkeyeDatabase.prototype.getHighestInnings = function()\n\t{\n\t\treturn 0;\n\t}"},"getLastKeys":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.UdsHawkeyeDatabase.prototype.getLastKeys = function()\n\t{\n\t\treturn {};\n\t}"},"informListener":{"Documentation":{"description":"Informs the listener of new data becoming available.","tags":[]},"Source":"PULSE.UdsHawkeyeDatabase.prototype.informListener = function ()\n{\n\tif ( this.listener !== null )\n\t{\n\t\tthis.listener.inform( this );\n\t}\n}"},"setListener":{"Documentation":{"description":"Sets the listener for updates to the data.","tags":[]},"Source":"PULSE.UdsHawkeyeDatabase.prototype.setListener = function ( listener )\n{\n\tthis.listener = listener;\n}"},"nullData":{"Documentation":{"description":"Provide no-ops for getData, getMetadata and getHighestInnings.","tags":[]},"Source":"PULSE.UdsHawkeyeDatabase.prototype.nullData = function () \n{\n\tPULSE.UdsHawkeyeDatabase.prototype.getData = function()\n\t{ \n\t\treturn [];\n\t};\n\tPULSE.UdsHawkeyeDatabase.prototype.getMetadata = function()\n\t{ \n\t\treturn {};\n\t};\n\tPULSE.UdsHawkeyeDatabase.prototype.getHighestInnings = function()\n\t{\n\t\treturn 0;\n\t};\n\tPULSE.UdsHawkeyeDatabase.prototype.getLastKeys = function()\n\t{\n\t\treturn {};\n\t};\n}"},"checkForUpdate":{"Documentation":{"description":"Checks to see if the data has been updated since the last time the data was read\nusing the readData method. If it has, then invoke the callback.","tags":[]},"Source":"PULSE.UdsHawkeyeDatabase.prototype.checkForUpdate = function ( callback )\n{\n\t// Save the update callback reference\n\tPULSE.UdsHawkeyeDatabase.updateCallback = callback;\n\t\n\t// Obtain the metadata via JSONP callback\n\tvar path = PULSE.UdsHawkeyeDatabase.URL_PREFIX + this.customer + '/' + this.gameId + \n\t\t\t   PULSE.UdsHawkeyeDatabase.UDSMETA_URL_SUFFIX;\n\tPULSE.UdsHawkeyeDatabase.dynamicScriptLoad( path );\n}"},"loadGame":{"Documentation":{"description":"Dynamically sets the UDS game ID and forces a load from the derived path.","tags":[]},"Source":"PULSE.UdsHawkeyeDatabase.prototype.loadGame = function ( gameId, customer )\n{\t\n\t// Unload current game\n\tthis.nullData();\n\tthis.informListener();\n\t\n\tvar thisCustomer = customer;\n\tif ( Utils.isNullish( thisCustomer ) )\n\t{\n\t\tthisCustomer = 'cricinfo';\n\t}\n\t\n\tPULSE.UdsHawkeyeDatabase.lastUpdated = null; \n\tthis.gameId = gameId;\n\tthis.customer = thisCustomer;\n\t\n\t// Stop any existing monitor\n\tif ( this.dataMonitor !== undefined )\n\t{\n\t\tthis.dataMonitor.stop();\n\t\tPULSE.Tracer.info( 'DataMonitor stopped' );\n\t}\n\t\n\t// Create a data monitor for the game and let that do the work\n\tthis.dataMonitor = new PULSE.DataMonitor( 30000, this, function () \n\t{\n\t\t// If the monitor triggers, load the full JSONP data  \n\t\tvar path = PULSE.UdsHawkeyeDatabase.URL_PREFIX + thisCustomer + '/' + gameId + \n\t\t\t\t   PULSE.UdsHawkeyeDatabase.UDS_URL_SUFFIX;\n\t\tPULSE.UdsHawkeyeDatabase.dynamicScriptLoad( path );\n\t} );\n\tthis.dataMonitor.start();\n\tPULSE.Tracer.info( 'DataMonitor started' );\n}"},"setActive":{"Documentation":{"description":"Sets whether the active datamonitor actually does any downloading of metadata.","tags":[]},"Source":"PULSE.UdsHawkeyeDatabase.prototype.setActive = function ( active )\n{\n\tif ( this.dataMonitor !== undefined )\n\t{\n\t\tthis.dataMonitor.downloading = active;\n\t}\n}"},"loadData":{"Documentation":{"description":"Loads the data from the actual UDS file on the CDN.","tags":[]},"Source":"PULSE.UdsHawkeyeDatabase.prototype.loadData = function ()\n{\n\tvar path = PULSE.UdsHawkeyeDatabase.URL_PREFIX + this.customer + '/' + this.gameId + \n\t\t\t   PULSE.UdsHawkeyeDatabase.UDS_URL_SUFFIX;\n\t//var path = \"file:///C:/svn/dev2/trunk/javascript/projects/cricket/pulse-telegraph/src/uds.json\";\n\tPULSE.UdsHawkeyeDatabase.dynamicScriptLoad( path );\n}"},"normalise":{"Documentation":{"description":"Normalises the data contained in the given coordinate to 'standard' (VR) coordinates.","tags":[]},"Source":"PULSE.UdsHawkeyeDatabase.prototype.normalise = function ( xyz )\n{\n\treturn { x:xyz.x-10.06, y:xyz.y, z:xyz.z };\n}"},"getMatchType":{"Documentation":{"description":"Gets the match type for this match.","tags":[]},"Source":"PULSE.UdsHawkeyeDatabase.prototype.getMatchType = function ()\n{\n\tvar mt = CricketMatchType.TEST;\n\n\tvar overs = this.getMetadata()[ 'overs' ];\n\tif ( overs === '20' )\n\t{\n\t\tmt = CricketMatchType.T20;\n\t}\n\telse if ( overs === '50' )\n\t{\n\t\tmt = CricketMatchType.ODI;\n\t}\n\t\n\treturn mt;\n}"},"getParticipants":{"Documentation":{"description":"Gets the participant data for this match.","tags":[]},"Source":"PULSE.UdsHawkeyeDatabase.prototype.getParticipants = function ()\n{\n\treturn [ new Participant( this.getMetadata()[ 'participant_1' ] ),\n\t         new Participant( this.getMetadata()[ 'participant_2' ] ) ];\n}"},"getScoring":{"Documentation":{"description":"Gets scoring data for this match.","tags":[]},"Source":"PULSE.UdsHawkeyeDatabase.prototype.getScoring = function ()\n{\n\tvar score = new PULSE.UdsScore( this.getData(), this.getBattingOrder(), this.getLastKeys().all );\n\t\n\treturn score;\n}"},"getBattingTeamIndex":{"Documentation":{"description":"Gets the batting team index (0 or 1) in the given 1-based innings number.","tags":[]},"Source":"PULSE.UdsHawkeyeDatabase.prototype.getBattingTeamIndex = function ( innings )\n{\n\tvar order = this.getMetadata()[ 'batting_order' ];\n\tif ( order && order.length >= innings )\n\t{\n\t\tvar idx = +order.charAt( innings - 1 );\n\t\treturn idx - 1;\n\t}\n\telse\n\t{\n\t\t// Something went wrong, as we are asking for an innings that doesn't exist\n\t\t// in the batting order; so, just return something\n\t\treturn 1;\n\t}\n}"},"getBattingOrder":{"Documentation":{"description":"Gets an array of batting team indexes (0 or 1)","tags":[]},"Source":"PULSE.UdsHawkeyeDatabase.prototype.getBattingOrder = function ()\n{\n\tvar battingOrder = [];\n\tvar order\t\t = this.getMetadata()[ 'batting_order' ];\n\t\n\tif ( order && order.length )\n\t{\n\t\tfor(var i = 0; i < order.length; i++) {\n\t\t\tvar idx = +order.charAt( i );\n\t\t\tbattingOrder.push(idx);\n\t\t}\n\t}\n\treturn battingOrder;\n}"},"getInningsString":{"Documentation":{"description":"Gets the innings string for the given innings.","tags":[{"title":"param","description":"the 1-based innings number","type":null,"name":"innings"}]},"Source":"PULSE.UdsHawkeyeDatabase.prototype.getInningsString = function ( innings )\n{\n\tvar battingIndex = this.getBattingTeamIndex( innings );\n\tvar participant = this.getParticipants()[ battingIndex ];\n\t\n\t// Seed string with participant name\n\tvar string = participant.fullName;\n\t\n\t// If we are in a Test match, add 1st/2nd\n\tif ( this.getMatchType() === CricketMatchType.TEST )\n\t{\n\t\tstring += ( innings <= 2 ? ' 1st' : ' 2nd' );\n\t}\n\n\t// Add 'innings'\n\tstring += ' innings';\n\treturn string;\t\n}"},"getInningsFromString":{"Documentation":{"description":"Converts an innings string back into the 1-based innings index. This is essentially the\ninverse function of getInningsString","tags":[{"title":"param","description":"the innings string","type":null,"name":"string"}]},"Source":"PULSE.UdsHawkeyeDatabase.prototype.getInningsFromString = function ( string )\n{\n\t// Build array of all available strings\n\tvar candidates = [];\n\tvar inningsLookup = {};\n\tfor ( var i = 1, j = this.getHighestInnings(); i <= j; i++ )\n\t{\n\t\tvar is = this.getInningsString( i );\n\n\t\tcandidates.push( is );\n\t\tinningsLookup[ is ] = i;\n\t}\n\t\n\t// Now do a Levenshtein match of the input string\n\tvar matched = PULSE.Levenshtein.bestMatch( candidates, string );\n\t\t\n\t// Return the innings number\n\treturn inningsLookup[ matched ];\n}"},"getOptions":{"Documentation":{"description":"Obtains the set of unique values for all filter options, given the optional filter.","tags":[{"title":"param","description":"(optional) the initial filter","type":null,"name":"filter"}]},"Source":"PULSE.UdsHawkeyeDatabase.prototype.getOptions = function ( filter )\n{\n\tPULSE.Tracer.info( 'getOptions with filter=' + Utils.toString( filter ) ); \n\t\n\tvar options = { innings:{}, batsman:{}, bowler:{}, over:{}, ball:{} };\n\t\n\tvar d = this.getData();\n\tfor ( var key in d )\n\t{\n\t\tvar record = d[ key ];\n\t\t\n\t\tif ( record.satisfiesFilter )\n\t\t{\n\t\t\t// Check to see if this record satisfies the given filter, but be careful to allow\n\t\t\t// through all value that are being used as a filter \n\t\t\tvar satisfy = record.satisfiesFilter( filter );\n\t\t\t\n\t\t\tvar s = record.get( CricketField.INNINGS );\n\t\t\tif ( !Utils.isNullish( s ) && ( satisfy || !Utils.isNullish( filter.innings ) ) )\n\t\t\t{\n\t\t\t\t// Convert innings to descriptive string\n\t\t\t\ts = this.getInningsString( +s );\n\t\t\t\toptions.innings[s] = undefined;\n\t\t\t}\n\t\t\ts = record.get( CricketField.BATSMAN );\n\t\t\tif ( !Utils.isNullish( s ) && ( satisfy || !Utils.isNullish( filter.batsman ) ) )\n\t\t\t{\n\t\t\t\toptions.batsman[s] = undefined;\n\t\t\t}\n\t\t\ts = record.get( CricketField.BOWLER );\t\t\t\n\t\t\tif ( !Utils.isNullish( s ) && ( satisfy || !Utils.isNullish( filter.bowler ) ) )\n\t\t\t{\t\n\t\t\t\toptions.bowler[s] = undefined;\n\t\t\t}\n\t\t\ts = record.get( CricketField.INNINGS ) + '.' + record.get( CricketField.OVER );\n\t\t\tif ( !Utils.isNullish( s ) && ( satisfy || !Utils.isNullish( filter.over ) ) )\n\t\t\t{\n\t\t\t\toptions.over[s] = undefined;\n\t\t\t}\n\t\t\ts = record.get( CricketField.BALL );\n\t\t\tif ( !Utils.isNullish( s ) && ( satisfy || !Utils.isNullish( filter.ball ) ) )\n\t\t\t{\n\t\t\t\t// Additionally check that the innings/over matches, if we are in a specific over\n\t\t\t\tvar add = true;\n\t\t\t\tif ( filter && CricketFilter.WATCHLIVE !== filter.over )\n\t\t\t\t{\n\t\t\t\t\tvar secondaryFilter = { innings:filter.innings, over:filter.over };\n\t\t\t\t\tadd = record.satisfiesFilter( secondaryFilter );\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ( add )\n\t\t\t\t{\n\t\t\t\t\tvar extended = record.get( CricketField.COUNTING_BALL );\n\t\t\t\t\t\n\t\t\t\t\tvar summary = Utils.trim( record.generateSummary( true ) );\n\t\t\t\t\tif ( summary.length > 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\textended += PULSE.UdsHawkeyeDatabase.BALL_RUNS_PREFIX + summary +\n\t\t\t\t\t\t\t\t\tPULSE.UdsHawkeyeDatabase.BALL_RUNS_SUFFIX; \n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\toptions.ball[s] = extended;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t//PULSE.Tracer.info( 'getOptions returned ' + Utils.toString( options ) );\n\t\n\treturn options;\n}"},"lookupPlayer":{"Documentation":{"description":"Looks up a player ID from a name.","tags":[]},"Source":"PULSE.UdsHawkeyeDatabase.prototype.lookupPlayer = function ( name )\n{\n\t// In this implementation, the ID is simply the name\n\treturn name;\n}"},"getType":{"Documentation":{"description":"Gets the 'class' name for this database.","tags":[]},"Source":"PULSE.UdsHawkeyeDatabase.prototype.getType = function ()\n{\n\treturn 'UdsHawkeyeDatabase';\n}"},"getParameter":{"Documentation":{"description":"Obtains a coordinate-space specific value from this database.","tags":[]},"Source":"PULSE.UdsHawkeyeDatabase.prototype.getParameter = function ( key )\n{\n\tif ( 'ww-sign' === key )\n\t{\n\t\treturn 1;\n\t}\n\telse if ( 'ww-origin-x' === key )\n\t{\n\t\treturn -11;\n\t}\t\n}"},"getInningsList":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.UdsHawkeyeDatabase.prototype.getInningsList = function()\n{\t\n\tvar allInnings = [];\n\tvar previousInnings = '';\n\tvar d = this.getData();\n\tfor ( var key in d )\n\t{\n\t\tif(d.hasOwnProperty(key)) {\n\t\t\tvar record = d[ key ];\n\t\t\tvar s = record.get( CricketField.INNINGS );\n\t\t\ts = this.getInningsString( +s );\n\t\t\tif( s && s !== previousInnings )\n\t\t\t{\n\t\t\t\tallInnings[allInnings.length] = s;\n\t\t\t}\n\t\t\tpreviousInnings = s;\n\t\t}\n\t}\n\t\t\t\n\treturn allInnings;\n}"}},"Documentation":{"description":"Constructor. No-op: data load deferred to loadGame call","tags":[]},"Source":"PULSE.UdsHawkeyeDatabase = function ( listener )\n{\n\t// Constants\n\tPULSE.UdsHawkeyeDatabase.LOADER_SCRIPT_ID = 'udsLoaderScript';\n\tPULSE.UdsHawkeyeDatabase.UDSMETA_URL_SUFFIX = '/uds-meta.js';\n\n\tPULSE.UdsHawkeyeDatabase.BALL_RUNS_PREFIX = ' <span>';\n\tPULSE.UdsHawkeyeDatabase.BALL_RUNS_SUFFIX = '</span>';\n\t\n\t// This is where the CDN setup code goes. There are currently 3 supported environments\n\t// and you should comment in the two lines appropriate to the target environment \n\t\n\t// Lee's testing only\n\t//PULSE.UdsHawkeyeDatabase.URL_PREFIX = 'http://dynamic.pulselive.com/dynamic/';\n\t//PULSE.UdsHawkeyeDatabase.UDS_URL_SUFFIX = '/uds.jsonp';\n\t// Playdev testing only\n\t//PULSE.UdsHawkeyeDatabase.URL_PREFIX = 'http://dynamic.pulselive.com/test/';\n\t//PULSE.UdsHawkeyeDatabase.UDS_URL_SUFFIX = '/uds.json.jgz';\n\t// Production\n\tPULSE.UdsHawkeyeDatabase.URL_PREFIX = 'http://dynamic.pulselive.com/dynamic/';\n\tPULSE.UdsHawkeyeDatabase.UDS_URL_SUFFIX = '/uds.json.jgz';\n\t\n\t// Set up instance accessor\n\tvar that = this;\n\tPULSE.UdsHawkeyeDatabase.getInstance = function () { return that; };\n\t\n\t// Save listener reference\n\tthis.listener = listener;\n\t\n\t// Seed state\n\tthis.nullData();\n}","getInstance":{"Documentation":{"description":"Constructor. No-op: data load deferred to loadGame call","tags":[]},"Source":"PULSE.UdsHawkeyeDatabase.getInstance = function () { return that; }"},"dynamicScriptLoad":{"Documentation":{"description":"Provides a generic dynamic script loading method, for JSONP injection.","tags":[{"title":"param","description":"the cross-site path we want to load from","type":null,"name":"path"}]},"Source":"PULSE.UdsHawkeyeDatabase.dynamicScriptLoad = function ( path )\n{\n\tPULSE.Tracer.info( 'Dynamic script load from ' + path );\n\n\t// Unload any existing script\n\tvar script = document.getElementById( PULSE.UdsHawkeyeDatabase.LOADER_SCRIPT_ID );\n\tif ( script !== null )\n\t{\n\t\tscript.parentNode.removeChild( script );\n\t}\n\t\n\t// Use dynamic JavaScript insertion with JSONP to get the data from a different domain\n\tscript = document.createElement( 'script' );\n\tscript.setAttribute( 'id', PULSE.UdsHawkeyeDatabase.LOADER_SCRIPT_ID );\n\tscript.setAttribute( 'src', path + '?t=' + ( +new Date() ) );\n\n\t// Attach the script to the head, hence invoking its contents\n\tdocument.getElementsByTagName('head')[0].appendChild( script );\n}"}},"UdsHawkeyeRecord":{"Documentation":{"description":"Wrapper for a record from a UDS file.","tags":[]},"Source":"PULSE.UdsHawkeyeRecord = function ( rawBp, rawData )\n{\n\tthis.fields = rawData.split( ',' );\n\tthis.bp = new PULSE.BallProgress( rawBp );\n\tthis.traj = null;\n}","prototype":{"satisfiesFilter":{"Documentation":{"description":"Returns true if this record satisfies the given filter.","tags":[]},"Source":"PULSE.UdsHawkeyeRecord.prototype.satisfiesFilter = function ( filter )\n{\n\tif ( filter === undefined )\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\t// First check a *.*.All match on the over filter\n/*\t\tif ( filter.over !== undefined && filter.over.match( /[0-9]+\\.[0-9]+\\.All/ ) !== null )\n\t\t{\n\t\t\tvar sample = filter.over.replace( /All/, '0' );\n\t\t\tvar sampleBp = new PULSE.BallProgress( sample );\n\t\t\t\n\t\t\treturn ( this.bp.innings === sampleBp.innings &&\n\t\t\t\t\t this.bp.over === sampleBp.over );\n\t\t}\n*/\t\t\n\t\t// Check innings, over and ball, allowing for All \n\t\tvar inn = Utils.isNullish( filter.innings ) || \n\t\t\t\t  CricketFilter.ALL === filter.innings ||\n\t\t\t\t  this.get( CricketField.INNINGS ) == filter.innings.toString(); // Coerce!\n\t\t\n\t\tvar over = Utils.isNullish( filter.over ) || \n\t\t   \t\t   CricketFilter.ALL === filter.over ||\n\t\t   \t\t   this.get( CricketField.OVER ) == filter.over; // Coerce!\n\n\t\tvar ball = Utils.isNullish( filter.ball ) || \n\t\t   \t\t   CricketFilter.ALL === filter.ball ||\n\t\t   \t\t   CricketFilter.ALLBALLS === filter.ball ||\n\t\t   \t\t   this.get( CricketField.BALL ) == filter.ball; // Coerce!\n\n\t\tif ( inn && over && ball )\n\t\t{\n\t\t\t// Check batsman\n\t    \tvar lh = this.get( CricketField.HANDEDNESS ) === CricketHandedness.LEFT;\n\t\t\tvar ba = Utils.isNullish( filter.batsman ) || \n\t\t\t\t\t CricketFilter.ALL === filter.batsman ||\n\t\t\t\t\t CricketFilter.ALLBATSMEN === filter.batsman ||\n\t\t\t\t\t ( !lh && CricketFilter.RIGHTHANDERS === filter.batsman ) || \n\t\t\t\t\t (  lh && CricketFilter.LEFTHANDERS === filter.batsman ) ||\n\t\t\t\t\t this.get( CricketField.BATSMAN ) === filter.batsman;\n\t\t\t\t\t \n\t\t\t// Check bowler\n\t\t\tvar spin = this.get( CricketField.BOWLER_SPEED ) === CricketBowlerSpeed.SPIN;\n\t\t\tvar bo = Utils.isNullish( filter.bowler ) || \n\t\t\t\t\t CricketFilter.ALL === filter.bowler ||\n\t\t\t\t\t CricketFilter.ALLBOWLERS === filter.bowler ||\n\t\t\t\t\t (  spin && CricketFilter.SPINBOWLERS === filter.bowler ) || \n\t\t\t\t\t ( !spin && CricketFilter.SEAMBOWLERS === filter.bowler ) ||\n\t\t\t\t\t this.get( CricketField.BOWLER ) === filter.bowler;\n\t\t\t\n\t\t\treturn ba && bo;\n\t    }\n\t\t\n    \treturn false;\n\t}\n}"},"get":{"Documentation":{"description":"Obtains a field (column) from this record.","tags":[]},"Source":"PULSE.UdsHawkeyeRecord.prototype.get = function ( field )\n{\n\tswitch ( field )\n\t{\n\t\tcase CricketField.ID:\n\t\t\treturn this.bp.description();\n\t\n\t\tcase CricketField.BATSMAN:\n\t\t\treturn this.fields[0];\n\t\t\t\n\t\tcase CricketField.BOWLER:\n\t\t\treturn this.fields[2];\n\t\t\t\n\t\tcase CricketField.INNINGS:\n\t\t\treturn this.bp.innings;\n\t\t\t\n\t\tcase CricketField.OVER:\n\t\t\treturn this.bp.over;\n\t\t\t\n\t\tcase CricketField.BALL:\n\t\t\treturn this.bp.ball;\n\t\t\t\n\t\tcase CricketField.COUNTING_BALL:\n\t\t\treturn this.countingBall;\n\t\t\t\n\t\tcase CricketField.WW:\n\t\t\tif ( Utils.isNullish( this.fields[11] ) || Utils.isNullish( this.fields[12] ) )\n\t\t\t{\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn { x:this.fields[11], y:this.fields[12] };\n\t\t\t}\n\t\t\t\n\t\tcase CricketField.RUNS:\n\t\t\tif ( this.fields[16].length > 0 )\n\t\t\t{\n\t\t\t\treturn this.fields[16];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\t\n\t\tcase CricketField.CREDIT:\n\t\t\tif ( this.fields[17].length === 0 )\n\t\t\t{\n\t\t\t\treturn this.get( CricketField.RUNS );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn this.fields[17];\n\t\t\t}\n\t\t\t\n\t\tcase CricketField.DEBIT:\n\t\t\tif ( this.fields[18].length === 0 )\n\t\t\t{\n\t\t\t\treturn this.get( CricketField.RUNS );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn this.fields[18];\n\t\t\t}\n\t\t\t\n\t\tcase CricketField.PITCHED:\n\t\t\tif ( this.fields[4].length === 0 )\n\t\t\t{\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\treturn { x:this.fields[4], y:this.fields[5], z:0 };\n\t\t\t\n\t\tcase CricketField.IS_WICKET:\n\t\t\treturn this.fields[14].length > 0;\n\t\t\t\n\t\tcase CricketField.STUMPS:\n\t\t\tif ( this.fields[7].length === 0 )\n\t\t\t{\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\treturn { x:0, y:this.fields[7], z:this.fields[8] };\n\t\t\t\n\t\tcase CricketField.TRAJECTORY:\n\t\t\tif ( this.traj === null )\n\t\t\t{\n\t\t\t\tthis.traj = PULSE.UdsHawkeyeRecord.parseTrajectory( this.fields[23] );\n\t\t\t}\n\t\t\treturn this.traj;\n\t\t\t\n\t\tcase CricketField.BOWL_SPEED:\n\t\t\treturn Number( this.fields[3] );\n\t\t\t\n\t\tcase CricketField.HAS_HANDEDNESS:\n\t\t\treturn this.fields[6].length > 0;\n\t\t\t\n\t\tcase CricketField.HANDEDNESS:\n\t\t\treturn this.fields[6] === 'y' ? CricketHandedness.RIGHT : CricketHandedness.LEFT;\n\t\t\t\n\t\tcase CricketField.IS_COUNTING:\n\t\t\tvar et = this.fields[19];\n\t\t\treturn ( et.length === 0 || 'Lb' === et || 'B' === et );\n\t\t\t\n\t\tcase CricketField.EXTRA_TYPE:\n\t\t\treturn this.fields[19];\n\t\t\t\n\t\tcase CricketField.DISMISSED:\n\t\t\treturn this.fields[14];\n\t\t\t\n\t\tcase CricketField.NF_BATSMAN:\n\t\t\treturn this.fields[1];\n\t\t\t\n\t\tcase CricketField.WIN_LIKELIHOODS:\n\t\t\tif ( Utils.isNullish( this.fields[20] ) )\n\t\t\t{\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn [ +this.fields[20], +this.fields[21], +this.fields[22] ];\n\t\t\t}\n\t\t\t\n\t\tcase CricketField.BOWLER_SPEED:\n\t\t\treturn this.bowlerSpeed;\n\t\t\t\n\t\tcase CricketField.PITCH_SEGMENT:\n\t\t\treturn this.fields[13];\n\t\t\n\t\tcase CricketField.MOD:\n\t\t\treturn this.fields[15];\n\t}\n}"},"hasTrajData":{"Documentation":{"description":"Returns true if the traj field is non-nullish.","tags":[]},"Source":"PULSE.UdsHawkeyeRecord.prototype.hasTrajData = function ()\n{\n\treturn !Utils.isNullish( this.fields[23] );\n}"},"generateSummary":{"Documentation":{"description":"Gets a runs/wicket summary for this record.","tags":[]},"Source":"PULSE.UdsHawkeyeRecord.prototype.generateSummary = function ( lowercase )\n{\n\tvar summary = '';\n\tif ( this.get( CricketField.IS_WICKET ) )\n\t{\n\t\tsummary += lowercase ? 'wicket ' : 'Wicket ';\n\t}\n\t\n\tvar runs = +this.get( CricketField.RUNS );\n\tif ( runs > 0 )\n\t{\n\t\tsummary += runs + ' run';\n\t\tif ( runs > 1 )\n\t\t{\n\t\t\tsummary += 's';\n\t\t}\n\t\t\n\t\tvar et = this.get( CricketField.EXTRA_TYPE );\n\t\tif ( et.length > 0 )\n\t\t{\n\t\t\tsummary += ' (' + ( lowercase ? et.toLowerCase() : et ) + ')';\n\t\t}\n\t}\n\treturn summary;\n}"},"generateDescription":{"Documentation":{"description":"Obtains a commentary-style description of this record.","tags":[]},"Source":"PULSE.UdsHawkeyeRecord.prototype.generateDescription = function ()\n{\n\tvar description = '<b>';\n\n\tdescription += ( +this.get( CricketField.OVER ) - 1 );\n\tdescription += '.';\n\tdescription += this.get( CricketField.COUNTING_BALL );\n\tdescription += '</b> ';\n\t\n    description += this.get( CricketField.BOWLER );\n    description += ' to ';\n    description += this.get( CricketField.BATSMAN );\n\n    // Add ball speed to description\n    var speed = this.get( CricketField.BOWL_SPEED );\n    if ( !isNaN( speed ) && speed >= 30 && speed <= 120 )\n    {\n        description += ', ';\n        if ( PULSE.SpeedModeController.mode === PULSE.SpeedModeController.MODE_KMH )\n        {\n        \tspeed = PULSE.SpeedModeController.mphToKmh( speed );\n        }\n        \n        description += speed.toFixed( 1 );\n        description += ' ' + PULSE.SpeedModeController.unit;        \n    }\n\n    // Add runs scored to description\n\tvar credit = +this.get( CricketField.CREDIT );\n    \n    description += ', ';\n    if ( this.get( CricketField.IS_WICKET ) )\n    {\n        description += 'wicket';\n    }\n    else \n    {\n    \tif ( credit === 0 )\n\t    {\n\t        description += 'dot ball';\n\t    }\n\t    else\n\t    {\n\t        description += credit;\n\t        description += ' run';\n\t        if ( credit > 1 )\n\t        {\n\t            description += 's';\n\t        }\n\t    }\n    }\n\n    // Add description of where the ball went\n    var ps = this.get( CricketField.PITCH_SEGMENT );\n    if ( !Utils.isNullish( ps ) && !this.get( CricketField.IS_WICKET ) && credit > 0 )\n    {\n    \tdescription += ', hit ';\n    \tdescription += CricketSegmentLookup[ ps ];\n    }\n\n    // Finish the sentence\n    description += '.';\n\n    return description;\n}"}},"parseTrajectory":{"Documentation":{"description":"Parses the trajectory data given.","tags":[]},"Source":"PULSE.UdsHawkeyeRecord.parseTrajectory = function ( encoded )\n{\n\t// Raw string is a Base64 encoded stream\n\tvar decoded = Base64Decoder.decode( encoded );\n\t\n\tif ( decoded.length < 72 )\n\t{\n\t\tPULSE.Tracer.warn( 'Decoded traj length was ' + decoded.length );\n\t\treturn undefined;\n\t}\n\t\n    // Extract coefficients into a trajectory object\n\tvar traj = new CricketBallTrajectory();\n\ttry\n\t{\n\t\ttraj.bp   = PULSE.UdsHawkeyeRecord.readMulti( decoded, 0, 2 );\n\t\ttraj.bt   = PULSE.UdsHawkeyeRecord.readMulti( decoded, 8, 1 ).x;\n\t\ttraj.a \t  = PULSE.UdsHawkeyeRecord.readMulti( decoded, 12, 3 );\n\t\ttraj.ebv  = PULSE.UdsHawkeyeRecord.readMulti( decoded, 24, 3 );\n\t\ttraj.obv  = PULSE.UdsHawkeyeRecord.readMulti( decoded, 36, 3 );\n\t\ttraj.oba  = PULSE.UdsHawkeyeRecord.readMulti( decoded, 48, 3 );\n\t\ttraj.bh   = PULSE.UdsHawkeyeRecord.readMulti( decoded, 60, 1 ).x;\n\t\t//traj.pred = parseBoolean( decoded.substring( 64, 65 ) );\n\t\t//traj.xpos = this.readMulti( decoded, 65, 1 ).x;\n\t\t//traj.end = ?\n\t\t//traj.trackApproved = parseInt( decoded.substring( 71, 72 ) ) === 1;\n\t\t// TODO\n\t\ttraj.trackApproved = true;\n\n\t\t// Calculate the period\n\t    var start = traj.getTimeAtX( 18.5 ) + traj.bt;\n\t    var end = traj.getTimeAtX( 0 ) + traj.bt;\n\t    traj.period = { start: start, end: end };\n\t}\n\tcatch ( exception )\n\t{\n\t\tPULSE.Tracer.error( exception );\n\t\ttraj.trackApproved = false;\n\t}\n\t\n\treturn traj;\n}"},"readMulti":{"Documentation":{"description":"Utility method to read multiple floats from the given data stream.","tags":[]},"Source":"PULSE.UdsHawkeyeRecord.readMulti = function ( data, offset, n )\n{\n\tvar ret = {};\n\n\tif ( n > 0 )\n\t{\n\t\tret.x = PULSE.UdsHawkeyeRecord.decodeFloat( data.substring( offset, offset + 4 ) );\n\t}\n\tif ( n > 1 )\n\t{\n\t\tret.y = PULSE.UdsHawkeyeRecord.decodeFloat( data.substring( offset + 4, offset + 8 ) );\n\t}\n\tif ( n > 2 )\n\t{\n\t\tret.z = PULSE.UdsHawkeyeRecord.decodeFloat( data.substring( offset + 8, offset + 12 ) );\n\t}\n\t\n\treturn ret;\n}"},"decodeFloat":{"Documentation":{"description":"Decode an IEE754 float.","tags":[]},"Source":"PULSE.UdsHawkeyeRecord.decodeFloat = function ( data )\n{\n    var sign = ( data.charCodeAt( 0 ) & 0x80 ) >> 7;\n    var exponent = ( ( data.charCodeAt( 0 ) & 0x7F ) << 1 ) + ( data.charCodeAt( 1 ) >> 7 );\n    \n    var significand = 0.0;\n    var bit = 23;\n    var component = 1.0;\n    var b;\n    var mask;\n\n    while ( bit >= 0 )\n    {\n        if ( bit === 23 )\n        {\n            b = ( data.charCodeAt( 1 ) & 0x7F ) | 0x80;\n            mask = 0x80; \n        }\n        else if ( bit === 15 )\n        {\n            b = data.charCodeAt( 2 );\n            mask = 0x80; \n        }\n        else if ( bit === 7 )\n        {\n            b = data.charCodeAt( 3 );\n            mask = 0x80; \n        }\n\t\n\t    if ( ( mask & b ) === mask )\n\t    {\n\t        significand += component;\n\t    }\n\n\t    component /= 2;\n\t    mask = mask >> 1;\n\t    bit--;\n    }\n\n    return Math.pow( -1, sign ) *\n           Math.pow( 2, exponent - 127 ) *\n           significand; \n}"}},"UdsScore":{"Documentation":{"description":"Class to derive score from UDS data.","tags":[{"title":"param","description":":\n           assoc. array of all balls","type":null,"name":"rawData"},{"title":"param","description":":\n           array of the batting orders present for","type":null,"name":"battingOrder"}]},"Source":"PULSE.UdsScore = function( rawData, battingOrder, latest )\n{\n\tvar inningsNumber = \"1\";\n\tvar latestBP = new PULSE.BallProgress( latest );\n\n\t// an array of for initialized innings\n\tvar inningsObj =\n\t{\n\t\t\"1\" : new this.Innings( ),\n\t\t\"2\" : new this.Innings( ),\n\t\t\"3\" : new this.Innings( ),\n\t\t\"4\" : new this.Innings( )\n\t};\n\n\tvar selectedInnings = {};\n\n\tfor ( var key in rawData )\n\t{\n\t\tif ( rawData.hasOwnProperty( key ) )\n\t\t{\n\t\t\tvar item = rawData[key];\n\n\t\t\tvar innings = item.get( CricketField.INNINGS );\n\n\t\t\tvar runs = item.get( CricketField.RUNS );\n\n\t\t\tvar isWicket = item.get( CricketField.IS_WICKET );\n\n\t\t\tif ( inningsObj[innings] )\n\t\t\t{\n\n\t\t\t\tvar selectedInnings = inningsObj[innings];\n\n\t\t\t\t// increment runs\n\t\t\t\tselectedInnings.runs += +runs;\n\t\t\t\tselectedInnings.countingBall = rawData[key].countingBall;\n\n\t\t\t\t// increment wickets\n\t\t\t\tif ( isWicket )\n\t\t\t\t\tselectedInnings.wickets++;\n\n\t\t\t\tselectedInnings.lastBP = key;\n\t\t\t}\n\t\t}\n\t}\n\n\t// if there is a latest innings\n\t// make that innings obj true\n\tif ( latestBP.innings && inningsObj[latestBP.innings] )\n\t{\n\t\tinningsObj[latestBP.innings].mostRecentInnings = true;\n\t\tinningsObj[latestBP.innings].getScoreString( );\n\t}\n\n\t// work out which order to place the array in with battingOrder\n\tvar orderByTeam = this.battingOrderByTeam( battingOrder );\n\n\tvar orderedTeamInnings =\n\t{\n\t\t\"1\" : this.getTeamInnings( 0, inningsObj, orderByTeam ),\n\t\t\"2\" : this.getTeamInnings( 1, inningsObj, orderByTeam )\n\t};\n\n\treturn new PULSE.UdsScore.prototype.MatchResult( orderedTeamInnings );\n}","prototype":{"battingOrderByTeam":{"Documentation":{"description":"function: returns a filtered array of battingOrder ordered by team batting\nfirst","tags":[]},"Source":"PULSE.UdsScore.prototype.battingOrderByTeam = function( battingOrder )\n{\n\tvar orderedBattingOrder = [ [], [] ];\n\n\tfor ( var i = 0; i < 4; i++ )\n\t{\n\t\tvar teamNumber = battingOrder[i];\n\n\t\tif ( teamNumber )\n\t\t{\n\t\t\torderedBattingOrder[teamNumber - 1].push( i + 1 );\n\t\t}\n\t}\n\n\treturn orderedBattingOrder;\n}"},"getTeamInnings":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.UdsScore.prototype.getTeamInnings"},{"title":"param","description":null,"type":null,"name":"teamIdx"},{"title":"param","description":null,"type":null,"name":"inningsObj"},{"title":"param","description":null,"type":null,"name":"orderByTeam"}]},"Source":"PULSE.UdsScore.prototype.getTeamInnings = function( teamIdx, inningsObj,\n\t\torderByTeam )\n{\n\tvar inningsFirst = inningsObj[orderByTeam[teamIdx][0]];\n\tvar inningsSecond = inningsObj[orderByTeam[teamIdx][1]];\n\treturn new this.TeamInnings( [ inningsFirst, inningsSecond ] );\n}"},"Innings":{"Documentation":{"description":"Object to help derive innings scores","tags":[]},"Source":"PULSE.UdsScore.prototype.Innings = function()\n{\n\tthis.runs = 0;\n\tthis.wickets = 0;\n\tthis.lastBP = \"\";\n\tthis.overProgress = '';\n\tthis.mostRecentInnings = false;\n}","prototype":{"getScoreString":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.UdsScore.prototype.Innings.prototype.getScoreString = function()\n{\n\t// if balls have been placed in\n\tif ( this.lastBP !== \"\" )\n\t{\n\t\tvar progress = new PULSE.BallProgress( this.lastBP );\n\n\t\t// this works out the over progress\n\t\tvar scoreInstance = PULSE.CLIENT.CRICKET.Score.getInstance();\n\t\tvar overNum = +progress.over;\n\t\tvar countingBalls = this.countingBall;\n\t\tif ( this.countingBall >= 6 )\n\t\t{\n\t\t\toverNum++;\n\t\t\tcountingBalls = 0;\n\t\t}\n\t\tthis.overProgress = scoreInstance.gameScore\n\t\t\t\t&& scoreInstance.gameScore['over-progress'] ? scoreInstance.gameScore['over-progress']\n\t\t\t\t: ( overNum - 1 ) + \".\" + countingBalls;\n\n\t\treturn this.runs\n\t\t\t\t+ ( this.wickets < 10 ? \"/\" + this.wickets : \"\" )\n\t\t\t\t+ ( this.mostRecentInnings ? \" (\" + this.overProgress + \" ov)\"\n\t\t\t\t\t\t: \"\" )\n\t}\n\treturn \"\";\n}"}}},"TeamInnings":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"inningsArray"}]},"Source":"PULSE.UdsScore.prototype.TeamInnings = function( inningsArray )\n{\n\tthis.inningsArray = inningsArray || [];\n}","prototype":{"getScoreString":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.UdsScore.prototype.TeamInnings.prototype.getScoreString = function()\n{\n\tvar string = \"\";\n\n\tfor ( var i = 0; i < this.inningsArray.length; i++ )\n\t{\n\n\t\tvar innings = this.inningsArray[i];\n\n\t\tif ( innings )\n\t\t{\n\t\t\tvar tmpString = innings.getScoreString( );\n\n\t\t\tif( tmpString )\n\t\t\t{\n\t\t\t\tif ( i === 0 )\n\t\t\t\t{\n\t\t\t\t\tstring += tmpString;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstring += \" & \" + tmpString;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\treturn string;\n}"}}},"MatchResult":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"teamsInnings"}]},"Source":"PULSE.UdsScore.prototype.MatchResult = function( teamsInnings )\n{\n\tthis.inningsByTeam = teamsInnings;\n}","prototype":{"inningsPlayed":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.UdsScore.prototype.MatchResult.prototype.inningsPlayed = function()\n{\n\tvar inningsCount = 0;\n\tvar first = this.inningsByTeam[\"1\"];\n\tvar second = this.inningsByTeam[\"2\"];\n\n\tfor ( var key in this.inningsByTeam )\n\t{\n\t\tif ( this.inningsByTeam.hasOwnProperty( key ) )\n\t\t{\n\t\t\tvar team = this.inningsByTeam[key];\n\n\t\t\tif ( team && team.inningsArray )\n\t\t\t{\n\t\t\t\tfor ( var i = 0; i < team.inningsArray.length; i++ )\n\t\t\t\t{\n\t\t\t\t\tvar innings = team.inningsArray[i];\n\n\t\t\t\t\tif ( innings )\n\t\t\t\t\t{\n\t\t\t\t\t\tvar bp = team.inningsArray[i].lastBP;\n\n\t\t\t\t\t\tif ( bp )\n\t\t\t\t\t\t\tinningsCount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn inningsCount;\n}"},"battingFirst":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.UdsScore.prototype.MatchResult.prototype.battingFirst = function()\n{\n\tvar first = this.inningsByTeam[\"1\"];\n\tvar bp = new PULSE.BallProgress( first.inningsArray[0].lastBP );\n\treturn bp.innings === \"1\" ? 0 : 1;\n}"},"followOn":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.UdsScore.prototype.MatchResult.prototype.followOn = function()\n{\n\tvar first = this.inningsByTeam[\"1\"];\n\tvar bp1 = new PULSE.BallProgress( first.inningsArray[0].lastBP );\n\tvar bp2 = new PULSE.BallProgress( first.inningsArray[1].lastBP );\n\treturn ( bp1.innings === \"1\" && bp2.innings === \"4\" || bp1.innings === \"2\"\n\t\t\t&& bp2.innings === \"3\" );\n}"},"getTotalRunsTeam":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"number"}]},"Source":"PULSE.UdsScore.prototype.MatchResult.prototype.getTotalRunsTeam = function(\n\t\tnumber )\n{\n\tvar count = 0;\n\tvar team = this.inningsByTeam[number] || undefined;\n\n\tif ( team )\n\t{\n\t\tfor ( var i = 0; i < team.inningsArray.length; i++ )\n\t\t{\n\t\t\tvar innings = team.inningsArray[i];\n\n\t\t\tif ( innings && innings.runs )\n\t\t\t{\n\t\t\t\tcount += innings.runs;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\t// throw bad param\n\t}\n\treturn count;\n}"},"getWicketsTakenTeam":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"number"}]},"Source":"PULSE.UdsScore.prototype.MatchResult.prototype.getWicketsTakenTeam = function(\n\t\tnumber )\n{\n\tvar count = 0;\n\tvar team = this.inningsByTeam[( number === \"1\" ? \"2\" : \"1\" )] || undefined;\n\n\tif ( team )\n\t{\n\t\tvar i = team.inningsArray.length;\n\n\t\twhile ( i-- )\n\t\t{\n\t\t\tvar innings = team.inningsArray[i];\n\n\t\t\tif ( innings && innings.lastBP )\n\t\t\t{\n\t\t\t\treturn innings.wickets;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn count;\n}"}}}}},"UdsStatsRecord":{"Documentation":{"description":"Wrapper for a record from a UDS file.","tags":[]},"Source":"PULSE.UdsStatsRecord = function ( rawBp, rawData, playerLookup )\n{\n\tthis.fields = rawData.split( ',' );\n\tthis.bp = new PULSE.BallProgress( rawBp );\n\tthis.traj = null;\n\tthis.playerLookup = playerLookup;\n}","prototype":{"satisfiesFilter":{"Documentation":{"description":"Returns true if this record satisfies the given filter.","tags":[]},"Source":"PULSE.UdsStatsRecord.prototype.satisfiesFilter = function ( filter )\n{\n\tif ( filter === undefined )\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\t// Check innings, over and ball, allowing for All \n\t\tvar inn = Utils.isNullish( filter.innings ) || \n\t\t\t\t  CricketFilter.ALL === filter.innings ||\n\t\t\t\t  this.get( CricketField.INNINGS ) == filter.innings.toString(); // Coerce!\n\t\t\n\t\tvar over = Utils.isNullish( filter.over ) || \n\t\t   \t\t   CricketFilter.ALL === filter.over ||\n\t\t   \t\t   this.get( CricketField.OVER ) == filter.over; // Coerce!\n\n\t\tvar ball = Utils.isNullish( filter.ball ) || \n\t\t   \t\t   CricketFilter.ALL === filter.ball ||\n\t\t   \t\t   CricketFilter.ALLBALLS === filter.ball ||\n\t\t   \t\t   this.get( CricketField.BALL ) == filter.ball; // Coerce!\n\n\t\tif ( inn && over && ball )\n\t\t{\n\t\t\t// Check batsman\n\t    \tvar lh = this.get( CricketField.HANDEDNESS ) === CricketHandedness.LEFT;\n\t\t\tvar ba = Utils.isNullish( filter.batsman ) || \n\t\t\t\t\t CricketFilter.ALL === filter.batsman ||\n\t\t\t\t\t CricketFilter.ALLBATSMEN === filter.batsman ||\n\t\t\t\t\t ( !lh && CricketFilter.RIGHTHANDERS === filter.batsman ) || \n\t\t\t\t\t (  lh && CricketFilter.LEFTHANDERS === filter.batsman ) ||\n\t\t\t\t\t this.get( CricketField.BATSMAN ) === filter.batsman;\n\t\t\t\t\t \n\t\t\t// Check bowler\n\t\t\tvar spin = this.get( CricketField.BOWLER_SPEED ) === CricketBowlerSpeed.SPIN;\n\t\t\tvar bo = Utils.isNullish( filter.bowler ) || \n\t\t\t\t\t CricketFilter.ALL === filter.bowler ||\n\t\t\t\t\t CricketFilter.ALLBOWLERS === filter.bowler ||\n\t\t\t\t\t (  spin && CricketFilter.SPINBOWLERS === filter.bowler ) || \n\t\t\t\t\t ( !spin && CricketFilter.SEAMBOWLERS === filter.bowler ) ||\n\t\t\t\t\t this.get( CricketField.BOWLER ) === filter.bowler;\n\t\t\t\n\t\t\treturn ba && bo;\n\t    }\n\t\t\n    \treturn false;\n\t}\n}"},"get":{"Documentation":{"description":"Obtains a field (column) from this record.","tags":[]},"Source":"PULSE.UdsStatsRecord.prototype.get = function ( field )\n{\n\tswitch ( field )\n\t{\n\t\tcase CricketField.ID:\n\t\t\treturn this.bp.description();\n\t\t\t\n\t\tcase CricketField.INNINGS:\n\t\t\treturn this.bp.innings;\n\t\t\t\n\t\tcase CricketField.OVER:\n\t\t\treturn this.bp.over;\n\t\t\t\n\t\tcase CricketField.BALL:\n\t\t\treturn this.bp.ball;\n\t\t\t\n\t\tcase CricketField.COUNTING_BALL:\n\t\t\treturn this.countingBall;\n\t\t\t\n\t\tcase CricketField.IS_COUNTING:\n\t\t\tvar et = this.fields[10];\n\t\t\treturn ( et.length === 0 || 'Lb' === et || 'B' === et );\n\t\n\t\tcase CricketField.BATSMAN:\n\t\t\treturn this.playerLookup[ this.fields[1] ].fullName;\n\t\t\t\n\t\tcase CricketField.NF_BATSMAN:\n\t\t\treturn this.playerLookup[ this.fields[2] ].fullName;\n\t\t\t\n\t\tcase CricketField.BOWLER:\n\t\t\treturn this.playerLookup[ this.fields[3] ].fullName;\n\t\t\t\n\t\tcase CricketField.BOWL_SPEED:\n\t\t\treturn Number( this.fields[4] );\n\t\t\t\n\t\tcase CricketField.DISMISSED:\n\t\t\treturn this.playerLookup[ this.fields[5] ] ? this.playerLookup[ this.fields[5] ].fullName : '';\n\t\t\t\n\t\tcase CricketField.IS_WICKET:\n\t\t\treturn this.fields[5] !== \"-1\";\n\t\t\t\n\t\tcase CricketField.MOD:\n\t\t\treturn this.fields[6];\n\t\t\t\t\t\n\t\tcase CricketField.RUNS:\n\t\t\tif ( this.fields[7].length > 0 )\n\t\t\t{\n\t\t\t\treturn this.fields[7];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\t\n\t\tcase CricketField.CREDIT:\n\t\t\t/*if ( this.fields[8] === \"0\" )\n\t\t\t{\n\t\t\t\treturn this.get( CricketField.RUNS );\n\t\t\t}\n\t\t\telse\n\t\t\t{*/\n\t\t\t\treturn this.fields[8];\n\t\t\t//}\n\t\t\t\n\t\tcase CricketField.DEBIT:\n\t\t\t/*if ( this.fields[9] === \"0\" )\n\t\t\t{\n\t\t\t\treturn this.get( CricketField.RUNS );\n\t\t\t}\n\t\t\telse\n\t\t\t{*/\n\t\t\t\treturn this.fields[9];\n\t\t\t//}\n\t\t\t\n\t\tcase CricketField.EXTRA_TYPE:\n\t\t\treturn this.fields[10];\n\t\t\t\n\t\tcase CricketField.HAS_HANDEDNESS:\n\t\t\treturn this.fields[11].length > 0;\n\t\t\t\n\t\tcase CricketField.HANDEDNESS:\n\t\t\treturn this.fields[11] === 'y' ? CricketHandedness.RIGHT : CricketHandedness.LEFT;\n\t\t\t\n\t\tcase CricketField.PITCHED:\n\t\t\tif ( this.fields[12].length === 0 )\n\t\t\t{\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\treturn { x:this.fields[12], y:this.fields[13], z:0 };\n\t\t\t\n\t\tcase CricketField.STUMPS:\n\t\t\tif ( this.fields[14].length === 0 )\n\t\t\t{\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\treturn { x:0, y:this.fields[14], z:this.fields[15] };\n\t\t\t\n\t\tcase CricketField.WW:\n\t\t\tif ( Utils.isNullish( this.fields[16] ) || Utils.isNullish( this.fields[17] ) )\n\t\t\t{\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn PULSE.UdsStatsRecord.covertWWToCoaching( this.fields[16], this.fields[17] );\n\t\t\t}\n\t\t\t\n\t\tcase CricketField.WIN_LIKELIHOODS:\n\t\t\tif ( Utils.isNullish( this.fields[18] ) )\n\t\t\t{\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn [ +this.fields[18], +this.fields[19], +this.fields[20] ];\n\t\t\t}\n\t}\n}"},"hasTrajData":{"Documentation":{"description":"Returns true if the traj field is non-nullish.","tags":[]},"Source":"PULSE.UdsStatsRecord.prototype.hasTrajData = function ()\n{\n\treturn false;\n}"},"generateSummary":{"Documentation":{"description":"Gets a runs/wicket summary for this record.","tags":[]},"Source":"PULSE.UdsStatsRecord.prototype.generateSummary = function ( lowercase )\n{\n\tvar summary = '';\n\tif ( this.get( CricketField.IS_WICKET ) )\n\t{\n\t\tsummary += lowercase ? 'wicket ' : 'Wicket ';\n\t}\n\t\n\tvar runs = +this.get( CricketField.RUNS );\n\tif ( runs > 0 )\n\t{\n\t\tsummary += runs + ' run';\n\t\tif ( runs > 1 )\n\t\t{\n\t\t\tsummary += 's';\n\t\t}\n\t\t\n\t\tvar et = this.get( CricketField.EXTRA_TYPE );\n\t\tif ( et.length > 0 )\n\t\t{\n\t\t\tsummary += ' (' + ( lowercase ? et.toLowerCase() : et ) + ')';\n\t\t}\n\t}\n\treturn summary;\n}"},"generateDescription":{"Documentation":{"description":"Obtains a commentary-style description of this record.","tags":[]},"Source":"PULSE.UdsStatsRecord.prototype.generateDescription = function ()\n{\n\tvar description = '<b>';\n\n\tdescription += ( +this.get( CricketField.OVER ) - 1 );\n\tdescription += '.';\n\tdescription += this.get( CricketField.COUNTING_BALL );\n\tdescription += '</b> ';\n\t\n    description += this.get( CricketField.BOWLER );\n    description += ' to ';\n    description += this.get( CricketField.BATSMAN );\n\n    // Add ball speed to description\n    var speed = this.get( CricketField.BOWL_SPEED );\n    if ( !isNaN( speed ) && speed >= 13 && speed <= 54 )\n    {\n        description += ', ';\n        if ( PULSE.SpeedModeController.mode === PULSE.SpeedModeController.MODE_KMH )\n        {\n        \tspeed = PULSE.SpeedModeController.mpsToKmh( speed );\n        }\n        \n        description += speed.toFixed( 1 );\n        description += ' ' + PULSE.SpeedModeController.unit;        \n    }\n\n    // Add runs scored to description\n\tvar credit = +this.get( CricketField.CREDIT );\n    \n    description += ', ';\n    if ( this.get( CricketField.IS_WICKET ) )\n    {\n        description += 'wicket';\n    }\n    else \n    {\n    \tif ( credit === 0 )\n\t    {\n\t        description += 'dot ball';\n\t    }\n\t    else\n\t    {\n\t        description += credit;\n\t        description += ' run';\n\t        if ( credit > 1 )\n\t        {\n\t            description += 's';\n\t        }\n\t    }\n    }\n\n    // Add description of where the ball went\n    var ps = this.get( CricketField.PITCH_SEGMENT );\n    if ( !Utils.isNullish( ps ) && !this.get( CricketField.IS_WICKET ) && credit > 0 )\n    {\n    \tdescription += ', hit ';\n    \tdescription += CricketSegmentLookup[ ps ];\n    }\n\n    // Finish the sentence\n    description += '.';\n\n    return description;\n}"}},"parseTrajectory":{"Documentation":{"description":"Parses the trajectory data given.","tags":[]},"Source":"PULSE.UdsStatsRecord.parseTrajectory = function ( encoded )\n{\n\t// Raw string is a Base64 encoded stream\n\tvar decoded = Base64Decoder.decode( encoded );\n\t\n\tif ( decoded.length < 72 )\n\t{\n\t\tPULSE.Tracer.warn( 'Decoded traj length was ' + decoded.length );\n\t\treturn undefined;\n\t}\n\t\n    // Extract coefficients into a trajectory object\n\tvar traj = new CricketBallTrajectory();\n\ttry\n\t{\n\t\ttraj.bp   = PULSE.UdsStatsRecord.readMulti( decoded, 0, 2 );\n\t\ttraj.bt   = PULSE.UdsStatsRecord.readMulti( decoded, 8, 1 ).x;\n\t\ttraj.a \t  = PULSE.UdsStatsRecord.readMulti( decoded, 12, 3 );\n\t\ttraj.ebv  = PULSE.UdsStatsRecord.readMulti( decoded, 24, 3 );\n\t\ttraj.obv  = PULSE.UdsStatsRecord.readMulti( decoded, 36, 3 );\n\t\ttraj.oba  = PULSE.UdsStatsRecord.readMulti( decoded, 48, 3 );\n\t\ttraj.bh   = PULSE.UdsStatsRecord.readMulti( decoded, 60, 1 ).x;\n\t\t//traj.pred = parseBoolean( decoded.substring( 64, 65 ) );\n\t\t//traj.xpos = this.readMulti( decoded, 65, 1 ).x;\n\t\t//traj.end = ?\n\t\t//traj.trackApproved = parseInt( decoded.substring( 71, 72 ) ) === 1;\n\t\t// TODO\n\t\ttraj.trackApproved = true;\n\n\t\t// Calculate the period\n\t    var start = traj.getTimeAtX( 18.5 ) + traj.bt;\n\t    var end = traj.getTimeAtX( 0 ) + traj.bt;\n\t    traj.period = { start: start, end: end };\n\t}\n\tcatch ( exception )\n\t{\n\t\tPULSE.Tracer.error( exception );\n\t\ttraj.trackApproved = false;\n\t}\n\t\n\treturn traj;\n}"},"readMulti":{"Documentation":{"description":"Utility method to read multiple floats from the given data stream.","tags":[]},"Source":"PULSE.UdsStatsRecord.readMulti = function ( data, offset, n )\n{\n\tvar ret = {};\n\n\tif ( n > 0 )\n\t{\n\t\tret.x = PULSE.UdsStatsRecord.decodeFloat( data.substring( offset, offset + 4 ) );\n\t}\n\tif ( n > 1 )\n\t{\n\t\tret.y = PULSE.UdsStatsRecord.decodeFloat( data.substring( offset + 4, offset + 8 ) );\n\t}\n\tif ( n > 2 )\n\t{\n\t\tret.z = PULSE.UdsStatsRecord.decodeFloat( data.substring( offset + 8, offset + 12 ) );\n\t}\n\t\n\treturn ret;\n}"},"decodeFloat":{"Documentation":{"description":"Decode an IEE754 float.","tags":[]},"Source":"PULSE.UdsStatsRecord.decodeFloat = function ( data )\n{\n    var sign = ( data.charCodeAt( 0 ) & 0x80 ) >> 7;\n    var exponent = ( ( data.charCodeAt( 0 ) & 0x7F ) << 1 ) + ( data.charCodeAt( 1 ) >> 7 );\n    \n    var significand = 0.0;\n    var bit = 23;\n    var component = 1.0;\n    var b;\n    var mask;\n\n    while ( bit >= 0 )\n    {\n        if ( bit === 23 )\n        {\n            b = ( data.charCodeAt( 1 ) & 0x7F ) | 0x80;\n            mask = 0x80; \n        }\n        else if ( bit === 15 )\n        {\n            b = data.charCodeAt( 2 );\n            mask = 0x80; \n        }\n        else if ( bit === 7 )\n        {\n            b = data.charCodeAt( 3 );\n            mask = 0x80; \n        }\n\t\n\t    if ( ( mask & b ) === mask )\n\t    {\n\t        significand += component;\n\t    }\n\n\t    component /= 2;\n\t    mask = mask >> 1;\n\t    bit--;\n    }\n\n    return Math.pow( -1, sign ) *\n           Math.pow( 2, exponent - 127 ) *\n           significand; \n}"},"covertWWToCoaching":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.UdsStatsRecord.covertWWToCoaching"},{"title":"param","description":null,"type":null,"name":"wwX"},{"title":"param","description":null,"type":null,"name":"wwY"}]},"Source":"PULSE.UdsStatsRecord.covertWWToCoaching = function ( wwX, wwY )\n{\n\tvar scaleX = 4.05;\n\tvar scaleY = 3.45;\n\tvar offsetX = -130.33;\n\tvar offsetY = -163.64;\n\t//{ x:this.fields[16], y:this.fields[17] }\n\t\n\treturn { x: ( ( wwY * scaleX ) + offsetX ), y : ( ( wwX * scaleY ) + offsetY ) };\n}"}},"UdsTrajRecord":{"Documentation":{"description":"Wrapper for a record from a UDS file.","tags":[]},"Source":"PULSE.UdsTrajRecord = function ( rawBp, rawData, playerLookup )\n{\n\tthis.fields = rawData.split( ',' );\n\tthis.bp = new PULSE.BallProgress( rawBp );\n\tthis.traj = null;\n\tthis.playerLookup = playerLookup;\n}","prototype":{"satisfiesFilter":{"Documentation":{"description":"Returns true if this record satisfies the given filter.","tags":[]},"Source":"PULSE.UdsTrajRecord.prototype.satisfiesFilter = function ( filter )\n{\n\tif ( filter === undefined )\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\t// First check a *.*.All match on the over filter\n/*\t\tif ( filter.over !== undefined && filter.over.match( /[0-9]+\\.[0-9]+\\.All/ ) !== null )\n\t\t{\n\t\t\tvar sample = filter.over.replace( /All/, '0' );\n\t\t\tvar sampleBp = new PULSE.BallProgress( sample );\n\t\t\t\n\t\t\treturn ( this.bp.innings === sampleBp.innings &&\n\t\t\t\t\t this.bp.over === sampleBp.over );\n\t\t}\n*/\t\t\n\t\t// Check innings, over and ball, allowing for All \n\t\tvar inn = Utils.isNullish( filter.innings ) || \n\t\t\t\t  CricketFilter.ALL === filter.innings ||\n\t\t\t\t  this.get( CricketField.INNINGS ) == filter.innings.toString(); // Coerce!\n\t\t\n\t\tvar over = Utils.isNullish( filter.over ) || \n\t\t   \t\t   CricketFilter.ALL === filter.over ||\n\t\t   \t\t   this.get( CricketField.OVER ) == filter.over; // Coerce!\n\n\t\tvar ball = Utils.isNullish( filter.ball ) || \n\t\t   \t\t   CricketFilter.ALL === filter.ball ||\n\t\t   \t\t   CricketFilter.ALLBALLS === filter.ball ||\n\t\t   \t\t   this.get( CricketField.BALL ) == filter.ball; // Coerce!\n\n\t\tif ( inn && over && ball )\n\t\t{\n\t\t\t// Check batsman\n\t    \tvar lh = this.get( CricketField.HANDEDNESS ) === CricketHandedness.LEFT;\n\t\t\tvar ba = Utils.isNullish( filter.batsman ) || \n\t\t\t\t\t CricketFilter.ALL === filter.batsman ||\n\t\t\t\t\t CricketFilter.ALLBATSMEN === filter.batsman ||\n\t\t\t\t\t ( !lh && CricketFilter.RIGHTHANDERS === filter.batsman ) || \n\t\t\t\t\t (  lh && CricketFilter.LEFTHANDERS === filter.batsman ) ||\n\t\t\t\t\t this.get( CricketField.BATSMAN ) === filter.batsman;\n\t\t\t\t\t \n\t\t\t// Check bowler\n\t\t\tvar spin = this.get( CricketField.BOWLER_SPEED ) === CricketBowlerSpeed.SPIN;\n\t\t\tvar bo = Utils.isNullish( filter.bowler ) || \n\t\t\t\t\t CricketFilter.ALL === filter.bowler ||\n\t\t\t\t\t CricketFilter.ALLBOWLERS === filter.bowler ||\n\t\t\t\t\t (  spin && CricketFilter.SPINBOWLERS === filter.bowler ) || \n\t\t\t\t\t ( !spin && CricketFilter.SEAMBOWLERS === filter.bowler ) ||\n\t\t\t\t\t this.get( CricketField.BOWLER ) === filter.bowler;\n\t\t\t\n\t\t\treturn ba && bo;\n\t    }\n\t\t\n    \treturn false;\n\t}\n}"},"get":{"Documentation":{"description":"Obtains a field (column) from this record.","tags":[]},"Source":"PULSE.UdsTrajRecord.prototype.get = function ( field )\n{\n\tswitch ( field )\n\t{\n\t\tcase CricketField.ID:\n\t\t\treturn this.bp.description();\n\t\t\t\n\t\tcase CricketField.INNINGS:\n\t\t\treturn this.bp.innings;\n\t\t\t\n\t\tcase CricketField.OVER:\n\t\t\treturn this.bp.over;\n\t\t\t\n\t\tcase CricketField.BALL:\n\t\t\treturn this.bp.ball;\n\t\t\t\n\t\tcase CricketField.COUNTING_BALL:\n\t\t\treturn this.countingBall;\n\t\t\t\n\t\tcase CricketField.IS_COUNTING:\n\t\t\tvar et = this.fields[9];\n\t\t\treturn ( et.length === 0 || 'Lb' === et || 'B' === et );\n\t\n\t\tcase CricketField.BATSMAN:\n\t\t\treturn this.playerLookup[ this.fields[1] ].fullName;\n\t\t\t\n\t\tcase CricketField.NF_BATSMAN:\n\t\t\treturn this.playerLookup[ this.fields[2] ].fullName;\n\t\t\t\n\t\tcase CricketField.BOWLER:\n\t\t\treturn this.playerLookup[ this.fields[3] ].fullName;\n\t\t\t\n\t\tcase CricketField.BOWL_SPEED:\n\t\t\treturn Number( this.fields[4] );\n\t\t\t\n\t\tcase CricketField.DISMISSED:\n\t\t\treturn this.playerLookup[ this.fields[5] ] ? this.playerLookup[ this.fields[5] ].fullName : '';\n\t\t\t\n\t\tcase CricketField.IS_WICKET:\n\t\t\treturn this.fields[5] !== \"-1\";\n\t\t\t\n\t\tcase CricketField.MOD:\n\t\t\treturn this.fields[6];\n\t\t\t\n\t\tcase CricketField.RUNS:\n\t\t\tif ( this.fields[7].length > 0 )\n\t\t\t{\n\t\t\t\treturn this.fields[7];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\t\n\t\tcase CricketField.CREDIT:\n\t\t\t/*if ( this.fields[8] === \"0\" )\n\t\t\t{\n\t\t\t\treturn this.get( CricketField.RUNS );\n\t\t\t}\n\t\t\telse\n\t\t\t{*/\n\t\t\t\treturn this.fields[8];\n\t\t\t//}\n\t\t\t\n\t\tcase CricketField.EXTRA_TYPE:\n\t\t\treturn this.fields[9];\n\t\t\t\n\t\tcase CricketField.TRAJECTORY:\n\t\t\tif ( this.traj === null )\n\t\t\t{\n\t\t\t\tthis.traj = PULSE.UdsTrajRecord.parseTrajectory( this.fields[10] );\n\t\t\t}\n\t\t\treturn this.traj;\t\t\t\n\t}\n}"},"hasTrajData":{"Documentation":{"description":"Returns true if the traj field is non-nullish.","tags":[]},"Source":"PULSE.UdsTrajRecord.prototype.hasTrajData = function ()\n{\n\treturn !Utils.isNullish( this.fields[10] );\n}"},"generateSummary":{"Documentation":{"description":"Gets a runs/wicket summary for this record.","tags":[]},"Source":"PULSE.UdsTrajRecord.prototype.generateSummary = function ( lowercase )\n{\n\tvar summary = '';\n\tif ( this.get( CricketField.IS_WICKET ) )\n\t{\n\t\tsummary += lowercase ? 'wicket ' : 'Wicket ';\n\t}\n\t\n\tvar runs = +this.get( CricketField.RUNS );\n\tif ( runs > 0 )\n\t{\n\t\tsummary += runs + ' run';\n\t\tif ( runs > 1 )\n\t\t{\n\t\t\tsummary += 's';\n\t\t}\n\t\t\n\t\tvar et = this.get( CricketField.EXTRA_TYPE );\n\t\tif ( et.length > 0 )\n\t\t{\n\t\t\tsummary += ' (' + ( lowercase ? et.toLowerCase() : et ) + ')';\n\t\t}\n\t}\n\treturn summary;\n}"},"generateDescription":{"Documentation":{"description":"Obtains a commentary-style description of this record.","tags":[]},"Source":"PULSE.UdsTrajRecord.prototype.generateDescription = function ()\n{\n\tvar description = '<b>';\n\n\tdescription += ( +this.get( CricketField.OVER ) - 1 );\n\tdescription += '.';\n\tdescription += this.get( CricketField.COUNTING_BALL );\n\tdescription += '</b> ';\n\t\n    description += this.get( CricketField.BOWLER );\n    description += ' to ';\n    description += this.get( CricketField.BATSMAN );\n\n    // Add ball speed to description\n    var speed = this.get( CricketField.BOWL_SPEED );\n    if ( !isNaN( speed ) && speed >= 13 && speed <= 54 )\n    {\n        description += ', ';\n        if ( PULSE.SpeedModeController.mode === PULSE.SpeedModeController.MODE_KMH )\n        {\n        \tspeed = PULSE.SpeedModeController.mpsToKmh( speed );\n        }\n        \n        description += speed.toFixed( 1 );\n        description += ' ' + PULSE.SpeedModeController.unit;        \n    }\n\n    // Add runs scored to description\n\tvar credit = +this.get( CricketField.CREDIT );\n    \n    description += ', ';\n    if ( this.get( CricketField.IS_WICKET ) )\n    {\n        description += 'wicket';\n    }\n    else \n    {\n    \tif ( credit === 0 )\n\t    {\n\t        description += 'dot ball';\n\t    }\n\t    else\n\t    {\n\t        description += credit;\n\t        description += ' run';\n\t        if ( credit > 1 )\n\t        {\n\t            description += 's';\n\t        }\n\t    }\n    }\n\n    // Add description of where the ball went\n    var ps = this.get( CricketField.PITCH_SEGMENT );\n    if ( !Utils.isNullish( ps ) && !this.get( CricketField.IS_WICKET ) && credit > 0 )\n    {\n    \tdescription += ', hit ';\n    \tdescription += CricketSegmentLookup[ ps ];\n    }\n\n    // Finish the sentence\n    description += '.';\n\n    return description;\n}"}},"parseTrajectory":{"Documentation":{"description":"Parses the trajectory data given.","tags":[]},"Source":"PULSE.UdsTrajRecord.parseTrajectory = function ( encoded )\n{\n\t// Raw string is a Base64 encoded stream\n\tvar decoded = Base64Decoder.decode( encoded );\n\t\n\tif ( decoded.length < 72 )\n\t{\n\t\tPULSE.Tracer.warn( 'Decoded traj length was ' + decoded.length );\n\t\treturn undefined;\n\t}\n\t\n    // Extract coefficients into a trajectory object\n\tvar traj = new CricketBallTrajectory();\n\ttry\n\t{\n\t\ttraj.bp   = PULSE.UdsTrajRecord.readMulti( decoded, 0, 2 );\n\t\ttraj.bt   = PULSE.UdsTrajRecord.readMulti( decoded, 8, 1 ).x;\n\t\ttraj.a \t  = PULSE.UdsTrajRecord.readMulti( decoded, 12, 3 );\n\t\ttraj.ebv  = PULSE.UdsTrajRecord.readMulti( decoded, 24, 3 );\n\t\ttraj.obv  = PULSE.UdsTrajRecord.readMulti( decoded, 36, 3 );\n\t\ttraj.oba  = PULSE.UdsTrajRecord.readMulti( decoded, 48, 3 );\n\t\ttraj.bh   = PULSE.UdsTrajRecord.readMulti( decoded, 60, 1 ).x;\n\t\t//traj.pred = parseBoolean( decoded.substring( 64, 65 ) );\n\t\t//traj.xpos = this.readMulti( decoded, 65, 1 ).x;\n\t\t//traj.end = ?\n\t\t//traj.trackApproved = parseInt( decoded.substring( 71, 72 ) ) === 1;\n\t\t// TODO\n\t\ttraj.trackApproved = true;\n\n\t\t// Calculate the period\n\t    var start = traj.getTimeAtX( 18.5 ) + traj.bt;\n\t    var end = traj.getTimeAtX( 0 ) + traj.bt;\n\t    traj.period = { start: start, end: end };\n\t}\n\tcatch ( exception )\n\t{\n\t\tPULSE.Tracer.error( exception );\n\t\ttraj.trackApproved = false;\n\t}\n\t\n\treturn traj;\n}"},"readMulti":{"Documentation":{"description":"Utility method to read multiple floats from the given data stream.","tags":[]},"Source":"PULSE.UdsTrajRecord.readMulti = function ( data, offset, n )\n{\n\tvar ret = {};\n\n\tif ( n > 0 )\n\t{\n\t\tret.x = PULSE.UdsTrajRecord.decodeFloat( data.substring( offset, offset + 4 ) );\n\t}\n\tif ( n > 1 )\n\t{\n\t\tret.y = PULSE.UdsTrajRecord.decodeFloat( data.substring( offset + 4, offset + 8 ) );\n\t}\n\tif ( n > 2 )\n\t{\n\t\tret.z = PULSE.UdsTrajRecord.decodeFloat( data.substring( offset + 8, offset + 12 ) );\n\t}\n\t\n\treturn ret;\n}"},"decodeFloat":{"Documentation":{"description":"Decode an IEE754 float.","tags":[]},"Source":"PULSE.UdsTrajRecord.decodeFloat = function ( data )\n{\n    var sign = ( data.charCodeAt( 0 ) & 0x80 ) >> 7;\n    var exponent = ( ( data.charCodeAt( 0 ) & 0x7F ) << 1 ) + ( data.charCodeAt( 1 ) >> 7 );\n    \n    var significand = 0.0;\n    var bit = 23;\n    var component = 1.0;\n    var b;\n    var mask;\n\n    while ( bit >= 0 )\n    {\n        if ( bit === 23 )\n        {\n            b = ( data.charCodeAt( 1 ) & 0x7F ) | 0x80;\n            mask = 0x80; \n        }\n        else if ( bit === 15 )\n        {\n            b = data.charCodeAt( 2 );\n            mask = 0x80; \n        }\n        else if ( bit === 7 )\n        {\n            b = data.charCodeAt( 3 );\n            mask = 0x80; \n        }\n\t\n\t    if ( ( mask & b ) === mask )\n\t    {\n\t        significand += component;\n\t    }\n\n\t    component /= 2;\n\t    mask = mask >> 1;\n\t    bit--;\n    }\n\n    return Math.pow( -1, sign ) *\n           Math.pow( 2, exponent - 127 ) *\n           significand; \n}"}},"PointProgress":{"Documentation":{"description":"Class to encapsulate a point progress.","tags":[]},"Source":"PULSE.PointProgress = function ( rawPp )\n{\n\tvar fields = rawPp.split( '.' );\n\tthis.set = fields[0];\n\tthis.game = fields[1];\n\tthis.point = fields[2];\n}","matches":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.PointProgress.matches"},{"title":"param","description":null,"type":null,"name":"raw"}]},"Source":"PULSE.PointProgress.matches = function ( raw )\n{\n\treturn !Utils.isNullish( raw ) && raw.match( /\\d+\\.\\d+\\.\\d+/ ) !== null;\n}"},"prototype":{"description":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.PointProgress.prototype.description = function ()\n{\n\treturn this.set + '.' + this.game + '.' + this.point;\n}"},"compareTo":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"rawPp"}]},"Source":"PULSE.PointProgress.prototype.compareTo = function ( rawPp )\n{\n\tvar other = new PULSE.PointProgress( rawPp );\n\t\n    var compare = +this.set - +other.set;\n    if ( compare === 0 )\n    {\n        compare = +this.game - +other.game;\n        if ( compare === 0 )\n        {\n            compare = +this.point - +other.point;\n        }\n    }\n\n    return compare;\n}"}}},"TENNIS":{"Trajectory":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PULSE.TENNIS.Trajectory"},{"title":"param","description":null,"type":null,"name":"encodedData"}]},"Source":"PULSE.TENNIS.Trajectory = function ( encodedData )\n{\n}","prototype":{"getNumArcs":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.TENNIS.Trajectory.prototype.getNumArcs = function ()\n{\n\treturn this.arcs.length;\n}"},"getArc":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"index"}]},"Source":"PULSE.TENNIS.Trajectory.prototype.getArc = function ( index )\n{\n\treturn this.arcs[index];\n}"},"getRange":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.TENNIS.Trajectory.prototype.getRange = function ()\n{\n    return { start : this.getArc( 0 ).time.start,\n    \t     end   : this.getArc( this.getNumArcs() - 1 ).time.end };\n\t\n}"},"getInitialX":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PULSE.TENNIS.Trajectory.prototype.getInitialX = function ()\n{\n\tif ( this.getNumArcs() > 0 )\n\t{\n\t\treturn this.getPositionAtTime( this.getArc( 0 ).time.start ).x; \n\t}\n}"},"getPositionAtTime":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"time"}]},"Source":"PULSE.TENNIS.Trajectory.prototype.getPositionAtTime = function ( time )\n{\n    for ( var arcNum = 0, numArcs = this.getNumArcs(); arcNum < numArcs; arcNum++ )\n    {\n        var arc = this.getArc( arcNum );\n        if ( time >= arc.time.start && time <= arc.time.end )\n        {\n            return PULSE.TENNIS.getPositionAtTime( arc, time );\n        }\n    }\n}"},"getSpeedAtTime":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"time"}]},"Source":"PULSE.TENNIS.Trajectory.prototype.getSpeedAtTime = function ( time )\n{\n    for ( var arcNum = 0, numArcs = this.getNumArcs(); arcNum < numArcs; arcNum++ )\n    {\n        var arc = this.getArc( arcNum );\n        if ( time >= arc.time.start && time <= arc.time.end )\n        {\n            return PULSE.TENNIS.getSpeedAtTime( arc, time );\n        }\n    }\n}"}}},"normaliseTimes":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"times"}]},"Source":"PULSE.TENNIS.normaliseTimes = function ( times )\n{\n\tif ( times )\n\t{\n\t\tif ( times.start > 327.67 )\n\t\t{\n\t\t\ttimes.start -= 655.35;\n\t\t}\n\t\tif ( times.end > 327.67 )\n\t\t{\n\t\t\ttimes.end -= 655.35;\n\t\t}\n\t}\n}"},"parseTrajectory":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"encodedData"}]},"Source":"PULSE.TENNIS.parseTrajectory = function ( encodedData )\n{\n\tvar decodedData = Base64Decoder.decode( encodedData );\n\t\n\tvar traj = new PULSE.TENNIS.Trajectory();\n\ttraj.complete = false;\n\t\n\ttry\n\t{\n\t\tvar version = PULSE.TENNIS.readShort( decodedData, 0 );\n\t\tif ( version === 1 )\n\t\t{\n\t\t\ttraj.arcs = [];\n\t\t\t\n\t\t\ttraj.serverIndex = PULSE.TENNIS.readByte( decodedData, 2 );\n\t\t\tvar pointer = 3;\n\t\t\t\n\t\t\twhile ( pointer < decodedData.length )\n\t\t\t{\n\t\t\t\tvar arc = {};\n\t\t\t\tarc.time = { start: PULSE.TENNIS.shortToDouble( PULSE.TENNIS.readShort( decodedData, pointer ) ),\n\t\t\t\t             end  : PULSE.TENNIS.shortToDouble( PULSE.TENNIS.readShort( decodedData, pointer + 2 ) ) };\n\t\n\t\t\t\t// Ensure that encoded negative times are properly offset\n\t\t\t\tPULSE.TENNIS.normaliseTimes( arc.time );\n\t\t\t\t\n\t\t\t\tvar numVectors = PULSE.TENNIS.readByte( decodedData, pointer + 4 );\n\t\t\t\tpointer += 5;\n\t\t\t\t\n\t\t\t\tvar vectors = [];\n\t\t\t\tfor ( var v = 0; v < numVectors; v++ )\n\t\t\t\t{\n\t\t\t\t\tvectors.push( { x:PULSE.TENNIS.readFloat( decodedData, pointer ),\n\t\t\t\t\t\t\t\t\ty:PULSE.TENNIS.readFloat( decodedData, pointer + 4 ),\n\t\t\t\t\t\t\t\t\tz:PULSE.TENNIS.readFloat( decodedData, pointer + 8 ) } );\n\t\t\t\t\t\n\t\t\t\t\tpointer += 12;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tarc.vectors = vectors;\n\t\t\t\t\n\t\t\t\tarc.dx = PULSE.TENNIS.getPositionAtTime( arc, arc.time.end ).x - \n\t\t\t\t\t\t PULSE.TENNIS.getPositionAtTime( arc, arc.time.start ).x;\n\t\t\t\t\n\t\t\t\ttraj.arcs.push( arc );\n\t\t\t}\n\t\t\t\n\t\t\ttraj.complete = true;\n\t\t}\n\t}\n\tcatch ( exception )\n\t{\n\t}\n\t\n\treturn traj;\n}"},"shortToDouble":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"i"}]},"Source":"PULSE.TENNIS.shortToDouble = function ( i )\n{\n\treturn i / 100.0;\n}"},"readShort":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"offset"}]},"Source":"PULSE.TENNIS.readShort = function ( data, offset )\n{\n\treturn ( 256 * data.charCodeAt( offset ) ) + data.charCodeAt( offset + 1 );\n}"},"readByte":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"offset"}]},"Source":"PULSE.TENNIS.readByte = function ( data, offset )\n{\n\treturn data.charCodeAt( offset );\n}"},"readFloat":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"offset"}]},"Source":"PULSE.TENNIS.readFloat = function ( data, offset )\n{\n    var sign = ( data.charCodeAt( offset ) & 0x80 ) >> 7;\n    var exponent = ( ( data.charCodeAt( offset ) & 0x7F ) << 1 ) + \n    \t\t\t\t ( data.charCodeAt( offset + 1 ) >> 7 );\n    \n    var significand = 0.0;\n    var bit = 23;\n    var component = 1.0;\n    var b;\n    var mask;\n\n    while ( bit >= 0 )\n    {\n        if ( bit === 23 )\n        {\n            b = ( data.charCodeAt( offset + 1 ) & 0x7F ) | 0x80;\n            mask = 0x80; \n        }\n        else if ( bit === 15 )\n        {\n            b = data.charCodeAt( offset + 2 );\n            mask = 0x80; \n        }\n        else if ( bit === 7 )\n        {\n            b = data.charCodeAt( offset + 3 );\n            mask = 0x80; \n        }\n\t\n\t    if ( ( mask & b ) === mask )\n\t    {\n\t        significand += component;\n\t    }\n\n\t    component /= 2;\n\t    mask = mask >> 1;\n\t    bit--;\n    }\n\n    return Math.pow( -1, sign ) *\n           Math.pow( 2, exponent - 127 ) *\n           significand; \n}"},"getPositionAtTime":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"arc"},{"title":"param","description":null,"type":null,"name":"time"}]},"Source":"PULSE.TENNIS.getPositionAtTime = function ( arc, time )\n{\n    var tOffset = time;\n    var pos = arc.vectors[0];\n    var tt = tOffset;\n    var xdirection = 0;\n\n    for ( var i = 1; i < arc.vectors.length; i++ )\n    {\n        var vector = arc.vectors[i];\n        var scaledVector = { x:vector.x*tt, y:vector.y*tt, z:vector.z*tt };\n\n        pos = { x:pos.x + scaledVector.x, y:pos.y + scaledVector.y, z:pos.z + scaledVector.z };\n        tt *= tOffset;\n    }\n\n    if ( pos.z < 0.0 )\n    {\n    \tpos.z = 0.0;\n    }\n    \n    pos.dx = arc.dx;\n    return pos;\n}"},"getSpeedAtTime":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"arc"},{"title":"param","description":null,"type":null,"name":"time"}]},"Source":"PULSE.TENNIS.getSpeedAtTime = function ( arc, time )\n{\n    var tOffset = time;\n    var vel = {x:0,y:0,z:0};\n    var tt = 1.0;\n\n    for ( var i = 1; i < arc.vectors.length; i++ )\n    {\n        var vector = arc.vectors[i];\n        var scaledVector = { x:vector.x*tt, y:vector.y*tt, z:vector.z*tt };\n        scaledVector = { x:i*scaledVector.x, y:i*scaledVector.y, z:i*scaledVector.z };\n\n        vel = { x:vel.x + scaledVector.x, y:vel.y + scaledVector.y, z:vel.z + scaledVector.z };\n        tt *= tOffset;\n    }\n\n    return vel;\n}"},"linearMph":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"vel"}]},"Source":"PULSE.TENNIS.linearMph = function ( vel )\n{\n\tif ( vel )\n\t{\n\t\treturn Math.sqrt( ( vel.x * vel.x ) + ( vel.y * vel.y ) + ( vel.z * vel.z ) ) * \n\t    \t   2.23693629;\n\t}\n}"}}},"window":{"onpopstate":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"e"}]},"Source":"window.onpopstate = function( e )\n\t{\n\t\tif ( that.stateCount !== e.state.stateCount )\n\t\t\thistory.go( this.stateCount );\n\t}"},"callback":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"jsonpData"}]},"Source":"window[callback] = function ( jsonpData )\n\t{\n\t\tif ( jsonpData )\n\t\t{\n\t\t\tvar payload = jsonpData;\n\t\t\t\n\t\t\t// Serialise the payload\n\t\t\tvar serialised = $.toJSON( payload );\n\t\t    if ( that.lastdata[id] !== serialised )\n\t\t    {\n\t\t    \t// Save the new data\n\t\t    \tthat.lastdata[id] = serialised;\n\t\t\t\t\n\t\t\t\t// Pass the data to all of the targets...\n\t\t\t\tfor ( var t = 0, tlimit = currentTargets.length; t < tlimit; t++ )\n\t\t\t\t{\n\t\t\t\t\t// ...if they are valid\n\t\t\t\t\tvar target = currentTargets[t];\n\t\t\t\t\tif ( target && target.onData )\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget.onData( payload, id );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t    }\n\t\t}\n\t}"},"isDateValid":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"date"}]},"Source":"window.isDateValid = function( date )\n{\n    if( Object.prototype.toString.call( date ) === \"[object Date]\" )\n    {\n        // it is a date\n        if( isNaN( date.getTime() ) )\n        {\n            return false;\n        }\n        else\n        {\n            return true;\n        }\n    }\n    else\n    {\n        return false;\n    }\n}"},"onscroll":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"window.onscroll = function()\n    {\n        var cutoff = that.getCutoff();\n        if( window.scrollY > cutoff )\n        {\n            $('.keyEventsRow').addClass( 'keyEvents_fixed' );\n        }\n\n        if( window.scrollY <= cutoff )\n        {\n            $('.keyEventsRow').removeClass( 'keyEvents_fixed' );\n        }\n    }"},"callbackName":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"window[ callbackName ] = function( data )\n\t{\n\t\tdelete window[ callbackName ];\n\t\tdocument.body.removeChild( script );\n\t\tcallback( data );\n\t}"},"requestAnimFrame":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"window.requestAnimFrame = (function() {\n  return window.requestAnimationFrame ||\n         window.webkitRequestAnimationFrame ||\n         window.mozRequestAnimationFrame ||\n         window.oRequestAnimationFrame ||\n         window.msRequestAnimationFrame ||\n         function(/* function FrameRequestCallback */ callback, /* DOMElement Element */ element) {\n           window.setTimeout(callback, 1000/60);\n         };\n}"}},"scrollTo":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"scrollTo"},{"title":"param","description":null,"type":null,"name":"Y"},{"title":"param","description":null,"type":null,"name":"duration"},{"title":"param","description":null,"type":null,"name":"easingFunction"},{"title":"param","description":null,"type":null,"name":"callback"}]},"Source":"function scrollTo( Y, duration, easingFunction, callback )\n{\n\n    var start = Date.now(),\n        elem = document.documentElement.scrollTop?document.documentElement:document.body,\n        from = elem.scrollTop;\n\n    if( from === Y )\n    {\n        if ( callback )\n        {\n          callback();\n        }\n        return; /* Prevent scrolling to the Y point if already there */\n    }\n\n    function min( a, b )\n    {\n        return a < b ? a : b;\n    }\n\n    function scroll( timestamp ) {\n\n        var currentTime = Date.now(),\n            time = min( 1, ( ( currentTime - start ) / duration ) ),\n            easedT = easingFunction( time );\n\n        elem.scrollTop = ( easedT * ( Y - from ) ) + from;\n\n        if( time < 1 )\n        {\n            requestAnimationFrame( scroll );\n        }\n        else if( callback )\n        {\n            callback();\n        }\n    }\n\n    requestAnimationFrame( scroll );\n}"},"min":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"a"},{"title":"param","description":null,"type":null,"name":"b"}]},"Source":"function min( a, b )\n    {\n        return a < b ? a : b;\n    }"},"scroll":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"timestamp"}]},"Source":"function scroll( timestamp ) {\n\n        var currentTime = Date.now(),\n            time = min( 1, ( ( currentTime - start ) / duration ) ),\n            easedT = easingFunction( time );\n\n        elem.scrollTop = ( easedT * ( Y - from ) ) + from;\n\n        if( time < 1 )\n        {\n            requestAnimationFrame( scroll );\n        }\n        else if( callback )\n        {\n            callback();\n        }\n    }"},"$":{"fn":{"stickyHeader":{"Documentation":{"description":"Sticky menu jquery function","tags":[]},"Source":"$.fn.stickyHeader = function( config )\n{\n\tvar options = {\n\t\t\tcssClass: 'stuckMenu',\n\t\t\tfixedClass: 'isStuck'\n\t\t},\n\t\t$this = $( this ).addClass( options.cssClass ),\n\t\tvartop,\n\t\tvarscroll;\n\t$.extend( options, config );\n\n\tif ( !$this.length ) {\n\t\treturn;\n\t}\n\n\tvar updatescrollbar = function()\n\t{\n\t\t// Remove the sticky\n\t\t$this.removeClass( options.fixedClass ).css(\n\t\t{\n\t\t\tposition: '',\n\t\t\ttop: ''\n\t\t} );\n\n\t\t// Calculate position\n\t\tvarscroll = $( \"body\" ).scrollTop();\n\t\tvartop = $this.offset().top;\n\t\t// Stick if required\n\t\tif ( vartop < varscroll )\n\t\t{\n\t\t\t$this.addClass( options.fixedClass ).css(\n\t\t\t{\n\t\t\t\tposition: 'fixed',\n\t\t\t\ttop: '0px'\n\t\t\t} );\n\t\t}\n\t}\n\tvar ua = navigator.userAgent.toLowerCase(); \n\tif (ua.indexOf('safari') !== -1 && ua.indexOf('macintosh') !== -1 && ua.indexOf('chrome') == -1) { \n\t\t//safari on mac, limit event rate to prevent flicker\n\t\tvar limitscroll = _.throttle(updatescrollbar, 200);\n\t\t$( document ).on( 'scroll',  limitscroll);\n\t}else\n\t{\n\t\t$( document ).on( 'scroll',  updatescrollbar);\n\t}\n}","updatescrollbar":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"$.fn.stickyHeader.updatescrollbar"}]},"Source":"var updatescrollbar = function()\n\t{\n\t\t// Remove the sticky\n\t\t$this.removeClass( options.fixedClass ).css(\n\t\t{\n\t\t\tposition: '',\n\t\t\ttop: ''\n\t\t} );\n\n\t\t// Calculate position\n\t\tvarscroll = $( \"body\" ).scrollTop();\n\t\tvartop = $this.offset().top;\n\t\t// Stick if required\n\t\tif ( vartop < varscroll )\n\t\t{\n\t\t\t$this.addClass( options.fixedClass ).css(\n\t\t\t{\n\t\t\t\tposition: 'fixed',\n\t\t\t\ttop: '0px'\n\t\t\t} );\n\t\t}\n\t}"}},"imgLoader":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"$.fn.imgLoader"},{"title":"param","description":null,"type":null,"name":"desiredImg"},{"title":"param","description":null,"type":null,"name":"backupImg"}]},"Source":"$.fn.imgLoader = function( desiredImg, backupImg/*, height, width */ )\r\n\t{\r\n\t\tvar that = this,\r\n\t\t\theight = this.height(),\r\n\t\t\twidth = this.width();\r\n\t\t\r\n\t\t//empty the containing element\r\n\t\tthis.empty();\r\n\t\t\r\n\t\t//create the preloader \r\n\t\tvar $loadOverlay = \r\n\t\t$( '<div>' ).addClass( 'loadOverlay' )\r\n\t\t.hide()\r\n\t\t.append(\r\n\t\t\t$( '<div>' ).addClass( 'loadOverlayContent' )\r\n\t\t\t.append(\r\n\t\t\t\t$( '<div>' ).addClass( 'loadAnimate' )\r\n\t\t\t)\r\n\t\t);\r\n\t\t\r\n\t\t//create the img element \r\n\t\tvar $img = $( '<img>' );\r\n\t\t\r\n\t\t//append overlay\r\n\t\t$loadOverlay.appendTo( this );\r\n\r\n\t\t//append image\r\n\t\t//potentially append once fade in is complete\r\n\t\t$img.appendTo( that );\r\n\t\t\r\n\t\t//fadeIn\r\n\t\t$loadOverlay.fadeIn( 'slow', function()\r\n\t\t{ \r\n\t\t\t\r\n\t\t\t$img\r\n\t\t\t.attr( 'src', desiredImg )\r\n\t\t\t.each(function() {\r\n\t\t\t\tif( this.complete )\r\n\t\t\t\t{\r\n\t\t\t\t\t//if the image was cached, fadeOut straight away\r\n\t\t\t\t\t$loadOverlay.fadeOut();\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t$(this).load( function()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//if the image was not cached, when the image loads, fadeOut\r\n\t\t\t\t\t\t$(this).data( 'loadAttempted', true );\r\n\t\t\t\t\t\t$loadOverlay.fadeOut();\r\n\t\t\t\t\t} )\r\n\t\t\t\t}\r\n\t\t\t} )\r\n\t\t\t.error( function() { if(!$(this).data('loadAttempted')){ $(this).attr( 'src', backupImg ); $loadOverlay.fadeOut(); $(this).data( 'loadAttempted', true ) } } );\r\n\t\t} );\r\n\t\t\r\n\t\t\r\n\t}"},"sortSelect":{"Documentation":{"description":"jQuery Utilitity function for sorting select element by option name\nMoves value-less items to the top","tags":[]},"Source":"$.fn.sortSelect = function()\n{\n\n\t$( this ).each( function( index, element )\n\t{\n\t\tthis.opts = $( 'option', element );\n\t\t// Sort options\n\t\tthis.opts.sort( function( a, b )\n\t\t{\n\t\t\tif ( !a.value || a.text < b.text )\n\t\t\t{\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\telse if ( !b.value || a.text > b.text )\n\t\t\t{\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} );\n\t\t// Update contents\n\t\t$( this ).empty().append( this.opts );\n\t} )\n\treturn this;\n}"}}},"xdr":{"onload":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"xdr.onload = function ()\n        {\n            var dom  = new ActiveXObject( 'Microsoft.XMLDOM' ),\n                JSON = $.parseJSON( xdr.responseText );\n\n            dom.async = false;\n\n            if( JSON === null || typeof ( JSON ) == 'undefined' )\n            {\n                JSON = $.parseJSON( data.firstChild.textContent );\n            }\n\n            that.callback( JSON ); // internal function\n        }"},"onerror":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"xdr.onerror = function()\n        {\n            that.errorCallback();\n            _result = false;\n        }"},"onprogress":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"xdr.onprogress = function(){ }"},"ontimeout":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"xdr.ontimeout = function(){ }"}},"Object":{"create":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"Object.create"}]},"Source":"Object.create = ( function()\n    {\n        // To save on memory, use a shared constructor\n        function Temp()\n        {}\n\n        // make a safe reference to Object.prototype.hasOwnProperty\n        var hasOwn = Object.prototype.hasOwnProperty;\n\n        return function( O )\n        {\n            // 1. If Type(O) is not Object or Null throw a TypeError exception.\n            if ( typeof O != 'object' )\n            {\n                throw TypeError( 'Object prototype may only be an Object or null' );\n            }\n\n            // 2. Let obj be the result of creating a new object as if by the\n            //    expression new Object() where Object is the standard built-in\n            //    constructor with that name\n            // 3. Set the [[Prototype]] internal property of obj to O.\n            Temp.prototype = O;\n            var obj = new Temp();\n            Temp.prototype = null; // Let's not keep a stray reference to O...\n\n            // 4. If the argument Properties is present and not undefined, add\n            //    own properties to obj as if by calling the standard built-in\n            //    function Object.defineProperties with arguments obj and\n            //    Properties.\n            if ( arguments.length > 1 )\n            {\n                // Object.defineProperties does ToObject on its first argument.\n                var Properties = Object( arguments[ 1 ] );\n                for ( var prop in Properties )\n                {\n                    if ( hasOwn.call( Properties, prop ) )\n                    {\n                        obj[ prop ] = Properties[ prop ];\n                    }\n                }\n            }\n\n            // 5. Return obj\n            return obj;\n        };\n    }"},"keys":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"obj"}]},"Source":"Object.keys = function(obj) {\n\t\t    var keys = [];\n\n\t\t    for (var i in obj) {\n\t\t      if (obj.hasOwnProperty(i)) {\n\t\t        keys.push(i);\n\t\t      }\n\t\t    }\n\n\t\t    return keys;\n\t\t  }"}},"Temp":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"function Temp()\n        {}"},"config":{"getClassForEventPhase":{"Documentation":{"description":"Displays the matches on the page","tags":[]},"Source":"config.getClassForEventPhase = function( eventPhase )\n            {\n                switch ( eventPhase )\n                {\n                    case \"Pool A\":\n                        return \"pool-a\";\n                        break;\n                    case \"Pool B\":\n                        return \"pool-b\";\n                        break;\n                    case \"Pool C\":\n                        return \"pool-c\";\n                        break;\n                    case \"Pool D\":\n                        return \"pool-d\";\n                        break;\n                    case \"Quarter Finals\":\n                        return \"semi-qtr\";\n                        break;\n                    case \"Semi Finals\":\n                        return \"bronze\";\n                        break;\n                    case \"Final\":\n                        return \"final\";\n                        break;\n                    default:\n                        return \"pool-a\"\n                }\n            }"}},"Numeral":{"Documentation":{"description":"*********************************\nConstructors\n**********************************","tags":[]},"Source":"function Numeral (number) {\n        this._value = number;\n    }"},"toFixed":{"Documentation":{"description":"Implementation of toFixed() that treats floats more like decimals\n\nFixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\nproblems for accounting- and finance-related software.","tags":[]},"Source":"function toFixed (value, precision, roundingFunction, optionals) {\n        var power = Math.pow(10, precision),\n            optionalsRegExp,\n            output;\n\n        //roundingFunction = (roundingFunction !== undefined ? roundingFunction : Math.round);\n        // Multiply up by precision, round accurately, then divide and use native toFixed():\n        output = (roundingFunction(value * power) / power).toFixed(precision);\n\n        if (optionals) {\n            optionalsRegExp = new RegExp('0{1,' + optionals + '}$');\n            output = output.replace(optionalsRegExp, '');\n        }\n\n        return output;\n    }"},"formatNumeral":{"Documentation":{"description":"*********************************\nFormatting\n**********************************","tags":[]},"Source":"function formatNumeral (n, format, roundingFunction) {\n        var output;\n\n        // figure out what kind of format we are dealing with\n        if (format.indexOf('$') > -1) { // currency!!!!!\n            output = formatCurrency(n, format, roundingFunction);\n        } else if (format.indexOf('%') > -1) { // percentage\n            output = formatPercentage(n, format, roundingFunction);\n        } else if (format.indexOf(':') > -1) { // time\n            output = formatTime(n, format);\n        } else { // plain ol' numbers or bytes\n            output = formatNumber(n._value, format, roundingFunction);\n        }\n\n        // return string\n        return output;\n    }"},"unformatNumeral":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"unformatNumeral"},{"title":"param","description":null,"type":null,"name":"n"},{"title":"param","description":null,"type":null,"name":"string"}]},"Source":"function unformatNumeral (n, string) {\n        var stringOriginal = string,\n            thousandRegExp,\n            millionRegExp,\n            billionRegExp,\n            trillionRegExp,\n            suffixes = ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n            bytesMultiplier = false,\n            power;\n\n        if (string.indexOf(':') > -1) {\n            n._value = unformatTime(string);\n        } else {\n            if (string === zeroFormat) {\n                n._value = 0;\n            } else {\n                if (languages[currentLanguage].delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g,'').replace(languages[currentLanguage].delimiters.decimal, '.');\n                }\n\n                // see if abbreviations are there so that we can multiply to the correct number\n                thousandRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.thousand + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n                millionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.million + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n                billionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.billion + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n                trillionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.trillion + '(?:\\\\)|(\\\\' + languages[currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n\n                // see if bytes are there so that we can multiply to the correct number\n                for (power = 0; power <= suffixes.length; power++) {\n                    bytesMultiplier = (string.indexOf(suffixes[power]) > -1) ? Math.pow(1024, power + 1) : false;\n\n                    if (bytesMultiplier) {\n                        break;\n                    }\n                }\n\n                // do some math to create our number\n                n._value = ((bytesMultiplier) ? bytesMultiplier : 1) * ((stringOriginal.match(thousandRegExp)) ? Math.pow(10, 3) : 1) * ((stringOriginal.match(millionRegExp)) ? Math.pow(10, 6) : 1) * ((stringOriginal.match(billionRegExp)) ? Math.pow(10, 9) : 1) * ((stringOriginal.match(trillionRegExp)) ? Math.pow(10, 12) : 1) * ((string.indexOf('%') > -1) ? 0.01 : 1) * (((string.split('-').length + Math.min(string.split('(').length-1, string.split(')').length-1)) % 2)? 1: -1) * Number(string.replace(/[^0-9\\.]+/g, ''));\n\n                // round if we are talking about bytes\n                n._value = (bytesMultiplier) ? Math.ceil(n._value) : n._value;\n            }\n        }\n        return n._value;\n    }"},"formatCurrency":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"n"},{"title":"param","description":null,"type":null,"name":"format"},{"title":"param","description":null,"type":null,"name":"roundingFunction"}]},"Source":"function formatCurrency (n, format, roundingFunction) {\n        var symbolIndex = format.indexOf('$'),\n            openParenIndex = format.indexOf('('),\n            minusSignIndex = format.indexOf('-'),\n            space = '',\n            spliceIndex,\n            output;\n\n        // check for space before or after currency\n        if (format.indexOf(' $') > -1) {\n            space = ' ';\n            format = format.replace(' $', '');\n        } else if (format.indexOf('$ ') > -1) {\n            space = ' ';\n            format = format.replace('$ ', '');\n        } else {\n            format = format.replace('$', '');\n        }\n\n        // format the number\n        output = formatNumber(n._value, format, roundingFunction);\n\n        // position the symbol\n        if (symbolIndex <= 1) {\n            if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {\n                output = output.split('');\n                spliceIndex = 1;\n                if (symbolIndex < openParenIndex || symbolIndex < minusSignIndex){\n                    // the symbol appears before the \"(\" or \"-\"\n                    spliceIndex = 0;\n                }\n                output.splice(spliceIndex, 0, languages[currentLanguage].currency.symbol + space);\n                output = output.join('');\n            } else {\n                output = languages[currentLanguage].currency.symbol + space + output;\n            }\n        } else {\n            if (output.indexOf(')') > -1) {\n                output = output.split('');\n                output.splice(-1, 0, space + languages[currentLanguage].currency.symbol);\n                output = output.join('');\n            } else {\n                output = output + space + languages[currentLanguage].currency.symbol;\n            }\n        }\n\n        return output;\n    }"},"formatPercentage":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"n"},{"title":"param","description":null,"type":null,"name":"format"},{"title":"param","description":null,"type":null,"name":"roundingFunction"}]},"Source":"function formatPercentage (n, format, roundingFunction) {\n        var space = '',\n            output,\n            value = n._value * 100;\n\n        // check for space before %\n        if (format.indexOf(' %') > -1) {\n            space = ' ';\n            format = format.replace(' %', '');\n        } else {\n            format = format.replace('%', '');\n        }\n\n        output = formatNumber(value, format, roundingFunction);\n\n        if (output.indexOf(')') > -1 ) {\n            output = output.split('');\n            output.splice(-1, 0, space + '%');\n            output = output.join('');\n        } else {\n            output = output + space + '%';\n        }\n\n        return output;\n    }"},"formatTime":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"n"}]},"Source":"function formatTime (n) {\n        var hours = Math.floor(n._value/60/60),\n            minutes = Math.floor((n._value - (hours * 60 * 60))/60),\n            seconds = Math.round(n._value - (hours * 60 * 60) - (minutes * 60));\n        return hours + ':' + ((minutes < 10) ? '0' + minutes : minutes) + ':' + ((seconds < 10) ? '0' + seconds : seconds);\n    }"},"unformatTime":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"string"}]},"Source":"function unformatTime (string) {\n        var timeArray = string.split(':'),\n            seconds = 0;\n        // turn hours and minutes into seconds and add them all up\n        if (timeArray.length === 3) {\n            // hours\n            seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n            // minutes\n            seconds = seconds + (Number(timeArray[1]) * 60);\n            // seconds\n            seconds = seconds + Number(timeArray[2]);\n        } else if (timeArray.length === 2) {\n            // minutes\n            seconds = seconds + (Number(timeArray[0]) * 60);\n            // seconds\n            seconds = seconds + Number(timeArray[1]);\n        }\n        return Number(seconds);\n    }"},"formatNumber":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"value"},{"title":"param","description":null,"type":null,"name":"format"},{"title":"param","description":null,"type":null,"name":"roundingFunction"}]},"Source":"function formatNumber (value, format, roundingFunction) {\n        var negP = false,\n            signed = false,\n            optDec = false,\n            abbr = '',\n            abbrK = false, // force abbreviation to thousands\n            abbrM = false, // force abbreviation to millions\n            abbrB = false, // force abbreviation to billions\n            abbrT = false, // force abbreviation to trillions\n            abbrForce = false, // force abbreviation\n            bytes = '',\n            ord = '',\n            abs = Math.abs(value),\n            suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n            min,\n            max,\n            power,\n            w,\n            precision,\n            thousands,\n            d = '',\n            neg = false;\n\n        // check if number is zero and a custom zero format has been set\n        if (value === 0 && zeroFormat !== null) {\n            return zeroFormat;\n        } else {\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (format.indexOf('(') > -1) {\n                negP = true;\n                format = format.slice(1, -1);\n            } else if (format.indexOf('+') > -1) {\n                signed = true;\n                format = format.replace(/\\+/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (format.indexOf('a') > -1) {\n                // check if abbreviation is specified\n                abbrK = format.indexOf('aK') >= 0;\n                abbrM = format.indexOf('aM') >= 0;\n                abbrB = format.indexOf('aB') >= 0;\n                abbrT = format.indexOf('aT') >= 0;\n                abbrForce = abbrK || abbrM || abbrB || abbrT;\n\n                // check for space before abbreviation\n                if (format.indexOf(' a') > -1) {\n                    abbr = ' ';\n                    format = format.replace(' a', '');\n                } else {\n                    format = format.replace('a', '');\n                }\n\n                if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {\n                    // trillion\n                    abbr = abbr + languages[currentLanguage].abbreviations.trillion;\n                    value = value / Math.pow(10, 12);\n                } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {\n                    // billion\n                    abbr = abbr + languages[currentLanguage].abbreviations.billion;\n                    value = value / Math.pow(10, 9);\n                } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {\n                    // million\n                    abbr = abbr + languages[currentLanguage].abbreviations.million;\n                    value = value / Math.pow(10, 6);\n                } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {\n                    // thousand\n                    abbr = abbr + languages[currentLanguage].abbreviations.thousand;\n                    value = value / Math.pow(10, 3);\n                }\n            }\n\n            // see if we are formatting bytes\n            if (format.indexOf('b') > -1) {\n                // check for space before\n                if (format.indexOf(' b') > -1) {\n                    bytes = ' ';\n                    format = format.replace(' b', '');\n                } else {\n                    format = format.replace('b', '');\n                }\n\n                for (power = 0; power <= suffixes.length; power++) {\n                    min = Math.pow(1024, power);\n                    max = Math.pow(1024, power+1);\n\n                    if (value >= min && value < max) {\n                        bytes = bytes + suffixes[power];\n                        if (min > 0) {\n                            value = value / min;\n                        }\n                        break;\n                    }\n                }\n            }\n\n            // see if ordinal is wanted\n            if (format.indexOf('o') > -1) {\n                // check for space before\n                if (format.indexOf(' o') > -1) {\n                    ord = ' ';\n                    format = format.replace(' o', '');\n                } else {\n                    format = format.replace('o', '');\n                }\n\n                ord = ord + languages[currentLanguage].ordinal(value);\n            }\n\n            if (format.indexOf('[.]') > -1) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            w = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n\n            if (precision) {\n                if (precision.indexOf('[') > -1) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    d = toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    d = toFixed(value, precision.length, roundingFunction);\n                }\n\n                w = d.split('.')[0];\n\n                if (d.split('.')[1].length) {\n                    d = languages[currentLanguage].delimiters.decimal + d.split('.')[1];\n                } else {\n                    d = '';\n                }\n\n                if (optDec && Number(d.slice(1)) === 0) {\n                    d = '';\n                }\n            } else {\n                w = toFixed(value, null, roundingFunction);\n            }\n\n            // format number\n            if (w.indexOf('-') > -1) {\n                w = w.slice(1);\n                neg = true;\n            }\n\n            if (thousands > -1) {\n                w = w.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + languages[currentLanguage].delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                w = '';\n            }\n\n            return ((negP && neg) ? '(' : '') + ((!negP && neg) ? '-' : '') + ((!neg && signed) ? '+' : '') + w + d + ((ord) ? ord : '') + ((abbr) ? abbr : '') + ((bytes) ? bytes : '') + ((negP && neg) ? ')' : '');\n        }\n    }"},"numeral":{"isNumeral":{"Documentation":{"description":"*********************************\nTop Level Functions\n**********************************","tags":[]},"Source":"numeral.isNumeral = function (obj) {\n        return obj instanceof Numeral;\n    }"},"language":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"key"},{"title":"param","description":null,"type":null,"name":"values"}]},"Source":"numeral.language = function (key, values) {\n        if (!key) {\n            return currentLanguage;\n        }\n\n        if (key && !values) {\n            if(!languages[key]) {\n                throw new Error('Unknown language : ' + key);\n            }\n            currentLanguage = key;\n        }\n\n        if (values || !languages[key]) {\n            loadLanguage(key, values);\n        }\n\n        return numeral;\n    }"},"languageData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"key"}]},"Source":"numeral.languageData = function (key) {\n        if (!key) {\n            return languages[currentLanguage];\n        }\n\n        if (!languages[key]) {\n            throw new Error('Unknown language : ' + key);\n        }\n\n        return languages[key];\n    }"},"zeroFormat":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"format"}]},"Source":"numeral.zeroFormat = function (format) {\n        zeroFormat = typeof(format) === 'string' ? format : null;\n    }"},"defaultFormat":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"format"}]},"Source":"numeral.defaultFormat = function (format) {\n        defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    }"}},"loadLanguage":{"Documentation":{"description":"*********************************\nHelpers\n**********************************","tags":[]},"Source":"function loadLanguage(key, values) {\n        languages[key] = values;\n    }"},"Array":{"prototype":{"reduce":{"Documentation":{"description":"Array.prototype.reduce for browsers that don't support it\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#Compatibility","tags":[]},"Source":"Array.prototype.reduce = function (callback, opt_initialValue) {\n            'use strict';\n\n            if (null === this || 'undefined' === typeof this) {\n                // At the moment all modern browsers, that support strict mode, have\n                // native implementation of Array.prototype.reduce. For instance, IE8\n                // does not support strict mode, so this check is actually useless.\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if ('function' !== typeof callback) {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var index,\n                value,\n                length = this.length >>> 0,\n                isValueSet = false;\n\n            if (1 < arguments.length) {\n                value = opt_initialValue;\n                isValueSet = true;\n            }\n\n            for (index = 0; length > index; ++index) {\n                if (this.hasOwnProperty(index)) {\n                    if (isValueSet) {\n                        value = callback(value, this[index], index, this);\n                    } else {\n                        value = this[index];\n                        isValueSet = true;\n                    }\n                }\n            }\n\n            if (!isValueSet) {\n                throw new TypeError('Reduce of empty array with no initial value');\n            }\n\n            return value;\n        }"}}},"multiplier":{"Documentation":{"description":"Computes the multiplier necessary to make x >= 1,\neffectively eliminating miscalculations caused by\nfinite precision.","tags":[]},"Source":"function multiplier(x) {\n        var parts = x.toString().split('.');\n        if (parts.length < 2) {\n            return 1;\n        }\n        return Math.pow(10, parts[1].length);\n    }"},"correctionFactor":{"Documentation":{"description":"Given a variable number of arguments, returns the maximum\nmultiplier that must be used to normalize an operation involving\nall of them.","tags":[]},"Source":"function correctionFactor() {\n        var args = Array.prototype.slice.call(arguments);\n        return args.reduce(function (prev, next) {\n            var mp = multiplier(prev),\n                mn = multiplier(next);\n        return mp > mn ? mp : mn;\n        }, -Infinity);\n    }"},"cback":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"accum"},{"title":"param","description":null,"type":null,"name":"curr"},{"title":"param","description":null,"type":null,"name":"currI"},{"title":"param","description":null,"type":null,"name":"O"}]},"Source":"function cback(accum, curr, currI, O) {\n                var corrFactor = correctionFactor(accum, curr);\n                return (accum * corrFactor) / (curr * corrFactor);\n            }"},"highlightHashtag":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"highlightHashtag"}]},"Source":"var highlightHashtag = function () {\n        var $container = $tackla($tackla.find('.stacklapopup-content-wrap')),\n            $caption = $container.find('.stacklapopup-caption'),\n            message;\n\n        if ($container.hasClass('facebook') || $container.hasClass('instagram')) {\n            message = $caption.text();\n            message = message.replace(/(#(\\w+))/g, '<a href=\"javascript:void();\">$1</a>');\n            $caption.html($tackla('<p>' + message + '</p>'));\n        }\n    }"},"centerize":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"var centerize = function () {\n        var isPhone = ($tackla('.stacklapopup-mobile').length && $tackla(document.body).width() <= 400),\n            $content = $tackla($tackla('.stacklapopup-content')),\n            $panelLeft = $content.find('.stacklapopup-panel-left'),\n            $panelRight = $content.find('.stacklapopup-panel-right'),\n            panelLeftHeight = $panelLeft.height(),\n            panelRightHeight = $panelRight.height();\n\n        if (isPhone) {\n            return;\n        }\n\n        if ($content.find('.stacklapopup-content-wrap.facebook').length && $content.find('.stacklapopup-video.square').length) {\n            $content.find('.stacklapopup-video.square').removeClass('square');\n        }\n\n        if (panelRightHeight > panelLeftHeight) {\n            $panelLeft.css('padding-top', (panelRightHeight - panelLeftHeight) / 2)\n            $panelLeft.css('background-color', 'transparent');\n        }\n    }"},"Participant":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"Participant"},{"title":"param","description":null,"type":null,"name":"team"}]},"Source":"function Participant( team )\n{\n\tif ( team )\n\t{\t\t\t\n\t\tthis.fullName = team.fullName;\n\t\tthis.shortName = team.shortName;\n\t\tthis.abbreviation = team.abbreviation;\n\t\tthis.primaryColor = '#' + team.primaryColor;\n\t\tthis.secondaryColor = '#' + team.secondaryColor;\n\t}\n}"},"detectWakeFromSleep":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"detectWakeFromSleep"}]},"Source":"function detectWakeFromSleep()\n    {\n        var now = +new Date;\n        if( (now - _lastTick) > 240000 )\n        {\n            if( window.navigator.onLine === false )\n            {\n                return false; //don't refresh if they are not online\n            }\n\n            window.location.href = window.location.href;\n        }\n\n        _lastTick = now;\n        return true;\n    }"},"resizeend":{"Documentation":{"description":"Detects when the user has stopped resizing the window","tags":[{"title":"param","description":"Callback function to be called on end of resize","type":{"type":"NameExpression","name":"Function"},"name":"callback"}]},"Source":"function resizeend()\n    {\n        if( new Date() - rtime < delta )\n        {\n            setTimeout( resizeend, delta );\n        }\n        else\n        {\n            timeout = false;\n            if( callback )\n            {\n                callback();\n            }\n        }\n    }"},"String":{"prototype":{"startsWith":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"str"}]},"Source":"String.prototype.startsWith = function(str)\n    {return (this.match(\"^\"+str)==str)}"},"endsWith":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"str"}]},"Source":"String.prototype.endsWith = function(str)\n    {return (this.match(str+\"$\")==str)}"}}},"xmlToJson":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"xmlToJson"},{"title":"param","description":null,"type":null,"name":"xml"},{"title":"param","description":null,"type":null,"name":"tab"}]},"Source":"function xmlToJson(xml,tab) {\r\n   tab = !tab ? '' : tab;\r\n   var X = {\r\n      toObj: function(xml) {\r\n         var o = {};\r\n         if (xml.nodeType==1) {   // element node ..\r\n            if (xml.attributes.length)   // element with attributes  ..\r\n               for (var i=0; i<xml.attributes.length; i++)\r\n                  o[\"@\"+xml.attributes[i].nodeName] = (xml.attributes[i].nodeValue||\"\").toString();\r\n            if (xml.firstChild) { // element has child nodes ..\r\n               var textChild=0, cdataChild=0, hasElementChild=false;\r\n               for (var n=xml.firstChild; n; n=n.nextSibling) {\r\n                  if (n.nodeType==1) hasElementChild = true;\r\n                  else if (n.nodeType==3 && n.nodeValue.match(/[^ \\f\\n\\r\\t\\v]/)) textChild++; // non-whitespace text\r\n                  else if (n.nodeType==4) cdataChild++; // cdata section node\r\n               }\r\n               if (hasElementChild) {\r\n                  if (textChild < 2 && cdataChild < 2) { // structured element with evtl. a single text or/and cdata node ..\r\n                     X.removeWhite(xml);\r\n                     for (var n=xml.firstChild; n; n=n.nextSibling) {\r\n                        if (n.nodeType == 3)  // text node\r\n                           o[\"#text\"] = X.escape(n.nodeValue);\r\n                        else if (n.nodeType == 4)  // cdata node\r\n                           o[\"#cdata\"] = X.escape(n.nodeValue);\r\n                        else if (o[n.nodeName]) {  // multiple occurence of element ..\r\n                           if (o[n.nodeName] instanceof Array)\r\n                              o[n.nodeName][o[n.nodeName].length] = X.toObj(n);\r\n                           else\r\n                              o[n.nodeName] = [o[n.nodeName], X.toObj(n)];\r\n                        }\r\n                        else  // first occurence of element..\r\n                           o[n.nodeName] = X.toObj(n);\r\n                     }\r\n                  }\r\n                  else { // mixed content\r\n                     if (!xml.attributes.length)\r\n                        o = X.escape(X.innerXml(xml));\r\n                     else\r\n                        o[\"#text\"] = X.escape(X.innerXml(xml));\r\n                  }\r\n               }\r\n               else if (textChild) { // pure text\r\n                  if (!xml.attributes.length)\r\n                     o = X.escape(X.innerXml(xml));\r\n                  else\r\n                     o[\"#text\"] = X.escape(X.innerXml(xml));\r\n               }\r\n               else if (cdataChild) { // cdata\r\n                  if (cdataChild > 1)\r\n                     o = X.escape(X.innerXml(xml));\r\n                  else\r\n                     for (var n=xml.firstChild; n; n=n.nextSibling)\r\n                        o[\"#cdata\"] = X.escape(n.nodeValue);\r\n               }\r\n            }\r\n            if (!xml.attributes.length && !xml.firstChild) o = null;\r\n         }\r\n         else if (xml.nodeType==9) { // document.node\r\n            o = X.toObj(xml.documentElement);\r\n         }\r\n         else\r\n            alert(\"unhandled node type: \" + xml.nodeType);\r\n         return o;\r\n      },\r\n      toJson: function(o, name, ind) {\r\n         var json = name ? (\"\\\"\"+name+\"\\\"\") : \"\";\r\n         if (o instanceof Array) {\r\n            for (var i=0,n=o.length; i<n; i++)\r\n               o[i] = X.toJson(o[i], \"\", ind+\"\\t\");\r\n            json += (name?\":[\":\"[\") + (o.length > 1 ? (\"\\n\"+ind+\"\\t\"+o.join(\",\\n\"+ind+\"\\t\")+\"\\n\"+ind) : o.join(\"\")) + \"]\";\r\n         }\r\n         else if (o == null)\r\n            json += (name&&\":\") + \"null\";\r\n         else if (typeof(o) == \"object\") {\r\n            var arr = [];\r\n            for (var m in o)\r\n               arr[arr.length] = X.toJson(o[m], m, ind+\"\\t\");\r\n            json += (name?\":{\":\"{\") + (arr.length > 1 ? (\"\\n\"+ind+\"\\t\"+arr.join(\",\\n\"+ind+\"\\t\")+\"\\n\"+ind) : arr.join(\"\")) + \"}\";\r\n         }\r\n         else if (typeof(o) == \"string\")\r\n            json += (name&&\":\") + \"\\\"\" + o.toString() + \"\\\"\";\r\n         else\r\n            json += (name&&\":\") + o.toString();\r\n         return json;\r\n      },\r\n      innerXml: function(node) {\r\n         var s = \"\"\r\n         if (\"innerHTML\" in node)\r\n            s = node.innerHTML;\r\n         else {\r\n            var asXml = function(n) {\r\n               var s = \"\";\r\n               if (n.nodeType == 1) {\r\n                  s += \"<\" + n.nodeName;\r\n                  for (var i=0; i<n.attributes.length;i++)\r\n                     s += \" \" + n.attributes[i].nodeName + \"=\\\"\" + (n.attributes[i].nodeValue||\"\").toString() + \"\\\"\";\r\n                  if (n.firstChild) {\r\n                     s += \">\";\r\n                     for (var c=n.firstChild; c; c=c.nextSibling)\r\n                        s += asXml(c);\r\n                     s += \"</\"+n.nodeName+\">\";\r\n                  }\r\n                  else\r\n                     s += \"/>\";\r\n               }\r\n               else if (n.nodeType == 3)\r\n                  s += n.nodeValue;\r\n               else if (n.nodeType == 4)\r\n                  s += \"<![CDATA[\" + n.nodeValue + \"]]>\";\r\n               return s;\r\n            };\r\n            for (var c=node.firstChild; c; c=c.nextSibling)\r\n               s += asXml(c);\r\n         }\r\n         return s;\r\n      },\r\n      escape: function(txt) {\r\n         return txt.replace(/[\\\\]/g, \"\\\\\\\\\")\r\n                   .replace(/[\\\"]/g, '\\\\\"')\r\n                   .replace(/[\\n]/g, '\\\\n')\r\n                   .replace(/[\\r]/g, '\\\\r');\r\n      },\r\n      removeWhite: function(e) {\r\n         e.normalize();\r\n         for (var n = e.firstChild; n; ) {\r\n            if (n.nodeType == 3) {  // text node\r\n               if (!n.nodeValue.match(/[^ \\f\\n\\r\\t\\v]/)) { // pure whitespace text node\r\n                  var nxt = n.nextSibling;\r\n                  e.removeChild(n);\r\n                  n = nxt;\r\n               }\r\n               else\r\n                  n = n.nextSibling;\r\n            }\r\n            else if (n.nodeType == 1) {  // element node\r\n               X.removeWhite(n);\r\n               n = n.nextSibling;\r\n            }\r\n            else                      // any other node\r\n               n = n.nextSibling;\r\n         }\r\n         return e;\r\n      }\r\n   };\r\n   if (xml.nodeType == 9) // document node\r\n      xml = xml.documentElement;\r\n   var json = X.toJson(X.toObj(X.removeWhite(xml)), xml.nodeName, \"\\t\");\r\n   return \"{\\n\" + tab + (tab ? json.replace(/\\t/g, tab) : json.replace(/\\t|\\n/g, \"\")) + \"\\n}\";\r\n}"},"asXml":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"n"}]},"Source":"var asXml = function(n) {\r\n               var s = \"\";\r\n               if (n.nodeType == 1) {\r\n                  s += \"<\" + n.nodeName;\r\n                  for (var i=0; i<n.attributes.length;i++)\r\n                     s += \" \" + n.attributes[i].nodeName + \"=\\\"\" + (n.attributes[i].nodeValue||\"\").toString() + \"\\\"\";\r\n                  if (n.firstChild) {\r\n                     s += \">\";\r\n                     for (var c=n.firstChild; c; c=c.nextSibling)\r\n                        s += asXml(c);\r\n                     s += \"</\"+n.nodeName+\">\";\r\n                  }\r\n                  else\r\n                     s += \"/>\";\r\n               }\r\n               else if (n.nodeType == 3)\r\n                  s += n.nodeValue;\r\n               else if (n.nodeType == 4)\r\n                  s += \"<![CDATA[\" + n.nodeValue + \"]]>\";\r\n               return s;\r\n            }"},"Axis":{"Documentation":{"description":"title - the axis title\nmin - minimum value on the axis\nmax - maximum value on the axis\nstart - start screen coordinate of the axis\nend - end screen coordinate of the axis\nfixed - the fixed screen coordinate for the axis\nnumLabels - the approximate number of labels to display\nlabels - overridden labels, optional \noverdraw - amount of pixels to overdraw, optional\nshift - amount to shift projected values in pixels, optional","tags":[]},"Source":"function Axis( title, min, max, start, end, fixed, numLabels, labels, overdraw, shift, titleShift )\n{\n\tthis.title = title;\n\tthis.min = min;\n\tthis.max = max;\n\tthis.configuredMax = max;\n\tthis.start = start;\n\tthis.end = end;\n\tthis.configuredEnd = end;\n\tthis.fixed = fixed;\n\tthis.numLabels = numLabels;\n\tthis.labels = labels;\n\tthis.overdraw \t= overdraw   === undefined ? 0 : overdraw;\n\tthis.shift \t\t= shift \t === undefined ? 0 : shift;\n\tthis.titleShift = titleShift === undefined ? 0 : titleShift;\n}","prototype":{"project":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"Axis.prototype.project"},{"title":"param","description":null,"type":null,"name":"value"}]},"Source":"Axis.prototype.project = function ( value )\n{\n\t// Clamp the value to within the range\n\tvar clamped = value;\n\tif ( clamped < this.min )\n\t{\n\t\tclamped = this.min;\n\t}\n\tif ( clamped > this.max )\n\t{\n\t\tclamped = this.max;\n\t}\n\t\n\treturn this.shift + this.start + \n\t\t( ( ( clamped - this.min ) / ( this.max - this.min ) ) * ( this.end - this.start ) );\n}"},"drawTo":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"ctx"},{"title":"param","description":null,"type":null,"name":"isX"}]},"Source":"Axis.prototype.drawTo = function ( ctx, isX )\n{\n\tctx.save();\n\tctx.strokeStyle = 'rgba(255,255,255,1)';\n\tctx.fillStyle = 'rgba(255,255,255,1)';\n\tctx.lineCap = 'square';\n\tctx.lineWidth = 2;\n\n\tctx.beginPath();\n\tif ( isX )\n\t{\n\t\tctx.moveTo( this.start, this.fixed );\n\t\tctx.lineTo( this.end + this.overdraw, this.fixed );\n\t}\n\telse\n\t{\n\t\tctx.moveTo( this.fixed, this.start );\n\t\tctx.lineTo( this.fixed, this.end + this.overdraw );\n\t}\n\tctx.stroke();\n\t\n\t// Draw tick labels\n\tvar spacing = Math.round( ( this.max - this.min ) / this.numLabels );\n\t\n\t// Round spacing to the nearest 10, if we can\n\tvar newSpacing = 10 * ( Math.round( spacing / 10 ) );\n\tif ( newSpacing > 0 )\n\t{\n\t\tspacing = newSpacing;\n\t}\n\t\n\tfor ( var val = this.min; val <= this.max; val += spacing )\n\t{\n\t\tvar pos = this.project( val );\n\t\t\n\t\tvar label = val;\n\t\tif ( this.labels !== undefined && this.labels[ val ] !== undefined )\n\t\t{\n\t\t\tlabel = this.labels[ val ];\n\t\t}\n\t\t\n\t\tif ( isX )\n\t\t{\n\t\t\tUtils.anchoredFillText( ctx, label, pos, this.fixed + 4, 'n' );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tUtils.anchoredFillText( ctx, label, this.fixed - 4, pos, 'e' );\n\t\t}\n\t}\n\t\t\n\t// Draw axis title\n\tvar pos = this.project( ( this.min + this.max ) / 2 );\n\tif ( isX )\n\t{\n\t\tUtils.anchoredFillText( ctx, this.title, pos, this.fixed + 25 + this.titleShift, 'n' );\n\t}\n\telse\n\t{\n\t\tvar x = this.fixed - 37 - this.titleShift;\n\t\tvar y = pos;\n\t\t\n\t\tctx.save();\n\t\tctx.rotate( Math.PI / -2 );\n\t\tctx.translate( -y - x, -y + x );\n\t\tUtils.anchoredFillText( ctx, this.title, x, y, 's' );\n\t\tctx.restore();\n\t}\n\t\n\tctx.restore();\n}"}}},"Flexikey":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"Flexikey"},{"title":"param","description":null,"type":null,"name":"config"}]},"Source":"function Flexikey( config )\n{\n\tthis.entries = [];\n\tthis.config = config;\n}","prototype":{"addEntry":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"label"},{"title":"param","description":null,"type":null,"name":"color"}]},"Source":"Flexikey.prototype.addEntry = function ( label, color )\n{\n\tthis.entries.push( { label:label, color:color } );\n}"},"render":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"ctx"}]},"Source":"Flexikey.prototype.render = function ( ctx )\n{\n\tctx.save();\n\n\t// Calculate the size of the flexikey\n\tvar height = this.config.margin.top;\n\tvar width = this.config.margin.left;\n\n\tvar maxWidth = 0;\n\tvar sheight = 0;\n\tfor ( var i = 0, j = this.entries.length; i < j; i++ )\n\t{\n\t\tvar entry = this.entries[i];\n\t\tvar ss = Utils.stringSize( ctx, entry.label );\n\n\t\theight += ss.height + this.config.spacing;\n\t\tsheight = ss.height;\n\n\t\tif ( ss.width > maxWidth )\n\t\t{\n\t\t\tmaxWidth = ss.width;\n\t\t}\n\t}\n\n\theight += this.config.margin.bottom - this.config.spacing;\n\twidth += this.config.swatch.size + this.config.swatch.spacing + maxWidth + this.config.margin.right;\n\n\tvar origin = Utils.adjustForAnchor( this.config.position.x, this.config.position.y,\n\t\t\t  { width:width, height:height }, this.config.position.anchor );\n\n\t// Draw the background\n\tctx.save();\n\tctx.beginPath();\n\tctx.fillStyle = this.config.background;\n\tctx.rect( origin.x, origin.y, width, height );\n\tctx.fill();\n\tctx.restore();\n\n\tvar x0 = origin.x + this.config.margin.left + ( this.config.swatch.size / 2 );\n\tvar x1 = x0 + ( this.config.swatch.size / 2 ) + this.config.swatch.spacing;\n\n\t// Draw each key entry\n\tvar y = origin.y + this.config.margin.top + ( sheight / 2 );\n\n\tctx.font = this.config.font;\n\tfor ( var i = 0, j = this.entries.length; i < j; i++ )\n\t{\n\t\tvar entry = this.entries[i];\n\n\t\tctx.beginPath();\n\t\tctx.fillStyle = entry.color;\n\t\tUtils.circle( ctx, x0, y, this.config.swatch.size / 2 );\n\t\tctx.fill();\n\t\tctx.fillStyle = this.config.textColour || 'white';\n\t\tUtils.anchoredFillText( ctx, entry.label, x1, y, 'w' );\n\n\t\ty += sheight + this.config.spacing;\n\t}\n\n\tctx.restore();\n}"}}},"Graph":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"Graph"},{"title":"param","description":null,"type":null,"name":"background"},{"title":"param","description":null,"type":null,"name":"mask"},{"title":"param","description":null,"type":null,"name":"renderer"}]},"Source":"function Graph( background, mask, renderer )\n{\n\t// Save configuration\n\tthis.bgLoaded = false;\n\tthis.maskLoaded = false;\n\tthis.renderer = renderer;\n\t\n\t// Load images asynchronously\n\tvar that = this;\n\tthis.bg = new Image();\n\tthis.bg.onload = function () { that.bgLoaded = true;  };\n\t\n\tif ( background )\n\t{\n\t\tthis.bg.src = PULSE.config.IMAGE_URL_PREFIX + background;\n\t}\n\t\n\tthis.mask = new Image();\n\tthis.mask.onload = function () { that.maskLoaded = true;  };\n\t\n\tif ( mask )\n\t{\n\t\tthis.mask.src = PULSE.config.IMAGE_URL_PREFIX + mask;\n\t}\n}","prototype":{"render":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"ctx"}]},"Source":"Graph.prototype.render = function ( data, ctx )\n{\n\tthis.renderer.render( data, ctx );\n}"}}},"this":{"bg":{"onload":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"this.bg.onload = function () { that.bgLoaded = true;  }"}},"mask":{"onload":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"this.mask.onload = function () { that.maskLoaded = true;  }"}},"root":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"this.root\t\t= function(){ return root; }"}},"GraphPanel":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"GraphPanel"},{"title":"param","description":null,"type":null,"name":"elementId"}]},"Source":"function GraphPanel( elementId )\n{\n\tthis.canvas = document.getElementById( elementId );\n    this.ctx = this.canvas.getContext( '2d' );\n}","prototype":{"getContext":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"GraphPanel.prototype.getContext = function()\n{\n\treturn this.ctx;\n}"},"setCanvasElementSize":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"width"},{"title":"param","description":null,"type":null,"name":"height"}]},"Source":"GraphPanel.prototype.setCanvasElementSize = function( width, height )\n{\n\tthis.canvas.setAttribute( 'width', width );\n\tthis.canvas.setAttribute( 'height', height );\n}"}}},"NonLinearAxis":{"Documentation":{"description":"title - the axis title\nmin - minimum value on the axis\nmax - maximum value on the axis\nstart - start screen coordinate of the axis\nend - end screen coordinate of the axis\nfixed - the fixed screen coordinate for the axis\nnumLabels - the approximate number of labels to display\nspec - the non-linear specification\nlabels - overridden labels, optional","tags":[]},"Source":"function NonLinearAxis( title, min, max, start, end, fixed, numLabels, spec, labels )\n{\n\tthis.title = title;\n\tthis.min = min;\n\tthis.max = max;\n\tthis.start = start;\n\tthis.end = end;\n\tthis.fixed = fixed;\n\tthis.numLabels = numLabels;\n\tthis.spec = spec;\n\tthis.labels = labels;\n\t\n\tthis.overdraw = 0;\n\tthis.shift = 0;\n\tthis.titleShift = 0;\n}","prototype":{"project":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"NonLinearAxis.prototype.project"},{"title":"param","description":null,"type":null,"name":"value"}]},"Source":"NonLinearAxis.prototype.project = function ( value )\n{\n\t// Clamp the value to within the range\n\tvar clamped = value;\n\tif ( clamped < this.min )\n\t{\n\t\tclamped = this.min;\n\t}\n\tif ( clamped > this.max )\n\t{\n\t\tclamped = this.max;\n\t}\n\t\n\t// Now apply the non-linear spec\n\tvar proportion;\n\tfor ( var i = 1, j = this.spec.length; i < j; i++ )\n\t{\n\t\tvar limit = this.spec[i][0];\n\t\tvar fraction = this.spec[i][1];\n\t\t\n\t\tif ( clamped <= limit )\n\t\t{\n\t\t\t// Add the fraction from the previous limit\n\t\t\tproportion = this.spec[i-1][1];\n\t\t\t\n\t\t\t// Add the proportional size in this limit\n\t\t\tvar dx = this.spec[i][0] - this.spec[i-1][0];\n\t\t\tvar xx = clamped - this.spec[i-1][0];\n\t\t\tvar dy = this.spec[i][1] - this.spec[i-1][1];\n\t\t\t\n\t\t\tproportion += ( xx / dx ) * dy; \n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn this.start + ( proportion * ( this.end - this.start ) );\n}"}}},"OldProjection":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"OldProjection"},{"title":"param","description":null,"type":null,"name":"xyz"},{"title":"param","description":null,"type":null,"name":"rpy"},{"title":"param","description":null,"type":null,"name":"ar"},{"title":"param","description":null,"type":null,"name":"fl"},{"title":"param","description":null,"type":null,"name":"center"}]},"Source":"function OldProjection( xyz, rpy, ar, fl, center ) \n{\n\tthis.xyz \t= xyz;\n\tthis.rpy \t= rpy;\n\tthis.ar  \t= ar;\n\tthis.fl  \t= fl;\n\tthis.center = center;\n\tthis.LUT \t= [ [ 0, 1, 2 ], [ 1, 0, 2 ], [2, 0, 1] ];\n}","prototype":{"distanceSquared":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"world"}]},"Source":"OldProjection.prototype.distanceSquared = function ( world )\n{\n    var dx = world.x - this.xyz.x;\n    var dy = world.y - this.xyz.y;\n    var dz = world.z - this.xyz.z;\n    var dsquared = dx*dx + dy*dy + dz*dz;\n    return dsquared;\n}"},"project":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"world"}]},"Source":"OldProjection.prototype.project = function ( world )\n{\n\tif ( this.rot === undefined )\n\t{\n\t\tthis.rot = this.makeRotation();\n\t}\n\t\n\tvar newWorld = [ world.x - this.xyz.x, world.y - this.xyz.y, world.z - this.xyz.z ];\n\tvar cam = this.matrixVectorMultiply( this.rot, newWorld );\n\t\n\tif ( cam[2] < 1e-9 )\n\t{\n\t\tcam[2] = -1e-9;\n\t}\n\n    var x = this.center.x + ( ( cam[0] / cam[2] ) * this.fl );\n    var y = this.center.y + ( ( cam[1] / cam[2] ) * this.fl * this.ar );\n    return { x:x, y:y, dsquared:this.distanceSquared( world ) };\n}"},"makeRotation":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"OldProjection.prototype.makeRotation = function()\n{\n    var mRoll  = this.axisRotation( 2, this.rpy.r );\n    var mPitch = this.axisRotation( 0, this.rpy.p );\n    var mYaw   = this.axisRotation( 2, this.rpy.y );\n\n    var m = this.matrixMatrixMultiply( mRoll, mPitch );\n    m = this.matrixMatrixMultiply( m, mYaw );\n\n    return m;\n}"},"axisRotation":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"axis"},{"title":"param","description":null,"type":null,"name":"angle"}]},"Source":"OldProjection.prototype.axisRotation = function( axis, angle )\n{\n    var i0 = this.LUT[axis][0];\n    var i1 = this.LUT[axis][1];\n    var i2 = this.LUT[axis][2];\n\n    var rot = [ [0,0,0], [0,0,0], [0,0,0] ]; \n    rot[i0][i0] = 1.0;\n    rot[i1][i1] = Math.cos( angle );\n    rot[i2][i2] = Math.cos( angle );\n    rot[i1][i2] = Math.sin( angle );\n    rot[i2][i1] = -rot[i1][i2];\n\n    return rot;\n}"},"matrixMatrixMultiply":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"a"},{"title":"param","description":null,"type":null,"name":"b"}]},"Source":"OldProjection.prototype.matrixMatrixMultiply = function( a, b )\n{\n\treturn [\n\t        [ a[0][0]*b[0][0] + a[0][1]*b[1][0] + a[0][2]*b[2][0], a[0][0]*b[0][1] + a[0][1]*b[1][1] + a[0][2]*b[2][1], a[0][0]*b[0][2] + a[0][1]*b[1][2] + a[0][2]*b[2][2] ],\n\t        [ a[1][0]*b[0][0] + a[1][1]*b[1][0] + a[1][2]*b[2][0], a[1][0]*b[0][1] + a[1][1]*b[1][1] + a[1][2]*b[2][1],\ta[1][0]*b[0][2] + a[1][1]*b[1][2] + a[1][2]*b[2][2] ],\n            [ a[2][0]*b[0][0] + a[2][1]*b[1][0] + a[2][2]*b[2][0], a[2][0]*b[0][1] + a[2][1]*b[1][1] + a[2][2]*b[2][1],\ta[2][0]*b[0][2] + a[2][1]*b[1][2] + a[2][2]*b[2][2] ]\n\t       ];\n}"},"matrixVectorMultiply":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"a"},{"title":"param","description":null,"type":null,"name":"b"}]},"Source":"OldProjection.prototype.matrixVectorMultiply = function( a, b )\n{\n\treturn [ a[0][0]*b[0] + a[0][1]*b[1] + a[0][2]*b[2],\n\t         a[1][0]*b[0] + a[1][1]*b[1] + a[1][2]*b[2],\n\t         a[2][0]*b[0] + a[2][1]*b[1] + a[2][2]*b[2] ];\n}"}}},"Projection":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"Projection"},{"title":"param","description":null,"type":null,"name":"xyz"},{"title":"param","description":null,"type":null,"name":"rpy"},{"title":"param","description":null,"type":null,"name":"ar"},{"title":"param","description":null,"type":null,"name":"fl"},{"title":"param","description":null,"type":null,"name":"center"}]},"Source":"function Projection( xyz, rpy, ar, fl, center ) \n{\n\tthis.xyz \t= xyz;\n\tthis.rpy \t= rpy;\n\tthis.ar  \t= ar;\n\tthis.fl  \t= fl;\n\tthis.center = center;\n\tthis.LUT \t= [ [ 0, 1, 2 ], [ 1, 0, 2 ], [2, 0, 1] ];\n\t\n    this.near = 0.01;\n    this.far = 1000;\n    this.fov = Math.PI / 6;\n    this.aspect = center.y / center.x;\n}","prototype":{"distanceSquared":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"world"}]},"Source":"Projection.prototype.distanceSquared = function ( world )\n{\n    var dx = world.x - this.xyz.x;\n    var dy = world.y - this.xyz.y;\n    var dz = world.z - this.xyz.z;\n    var dsquared = dx*dx + dy*dy + dz*dz;\n    return dsquared;\n}"},"project":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"world"}]},"Source":"Projection.prototype.project = function ( world )\n{\n\tif ( this.rot === undefined )\n\t{\n\t\tthis.rot = this.makeRotation();\n\t}\n\t\n\tif ( this.projectionMatrix == undefined )\n\t{\n\t    this.projectionMatrix = this.makeProjection();\n\t}\n\t\n\tvar newWorld = [ world.x - this.xyz.x, world.y - this.xyz.y, world.z - this.xyz.z ];\n\tvar cam = this.matrixVectorMultiply( this.rot, newWorld );\n\t\n\t// Extend to a homogeneous coordinate\n    cam[3] = 1;\n    // Project into image space\n    var projected = this.matrixVectorMultiply4( this.projectionMatrix, cam );\n    \n    return { x : projected[0], y : projected[1], z : projected[2], w : projected[3] };\n}"},"clipLine":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"point1"},{"title":"param","description":null,"type":null,"name":"point2"}]},"Source":"Projection.prototype.clipLine = function( point1, point2 )\n{\n\tvar res = [];\n\t\n\tres = this.clipLineAgainstPlane( [ point1, point2 ], this.clipLineW );\n\tres = this.clipLineAgainstPlane( res, this.clipLineY );\n\tres = this.clipLineAgainstPlane( res, this.clipLineNegY );\n\tres = this.clipLineAgainstPlane( res, this.clipLineX );\n\tres = this.clipLineAgainstPlane( res, this.clipLineNegX );\n\t\n\treturn res;\n}"},"clipLineAgainstPlane":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"points"},{"title":"param","description":null,"type":null,"name":"planeCheckFunction"}]},"Source":"Projection.prototype.clipLineAgainstPlane = function( points, planeCheckFunction )\n{\n    var temp1 = points[0];\n    var temp2 = points[1];\n    \n    if ( temp1 && temp2 )\n    {\n    \treturn planeCheckFunction( temp1, temp2, this );\n    }\n    \n    return[];\n}"},"clipLineW":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"point1"},{"title":"param","description":null,"type":null,"name":"point2"},{"title":"param","description":null,"type":null,"name":"projectionObj"}]},"Source":"Projection.prototype.clipLineW = function( point1, point2, projectionObj )\n{\n\t// Clip against the w=0 plane\n\t\n    if ( !projectionObj.isInW( point1 ) && !projectionObj.isInW( point2 ) )\n    {\n        return [];\n    }\n    else if ( !projectionObj.isInW( point1 ) )\n    {\n        var scale = point1.w / ( point1.w - point2.w );\n        point1 = projectionObj.intersectVector4( point1, point2, scale );\n    }\n    else if ( !projectionObj.isInW( point2 ) )\n    {\n        var scale = point2.w / ( point2.w - point1.w );\n        point2 = projectionObj.intersectVector4( point2, point1, scale );\n    }\n    \n    return[ point1, point2 ];\n}"},"clipLineX":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"point1"},{"title":"param","description":null,"type":null,"name":"point2"},{"title":"param","description":null,"type":null,"name":"projectionObj"}]},"Source":"Projection.prototype.clipLineX = function( point1, point2, projectionObj )\n{\n    // Now clip against w=x plane\n    if ( !projectionObj.isInX( point1 ) && !projectionObj.isInX( point2 ) )\n    {\n        return [];\n    }\n    else if ( !projectionObj.isInX( point1 ) )\n    {\n        var scale = ( point1.w - point1.x ) / ( ( point1.w - point1.x ) - ( point2.w - point2.x ) );\n        point1 = projectionObj.intersectVector4( point1, point2, scale );\n    }\n    else if ( !projectionObj.isInX( point2 ) )\n    {\n        var scale = ( point2.w - point2.x ) / ( ( point2.w - point2.x ) - ( point1.w - point1.x ) );\n        point2 = projectionObj.intersectVector4( point2, point1, scale );\n    }\n    \n    return[ point1, point2 ];\n}"},"clipLineNegX":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"point1"},{"title":"param","description":null,"type":null,"name":"point2"},{"title":"param","description":null,"type":null,"name":"projectionObj"}]},"Source":"Projection.prototype.clipLineNegX = function( point1, point2, projectionObj )\n{\n    // Now clip against w=-x plane\n    if ( !projectionObj.isInNegX( point1 ) && !projectionObj.isInNegX( point2 ) )\n    {\n        return [];\n    }\n    else if ( !projectionObj.isInNegX( point1 ) )\n    {\n        var scale = ( point1.w + point1.x ) / ( ( point1.w + point1.x ) - ( point2.w + point2.x ) );\n        point1 = projectionObj.intersectVector4( point1, point2, scale );\n    }\n    else if ( !projectionObj.isInNegX( point2 ) )\n    {\n        var scale = ( point2.w + point2.x ) / ( ( point2.w + point2.x ) - ( point1.w + point1.x ) );\n        point2 = projectionObj.intersectVector4( point2, point1, scale );\n    }\n    \n    return[ point1, point2 ];\n}"},"clipLineY":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"point1"},{"title":"param","description":null,"type":null,"name":"point2"},{"title":"param","description":null,"type":null,"name":"projectionObj"}]},"Source":"Projection.prototype.clipLineY = function( point1, point2, projectionObj )\n{\n\t// Clip against w=y plane\n    if ( !projectionObj.isInY( point1 ) && !projectionObj.isInY( point2 ) )\n    {\n        return [];\n    }\n    else if ( !projectionObj.isInY( point1 ) )\n    {\n        var scale = ( point1.w - point1.y ) / ( ( point1.w - point1.y ) - ( point2.w - point2.y ) );\n        point1 = projectionObj.intersectVector4( point1, point2, scale );\n    }\n    else if ( !projectionObj.isInY( point2 ) )\n    {\n        var scale = ( point2.w - point2.y ) / ( ( point2.w - point2.y ) - ( point1.w - point1.y ) );\n        point2 = projectionObj.intersectVector4( point2, point1, scale );\n    }\n    \n    return[ point1, point2 ];\n}"},"clipLineNegY":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"point1"},{"title":"param","description":null,"type":null,"name":"point2"},{"title":"param","description":null,"type":null,"name":"projectionObj"}]},"Source":"Projection.prototype.clipLineNegY = function( point1, point2, projectionObj )\n{\n    // Clip against w=-y plane\n    if ( !projectionObj.isInNegY( point1 ) && !projectionObj.isInNegY( point2 ) )\n    {\n        return [];\n    }\n    else if ( !projectionObj.isInNegY( point1 ) )\n    {\n        var scale = ( point1.w + point1.y ) / ( ( point1.w + point1.y ) - ( point2.w + point2.y ) );\n        point1 = projectionObj.intersectVector4( point1, point2, scale );\n    }\n    else if ( !projectionObj.isInNegY( point2 ) )\n    {\n        var scale = ( point2.w + point2.y ) / ( ( point2.w + point2.y ) - ( point1.w + point1.y ) );\n        point2 = projectionObj.intersectVector4( point2, point1, scale );\n    }\n    \n    return[ point1, point2 ];\n}"},"isInW":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"point"}]},"Source":"Projection.prototype.isInW = function( point )\n{\n\tvar res = false;\n\tif ( !( point.w < 0 ) )\n\t{\n\t\tres = true;\n\t}\n\treturn res;\n}"},"isInX":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"point"}]},"Source":"Projection.prototype.isInX = function( point )\n{\t\n\tvar res = false;\n\tif ( !( point.x - point.w > 0 ) )\n\t{\n\t\tres = true;\n\t}\t\n\treturn res;\n}"},"isInNegX":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"point"}]},"Source":"Projection.prototype.isInNegX = function( point )\n{\t\t\n\tvar res = false;\n\tif ( !( point.x + point.w < 0 ) )\n\t{\n\t\tres = true;\n\t}\n\treturn res;\t\t\n}"},"isInY":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"point"}]},"Source":"Projection.prototype.isInY = function( point )\n{\n\tvar res = false;\n\tif ( !( point.y - point.w > 0 ) )\n\t{\n\t\tres = true;\n\t}\n\treturn res;\n}"},"isInNegY":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"point"}]},"Source":"Projection.prototype.isInNegY = function( point )\n{\t\n\tvar res = false;\n\tif ( !( point.y + point.w < 0 ) )\n\t{\n\t\tres = true;\n\t}\n\treturn res;\n}"},"clipTriangles":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"triangles"}]},"Source":"Projection.prototype.clipTriangles = function( triangles )\n{\n\tvar res = [];\n\tres = this.clipTrianglesAgainstPlane( triangles, this.isInW, this.clipLineW );\n\n\tres = this.clipTrianglesAgainstPlane( res, this.isInY, this.clipLineY );\n\tres = this.clipTrianglesAgainstPlane( res, this.isInNegY, this.clipLineNegY );\n\t\n\tres = this.clipTrianglesAgainstPlane( res, this.isInX, this.clipLineX );\n\tres = this.clipTrianglesAgainstPlane( res, this.isInNegX, this.clipLineNegX );\n\t\n\treturn res;\n}"},"clipTrianglesAgainstPlane":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"trgs"},{"title":"param","description":null,"type":null,"name":"pointPlaneCheckFunction"},{"title":"param","description":null,"type":null,"name":"lineClipFunction"}]},"Source":"Projection.prototype.clipTrianglesAgainstPlane = function( trgs, pointPlaneCheckFunction, lineClipFunction )\n{\n\tvar clippedTrgs = [];\n\t\n\tfor( var i = 0, limit = trgs.length; i < limit; i++ )\n\t{\n\t\tvar trg = trgs[i];\n\t\t\n\t\tvar inside = [];\n\t\tvar outside = [];\n\t\t\n\t\tfor ( var j = 0, limit2 = trg.length; j < limit2; j++ )\n\t\t{\n\t\t\tvar p = trg[j];\n\t\t\tif ( pointPlaneCheckFunction( p ) )\n\t\t\t{\n\t\t\t\tinside.push( p );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\toutside.push( p );\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar count = inside.length;\t\t\n\t\t\n\t\tif ( count === 3 ) // All points are in, leave as it is\n\t\t{\n\t\t\tclippedTrgs.push( trg );\n\t\t}\n\t\telse if ( count === 1 )\n\t\t{\t\t\t\t\n\t\t\tvar pIn = inside[0];\n\t\t\tvar pOut = outside[0];\n\t\t\tvar pOutTwo = outside[ 1 ];\n\t\t\t\n\t\t\t// Clip, 1st point in, 1st point out\n\t\t\t// Clip, 1st point in, 2nd point out\n\t\t\tvar clOne = this.clipLineAgainstPlane( [pIn, pOut], lineClipFunction );\n\t\t\tvar clTwo = this.clipLineAgainstPlane( [pIn, pOutTwo], lineClipFunction );\n\t\t\t\n\t\t\t// Add the new triangle\n\t\t\tif ( clOne.length === 2 && clTwo.length === 2 )\n\t\t\t{\n\t\t\t\tclippedTrgs.push( [ pIn, clOne[1], clTwo[1] ] )\t\n\t\t\t}\t\t\t\t\t\t\t\t\n\t\t}\n\t\telse if ( count === 2 )\n\t\t{\n\t\t\tvar pInOne = inside[0];\n\t\t\tvar pInTwo = inside[1];\n\t\t\tvar pOut = outside[0];\n\t\t\t\n\t\t\t// Clip 1st, onlyOut\n\t\t\t// Clip 2nd, onlyOut\n\t\t\tvar clOne = this.clipLineAgainstPlane( [pInOne, pOut], lineClipFunction );\n\t\t\tvar clTwo = this.clipLineAgainstPlane( [pInTwo, pOut], lineClipFunction );\n\t\t\t\n\t\t\tif ( clOne.length === 2 && clTwo.length === 2 )\n\t\t\t{\n\t\t\t\t// Triangles\n\t\t\t\tvar trgOne = [ pInOne, pInTwo, clTwo[1] ];\n\t\t\t\tvar trgTwo = [ pInOne, clOne[1], clTwo[1] ];\n\t\t\t\t\n\t\t\t\tclippedTrgs.push( trgOne );\n\t\t\t\tclippedTrgs.push( trgTwo );\n\t\t\t}\t\n\t\t}\n\t\t// Implied else === 0, no points were in, don't add anything\n\t}\n\t\n\treturn clippedTrgs;\n}"},"intersectVector4":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"vector1"},{"title":"param","description":null,"type":null,"name":"vector2"},{"title":"param","description":null,"type":null,"name":"scale"}]},"Source":"Projection.prototype.intersectVector4 = function( vector1, vector2, scale )\n{\n    return { x : vector1.x + scale * ( vector2.x - vector1.x ),\n             y : vector1.y + scale * ( vector2.y - vector1.y ),\n             z : vector1.z + scale * ( vector2.z - vector1.z ),\n             w : vector1.w + scale * ( vector2.w - vector1.w ) };\n}"},"makeProjection":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"Projection.prototype.makeProjection = function()\n{\n    var halfFov = this.fov / 2;\n    var h = Math.cos( halfFov ) / Math.sin( halfFov );\n    var w = this.aspect * h;\n    var q = this.far / ( this.far - this.near );\n    \n    return [ [ w, 0, 0, 0 ],\n             [ 0, h, 0, 0 ],\n             [ 0, 0, q, -q * this.near ],\n             [ 0, 0, 1.0, 0 ] ];\n}"},"makeRotation":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"Projection.prototype.makeRotation = function()\n{\n    var mRoll  = this.axisRotation( 2, this.rpy.r );\n    var mPitch = this.axisRotation( 0, this.rpy.p );\n    var mYaw   = this.axisRotation( 2, this.rpy.y );\n\n    var m = this.matrixMatrixMultiply( mRoll, mPitch );\n    m = this.matrixMatrixMultiply( m, mYaw );\n\n    return m;\n}"},"axisRotation":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"axis"},{"title":"param","description":null,"type":null,"name":"angle"}]},"Source":"Projection.prototype.axisRotation = function( axis, angle )\n{\n    var i0 = this.LUT[axis][0];\n    var i1 = this.LUT[axis][1];\n    var i2 = this.LUT[axis][2];\n\n    var rot = [ [0,0,0], [0,0,0], [0,0,0] ]; \n    rot[i0][i0] = 1.0;\n    rot[i1][i1] = Math.cos( angle );\n    rot[i2][i2] = Math.cos( angle );\n    rot[i1][i2] = Math.sin( angle );\n    rot[i2][i1] = -rot[i1][i2];\n\n    return rot;\n}"},"matrixMatrixMultiply":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"a"},{"title":"param","description":null,"type":null,"name":"b"}]},"Source":"Projection.prototype.matrixMatrixMultiply = function( a, b )\n{\n\treturn [\n\t        [ a[0][0]*b[0][0] + a[0][1]*b[1][0] + a[0][2]*b[2][0], a[0][0]*b[0][1] + a[0][1]*b[1][1] + a[0][2]*b[2][1], a[0][0]*b[0][2] + a[0][1]*b[1][2] + a[0][2]*b[2][2] ],\n\t        [ a[1][0]*b[0][0] + a[1][1]*b[1][0] + a[1][2]*b[2][0], a[1][0]*b[0][1] + a[1][1]*b[1][1] + a[1][2]*b[2][1],\ta[1][0]*b[0][2] + a[1][1]*b[1][2] + a[1][2]*b[2][2] ],\n            [ a[2][0]*b[0][0] + a[2][1]*b[1][0] + a[2][2]*b[2][0], a[2][0]*b[0][1] + a[2][1]*b[1][1] + a[2][2]*b[2][1],\ta[2][0]*b[0][2] + a[2][1]*b[1][2] + a[2][2]*b[2][2] ]\n\t       ];\n}"},"matrixVectorMultiply":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"a"},{"title":"param","description":null,"type":null,"name":"b"}]},"Source":"Projection.prototype.matrixVectorMultiply = function( a, b )\n{\n\treturn [ a[0][0]*b[0] + a[0][1]*b[1] + a[0][2]*b[2],\n\t         a[1][0]*b[0] + a[1][1]*b[1] + a[1][2]*b[2],\n\t         a[2][0]*b[0] + a[2][1]*b[1] + a[2][2]*b[2] ];\n}"},"matrixVectorMultiply4":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"a"},{"title":"param","description":null,"type":null,"name":"b"}]},"Source":"Projection.prototype.matrixVectorMultiply4 = function( a, b )\n{\n    return [ a[0][0]*b[0] + a[0][1]*b[1] + a[0][2]*b[2] + a[0][3]*b[3],\n             a[1][0]*b[0] + a[1][1]*b[1] + a[1][2]*b[2] + a[1][3]*b[3],\n             a[2][0]*b[0] + a[2][1]*b[1] + a[2][2]*b[2] + a[2][3]*b[3],\n             a[3][0]*b[0] + a[3][1]*b[1] + a[3][2]*b[2] + a[3][3]*b[3] ];\n}"},"updateCenterAspectRatio":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"width"},{"title":"param","description":null,"type":null,"name":"height"}]},"Source":"Projection.prototype.updateCenterAspectRatio = function( width, height )\n{\n\tthis.center.x = width / 2;\n\tthis.center.y = height / 2; \n\tthis.aspect = this.center.y / this.center.x;\n}"},"updateProjectionOnResize":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"width"},{"title":"param","description":null,"type":null,"name":"height"}]},"Source":"Projection.prototype.updateProjectionOnResize = function( width, height )\n{\n\tthis.updateCenterAspectRatio( width, height );\n\tthis.projectionMatrix = this.makeProjection();\n}"},"toScreenCoords":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"imageSpace"}]},"Source":"Projection.prototype.toScreenCoords = function( imageSpace )\n{\n    return { x : this.center.x * ( imageSpace.x + 1 ), y : this.center.y * ( imageSpace.y + 1 ) };\n}"},"normaliseToImageCube":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"point4"}]},"Source":"Projection.prototype.normaliseToImageCube = function( point4 )\n{\n\tvar p = point4;\n    return { x : p.x / p.w, y : p.y / p.w, z : p.z / p.w, w : p.w };\t\n}"},"projectPoints":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"points"}]},"Source":"Projection.prototype.projectPoints = function( points )\n{\n\tvar projPoints = [];\n\tfor ( var i = 0, limit = points.length; i < limit; i++ )\n\t{\n\t\tprojPoints.push( this.project( points[i] ) );\n\t}\n\treturn projPoints;\n}"},"normalisePoints":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"points"}]},"Source":"Projection.prototype.normalisePoints = function( points )\n{\n\tvar normPoints = [];\n\tfor ( var i = 0, limit = points.length; i < limit; i++ )\n\t{\n\t\tnormPoints.push( this.normaliseToImageCube( points[i] ) );\n\t}\n\treturn normPoints;\t\t\n}"},"toScreenCoordsPoints":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"points"}]},"Source":"Projection.prototype.toScreenCoordsPoints = function( points )\n{\n\tvar screenPoints = [];\n\tfor ( var i = 0, limit = points.length; i < limit; i++ )\n\t{\n\t\tscreenPoints.push( this.toScreenCoords( points[i] ) );\n\t}\n\treturn screenPoints;\t\n}"},"normaliseAndToScreen":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"point"}]},"Source":"Projection.prototype.normaliseAndToScreen = function( point )\n{\n\tif ( point )\n\t{\n\t\treturn this.toScreenCoords( this.normaliseToImageCube( point ) );\t\t\n\t}\n}"}}},"CricketBallTrajectory":{"Documentation":{"description":"Data type for a cricket ball trajectory. Parsers up-stream handle parsing from the various\ndifferent source formats.","tags":[]},"Source":"function CricketBallTrajectory()\n{\n}","prototype":{"getPositionAtTime":{"Documentation":{"description":"Gets the ball position at a particular time.","tags":[]},"Source":"CricketBallTrajectory.prototype.getPositionAtTime = function ( t )\n{\n\tvar time = t - this.bt;\n\n    if ( time > 0 )\n    {\n    \treturn { x: this.getX( this.bp.x, this.obv.x, this.oba.x, time ),\n    \t\t     y: this.getYorZ( this.bp.y, this.obv.y, this.oba.y, time ),\n    \t\t\t z: this.getYorZ( this.bh, this.obv.z, this.oba.z, time ) };\n    }\n    else\n    {\n    \treturn { x: this.getX( this.bp.x, this.ebv.x, this.a.x, time ),\n    \t\t\t y: this.getYorZ( this.bp.y, this.ebv.y, this.a.y, time ),\n    \t\t\t z: this.getYorZ( this.bh, this.ebv.z, this.a.z, time ) };\n    }\n}"},"getTimeAtX":{"Documentation":{"description":"Gets the time at a particular X position.","tags":[]},"Source":"CricketBallTrajectory.prototype.getTimeAtX = function ( x )\n{\n    if ( this.bp.x > x )\n    {\n    \treturn Math.log( ( ( x - this.bp.x ) * ( this.oba.x / this.obv.x ) ) + 1 ) / this.oba.x;\n    }\n    else\n    {\n    \treturn Math.log( ( ( x - this.bp.x ) * ( this.a.x / this.ebv.x ) ) + 1 ) / this.a.x;\n    }\n}"},"getX":{"Documentation":{"description":"Gets the x value at a specific time.","tags":[]},"Source":"CricketBallTrajectory.prototype.getX = function ( x, vx, ax, t )\n{\n    return x - ( vx * ( ( 1 - Math.exp( ax * t ) ) / ax ) );\n}"},"getYorZ":{"Documentation":{"description":"Gets the y or z values at a specific time.","tags":[]},"Source":"CricketBallTrajectory.prototype.getYorZ = function ( pos, velocity, accel, t )\n{\n    return pos + ( velocity * t ) + ( ( accel * t * t ) / 2 );\n}"}}},"PitchMapRenderer":{"Documentation":{"description":"*********","tags":[]},"Source":"function PitchMapRenderer ( config ) \n{\n\tthis.config = config;\n}","isSameCategory":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"PitchMapRenderer.isSameCategory"},{"title":"param","description":null,"type":null,"name":"a"},{"title":"param","description":null,"type":null,"name":"b"}]},"Source":"PitchMapRenderer.isSameCategory = function ( a, b )\n{\n\treturn ( a === b || ( a >= 1 && a <= 3 && b >= 1 && b <= 3 ) || ( a >= 4 && b >= 4 ) );\n}"},"prototype":{"isValid":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"row"}]},"Source":"PitchMapRenderer.prototype.isValid = function ( row )\n{\n\treturn true;\n}"},"render":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"db"},{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"ctx"}]},"Source":"PitchMapRenderer.prototype.render = function ( db, data, ctx )\n{\n\tthis.db = db;\n\tthis.data = this.prepareData( data );\n\tthis.ctx = ctx;\n\t\n\tthis.setSize( { x:0, y:0, width: ctx.canvas.canvas.width, height: ctx.canvas.canvas.height } );\n\t\n\tthis.tooltipData = undefined;\n\tthis.draw();\n}"},"setSize":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"sizeProperties"}]},"Source":"PitchMapRenderer.prototype.setSize = function ( sizeProperties )\n{\n\tif( !this.origConfig )\n\t{\n\t\tthis.origConfig = Utils.cloneObject( this.config );\n\n\t\t//sets some static values\n\t\tthis.origConfig.aspect = this.origConfig.width / this.origConfig.height;\n\t}\n\t\n\t//set current aspect ration\n\tthis.config.aspect = sizeProperties.width / sizeProperties.height;\n\t\n\tif( this.config.aspect >= this.origConfig.aspect )\n\t{\n\t\t//if this canvas is wider than the original\n\t\t//scale based on current height\n\t\tvar scale = this.config.scale = ( 1 / this.origConfig.height ) * sizeProperties.height;\n\t}\n\telse\n\t{\n\t\t//scale based on current width\n\t\tvar scale = this.config.scale = ( 1 / this.origConfig.width ) * sizeProperties.width;\n\t}\n\n\tthis.config.height \t= this.origConfig.height * scale;\n\tthis.config.width \t= this.origConfig.width * scale;\n\n\tthis.config.ballSize= Utils.numberToPixelString( Utils.pixelStringToNumber( this.origConfig.ballSize ) * scale > 11 ? 12 : 8 );\n\tthis.config.projection.fl = this.origConfig.projection.fl * scale;\n\tthis.config.projection.center.x = sizeProperties.width / 2;\n\tthis.config.projection.center.y = sizeProperties.height / 2;\n}"},"getColorKey":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"row"}]},"Source":"PitchMapRenderer.prototype.getColorKey = function ( row )\n{\n\treturn row.get( CricketField.IS_WICKET ) ? 'w' : row.get( CricketField.DEBIT );\n}"},"compare":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"a"},{"title":"param","description":null,"type":null,"name":"b"}]},"Source":"PitchMapRenderer.prototype.compare = function ( a, b )\n{\n\tvar aw = a.get( CricketField.IS_WICKET );\n\tvar bw = b.get( CricketField.IS_WICKET );\n\t\n\tif ( aw && !bw )\n\t{\n\t\treturn 1;\n\t}\n\telse if ( !aw && bw )\n\t{\n\t\treturn -1;\n\t}\n\telse\n\t{\n\t\tvar ar = +a.get( CricketField.DEBIT );\n\t\tvar br = +b.get( CricketField.DEBIT );\n\n\t\tif ( PitchMapRenderer.isSameCategory( ar, br ) )\n\t\t{\n\t\t\tif ( a.get( CricketField.PITCHED ) !== undefined && b.get( CricketField.PITCHED ) !== undefined )\n\t\t\t{\n\t\t\t\treturn ( +a.get( CricketField.PITCHED ).x ) - ( +b.get( CricketField.PITCHED ).x );\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn ar - br;\n\t\t}\n\t}\n\treturn 0;\n}"},"prepareData":{"Documentation":{"description":"This function sorts and projects the balls passed in. It results in an array\nof objects that each have a ball.x/y, a shadow.x/y and a color. It also sets the background image\nappropriately.","tags":[]},"Source":"PitchMapRenderer.prototype.prepareData = function ( data )\n{\n\tthis.tooltipDataCache = {};\n\n\t// Need to clone the array, so we can sort on BounceX\n\tvar dataArray = Utils.cloneArray( data );\n\t\n\t// Sort the array; also track handedness so we don't need to iterate again\n\tvar hasRight = false;\n\tvar hasLeft = false;\n\tvar that = this;\n\t\n\tdataArray.sort( function ( a, b ) \n\t{\n\t\tvar handedness = a.get( CricketField.HANDEDNESS );\n\t\tif ( !hasRight && CricketHandedness.RIGHT === handedness )\n\t\t{\n\t\t\thasRight = true;\n\t\t}\n\t\tif ( !hasLeft && CricketHandedness.LEFT === handedness )\n\t\t{\n\t\t\thasLeft = true;\n\t\t}\n\t\t\n\t\treturn that.compare( a, b );\n\t} );\n\t\n\t// Set background based upon hasLeft/hasRight\n\tif ( hasLeft && hasRight )\n\t{\n\t\tthis.controller.setBackground( this.config.variants.mix.background );\n\t}\n\telse if ( hasLeft )\n\t{\n\t\tthis.controller.setBackground( this.config.variants.lh.background );\n\t}\n\telse if ( hasRight )\n\t{\n\t\tthis.controller.setBackground( this.config.variants.rh.background );\n\t}\n\t\n\t// Iterate through sorted balls\n\tvar preparedData = [];\n\tfor ( var i = 0, j = dataArray.length; i < j; i++ )\n\t{\n\t\tvar row = dataArray[i];\n\t\tvar xyz = row.get( CricketField.PITCHED );\n\t\tif ( xyz !== undefined )\n\t\t{\n\t\t\t//if( !i )\n\t\t\t//{\n\t\t\t\txyz = this.db.normalise( xyz );\n\t\t\t\t\n\t\t\t\tif ( xyz.x > -999 && xyz.y > -999 && this.isValid( row ) )\n\t\t\t\t{\n\t\t\t\t\tvar shadow = this.config.projection.project( xyz );\n\t\t\t\t\txyz.z = 0.036;\n\t\t\t\t\t\n\t\t\t\t\t//TODO: remove following ball hacks\n\t\t\t\t\t//xyz.x = -10.06;\n\t\t\t\t\t//xyz.y = 0;\n\t\t\t\t\t\n\t\t\t\t\tvar ball = this.config.projection.project( xyz );\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\tif ( hasLeft && hasRight )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( CricketHandedness.LEFT === row.get( CricketField.HANDEDNESS ) )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tshadow.x += this.config.variants.lh.offset;\n\t\t\t\t\t\t\tball.x += this.config.variants.lh.offset;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tshadow.x += this.config.variants.rh.offset;\n\t\t\t\t\t\t\tball.x += this.config.variants.rh.offset;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tshadow.x -= 3;\n\t\t\t\t\tshadow.y += 1;\n\t\t\t\t\t\n\t\t\t\t\tvar colorKey = this.getColorKey( row );\n\t\t\t\t\tpreparedData.push( { ball:ball, shadow:shadow, color:this.config.colors[ colorKey ] } );\n\n\t\t\t\t\tthis.updateTooltipCache( ball, row );\n\t\t\t\t}\n\t\t\t//}\n\t\t}\n\t}\n\t\n\treturn preparedData;\n}"},"updateTooltipCache":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"ball"},{"title":"param","description":null,"type":null,"name":"row"}]},"Source":"PitchMapRenderer.prototype.updateTooltipCache = function ( ball, row )\n{\n\t// Update tooltip cache\n\tvar ix = Math.round( ball.x );\n\tvar iy = Math.round( ball.y );\t\t\t\t\n\tvar tx = this.tooltipDataCache[ ix ];\n\tif ( tx === undefined )\n\t{\n\t\ttx = {};\n\t\tthis.tooltipDataCache[ ix ] = tx;\n\t}\n\t\n\tvar lines = [];\n\tlines.push( '<c:#bbb>Ball </c>' + row.get( CricketField.INNINGS ) + '.' + \n\t\t\t( +row.get( CricketField.OVER ) - 1 ) + '.' +\n\t\t\trow.get( CricketField.COUNTING_BALL ) );\n\tlines.push( row.get( CricketField.BOWLER ) + \n\t\t\t' <c:#bbb>to </c>' + row.get( CricketField.BATSMAN ) );\n\t\n\tvar line3 = '';\n\t\n\tvar bs = row.get( CricketField.BOWL_SPEED );\n\tif ( !Utils.isNullish( bs ) && +bs >= 40 )\n\t{\n\t\tline3 += +bs.toFixed(1) + 'mph';\n\t}\n\t\n\tvar summary = row.generateSummary();\n\tif ( !Utils.isNullish( summary ) )\n\t{\n\t\tif ( line3.length > 0 )\n\t\t{\n\t\t\tline3 += ' <c:#bbb>resulting in </c>';\n\t\t}\n\t\tline3 += summary;\n\t}\n\t\n\tif ( !Utils.isNullish( line3 ) )\n\t{\n\t\tlines.push( line3 );\n\t}\n\t\n\tlines.push( '<c:#888>Click to view trajectory</c>' );\n\t\n\tvar ttd = { lines:lines, x:ix, y:iy, bp:row.get( CricketField.ID ) };\n\tthis.tooltipDataCache[ ix ][ iy ] = ttd;\n}"},"draw":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"PitchMapRenderer.prototype.draw = function () \n{\n\tthis.ctx.canvas.clearRect( 0, 0, this.ctx.canvas.canvas.width, this.ctx.canvas.canvas.height );\n\t\t\n\t// Render all the shadows first\n\tthis.ctx.canvas.save();\n\tthis.ctx.canvas.scale( 1, 0.6 );\n\tthis.ctx.canvas.fillStyle = 'rgba(0,0,0,0.3)';\n\tfor ( var i = 0, j = this.data.length; i < j; i++ )\n\t{\n\t\tthis.ctx.canvas.beginPath();\n\t\tUtils.circle( this.ctx.canvas, this.data[i].shadow.x, this.data[i].shadow.y / 0.6, 3 );\n\t\tthis.ctx.canvas.fill();\n\t}\n\tthis.ctx.canvas.restore();\n\t\n\t// Define render callback function\n\tvar that = this;\n\tvar callback = function () { that.draw(); };\n\t\n\t// Render all the balls next\n\tfor ( var i = 0, j = this.data.length; i < j; i++ )\n\t{\n\t\tPULSE.BallRenderer.render( this.ctx.canvas, this.data[i].ball.x, this.data[i].ball.y, this.data[i].color, \n\t\t\t\tthis.config.ballSize, callback );\n\t}\n\t\n\t// Finally render the tooltip data\n\tif ( this.tooltipData !== undefined )\n\t{\n\t\tvar cfg = this.config.tooltip;\n\t\tvar anchorv = 'n';\n\t\tvar anchorh = 'w';\n\t\t\n\t\tif ( this.tooltipData.x > this.config.width / 2 )\n\t\t{\n\t\t\tanchorh = 'e';\n\t\t}\n\t\tif ( this.tooltipData.y > this.config.height / 2 )\n\t\t{\n\t\t\tanchorv = 's';\n\t\t}\n\t\t\n\t\tcfg.position = { x:this.tooltipData.x, y:this.tooltipData.y, anchor:anchorv + anchorh };\n\t\t\n\t\tvar tf = new PULSE.TextField( cfg );\n\t\ttf.setLines( this.tooltipData.lines );\n\t\ttf.render( this.ctx.canvas );\n\t}\n}","callback":{"Documentation":{"description":"This function sorts and projects the balls passed in. It results in an array\nof objects that each have a ball.x/y, a shadow.x/y and a color. It also sets the background image\nappropriately.","tags":[]},"Source":"var callback = function () { that.draw(); }"}},"onMouse":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"event"}]},"Source":"PitchMapRenderer.prototype.onMouse = function ( event )\n{\n\t// Get XY and then infer ball\n\tvar xy = Utils.getXY( event );\n\tif ( xy !== undefined )\n\t{\n\t\tvar tooltipData = this.findNearbyTooltip( xy );\n\t\tif ( 'mousedown' === event.type )\n\t\t{\n\t\t\tif ( tooltipData !== undefined )\n\t\t\t{\n\t\t\t\tthis.controller.showTrajectory( tooltipData.bp );\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif ( this.tooltipData !== tooltipData )\n\t{\n\t\tthis.tooltipData = tooltipData;\n\t\tthis.draw();\n\t}\n}"},"findNearbyTooltip":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"xy"}]},"Source":"PitchMapRenderer.prototype.findNearbyTooltip = function ( xy )\n{\n\tfor ( var s = 0; s < 4; s++ )\n\t{\n\t\tfor ( var x = xy.x - s; x <= xy.x + s; x++ )\n\t\t{\n\t\t\tfor ( var y = xy.y - s; y <= xy.y + s; y++ )\n\t\t\t{\n\t\t\t\tif ( this.tooltipDataCache[ x ] !== undefined &&\n\t\t\t\t\t this.tooltipDataCache[ x ][ y ] !== undefined )\n\t\t\t\t{\n\t\t\t\t\treturn this.tooltipDataCache[ x ][ y ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"}}},"VariableBounceRenderer":{"Documentation":{"description":"***************","tags":[]},"Source":"function VariableBounceRenderer ( config ) \n{\n\tthis.config = config;\n}","prototype":{"getColorKey":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"row"}]},"Source":"VariableBounceRenderer.prototype.getColorKey = function ( row )\n{\n\tvar stumps = row.get( CricketField.STUMPS );\n\tif ( row.get( CricketField.IS_WICKET ) )\n\t{\n\t\treturn 'w';\n\t}\n\telse if ( stumps.z > 0.745 )\n\t{\n\t\treturn 'a';\n\t}\n\telse\n\t{\n\t\treturn 's';\n\t}\n}"},"isValid":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"row"}]},"Source":"VariableBounceRenderer.prototype.isValid = function ( row )\n{\n\tvar pitched = row.get( CricketField.PITCHED );\n\tvar stumps = row.get( CricketField.STUMPS );\n\t\n\tif ( pitched !== undefined && stumps !== undefined )\n\t{\n\t\tvar xyz = { x:pitched.x, y:pitched.y, z:stumps.z };\n\t\txyz = this.db.normalise( xyz );\n\t\t\n\t\treturn xyz.x > -999 && xyz.y > -999 && xyz.z > -999;\n\t}\n\t\n\treturn false;\n}"},"compare":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"a"},{"title":"param","description":null,"type":null,"name":"b"}]},"Source":"VariableBounceRenderer.prototype.compare = function ( a, b )\n{\n\tvar aw = a.get( CricketField.IS_WICKET );\n\tvar bw = b.get( CricketField.IS_WICKET );\n\t\n\tif ( aw && !bw )\n\t{\n\t\treturn 1;\n\t}\n\telse if ( !aw && bw )\n\t{\n\t\treturn -1;\n\t}\n\telse\n\t{\n\t\tif ( a.get( CricketField.PITCHED ) !== undefined && b.get( CricketField.PITCHED ) !== undefined )\n\t\t{\n\t\t\treturn +a.get( CricketField.PITCHED ).x - +b.get( CricketField.PITCHED ).x;\n\t\t}\n\t}\n\treturn 0;\n}"}}},"SpeedPitchMapRenderer":{"Documentation":{"description":"***************","tags":[]},"Source":"function SpeedPitchMapRenderer ( config ) \n{\n\tthis.config = config;\n}","prototype":{"getColorKey":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"row"}]},"Source":"SpeedPitchMapRenderer.prototype.getColorKey = function ( row )\n{\n\tvar speed = +row.get( CricketField.BOWL_SPEED );\n\t\n\t// Convert speed to units currently in use\n    if ( PULSE.SpeedModeController.mode === PULSE.SpeedModeController.MODE_KMH )\n    {\n    \tspeed = PULSE.SpeedModeController.mpsToKmh( speed );\n    }\n\t\n\tfor ( var b = 0, c = this.config.buckets.length; b < c; b++ )\n\t{\n\t\tif ( speed < this.config.buckets[b] )\n\t\t{\n\t\t\treturn b;\n\t\t}\n\t}\n\t\n\treturn this.config.buckets.length;\n}"},"isValid":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"row"}]},"Source":"SpeedPitchMapRenderer.prototype.isValid = function ( row )\n{\n\tvar bs = row.get( CricketField.BOWL_SPEED ),\n\t\tthreshold = 40;\n\t\n\tif ( PULSE.SpeedModeController.mode === PULSE.SpeedModeController.MODE_KMH )\n    {\n\t\tbs \t\t\t= PULSE.SpeedModeController.mpsToKmh( bs );\n\t\tthreshold \t= 10;\n    }\n\t\n\treturn !Utils.isNullish( bs ) && +bs >= 40;\n}"},"compare":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"a"},{"title":"param","description":null,"type":null,"name":"b"}]},"Source":"SpeedPitchMapRenderer.prototype.compare = function ( a, b )\n{\n\tif ( a.get( CricketField.PITCHED ) !== undefined && b.get( CricketField.PITCHED ) !== undefined )\n\t{\n\t\treturn ( +a.get( CricketField.PITCHED ).x ) - ( +b.get( CricketField.PITCHED ).x );\n\t}\n\treturn 0;\n}"}}},"PitchMapMountainRenderer":{"Documentation":{"description":"******************","tags":[]},"Source":"function PitchMapMountainRenderer ( config ) \n{\n\tthis.config = config;\n}","prototype":{"bucketise":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"x"},{"title":"param","description":null,"type":null,"name":"y"}]},"Source":"PitchMapMountainRenderer.prototype.bucketise = function ( x, y )\n{\n\tif ( x >= this.config.boundary.x.min && x <= this.config.boundary.x.max &&\n\t\t y >= this.config.boundary.y.min && y <= this.config.boundary.y.max )\n\t{\n\t\treturn { x : Math.floor( ( x - this.config.boundary.x.min ) / this.config.bucketSize ),\n\t\t\t     y : Math.floor( ( y - this.config.boundary.y.min ) / this.config.bucketSize ) };\n\t}\n}"},"render":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"db"},{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"ctx"}]},"Source":"PitchMapMountainRenderer.prototype.render = function ( db, data, ctx )\n{\n\tthis.projectedPoints = {};\n\n\tthis.ctx = ctx;\n\tthis.db = db;\n\t\n\tctx.canvas.clearRect( 0, 0, this.config.width, this.config.height );\n\t\n\tvar bubble1 = Math.sqrt( 8 ) / 3;\n\tvar bubble2 = Math.sqrt( 7 ) / 3;\n\tvar bubble3 = Math.sqrt( 5 ) / 3;\n\tvar bubble4 = 2 / 3;\n\tvar bubble5 = 1 / 3;\n\t\n\t// Bucketise the data\n\tvar heights = {};\n\tvar total = 0;\n\tfor ( var i = 0, j = data.length; i < j; i++ )\n\t{\n\t\tvar row = data[i];\n\t\tvar xyz = row.get( CricketField.PITCHED );\n\t\t\n\t\tif ( xyz !== undefined )\n\t\t{\n\t\t\tvar bucket = this.bucketise( xyz.x, xyz.y );\n\t\t\tif ( bucket !== undefined )\n\t\t\t{\n\t\t\t\tvar x = bucket.x;\n\t\t\t\tvar y = bucket.y;\n\t\t\t\t// Centre point\n\t\t\t\tthis.incrementBucket( heights, x, y, 1 );\n\t\t\t\t// Points one unit away\n\t\t\t\tthis.incrementBucket( heights, x - 1, y, bubble1 );\n\t\t\t\tthis.incrementBucket( heights, x + 1, y, bubble1 );\n\t\t\t\tthis.incrementBucket( heights, x, y - 1, bubble1 );\n\t\t\t\tthis.incrementBucket( heights, x, y + 1, bubble1 );\n\t\t\t\t// Points two steps away (diagonally)\n\t\t\t\tthis.incrementBucket( heights, x - 1, y - 1, bubble2 );\n\t\t\t\tthis.incrementBucket( heights, x - 1, y + 1, bubble2 );\n\t\t\t\tthis.incrementBucket( heights, x + 1, y - 1, bubble2 );\n\t\t\t\tthis.incrementBucket( heights, x + 1, y + 1, bubble2 );\n\t\t\t\t// Points two steps away (linearly)\n\t\t\t\tthis.incrementBucket( heights, x - 2, y, bubble3 );\n\t\t\t\tthis.incrementBucket( heights, x + 2, y, bubble3 );\n\t\t\t\tthis.incrementBucket( heights, x, y - 2, bubble3 );\n\t\t\t\tthis.incrementBucket( heights, x, y + 2, bubble3 );\n\t\t\t\t// Points three steps away\n\t\t\t\tthis.incrementBucket( heights, x - 2, y + 1, bubble4 );\n\t\t\t\tthis.incrementBucket( heights, x - 2, y - 1, bubble4 );\n\t\t\t\tthis.incrementBucket( heights, x + 2, y + 1, bubble4 );\n\t\t\t\tthis.incrementBucket( heights, x + 2, y - 1, bubble4 );\n\t\t\t\tthis.incrementBucket( heights, x - 1, y + 2, bubble4 );\n\t\t\t\tthis.incrementBucket( heights, x + 1, y + 2, bubble4 );\n\t\t\t\tthis.incrementBucket( heights, x - 1, y - 2, bubble4 );\n\t\t\t\tthis.incrementBucket( heights, x + 1, y - 2, bubble4 );\n\t\t\t\t// Points four steps away\n\t\t\t\tthis.incrementBucket( heights, x - 2, y - 2, bubble5 );\n\t\t\t\tthis.incrementBucket( heights, x - 2, y + 2, bubble5 );\n\t\t\t\tthis.incrementBucket( heights, x + 2, y - 2, bubble5 );\n\t\t\t\tthis.incrementBucket( heights, x + 2, y + 2, bubble5 );\n\n\t\t\t\ttotal++;\n\t\t\t}\n\t\t}\n\t}\n\n\tvar triangles = [];\n\t\n\tif ( total > 0 )\n\t{\n\t\tvar xs = ( this.config.boundary.x.max - this.config.boundary.x.min ) / this.config.bucketSize;\n\t\tvar ys = ( this.config.boundary.y.max - this.config.boundary.y.min ) / this.config.bucketSize;\n\t\t\n\t\t// Quickly loop over all the points and work out the max height\n\t\tvar maxHeight = 0;\n\t\tfor ( var x = 0; x <= xs; x++ )\n\t\t{\n\t\t\tfor ( var y = 0; y <= ys; y++ )\n\t\t\t{\n\t\t\t\tmaxHeight = Math.max( maxHeight, this.getHeight( heights, x, y ) );\n\t\t\t}\n\t\t}\n\t\tif ( maxHeight == 0 )\n\t\t{\n\t\t\tmaxHeight = 1;\n\t\t}\n\t\t\n\t\tmaxHeight /= this.config.maxHeight;\n\t\t\n\t\tfor ( var x = 0; x <= xs; x++ )\n\t\t{\n\t\t\tvar xpos1 = this.config.boundary.x.min + ( x * this.config.bucketSize );\n\t\t\tvar xpos2 = xpos1 + this.config.bucketSize;\n\t\t\tfor ( var y = 0; y <= ys; y++ )\n\t\t\t{\n\t\t\t\tvar ypos1 = this.config.boundary.y.min + ( y * this.config.bucketSize );\n\t\t\t\tvar ypos2 = ypos1 + this.config.bucketSize;\n\t\t\t\t\n\t\t\t\t// Get the height at the four corners\n\t\t\t\tvar height1 = this.getHeight( heights, x, y ) / maxHeight;\n\t\t\t\tvar height2 = this.getHeight( heights, x + 1, y ) / maxHeight;\n\t\t\t\tvar height3 = this.getHeight( heights, x, y + 1 ) / maxHeight;\n\t\t\t\tvar height4 = this.getHeight( heights, x + 1, y + 1 ) / maxHeight;\n\t\t\t\t\n\t\t\t\t// Triangle 1\n\t\t\t\tif ( height2 > 0 || height3 > 0 || height4 > 0 )\n\t\t\t\t{\n\t\t\t\t\ttriangles.push( {\n\t\t\t\t\t\tp1 : { x: xpos2, y: ypos1, z: height2 },\n\t\t\t\t\t\tp2 : { x: xpos2, y: ypos2, z: height4 },\n\t\t\t\t\t\tp3 : { x: xpos1, y: ypos2, z: height3 }\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Triangle 2\n\t\t\t\tif ( height1 > 0 || height2 > 0 || height3 > 0 )\n\t\t\t\t{\n\t\t\t\t\ttriangles.push( {\n\t\t\t\t\t\tp1 : { x: xpos1, y: ypos1, z: height1 },\n\t\t\t\t\t\tp2 : { x: xpos2, y: ypos1, z: height2 },\n\t\t\t\t\t\tp3 : { x: xpos1, y: ypos2, z: height3 }\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.renderMesh( triangles );\n\t}\n}"},"incrementBucket":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"heights"},{"title":"param","description":null,"type":null,"name":"x"},{"title":"param","description":null,"type":null,"name":"y"},{"title":"param","description":null,"type":null,"name":"amount"}]},"Source":"PitchMapMountainRenderer.prototype.incrementBucket = function ( heights, x, y, amount )\n{\n\tif ( heights[ x ] === undefined )\n\t{\n\t\theights[ x ] = {};\n\t}\n\tif ( heights[ x ][ y ] === undefined )\n\t{\n\t\theights[ x ][ y ] = 0;\n\t}\n\n\theights[ x ][ y ] += amount;\n}"},"getHeight":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"heights"},{"title":"param","description":null,"type":null,"name":"x"},{"title":"param","description":null,"type":null,"name":"y"}]},"Source":"PitchMapMountainRenderer.prototype.getHeight = function ( heights, x, y )\n{\n\tvar height = 0;\n\tif ( heights[ x ] !== undefined && heights[ x ][ y ] !== undefined )\n\t{\n\t\theight = heights[ x ][ y ];\n\t}\n\treturn height;\n}"},"renderMesh":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"triangles"}]},"Source":"PitchMapMountainRenderer.prototype.renderMesh = function( triangles )\n{\n\tthis.ctx.canvas.save();\n\tthis.ctx.canvas.lineJoin = 'round';\n\t\n\tfor ( var i = 0, limit = triangles.length; i < limit; i++ )\n\t{\n\t\tvar triangle = triangles[ i ];\n\t\t\n\t\tvar p1 = this.db.normalise( { x:triangle.p1.x, y:triangle.p1.y, z:triangle.p1.z } );\n\t\tvar p2 = this.db.normalise( { x:triangle.p2.x, y:triangle.p2.y, z:triangle.p2.z } );\n\t\tvar p3 = this.db.normalise( { x:triangle.p3.x, y:triangle.p3.y, z:triangle.p3.z } );\n\t\t\n\t\tvar d1 = { x: p2.x - p1.x, y: p2.y - p1.y, z: p2.z - p1.z };\n\t\tvar d2 = { x: p3.x - p2.x, y: p3.y - p2.y, z: p3.z - p2.z };\n\t\t\n\t\t// Calculate the normal vector for the triangle using the cross product\n\t\tvar crossProduct = { x: d1.y * d2.z - d1.z * d2.y,\n\t\t\t\t             y: d1.z * d2.x - d1.x * d2.z,\n\t\t\t\t             z: d1.x * d2.y - d1.y * d2.x };\n\t\t// Work out the length of the vector\n\t\tvar crossProductSize = Math.sqrt( crossProduct.x * crossProduct.x + \n\t\t\t\tcrossProduct.y * crossProduct.y + crossProduct.z * crossProduct.z );\n\t\t// Normalise the cross product vector\n\t\tcrossProduct.x /= crossProductSize;\n\t\tcrossProduct.y /= crossProductSize;\n\t\tcrossProduct.z /= crossProductSize;\n\t\t\n\t\t// Work out the dot product of the normal and light vector to work out the angle between them\n\t\tvar dotProduct = crossProduct.x * this.config.light.x + \n\t\t                 crossProduct.y * this.config.light.y +\n\t\t                 crossProduct.z * this.config.light.z;\n\t\t\n\t\tif ( dotProduct < 0 )\n\t\t{\n\t\t\t// The triangle is facing away from the camera, so skip this one\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tdotProduct = dotProduct * this.config.lightStrength + 1 - this.config.lightStrength;\n\t\t\n\t\tvar color = { r : dotProduct * this.config.color.r,\n\t\t\t\t      g : dotProduct * this.config.color.g,\n\t\t\t\t      b : dotProduct * this.config.color.b };\n\t\t\n\t\tvar colorString = 'rgba(' + +Math.round( color.r * 255 ) + ',' + +Math.round( color.g * 255 ) + ',' + +Math.round( color.b * 255 ) + ', 1)';\n\t\tthis.ctx.canvas.fillStyle = colorString;\n\t\tthis.ctx.canvas.strokeStyle = colorString;\n\t\t\n\t\tthis.ctx.canvas.beginPath();\n\t\t\n\t\tvar pos1 = this.project( p1 );\n\t\tvar pos2 = this.project( p2 );\n\t\tvar pos3 = this.project( p3 );\n\t\tthis.ctx.canvas.moveTo( pos1.x, pos1.y );\n\t\tthis.ctx.canvas.lineTo( pos2.x, pos2.y );\n\t\tthis.ctx.canvas.lineTo( pos3.x, pos3.y );\n\t\t\n\t\tthis.ctx.canvas.closePath();\n\t\t\n\t\tthis.ctx.canvas.fill();\n\t\tthis.ctx.canvas.stroke();\n\t}\n\t\n\tthis.ctx.canvas.restore();\n}"},"project":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"xyz"}]},"Source":"PitchMapMountainRenderer.prototype.project = function ( xyz )\n{\n\t// This projects a world point to a screen point, but caches the result so that subsequent\n\t// invocations are quicker\n\n\tvar key = xyz.x + ',' + xyz.y + ',' + xyz.z;\n\tvar projected = this.projectedPoints[ key ];\n\t\n\tif ( !projected )\n\t{\n\t\tprojected = this.config.projection.project( xyz );\n\t\tthis.projectedPoints[ key ] = projected;\n\t}\n\t\n\treturn projected;\n}"}}},"WagonWheelRenderer":{"Documentation":{"description":"***********","tags":[]},"Source":"function WagonWheelRenderer ( config )\n{\n\tthis.config = config;\n\tthis.selected = -1;\n}","prototype":{"render":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"WagonWheelRenderer.prototype.render"},{"title":"param","description":null,"type":null,"name":"db"},{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"ctx"}]},"Source":"WagonWheelRenderer.prototype.render = function ( db, data, ctx )\n{\n\tthis.db = db;\n\tthis.data = data;\n\tthis.ctx = ctx;\n\tthis.selected = -1;\n\tthis.draw();\n}"},"draw":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"WagonWheelRenderer.prototype.draw = function () \n{\t\n\tthis.ctx.canvas.clearRect( 0, 0, this.config.width, this.config.height );\n\n\t// Get the scales\n\tvar yscale = this.config.scale.y;\n\tvar xscale = this.config.scale.x;\n\t\n\tvar screenOrigin = this.config.transform( 0, 0, 1 );\n\tthis.ctx.canvas.save();\n\tthis.ctx.canvas.beginPath();\n\tthis.ctx.canvas.scale( xscale, yscale );\n\tUtils.circle( this.ctx.canvas, ( screenOrigin.x / xscale ), 2 + ( screenOrigin.y / yscale ), 184 );\n\tthis.ctx.canvas.restore();\n\n\tthis.ctx.canvas.save();\n\tthis.ctx.canvas.clip();\n\n\tthis.ctx.canvas.lineWidth = 3;\n\tthis.ctx.canvas.strokeStyle = 'rgba(0,0,0,1)';\n\n\tvar sign = this.db.getParameter( 'ww-sign' );\n\tvar origin = this.config.transform( this.db.getParameter( 'ww-origin-x' ), 0, sign );\n\t\n\t// Stats object which is used to populate the annotated key\n\tvar stats = { runs:0, balls:0, scoring:0, runsleg:0, runsoff:0,\n\t\t\t\t  singles:0, twothrees:0, fours:0, sixes:0 };\n\n\t// Clone the data so we can sort on number of runs; singles are nearest the top, as other\n\t// shots will typically be longer and poke out from underneath; the exception is that 6s\n\t// should appear on top of 4/5s\n\tvar dataArray = Utils.cloneArray( this.data );\n\t\n\t// Sort the array\n\tdataArray.sort( function ( a, b ) \n\t{\n\t\tvar ar = +a.get( CricketField.CREDIT );\n\t\tvar br = +b.get( CricketField.CREDIT );\n\t\t\n\t\tif ( ar === 6 && br >= 4 )\n\t\t{\n\t\t\treturn ar - br;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn br - ar;\n\t\t}\n\t} );\n\t\n\tfor ( var i = 0, j = dataArray.length; i < j; i++ )\n\t{\n\t\tvar row = dataArray[i];\n\n        var extraType = row.get( CricketField.EXTRA_TYPE );\n\t\t// ignore wide and wide-bye balls as they are not batsman-faced-balls\n        if ( extraType !== \"Wd\" && extraType !== \"WdB\" )\n        {\n            stats.balls++;\n        } \n\t\t\n\t\tvar landing = row.get( CricketField.WW );\n\t\tif ( landing !== undefined && landing.x > -999 && landing.y > -999 )\n\t\t{\n\t\t\tvar runs = ( +row.get( CricketField.CREDIT ) );\n\t\t\tif ( runs > 0 )\n\t\t\t{\n\t\t\t\t// Update stats\n\t\t\t\tstats.scoring++;\n\t\t\t\tstats.runs += runs;\n\t\t\t\t\n\t\t\t\tswitch ( runs )\n\t\t\t\t{\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tstats.singles++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tstats.twothrees++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\tcase 5:\n\t\t\t\t\t\tstats.fours++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 6:\n\t\t\t\t\t\tstats.sixes++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar lh = ( row.get( CricketField.HANDEDNESS ) === CricketHandedness.LEFT );\n\t\t\t\tif ( ( lh && landing.y < 0 ) || ( !lh && landing.y >= 0 ) )\n\t\t\t\t{\n\t\t\t\t\tstats.runsleg += runs;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstats.runsoff += runs;\n\t\t\t\t}\n\n\t\t\t\tif ( this.shouldDraw( runs ) )\n\t\t\t\t{\n\t\t\t\t\t// Transform to screen position\n\t\t\t\t\tvar screenPos = this.config.transform( landing.x, landing.y, sign );\n\t\t\t\t\t\n\t\t\t\t\t// Scale to ensure 4+ runs go to the rope\n\t\t\t\t\tif ( runs >= 4 )\n\t\t\t\t\t{\n\t\t\t\t\t\tscreenPos = Utils.scaleLine( origin, screenPos, 200 );\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar len = this.config.scaleback ? this.config.scaleback.length : 170;\n\t\t\t\t\t\tvar amt = this.config.scaleback ? this.config.scaleback.amount : 0.8;\n\t\t\t\t\t\t\n\t\t\t\t\t\tscreenPos = Utils.scaleLineRel( origin, screenPos, len, amt );\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.ctx.canvas.beginPath();\n\t\t\t\t\tvar gradient = this.ctx.canvas.createRadialGradient( origin.x, origin.y, 0, origin.x, origin.y, 50 );\n\t\t\t\t\tgradient.addColorStop( 0, this.config.colors[ runs ][0] );\n\t\t\t\t\tgradient.addColorStop( 1, this.config.colors[ runs ][1] );\n\t\t\t\t\tthis.ctx.canvas.strokeStyle = gradient;\n\t\t\t\t\t\n\t\t\t\t\t// Special-case the Raphael implementation, that doesn't have a gradient stroke\n\t\t\t\t\t// so let's move the start of the line away from the origin slightly\n\t\t\t\t\tif ( this.config.innerClip )\n\t\t\t\t\t{\n\t\t\t\t\t\tvar newOrigin = WagonWheelRenderer.pointDownLine( origin, screenPos, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  this.config.innerClip );\n\t\t\t\t\t\tthis.ctx.canvas.moveTo( newOrigin.x, newOrigin.y ); \n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.ctx.canvas.moveTo( origin.x, origin.y );\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.ctx.canvas.lineTo( screenPos.x, screenPos.y );\n\t\t\t\t\tthis.ctx.canvas.stroke();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Convert runs to leg/off to percentages\n\tvar tot = stats.runsleg + stats.runsoff;\n\tif ( tot > 0 )\n\t{\n\t\tstats.runsleg = ( Math.round( 100 * stats.runsleg / tot ) );\n\t\tstats.runsoff = ( 100 - stats.runsleg ) + '%';\n\t\tstats.runsleg += '%';\n\t}\n\telse\n\t{\n\t\tstats.runsleg = '';\n\t\tstats.runsoff = '';\n\t}\n\t\n\t// Write stats annotations\n\tthis.ctx.canvas.restore();\n\tthis.ctx.canvas.font = this.config.font;\n\tthis.ctx.canvas.fillStyle = 'black';\n\tfor ( var key in stats )\n\t{\n\t\tif ( key !== 'x' )\n\t\t{\n\t\t\tvar cfg = this.config.key[ key ];\n\t\t\t\n\t\t\tvar color = cfg.color;\n\t\t\tvar color2 = cfg.lcolor || cfg.color;\n\t\t\t\t\t\t\n\t\t\tif ( this.config.keyDisplayMode === 'values' )\n\t\t\t{\n\t\t\t\tthis.ctx.canvas.fillStyle = color2;\n\t\t\t\tUtils.anchoredFillText( this.ctx.canvas, stats[ key ], this.config.key.x[0], cfg.y, 'w' );\n\t\t\t}\n\t\t\telse if ( this.config.keyDisplayMode === 'labelsandvalues' )\n\t\t\t{\n\t\t\t\tthis.ctx.canvas.fillStyle = color2;\n\t\t\t\tUtils.anchoredFillText( this.ctx.canvas, cfg.label, this.config.key.x[0], cfg.y, 'w' );\n\t\t\t\tthis.ctx.canvas.fillStyle = color;\n\t\t\t\tUtils.anchoredFillText( this.ctx.canvas, stats[ key ], this.config.key.x[1], cfg.y, 'e' );\n\t\t\t}\t\t\t\t\t\t\t\t\n\t\t}\n\t}\n\t\n\t// Now write any freetext\n\tif ( this.config.freetext )\n\t{\n\t\tvar tf = new PULSE.TextField( this.config.freetext );\n\t\ttf.addLine( this.config.freetext.text );\n\t\ttf.render( this.ctx.canvas );\n\t}\n}"},"shouldDraw":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"runs"}]},"Source":"WagonWheelRenderer.prototype.shouldDraw = function ( runs )\n{\n\treturn ( this.selected === -1 ) ||\n\t\t   ( this.selected === 0 && runs === 1 ) ||\n\t\t   ( this.selected === 1 && ( runs === 2 || runs === 3 ) ) ||\n\t\t   ( this.selected === 2 && ( runs === 4 || runs === 5 ) ) ||\n\t\t   ( this.selected === 3 && runs === 6 );\n}"},"onMouse":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"event"}]},"Source":"WagonWheelRenderer.prototype.onMouse = function ( event )\n{\n\t// Get XY and then infer run class selection index\n\tvar xy = Utils.getXY( event );\n\tvar selection = -1;\n\t\n\tif ( xy !== undefined && xy.x >= this.config.keyLabelLeftLimit && xy.x <= this.config.keyLabelRightLimit\n\t\t\t&& xy.y >= this.config.keyLabelTopLimit && xy.y <= this.config.keyLabelBottomLimit )\n\t{\n\t\tselection = Math.floor( ( xy.y - this.config.keyLabelTopLimit ) / this.config.keyLabelWidth );\n\t}\n\t\n\tif ( selection !== this.selected )\n\t{\n\t\tthis.selected = selection;\n\t\tthis.draw();\n\t}\n}"}},"pointDownLine":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"start"},{"title":"param","description":null,"type":null,"name":"end"},{"title":"param","description":null,"type":null,"name":"amount"},{"title":"param","description":null,"type":null,"name":"isFraction"}]},"Source":"WagonWheelRenderer.pointDownLine = function ( start, end, amount, isFraction )\n{\n\tvar dx = end.x - start.x;\n\tvar dy = end.y - start.y;\n\t\n\tif ( isFraction )\n\t{\n\t\treturn { x: start.x + ( amount * dx ), \n\t\t\t     y: start.y + ( amount * dy ) };\n\t}\n\telse\n\t{\n\t\tvar theta = Math.atan2( dy, dx );\n\t\tif ( Math.sqrt( ( dx * dx ) + ( dy * dy ) ) <= amount ) \n\t\t{\n\t\t\treturn { x: end.x + ( 3 * Math.cos( theta ) ),\n\t\t\t\t     y: end.y + ( 3 * Math.sin( theta ) ) };\n\t\t\t// Ignore, as the current length is smaller than the target\n\t\t\t//return end;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn { x: start.x + ( amount * Math.cos( theta ) ),\n\t\t\t\t\t y: start.y + ( amount * Math.sin( theta ) ) };\n\t\t}\n\t}\n}"}},"TrajectoryRenderer":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"TrajectoryRenderer"},{"title":"param","description":null,"type":null,"name":"config"}]},"Source":"function TrajectoryRenderer ( config )\n{\n    this.config = config;\n    this.timerId = null;\n    this.animationPeriod = null;\n    this.time = null;\n    this.speed = config.speed;\n    this.viewIndex = 0;\n    \n    // Configurable properties of the renderer\n    this.defer = true;\n    this.renderBounce = true;\n    this.renderEnd = true;\n\n    TrajectoryRenderer.prototype.augmentConfig = function ()\n    {\n        if ( this.viewIndex < this.config.views.length )\n        {\n            var subconfig = this.config.views[ this.viewIndex ];\n            for ( var property in subconfig )\n            {\n                this.config[ property ] = subconfig[ property ];\n            }\n        }\n    };\n\n    this.augmentConfig();\n}","prototype":{"augmentConfig":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"TrajectoryRenderer.prototype.augmentConfig = function ()\n    {\n        if ( this.viewIndex < this.config.views.length )\n        {\n            var subconfig = this.config.views[ this.viewIndex ];\n            for ( var property in subconfig )\n            {\n                this.config[ property ] = subconfig[ property ];\n            }\n        }\n    }"},"setView":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"viewIndex"}]},"Source":"TrajectoryRenderer.prototype.setView = function ( viewIndex )\n{\n    this.resetRendering();\n    this.viewIndex = viewIndex;\n    this.augmentConfig();\n    this.controller.setBackground( this.config.background );\n    this.controller.setMask( this.config.mask );\n}"},"nextView":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"TrajectoryRenderer.prototype.nextView = function ()\n{\n    var viewIndex = this.viewIndex + 1;\n    if ( viewIndex >= this.config.views.length )\n    {\n        viewIndex = 0;\n    }\n    this.setView( viewIndex );\n}"},"setSpeed":{"Documentation":{"description":"This function augments the renderers configuration with the configuration contained in\nthe current view.","tags":[]},"Source":"TrajectoryRenderer.prototype.setSpeed = function ( speed )\n{\n    this.speed = speed;\n}"},"showDescription":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"TrajectoryRenderer.prototype.showDescription = function ()\n{\n    if ( this.data.length > this.activeBall )\n    {\n        PULSE.GraphController.setInfo( this.data[ this.activeBall ].generateDescription(), true ); \n    }\n}"},"render":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"db"},{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"ctx"},{"title":"param","description":null,"type":null,"name":"immediate"}]},"Source":"TrajectoryRenderer.prototype.render = function ( db, data, ctx, immediate )\n{\n    PULSE.Tracer.info( 'TrajectoryRenderer.render called with immediate=' + immediate );\n    \n    // Ensure view is correctly set \n    this.augmentConfig();\n    this.controller.setBackground( this.config.background );\n    this.controller.setMask( this.config.mask );\n    \n    if ( this.defer && !immediate )\n    {\n        // If there is no data, return\n        if ( data === undefined || data === null || data.length === 0 )\n        {\n            PULSE.Tracer.info( 'No data, returning' );\n            return;\n        }\n        // Never render this data immediately, unless this is the first render attempt, as it\n        // will force the animation to restart.\n        else if ( this.deferredRenderCall !== undefined )\n        {\n            // We have previously set data, so save the call as deferred and return. The deferred\n            // data will be used once the current animation loop has ended.\n            PULSE.Tracer.info( 'Deferring call' );\n            \n            this.deferredRenderCall = { db:db, data:data, ctx:ctx };\n            return;\n        }\n        else\n        {\n            // Otherwise continue, but give the deferred data a null value so that we know we\n            // have now rendered\n            PULSE.Tracer.info( 'Continuing' );\n            \n            this.deferredRenderCall = null;\n        }\n    }\n    \n    // Save balls, up to the maximum\n    if ( this.config.maxBalls !== undefined )\n    {\n        this.data = data.slice( 0, this.config.maxBalls ); \n    }\n    else\n    {\n        this.data = data;\n    }\n\n    // Only use balls that have valid trajectories\n    var validData = [];\n    for ( var i = 0, j = this.data.length; i < j; i++ )\n    {\n        var row = this.data[i];\n        var traj = row.get( CricketField.TRAJECTORY );\n\n        if ( traj !== undefined && traj.trackApproved )\n        {\n            validData.push( row );\n        }\n    }\n    this.data = validData;\n        \n    // Save the context, as we need it in the timer callback\n    this.ctx = ctx.canvas;\n    \n    // Reset render/offset array\n    this.renderData = [];\n    this.activeBall = 0;\n    this.offsets = [0];\n\n    this.showDescription();\n    \n    // Iterate over balls to find start/end/offset times\n    var anim = { start:Number.MAX_VALUE, end:Number.MIN_VALUE };\n    \n    PULSE.Tracer.info( 'Rendering ' + this.data.length + ' trajectories' );\n    \n    var total = 0;\n    for ( var i = 0, j = this.data.length; i < j; i++ )\n    {\n        // Obtain trajectory\n        var row = this.data[i];\n        var traj = row.get( CricketField.TRAJECTORY );\n\n        PULSE.Tracer.info( 'Traj ' + i + ' period ' + Utils.toString( traj.period, true ) );\n        \n        if ( 'serial' === this.config.ordering )\n        {\n            // Update total\n            var length = traj.period.end - traj.period.start;\n            total += length;\n            \n            // First traj\n            if ( i === 0 )\n            {\n                anim.start = 0;\n            }\n            \n            // Last traj (can also be the first!)\n            if ( i === j-1 )\n            {\n                anim.end = total + this.config.timeMargin.end;\n            }\n            \n            this.offsets[ i+1 ] = total;\n        }\n        else\n        {\n            // Parallel processing\n            var start = traj.period.start - this.config.timeMargin.start;\n            var end = traj.period.end + this.config.timeMargin.end;\n            \n            if ( start < anim.start )\n            {\n                anim.start = start;\n            }\n            if ( end > anim.end )\n            {\n                anim.end = end;\n            }\n        }\n    }\n    \n    PULSE.Tracer.info( 'Offsets: ' + Utils.toString( this.offsets, true ) );\n    \n    // Set up timing parameters\n    this.animationPeriod = anim;\n    this.time = this.animationPeriod.start;\n    \n    PULSE.Tracer.info( 'Animation period is ' + Utils.toString( anim, true ) ); \n    \n    // Start timer, stopping any previous one\n    if ( this.timerId !== null )\n    {\n        clearInterval( this.timerId );\n    }\n    \n    var that = this;\n    this.timerId = setInterval( function() { that.increment(); }, this.config.refresh );\n}"},"unrender":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"TrajectoryRenderer.prototype.unrender = function ()\n{\n    this.deferredRenderCall = undefined;\n    if ( this.timerId !== null )\n    {\n        clearInterval( this.timerId );\n        this.timerId = null;\n    }\n}"},"resetRendering":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"TrajectoryRenderer.prototype.resetRendering = function ()\n{\n    this.time = this.animationPeriod.start;\n    this.renderData = [];\n    this.activeBall = 0;\n    this.showDescription();\n\n    if ( this.deferredRenderCall )\n    {\n        // We have a deferred render call outstanding, so make that call now\n        PULSE.Tracer.info( 'Making deferred rendering call' );\n        this.render( this.deferredRenderCall.db, this.deferredRenderCall.data, this.deferredRenderCall.ctx, true );\n        \n        // Reset the render call data\n        this.deferredRenderCall = null;\n    }\n}"},"increment":{"Documentation":{"description":"Increments the point in time the animation is currently representing.","tags":[]},"Source":"TrajectoryRenderer.prototype.increment = function ()\n{\n    this.time += ( this.config.interval * this.speed );\n    \n    if ( this.time > this.animationPeriod.end )\n    {\n        this.resetRendering();\n    }\n    \n    // Move onto next active ball if we need to\n    if ( this.time > this.offsets[ this.activeBall + 1 ] )\n    {\n        if ( this.renderEnd )\n        {\n            // Ensure we have rendered the last point for the current ball\n            var thisTraj = this.data[this.activeBall].get( CricketField.TRAJECTORY );\n            var thisRd = this.renderData[this.activeBall];\n\n            TrajectoryRenderer.addRenderData( this.config, thisRd, thisTraj, thisTraj.period.end );\n        }\n        \n        this.activeBall++;\n        this.showDescription();\n    }\n    \n    // Add render data for the active ball\n    for ( var i = 0, j = this.data.length; i < j; i++ )\n    {\n        if ( 'parallel' === this.config.ordering || i === this.activeBall )\n        {\n            // Obtain trajectory\n            var row = this.data[i];\n            var traj = row.get( CricketField.TRAJECTORY );\n            \n            // Create or obtain render data for this traj\n            var rd = this.renderData[i];\n            if ( rd === undefined )\n            {\n                rd = [];\n                rd.shadow = [];\n                rd.trail = [];\n                this.renderData[i] = rd;\n            }\n    \n            var offset = this.offsets[i] === undefined ? 0 : this.offsets[i];\n            var t1 = this.time - offset + traj.period.start;\n            TrajectoryRenderer.addRenderData( this.config, rd, traj, t1 );\n            \n            // Check to see if the next timing point is after the bounce time; if it is,\n            // add the bounce time render point now\n            if ( this.renderBounce )\n            {\n                var t2 = t1 + ( this.config.interval * this.config.speed );\n                if ( t1 < traj.bt && t2 > traj.bt )\n                {\n                    TrajectoryRenderer.addRenderData( this.config, rd, traj, traj.bt );\n                }\n            }\n        }\n    }\n    \n    this.drawTo( this.ctx, this.renderData );\n}"},"drawTo":{"Documentation":{"description":"Renders the data passed in, consisting of an array of shadow, trail and ball data","tags":[]},"Source":"TrajectoryRenderer.prototype.drawTo = function ( ctx, renderData )\n{\n    var that = this;\n    \n    ctx.save();\n    ctx.clearRect( 0, 0, this.config.width, this.config.height );\n    \n    // Render all shadows\n    ctx.strokeStyle = this.config.shadowStyle;\n    for ( var i = 0, j = renderData.length; i < j; i++ )\n    {\n        var shadowData = renderData[i].shadow;\n        ctx.beginPath();\n        ctx.lineWidth = 6;\n        if ( shadowData.length > 0 )\n        {\n            ctx.moveTo( shadowData[0].x, shadowData[0].y );\n        }\n        for ( var m = 1, n = shadowData.length; m < n; m++ )\n        {\n            ctx.lineTo( shadowData[m].x,   shadowData[m].y );\n        }\n        ctx.stroke();\n    }\n    \n    // Render all trails\n    for ( var i = 0, j = renderData.length; i < j; i++ )\n    {\n        // Set the color for the trail\n        var trailColor = this.getTrailColor( i, renderData.length );\n        ctx.strokeStyle = trailColor;\n        \n        var trailData = renderData[i].trail;\n        ctx.beginPath();\n        ctx.lineWidth = 6;\n        if ( trailData.length > 0 )\n        {\n            ctx.moveTo( trailData[0].x, trailData[0].y );\n        }\n        for ( var m = 1, n = trailData.length; m < n; m++ )\n        {\n            ctx.lineTo( trailData[m].x,   trailData[m].y );\n        }\n        \n        ctx.stroke();\n    }\n    \n    // Define render callback function\n    var callback = function () { that.drawTo( ctx, renderData ); };\n    \n    // Render all balls\n    for ( var i = 0, j = renderData.length; i < j; i++ )\n    {\n        var ball = renderData[i].ball;\n        PULSE.BallRenderer.render( ctx, ball.x, ball.y, 'red', ball.size * 2, callback );\n    }\n\n    ctx.restore();\n}","callback":{"Documentation":{"description":"Renders the data passed in, consisting of an array of shadow, trail and ball data","tags":[]},"Source":"var callback = function () { that.drawTo( ctx, renderData ); }"}},"getTrailColor":{"Documentation":{"description":"","tags":[{"title":"param","description":"the 0-based index in the list of tracks","type":null,"name":"i"},{"title":"param","description":"the number of tracks in the list","type":null,"name":"max"}]},"Source":"TrajectoryRenderer.prototype.getTrailColor = function ( i, size )\n{\n    var pretty = true;\n    var color = this.config.trailColors[i % this.config.trailColors.length];\n    \n    if ( !pretty && i < size - 1 )\n    {\n        color = 'rgba(0,0,0,0.3)';\n    }\n\n    return color;\n}"}},"addRenderData":{"Documentation":{"description":"Utility method to add render data for a given trajectory at a given point in time.","tags":[{"title":"param","description":"the render data container","type":null,"name":"rd"},{"title":"param","description":"the trajectory","type":null,"name":"traj"},{"title":"param","description":"the traj-based time","type":null,"name":"time"}]},"Source":"TrajectoryRenderer.addRenderData = function ( config, rd, traj, time )\n{\n    // Obtain ball-on-screen information\n    var bos = TrajectoryRenderer.getBallOnScreen( config, traj, time );\n\n    // Add the data to the render data container\n    rd.shadow.push( { x:bos.shadow.x, y:bos.shadow.y, size:bos.size } );\n    rd.trail.push(  { x:bos.ball.x,   y:bos.ball.y,   size:bos.size } );\n    rd.ball =       { x:bos.ball.x,   y:bos.ball.y,   size:bos.size };\n}"},"getBallOnScreen":{"Documentation":{"description":"Gets screen-based ball information for a given time. Returns an object with properties:\n\nshadow   { x, y } - on-screen location of shadow\nball     { x, y } - on-screen location of ball\nsize              - on-screen ball radius","tags":[]},"Source":"TrajectoryRenderer.getBallOnScreen = function ( config, traj, time )\n{\n    // Get ball position in real-world coordinates\n    var xyz;\n    \n    if ( time > traj.period.end )\n    {\n        xyz = traj.getPositionAtTime( traj.period.end );\n    }\n    else if ( time < traj.period.start )\n    {\n        xyz = traj.getPositionAtTime( traj.period.start );\n    }\n    else\n    {\n        xyz = traj.getPositionAtTime( time );\n    }\n    \n    // Approximate the ball size\n    var size = config.ballSize.max - ( xyz.x * ( ( config.ballSize.max - \n                                        config.ballSize.min ) /\n                                        config.releaseX ) );\n\n    // Convert to VR coordinates\n    xyz.x -= 10.06;\n\n    // Project shadow\n    var shadowScreen = config.projection.project( { x:xyz.x, y:xyz.y, z:0 } );\n    \n    // Project ball\n    var ballScreen = config.projection.project( xyz );\n    \n    // Return object\n    return { shadow:shadowScreen, ball:ballScreen, size:size }; \n}"}},"BeehiveRenderer":{"Documentation":{"description":"*****************","tags":[]},"Source":"function BeehiveRenderer ( config ) \n{\n\tthis.config = config;\n}","prototype":{"render":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"db"},{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"ctx"}]},"Source":"BeehiveRenderer.prototype.render = function ( db, data, ctx )\n{\n\tvar that = this;\n\tctx.canvas.clearRect( 0, 0, this.config.width, this.config.height );\n\t\n\t// Need to clone the array, so we can sort on type of ball\n\tvar dataArray = Utils.cloneArray( data );\n\t\n\t// Sort the array\n\tdataArray.sort( function ( a, b ) \n\t{\n\t\tvar aw = a.get( CricketField.IS_WICKET );\n\t\tvar bw = b.get( CricketField.IS_WICKET );\n\t\t\n\t\tif ( aw && !bw )\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\telse if ( !aw && bw )\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar ar = a.get( CricketField.CREDIT );\n\t\t\tvar br = b.get( CricketField.CREDIT );\n\t\t\treturn ar - br;\n\t\t}\n\t\treturn 0;\n\t} );\n\n\t// Determine what variant of graph this is: left only, right only or mix\n\tvar hasRight = false;\n\tvar hasLeft = false;\n\tfor ( var i = 0, j = dataArray.length; i < j; i++ )\n\t{\n\t\tvar row = dataArray[i];\n\t\tvar handedness = row.get( CricketField.HANDEDNESS );\n\t\t\n\t\tif ( CricketHandedness.RIGHT === handedness )\n\t\t{\n\t\t\thasRight = true;\n\t\t}\n\t\telse if ( CricketHandedness.LEFT === handedness )\n\t\t{\n\t\t\thasLeft = true;\n\t\t}\n\t\t\n\t\tif ( hasLeft && hasRight )\n\t\t{\n\t\t\t// Early exit, as we now know this is a mix graph\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\t// Set background based upon hasLeft/hasRight\n\tif ( hasLeft && hasRight )\n\t{\n\t\tthis.controller.setBackground( this.config.variants.mix.background );\n\t}\n\telse if ( hasLeft )\n\t{\n\t\tthis.controller.setBackground( this.config.variants.lh.background );\n\t}\n\telse if ( hasRight )\n\t{\n\t\tthis.controller.setBackground( this.config.variants.rh.background );\n\t}\n\t\n\t// Render all the shadows first\n    ctx.canvas.save();\n    ctx.canvas.globalCompositeOperation = 'xor';\n    ctx.canvas.scale( 1, 0.3 );\n\tctx.canvas.fillStyle = 'rgba(0,0,0,0.3)';\n\tfor ( var i = 0, j = dataArray.length; i < j; i++ )\n\t{\n\t\tvar row = dataArray[i];\n\t\tvar stumps = row.get( CricketField.STUMPS );\n\t\t\n\t\tif ( stumps !== undefined )\n\t\t{\n\t\t\tvar xyz = { x:stumps.x, y:stumps.y, z:0 };\n\t\t\txyz = db.normalise( xyz );\n\t\t\t\n\t\t\tif ( xyz.x > -999 && xyz.y > -999 )\n\t\t\t{\n\t\t\t\t// Flip data for lefties\n\t\t\t\tif ( ( CricketHandedness.LEFT === row.get( CricketField.HANDEDNESS ) ) && hasRight )\n\t\t\t\t{\n\t\t\t\t\txyz.y = -xyz.y;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar screenPos = this.config.projection.project( xyz );\n\t\t\t\tctx.canvas.beginPath();\n\t\t\t\tUtils.circle( ctx.canvas, screenPos.x, screenPos.y / 0.3, 6 );\n\t\t\t\tctx.canvas.fill();\n\t\t\t}\n\t\t}\n\t}\n\tctx.canvas.restore();\n\t\n\t// Define render callback function\n\tvar callback = function () { that.render( db, data, ctx ); };\n\t\n\t// Render all the balls\n\tfor ( var i = 0, j = dataArray.length; i < j; i++ )\n\t{\n\t\tvar row = dataArray[i];\n\t\tvar xyz = row.get( CricketField.STUMPS );\n\t\t\n\t\tif ( xyz !== undefined )\n\t\t{\n\t\t\txyz = db.normalise( xyz );\n\t\t\t\n\t\t\tif ( xyz.x > -999 && xyz.y > -999 && xyz.z > -999 )\n\t\t\t{\n\t\t\t\t// Flip data for lefties\n\t\t\t\tif ( ( CricketHandedness.LEFT === row.get( CricketField.HANDEDNESS ) ) && hasRight )\n\t\t\t\t{\n\t\t\t\t\txyz.y = -xyz.y;\n\t\t\t\t}\n\n\t\t\t\tvar runs = row.get( CricketField.CREDIT );\n\t\t\t\tvar screenPos = this.config.projection.project( xyz );\n\t\n\t\t\t\tvar colorKey;\n\t\t\t\tif ( row.get( CricketField.IS_WICKET ) )\n\t\t\t\t{\n\t\t\t\t\tcolorKey = 'w';\n\t\t\t\t}\n\t\t\t\telse if ( runs == 0 )\n\t\t\t\t{\n\t\t\t\t\tcolorKey = 'd';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar ww = row.get( CricketField.WW );\n\t\t\t\t\tif ( ww !== undefined )\n\t\t\t\t\t{\n\t\t\t\t\t\tvar ly = ww.y;\n\t\t\t\t\t\tif ( ly > -999 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar leg = ly > 0;\n\t\t\t\t\t\t\tif ( CricketHandedness.LEFT === row.get( CricketField.HANDEDNESS ) )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tleg = !leg;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif ( runs >= 4 )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcolorKey = leg ? 'lb' : 'ob';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse \n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcolorKey = leg ? 'l' : 'o';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tPULSE.BallRenderer.render( ctx.canvas, screenPos.x, screenPos.y, \n\t\t\t\t\t\tthis.config.colors[ colorKey ], this.config.ballSize, callback );\n\t\t\t}\n\t\t}\n\t}\n}","callback":{"Documentation":{"description":"*****************","tags":[]},"Source":"var callback = function () { that.render( db, data, ctx ); }"}}}},"BowlSpeedsRenderer":{"Documentation":{"description":"***********","tags":[]},"Source":"function BowlSpeedsRenderer ( config ) \n{\n\tthis.config = config;\n\tthis.selected = -1;\n\tthis.stickies = [];\n}","prototype":{"render":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"db"},{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"ctx"}]},"Source":"BowlSpeedsRenderer.prototype.render = function ( db, data, ctx )\n{\n\tthis.db = db;\n\tthis.data = data;\n\tthis.ctx = ctx;\n\tthis.selected = -1;\n\tthis.stickies = [];\n\t\n\t// Prepare the data\n\t// Place balls into bowler buckets\n\tthis.bowlerData = {};\n\tthis.wicketData = {};\n\tthis.maxPoints = 20;\n\t\n\tfor ( var i = 0, j = this.data.length; i < j; i++ )\n\t{\n\t\tvar row = this.data[i];\n\t\tvar bowler = this.db.lookupPlayer( row.get( CricketField.BOWLER ) );\n\t\tvar speed = row.get( CricketField.BOWL_SPEED );\n\t\t\n        \n\t\tif ( !Utils.isNullish( bowler ) && speed >= 10 )\n\t\t{\n\t\t\t// Convert speed to units currently in use\n\t        if ( PULSE.SpeedModeController.mode === PULSE.SpeedModeController.MODE_KMH )\n\t        {\n\t        \tspeed = PULSE.SpeedModeController.mpsToKmh( speed );\n\t        }\n\t        \n\t\t\t// Handle speed data for this bowler\n\t\t\tvar bd = this.bowlerData[ bowler ];\n\t\t\tif ( bd === undefined )\n\t\t\t{\n\t\t\t\tbd = [];\n\t\t\t\tthis.bowlerData[ bowler ] = bd;\n\t\t\t}\n\t\t\tbd.push( speed );\n\t\t\t\n\t\t\t// Ensure we keep track of the lengthiest series\n\t\t\tif ( bd.length > this.maxPoints )\n\t\t\t{\n\t\t\t\tthis.maxPoints = bd.length;\n\t\t\t}\n\t\t\t\n\t\t\t// Handle a wicket fall\n\t\t\tif ( row.get( CricketField.IS_WICKET ) )\n\t\t\t{\n\t\t\t\tvar wf = this.wicketData[ bowler ];\n\t\t\t\tif ( wf === undefined )\n\t\t\t\t{\n\t\t\t\t\twf = [];\n\t\t\t\t\tthis.wicketData[ bowler ] = wf;\n\t\t\t\t}\n\t\t\t\twf.push( { x:bd.length, y:speed } );\n\t\t\t}\n\t\t}\n\t}\n\n\t// First get the maximum bowler name width, so we can adjust the key/graph width\n\tthis.maxWidth = 90;\n\tfor ( var bowler in this.bowlerData )\n\t{\n\t\tvar size = Utils.stringSize( this.ctx.canvas, bowler );\n\t\tif ( size.width > this.maxWidth )\n\t\t{\n\t\t\tthis.maxWidth = size.width;\n\t\t}\n\t}\n\t\n\tthis.draw();\n}"},"draw":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"BowlSpeedsRenderer.prototype.draw = function () \n{\n\tthis.ctx.font = this.config.font;\n\tthis.ctx.canvas.clearRect( 0, 0, this.config.width, this.config.height );\n\t\n\t// Draw key shading box\n\tvar keyMarginR = this.config.keyMarginR ? this.config.keyMarginR : this.config.keyMargin;\n\t\n\tvar boxWidth = this.maxWidth + this.config.keyMargin + keyMarginR;\n\tthis.ctx.canvas.beginPath();\n\tthis.ctx.canvas.fillStyle = this.config.keyFill;\n\tthis.ctx.canvas.rect( this.config.width - boxWidth, 0, boxWidth, this.config.height );\n\tthis.ctx.canvas.fill();\n\t\n\t// And size the x-axis\n\tthis.config.xAxis.end = this.config.width - boxWidth - ( 2 * this.config.keyMargin );\n\t\n\t// Dynamically set the xAxis range\n\tthis.config.xAxis.max = this.maxPoints;\n\t\n\t// Draw the axes\n\tthis.ctx.canvas.strokeStyle = 'rgba( 255, 255, 255, 1 )';\n\tthis.config.xAxis.drawTo( this.ctx.canvas, true );\n\tthis.config.yAxis.drawTo( this.ctx.canvas, false );\n\t\n\t// Now render each bowler's stats\n\tvar y = 20;\n\tvar i = 0;\n\tvar selectedBowler;\n\tfor ( var bowler in this.bowlerData )\n\t{\n\t\tif ( i == this.selected )\n\t\t{\n\t\t\tselectedBowler = bowler;\n\t\t}\n\t\t\n\t\tvar speeds = this.bowlerData[ bowler ];\n\t\tvar falls = this.wicketData[ bowler ];\n\t\tvar stats = Utils.getStats( speeds );\n\t\t\n\t\tthis.ctx.canvas.fillStyle = this.getColor( this.config.colors[i], i, this.selected, this.stickies );\n\t\tUtils.anchoredFillText( this.ctx.canvas, bowler, this.config.width - keyMarginR, y, 'e' );\n\t\t\n\t\ty += 15;\n\t\tthis.ctx.canvas.fillStyle = this.getColor( 'rgba( 255, 255, 255, 1)', i, this.selected, this.stickies,\n\t\t\t\t\t\t\t\t\t\t\t'rgba( 180, 180, 180, 1)' );\n\t\tUtils.anchoredFillText( this.ctx.canvas, stats.mean.toFixed( 1 ) + ' / ' + \n\t\t\t\t\t\t      stats.maximum.toFixed( 1 ), this.config.width - keyMarginR, y, 'e' );\n\t\ty += 27;\n\n\t\t// If this is in the stickies array, draw the bounding box\n\t\tif ( this.selected !== -1 && Utils.isInArray( this.stickies, i ) )\n\t\t{\n\t\t\tthis.ctx.canvas.beginPath();\n\t\t\tthis.ctx.canvas.strokeStyle = 'rgba( 255, 255, 255, 0.3 )';\n\t\t\tthis.ctx.canvas.lineWidth = 1;\n\t\t\tthis.ctx.canvas.rect( this.config.width - boxWidth + ( this.config.keyMargin / 2 ), y - 52,\n\t\t\t\t\tboxWidth - keyMarginR, 37 );\n\t\t\tthis.ctx.canvas.stroke();\n\t\t}\n\t\t\n\t\t// Render the line\n\t\tthis.renderSeries( this.config.boxWhisker, this.ctx.canvas, bowler, speeds, falls, this.config.colors[i], i );\n\n\t\t// Maximum of 8 bowlers\n\t\tif ( ++i > 7 )\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tthis.bowlerCount = i;\n\t\n\t// Finally render the selected series, if there is a selection\n\tif ( this.selected !== -1 )\n\t{\n\t\tthis.renderSeries( this.config.boxWhisker, this.ctx.canvas, selectedBowler, \n\t\t\t\t\t\t   this.bowlerData[ selectedBowler ], this.wicketData[ selectedBowler ], \n\t\t\t\t\t\t   this.config.colors[ this.selected ], this.selected );\n\t}\n}"},"onMouse":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"event"}]},"Source":"BowlSpeedsRenderer.prototype.onMouse = function ( event )\n{\n\t// Get XY and then infer bowler selection index\n\tvar xy = Utils.getXY( event );\n\tvar selection = -1;\n\t\n\tif ( xy !== undefined && xy.x > 490 && \n\t\t\t( !this.config.keyMarginR || xy.x < this.config.width - this.config.keyMarginR ) ) \n\t{\n\t\tselection = Math.round( ( xy.y - 27 ) / 42 );\n\t\tif ( selection >= this.bowlerCount )\n\t\t{\n\t\t\tselection = -1;\n\t\t}\n\t}\n\t\n\tif ( 'mousemove' === event.type )\n\t{\n\t\tthis.selected = selection;\n\t}\n\telse if ( 'mousedown' === event.type )\n\t{\n\t\tthis.stickies = Utils.toggleExistence( this.stickies, selection );\n\t}\n\t\t\n\tthis.draw();\n}"},"getColor":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"color"},{"title":"param","description":null,"type":null,"name":"index"},{"title":"param","description":null,"type":null,"name":"selection"},{"title":"param","description":null,"type":null,"name":"others"},{"title":"param","description":null,"type":null,"name":"alt"}]},"Source":"BowlSpeedsRenderer.prototype.getColor = function ( color, index, selection, others, alt )\n{\n\tif ( selection === -1 || selection === index || Utils.isInArray( others, index ) )\n\t{\n\t\treturn color;\n\t}\n\telse if ( alt !== undefined )\n\t{\n\t\treturn alt;\n\t}\n\telse\n\t{\n\t\treturn 'gray';\n\t}\n}"},"renderSeries":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"boxWhisker"},{"title":"param","description":null,"type":null,"name":"ctx"},{"title":"param","description":null,"type":null,"name":"bowler"},{"title":"param","description":null,"type":null,"name":"speeds"},{"title":"param","description":null,"type":null,"name":"falls"},{"title":"param","description":null,"type":null,"name":"color"},{"title":"param","description":null,"type":null,"name":"index"}]},"Source":"BowlSpeedsRenderer.prototype.renderSeries = function ( boxWhisker, ctx, bowler, speeds, falls, color, index )\n{\n\tif ( boxWhisker )\n\t{\n\t\tthis.renderSeriesBW( ctx, bowler, speeds, falls, color, index );\n\t}\n\telse\n\t{\n\t\tthis.renderSeriesLine( ctx, bowler, speeds, falls, color, index );\n\t}\n}"},"renderSeriesLine":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"ctx"},{"title":"param","description":null,"type":null,"name":"bowler"},{"title":"param","description":null,"type":null,"name":"speeds"},{"title":"param","description":null,"type":null,"name":"falls"},{"title":"param","description":null,"type":null,"name":"color"},{"title":"param","description":null,"type":null,"name":"index"}]},"Source":"BowlSpeedsRenderer.prototype.renderSeriesLine = function ( ctx, bowler, speeds, falls, color, index )\n{\n\tctx.save();\n\tctx.beginPath();\n\n\tvar markerOutline = 'black';\n\tvar markerSize = 3;\n\n\tctx.strokeStyle = this.getColor( color, index, this.selected, this.stickies );\n\t\n\tif ( this.selected === -1 )\n\t{\n\t\tctx.lineWidth = 2;\n\t}\n\telse if ( this.selected === index || Utils.isInArray( this.stickies, index ) )\n\t{\n\t\tctx.lineWidth = 3;\n\t\tmarkerSize = 4;\n\t}\n\telse\n\t{\n\t\tctx.lineWidth = 1;\n\t\tmarkerOutline = '#444';\n\t}\n\t\n\tfor ( var i = 0, j = speeds.length; i < j; i++ )\n\t{\n\t\tvar x = this.config.xAxis.project( i + 1 );\n\t\tvar y = this.config.yAxis.project( speeds[i] );\n\t\t\n\t\tif ( i === 0 )\n\t\t{\n\t\t\tctx.moveTo( x, y );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tctx.lineTo( x, y );\n\t\t}\n\t}\n\tctx.stroke();\n\t\n\tif ( falls !== undefined )\n\t{\n\t\tctx.fillStyle = ctx.strokeStyle;\n\t\tctx.strokeStyle = markerOutline;\n\t\tctx.lineWidth = 1;\n\t\t\n\t\tfor ( var i = 0, j = falls.length; i < j; i++ )\n\t\t{\n\t\t\tctx.beginPath();\n\t\t\tvar point = falls[i];\n\t\t\tvar x = this.config.xAxis.project( point.x );\n\t\t\tvar y = this.config.yAxis.project( point.y );\n\t\t\t\n\t\t\tUtils.circle( ctx, x, y, markerSize );\n\t\t\tctx.fill();\n\t\t\tctx.stroke();\n\t\t}\n\t}\n\t\n\tctx.restore();\n}"},"renderSeriesBW":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"ctx"},{"title":"param","description":null,"type":null,"name":"bowler"},{"title":"param","description":null,"type":null,"name":"speeds"},{"title":"param","description":null,"type":null,"name":"falls"},{"title":"param","description":null,"type":null,"name":"color"},{"title":"param","description":null,"type":null,"name":"index"}]},"Source":"BowlSpeedsRenderer.prototype.renderSeriesBW = function ( ctx, bowler, speeds, falls, color, index )\n{\n\tvar fns = Utils.getFiveNumberSummary( speeds );\n\tvar hw = 10;\n\t\n\tvar values = [ fns.min, fns.lq, fns.median, fns.uq, fns.max ];\n\tvar projected = [];\n\tfor ( var i = 0, ilimit = values.length; i < ilimit; i++ )\n\t{\n\t\tprojected.push( this.config.yAxis.project( values[i] ) );\n\t}\n\t\n\tvar x = this.config.xAxis.project( ( index + 1 ) * 10 );\n\n\tctx.beginPath();\n\tctx.moveTo( x - hw, projected[0] );\n\tctx.lineTo( x + hw, projected[0] );\n\tctx.moveTo( x - hw, projected[4] );\n\tctx.lineTo( x + hw, projected[4] );\n\tctx.moveTo( x, projected[0] );\n\tctx.lineTo( x, projected[4] );\n\tctx.stroke();\n\t\n\tctx.rect( x - hw, projected[3], hw * 2, projected[1] - projected[3] );\n\tctx.fillStyle = 'blue';\n\tctx.fill();\n\n\tctx.moveTo( x - hw, projected[2] );\n\tctx.lineTo( x + hw, projected[2] );\n\tctx.stroke();\n}"}}},"PartnershipsRenderer":{"Documentation":{"description":"************","tags":[]},"Source":"function PartnershipsRenderer ( config ) \n{\n\tthis.config = config;\n}","prototype":{"render":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"db"},{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"ctx"}]},"Source":"PartnershipsRenderer.prototype.render = function ( db, data, ctx )\n{\n\tctx.canvas.clearRect( 0, 0, this.config.width, this.config.height );\n\n\tvar stats = { b1name:null, b2name:null, b1runs:0, b2runs:0, pruns:0 };\n\tvar first = true;\n\tvar y = 0;\n\t\n\tfor ( var i = 0, j = data.length; i < j; i++ )\n\t{\n\t\tvar row = data[i];\n\t\t\n\t\tvar facing = db.lookupPlayer( row.get( CricketField.BATSMAN ) );\n\t\tvar nonfacing = db.lookupPlayer( row.get( CricketField.NF_BATSMAN ) );\n\t\t\n\t\tif ( Utils.isNullish( facing ) || Utils.isNullish( nonfacing ) )\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\t\n        if ( ( facing !== stats.b1name && facing !== stats.b2name ) ||\n        \t ( nonfacing !== stats.b1name && nonfacing !== stats.b2name ) )\n        {\n         \tif ( first )\n         \t{\n         \t\tfirst = false;\n         \t}\n         \telse\n         \t{\n         \t\tthis.renderPartnership( ctx.canvas, stats, y++ );\n         \t}\n         \t\n        \tif ( nonfacing === stats.b1name )\n        \t{\n        \t    stats.b1name = nonfacing;\n        \t    stats.b2name = facing;\n        \t}\n        \telse\n        \t{\n        \t\tstats.b1name = facing;\n        \t\tstats.b2name = nonfacing;\n        \t}\n        \t\n        \tstats.b1runs = 0;\n        \tstats.b2runs = 0;\n        \tstats.pruns = 0;\n        }\n        \n        var credit = +row.get( CricketField.CREDIT );\n        if ( stats.b1name === facing )\n        {\n            stats.b1runs += credit;\n        }\n        else\n        {\n        \tstats.b2runs += credit;\n        }\n        \n        stats.pruns += ( +row.get( CricketField.RUNS ) );\n    }\n\n\tthis.renderPartnership( ctx.canvas, stats, y++ );\n}"},"renderPartnership":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"ctx"},{"title":"param","description":null,"type":null,"name":"stats"},{"title":"param","description":null,"type":null,"name":"pship"}]},"Source":"PartnershipsRenderer.prototype.renderPartnership = function ( ctx, stats, pship )\n{\n\tif ( pship < 10 )\n\t{\n\t\tctx.save();\n\t\t\n\t\tvar y = this.config.ystart + ( pship * this.config.yspacing );\n\t\tvar x = this.config.width / 2;\n\t\t\n\t\t// Draw partnership\n\t\tctx.font = this.config.pshipText.font;\n\t\tctx.fillStyle = this.config.pshipText.style;\n\t\tUtils.anchoredFillText( ctx, stats.pruns, x, y, 's' );\n\t\n\t\t// Draw bars\n\t\tvar gradient = ctx.createLinearGradient( x, y-(this.config.bars.width/2), \n\t\t\t\t\t\t\t\t\t\t\t\t x, y+(this.config.bars.width/2) );\n\t\tgradient.addColorStop( 0, this.config.bars.colorStops[0] );\n\t\tgradient.addColorStop( 1, this.config.bars.colorStops[1] );\n\t\tctx.fillStyle = gradient;\n\n\t\tvar yshift = 0;\n\t\tif ( this.config.bars.yshift )\n\t\t{\n\t\t\tyshift = this.config.bars.yshift;\n\t\t}\n\t\t\n\t\tvar bl;\n\t\tif ( stats.b1runs > 0 )\n\t\t{\n\t\t\tctx.beginPath();\n\t\t\tbl = this.barLength( stats.b1runs );\n\t\t\t\n\t\t\tctx.arc( x-this.config.tabs[1]-bl, y + yshift, this.config.bars.width / 2, \n\t\t\t\t\tMath.PI * 0.5, Math.PI * 1.5, false );\n\t\t\tctx.rect( x-this.config.tabs[1], y + yshift - (this.config.bars.width/2), -bl, this.config.bars.width );\n\t\t\tctx.fill();\n\t\t}\n\t\t\n\t\tif ( stats.b2runs > 0 )\n\t\t{\n\t\t\tctx.beginPath();\n\t\t\tbl = this.barLength( stats.b2runs );\n\t\t\tctx.rect( x+this.config.tabs[1], y + yshift - (this.config.bars.width/2), bl, this.config.bars.width );\n\t\t\tctx.arc( x+this.config.tabs[1]+bl, y + yshift, this.config.bars.width / 2,\n\t\t\t\t\tMath.PI * 1.5, Math.PI * 0.5, false );\n\t\t\tctx.fill();\n\t\t}\n\t\t\n\t\t// Draw text labels\n\t\tctx.font = this.config.otherText.font;\n\t\tctx.fillStyle = this.config.otherText.style;\n\t\tUtils.anchoredFillText( ctx, stats.b1runs, x-this.config.tabs[0], y, 'se' );\n\t\tUtils.anchoredFillText( ctx, stats.b1name, x-this.config.tabs[2], y, 'se' );\n\t\t\n\t\tUtils.anchoredFillText( ctx, stats.b2runs, x+this.config.tabs[0], y, 'sw' );\n\t\tUtils.anchoredFillText( ctx, stats.b2name, x+this.config.tabs[2], y, 'sw' );\n\t\t\n\t\tctx.restore();\n\t}\n}"},"barLength":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"runs"}]},"Source":"PartnershipsRenderer.prototype.barLength = function ( runs )\n{\n\treturn Math.min( runs + this.config.bars.minLength, this.config.bars.maxLength );\n}"}}},"RunsPerOverRenderer":{"Documentation":{"description":"*************","tags":[]},"Source":"function RunsPerOverRenderer ( config ) \n{\n\tthis.config = config;\n}","prototype":{"render":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"db"},{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"ctx"}]},"Source":"RunsPerOverRenderer.prototype.render = function ( db, data, ctx )\n{\n\tthis.db = db;\n\tthis.variant = obtainVariant( this.config, this.db );\n\tthis.data = this.prepareData( data );\n\tthis.ctx = ctx;\n\t\n\tthis.tooltipData = undefined;\n\tthis.draw();\n}"},"prepareData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"RunsPerOverRenderer.prototype.prepareData = function ( data )\n{\n\tthis.tooltipDataCache = {};\n\n\tvar overStats = [];\n\t\n\tvar lastOver = 0;\n\tvar stats = { r:0, w:0, dismissed:[] };\n\tfor ( var i = 0, j = data.length; i < j; i++ )\n\t{\n\t\tvar row = data[i];\n\t\t\n\t\tvar over = +row.get( CricketField.OVER );\n\t\tif ( over !== lastOver )\n\t\t{\n\t\t\t// New over\n\t\t\t// If this isn't the first over, render the previous one\n\t\t\tif ( over !== 1 )\n\t\t\t{\n\t\t\t\toverStats.push( this.prepareRecord( lastOver, stats ) );\n\t\t\t}\n\n\t\t\tlastOver = over;\n\t\t\t\n\t\t\t// Reset stats\n\t\t\tstats.r = 0;\n\t\t\tstats.w = 0;\n\t\t\tstats.dismissed = [];\n\t\t}\n\t\t\n\t\tstats.r += ( +row.get( CricketField.RUNS ) );\n\t\tif ( row.get( CricketField.IS_WICKET ) )\n\t\t{\n\t\t\tstats.w++;\n\t\t\tstats.dismissed.push( row.get( CricketField.DISMISSED ) );\n\t\t}\n\t}\n\t\n\toverStats.push( this.prepareRecord( lastOver, stats ) );\n\treturn overStats;\n}"},"prepareRecord":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"over"},{"title":"param","description":null,"type":null,"name":"stats"}]},"Source":"RunsPerOverRenderer.prototype.prepareRecord = function ( over, stats )\n{\n\tvar x = this.variant.xAxis.project( over );\n\tvar y = this.variant.yAxis.project( stats.r );\n\t\n\t// Add to tooltip cache\n\tvar ix = Math.round( x );\n\tvar iy = Math.round( y );\n\tthis.tooltipDataCache[ ix ] = { x:ix, y:iy, dismissed:stats.dismissed };\n\t\n\treturn { x:x, y:y, w:stats.w };\n}"},"draw":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"RunsPerOverRenderer.prototype.draw = function ()\n{\n\t// Clear\n\tthis.ctx.canvas.save();\n\tthis.ctx.canvas.font = this.config.font;\n\tthis.ctx.canvas.clearRect( 0, 0, this.config.width, this.config.height );\n\t\n\t// Draw axes\n\tthis.ctx.canvas.strokeStyle = 'rgba( 255, 255, 255, 1 )';\n\tthis.variant.xAxis.drawTo( this.ctx.canvas, true );\n\tthis.variant.yAxis.drawTo( this.ctx.canvas, false );\n\t\n\t// Create fill gradient\n\tvar yMax = this.variant.yAxis.project( this.variant.yAxis.max );\n\tvar yMin = this.variant.yAxis.project( this.variant.yAxis.min );\n\tvar gradient = this.ctx.canvas.createLinearGradient( 0, yMin, 0, yMax ); \n\tgradient.addColorStop( 0, this.variant.bars.colorStops[1] );\n\tgradient.addColorStop( 1, this.variant.bars.colorStops[0] );\n\tthis.ctx.canvas.fillStyle = gradient;\n\t\n\t// Iterate over bars\n\tvar y0 = this.variant.yAxis.project( 0 ) - 1;\n\tfor ( var i = 0, ilimit = this.data.length; i < ilimit; i++ )\n\t{\n\t\tvar record = this.data[i];\n\n\t\tthis.ctx.canvas.beginPath();\n\t\tthis.ctx.canvas.rect( record.x - ( this.variant.bars.width / 2 ), y0, \n\t\t\t\t  this.variant.bars.width, record.y - y0 );\n\t\tthis.ctx.canvas.fill();\n\t\t\n\t\tthis.ctx.canvas.save();\n\t\tthis.ctx.canvas.lineWidth = 1;\n\t\tfor ( var j = 0, jlimit = record.w; j < jlimit; j++ )\n\t\t{\n\t\t\tthis.ctx.canvas.strokeStyle = this.config.fow.stroke;\n\t\t\tthis.ctx.canvas.fillStyle = this.config.fow.fill;\n\t\t\tthis.ctx.canvas.beginPath();\n\t\t\tUtils.circle( this.ctx.canvas, record.x, record.y - ( j * this.variant.bars.fowsize ), this.variant.bars.fowsize / 2 );\n\t\t\tthis.ctx.canvas.fill();\n\t\t\tthis.ctx.canvas.stroke();\n\t\t}\n\t\t\n\t\tthis.ctx.canvas.restore();\n\t}\n\t\n\t// Finally render the tooltip data, if we have some and it contains something interesting\n\tif ( this.tooltipData !== undefined && this.config.tooltip && this.tooltipData.dismissed.length > 0 )\n\t{\n\t\tvar cfg = this.config.tooltip;\n\t\tvar anchorv = 'n';\n\t\tvar anchorh = 'w';\n\t\t\n\t\tif ( this.tooltipData.x > this.config.width / 2 )\n\t\t{\n\t\t\tanchorh = 'e';\n\t\t}\n\t\tif ( this.tooltipData.y > this.config.height / 2 )\n\t\t{\n\t\t\tanchorv = 's';\n\t\t}\n\t\t\n\t\tcfg.position = { x:this.tooltipData.x, y:this.tooltipData.y, anchor:anchorv + anchorh };\n\t\t\n\t\tvar tf = new PULSE.TextField( cfg );\n\t\ttf.setLines( this.tooltipData.dismissed );\n\t\ttf.render( this.ctx.canvas );\n\t}\n\t\n\tthis.ctx.canvas.restore();\n}"},"onMouse":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"event"}]},"Source":"RunsPerOverRenderer.prototype.onMouse = function ( event )\n{\n\t// Get XY and then infer over bar\n\tvar xy = Utils.getXY( event );\n\tthis.tooltipData = this.findNearbyTooltip( xy );\n\tthis.draw();\n}"},"findNearbyTooltip":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"xy"}]},"Source":"RunsPerOverRenderer.prototype.findNearbyTooltip = function ( xy )\n{\n\tif ( xy )\n\t{\n\t\tfor ( var x = xy.x - ( this.variant.bars.width / 2 ); \n\t\t          x <= xy.x + ( this.variant.bars.width / 2 ); x++ )\n\t\t{\n\t\t\tif ( this.tooltipDataCache[ x ] )\n\t\t\t{\n\t\t\t\treturn this.tooltipDataCache[ x ];\n\t\t\t}\n\t\t}\n\t}\n}"}}},"RunRateRenderer":{"Documentation":{"description":"********","tags":[]},"Source":"function RunRateRenderer ( config ) \n{\n\tthis.config = config;\n}","prototype":{"render":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"db"},{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"ctx"}]},"Source":"RunRateRenderer.prototype.render = function ( db, data, ctx )\n{\n\tthis.db = db;\n\tthis.variant = obtainVariant( this.config, this.db );\n\tthis.data = this.prepareData( data );\n\tthis.ctx = ctx;\n\t\n\tthis.tooltipData = undefined;\n\tthis.draw();\n}"},"prepareData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"RunRateRenderer.prototype.prepareData = function ( data )\n{\n\tthis.tooltipDataCache = {};\n\n\tvar inningsSeries = {};\n\n\tif ( data.length > 0 )\n\t{\n\t\t// Place data into innings buckets (for performance reasons, we should look at combining\n\t\t// this bucketisation with the actual data series creation below)\n\t\tvar inningsData = {};\n\t\tfor ( var i = 0, ilimit = data.length; i < ilimit; i++ )\n\t\t{\n\t\t\tvar row = data[i];\n\t\t\tvar innings = +row.get( CricketField.INNINGS );\n\t\t\t\n\t\t\t// Obtain or create bucket\n\t\t\tvar inningsDataItem = inningsData[ innings ];\n\t\t\tif ( inningsDataItem === undefined )\n\t\t\t{\n\t\t\t\tinningsDataItem = [];\n\t\t\t\tinningsData[ innings ] = inningsDataItem;\n\t\t\t}\n\t\t\t\n\t\t\t// Add item to bucket\n\t\t\tinningsDataItem.push( row );\n\t\t}\n\t\n\t\t// Keep track of maximum number of overs (for Test cricket)\n\t\tvar maxOvers = 0;\n\n\t\t// Get the participants\n\t\tvar participants = this.db.getParticipants();\n\t\t\n\t\t// Now iterate over all all balls in each innings bucket\n\t\tfor ( var innings = 1; innings <= 4; innings++ )\n\t\t{\n\t\t\t// Get the participant name\n\t\t\tvar pIndex = this.db.getBattingTeamIndex( innings );\n\t\t\tvar pName = participants[ pIndex ].abbreviation;\n\t\t\t\n\t\t\tinningsSeries[ innings ] = [];\n\t\t\t\n\t\t\tvar inningsRecords = inningsData[ innings ];\n\t\t\tif ( inningsRecords === undefined || inningsRecords.length === 0 )\n\t\t\t{\n\t\t\t\t// Break out\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tvar stats = { runs:0, wickets:0, over:0 };\n\t\t\tvar lastOver = 0;\n\t\t\t\n\t\t\tfor ( var i = 0, j = inningsRecords.length; i < j; i++ )\n\t\t\t{\n\t\t\t\tvar row = inningsRecords[ i ];\n\t\t\t\tvar over = +row.get( CricketField.OVER );\n\t\t\t\t\n\t\t\t\tif ( over !== lastOver )\n\t\t\t\t{\n\t\t\t\t\t// New over\n\t\t\t\t\t// If this isn't the first over, add the previous one\n\t\t\t\t\tif ( over !== 1 )\n\t\t\t\t\t{\n\t\t\t\t\t\tinningsSeries[ innings ].push( this.prepareRecord( stats, pName ) );\n\t\t\t\t\t}\n\t\n\t\t\t\t\tlastOver = over;\n\t\t\t\t\t\n\t\t\t\t\t// Reset stats\n\t\t\t\t\tstats.wickets = 0;\n\t\t\t\t\tstats.over = over;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstats.runs += ( +row.get( CricketField.RUNS ) );\n\t\t\t\tif ( row.get( CricketField.IS_WICKET ) )\n\t\t\t\t{\n\t\t\t\t\tstats.wickets++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Update max overs\n\t\t\t\tif ( over > maxOvers )\n\t\t\t\t{\n\t\t\t\t\tmaxOvers = over;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Add final stats\n\t\t\tinningsSeries[ innings ].push( this.prepareRecord( stats, pName ) );\n\t\t}\n\t\n\t\t// Scale the xAxis if need be\n\t\tthis.variant.xAxis.max = this.variant.xAxis.configuredMax; \n\t\tif ( maxOvers > this.variant.xAxis.max )\n\t\t{\n\t\t\tthis.variant.xAxis.max = maxOvers;\n\t\t}\n\t}\n\t\n\treturn inningsSeries;\n}"},"prepareRecord":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"stats"},{"title":"param","description":null,"type":null,"name":"participant"}]},"Source":"RunRateRenderer.prototype.prepareRecord = function ( stats, participant )\n{\n\tvar yvalue = this.getYValue( stats );\n\tvar x = this.variant.xAxis.project( stats.over );\n\tvar y = this.variant.yAxis.project( yvalue );\n\t\n\t// Add to tooltip cache\n\tvar ix = Math.round( x );\n\tvar iy = Math.round( y );\n\tvar xcache = this.tooltipDataCache[ ix ];\n\tif ( !xcache )\n\t{\n\t\txcache = { x:ix, xvalue:stats.over };\n\t\tthis.tooltipDataCache[ ix ] = xcache;\n\t}\n\txcache[ iy ] = { y:iy, yvalue:yvalue, participant:participant };\n\t\n\treturn { x:x, y:y, w:stats.wickets };\n}"},"draw":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"RunRateRenderer.prototype.draw = function ()\n{\n\tthis.ctx.canvas.save();\n\tthis.ctx.canvas.font = this.config.font;\n\tthis.ctx.canvas.clearRect( 0, 0, this.config.width, this.config.height );\n\n\t// Render the tooltip\n\tthis.renderTooltip( this.ctx.canvas, this.tooltipData );\n\t\n\t// Draw the axes\n\tthis.ctx.canvas.strokeStyle = 'rgba( 255, 255, 255, 1 )';\n\tthis.variant.xAxis.drawTo( this.ctx.canvas, true );\n\tthis.variant.yAxis.drawTo( this.ctx.canvas, false );\n\n\t// Now render each series\n\tvar flexikey = new Flexikey( this.config.flexikey );\n\tvar participants = this.db.getParticipants();\n\n\tvar gt = this.db.getMatchType();\n\tvar suffix = '';\n\t\n\tfor ( var i = 1; i <= 4; i++ )\n\t{\n\t\tvar thisInningsSeries = this.data[ i ];\n\t\t\n\t\tif ( thisInningsSeries === undefined || thisInningsSeries.length < 1 )\n\t\t{\n\t\t\t// Early exit\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tvar pIndex = this.db.getBattingTeamIndex( i );\n\t\tvar color;\n\t\tif ( i <= 2 )\n\t\t{\n\t\t\tcolor = participants[ pIndex ].primaryColor;\n\t\t\tsuffix = ' 1st inns'; \n\t\t}\n\t\telse\n\t\t{\n\t\t\tcolor = participants[ pIndex ].secondaryColor;\n\t\t\tsuffix = ' 2nd inns';\n\t\t}\n\t\t\n\t\tthis.renderSeries( this.ctx.canvas, thisInningsSeries, color );\n\t\t\n\t\tvar label = participants[ pIndex ].fullName;\n\t\tif ( CricketMatchType.TEST === gt )\n\t\t{\n\t\t\tlabel += suffix;\n\t\t}\n\t\t\n\t\tflexikey.addEntry( label, color );\n\t}\n\t\n\t// Finally render the Flexikey\n\tflexikey.render( this.ctx.canvas );\n}"},"renderSeries":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"ctx"},{"title":"param","description":null,"type":null,"name":"series"},{"title":"param","description":null,"type":null,"name":"color"}]},"Source":"RunRateRenderer.prototype.renderSeries = function ( ctx, series, color )\n{\n\tctx.save();\n\t\n\tctx.lineWidth = 3;\n\tctx.strokeStyle = color;\n\tctx.fillStyle = color;\n\n\t// Render the line\n\tctx.beginPath();\n\tfor ( var i = 0, j = series.length; i < j; i++ )\n\t{\n\t\tvar item = series[i];\n\t\tif ( i === 0 )\n\t\t{\n\t\t\tctx.moveTo( item.x, item.y );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tctx.lineTo( item.x, item.y );\n\t\t}\n\t}\n\tctx.stroke();\n\t\n\t// Render the wicket falls\n\tctx.lineWidth = 1;\n\tctx.strokeStyle = this.config.fow.stroke;\n\tfor ( var i = 0, j = series.length; i < j; i++ )\n\t{\n\t\tvar item = series[i];\n\t\tif ( item.w > 0 )\n\t\t{\n\t\t\tfor ( var k = 0, l = item.w; k < l; k++ )\n\t\t\t{\n\t\t\t\tctx.beginPath();\n\t\t\t\tUtils.circle( ctx, item.x, item.y - ( k * this.config.fow.size ), this.config.fow.size / 2 );\n\t\t\t\tctx.fill();\n\t\t\t\tctx.stroke();\n\t\t\t}\n\t\t}\n\t}\n\t\n\tctx.restore();\n}"},"onMouse":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"event"}]},"Source":"RunRateRenderer.prototype.onMouse = function ( event )\n{\n\t// Get XY and then infer over bar\n\tvar xy = Utils.getXY( event );\n\tthis.tooltipData = this.findNearbyTooltip( xy );\n\tthis.draw();\n}"},"findNearbyTooltip":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"xy"}]},"Source":"RunRateRenderer.prototype.findNearbyTooltip = function ( xy )\n{\n\tif ( xy )\n\t{\n\t\tif ( xy.x <= this.variant.xAxis.end && xy.x >= this.variant.xAxis.start &&\n\t\t     xy.y >= this.variant.yAxis.end && xy.y <= this.variant.yAxis.start )\n\t\t{\n\t\t\tvar search = xy.x;\n\t\t\t\n\t\t\twhile ( search >= this.variant.xAxis.start )\n\t\t\t{\n\t\t\t\tif ( this.tooltipDataCache[ search ] )\n\t\t\t\t{\n\t\t\t\t\treturn this.tooltipDataCache[ search ];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// If there was no data for this x value, try using one to the left\n\t\t\t\t\tsearch--;\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n}"},"getYValue":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"item"}]},"Source":"RunRateRenderer.prototype.getYValue = function ( item )\n{\n\treturn item.runs / item.over;\n}"},"renderTooltip":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"ctx"},{"title":"param","description":null,"type":null,"name":"ttd"}]},"Source":"RunRateRenderer.prototype.renderTooltip = function ( ctx, ttd )\n{\n\tif ( ttd )\n\t{\n\t\tctx.save();\n\t\tctx.strokeStyle = 'rgba( 255, 255, 255, 0.6 )';\n\n\t\tvar tf = undefined;\n\t\tif ( this.config.textField )\n\t\t{\n\t\t\ttf = new PULSE.TextField( this.config.textField );\n\t\t\ttf.addLine( '<c:#bbb>Over </c>' + ttd.xvalue );\n\t\t}\n\t\t\n\t\tvar line = '';\n\t\tfor ( var ttditem in ttd )\n\t\t{\n\t\t\tif ( ttditem !== 'x' && ttditem !== 'xvalue' )\n\t\t\t{\n\t\t\t\tvar t = ttd[ttditem];\n\t\t\t\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo( this.variant.xAxis.start, t.y );\n\t\t\t\tctx.lineTo( ttd.x, t.y );\n\t\t\t\tctx.lineTo( ttd.x, this.variant.yAxis.start )\n\t\t\t\tctx.stroke();\n\t\t\t\t\n\t\t\t\tline += '<c:#bbb>' + t.participant + ' </c>' + this.format( t.yvalue ) + ', ';\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ( tf )\n\t\t{\n\t\t\tif ( line.length > 2 )\n\t\t\t{\n\t\t\t\tline = line.substr( 0, line.length - 2 );\n\t\t\t}\n\t\t\ttf.addLine( line );\n\t\t\ttf.render( ctx );\n\t\t}\n\t\t\n\t\tctx.restore();\n\t}\t\t\n}"},"format":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"value"}]},"Source":"RunRateRenderer.prototype.format = function ( value )\n{\n\treturn value.toFixed( 2 ) + ' <c:#bbb>rpo</c>';\n}"}}},"WormsRenderer":{"Documentation":{"description":"*****","tags":[]},"Source":"function WormsRenderer ( config ) \n{\n\tthis.config = config;\n}","prototype":{"format":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"value"}]},"Source":"WormsRenderer.prototype.format = function ( value )\n{\n\treturn value + ' <c:#bbb>runs</c>';\n}"},"getYValue":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"item"}]},"Source":"WormsRenderer.prototype.getYValue = function ( item )\n{\n\treturn item.runs;\n}"}}},"WinLikelihoodRenderer":{"Documentation":{"description":"**************","tags":[]},"Source":"function WinLikelihoodRenderer ( config ) \n{\n\tthis.config = config;\n}","prototype":{"render":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"db"},{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"ctx"}]},"Source":"WinLikelihoodRenderer.prototype.render = function ( db, data, ctx )\n{\n\tthis.db = db;\n\tthis.data = data;\n\tthis.ctx = ctx.canvas;\n\t\n\tthis.tooltipData = undefined;\n\tthis.dismissalData = undefined;\n\tthis.tooltipDataCache = {};\n\tthis.draw();\n}"},"draw":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"WinLikelihoodRenderer.prototype.draw = function ()\n{\n\tthis.ctx.save();\n\tthis.ctx.font = this.config.font;\n\tthis.ctx.clearRect( 0, 0, this.config.width, this.config.height );\n\n\tthis.renderTextFields = true;\n\t\n\tvar currentInnings = 0;\n\tvar currentOver = 0;\n\tvar dismissals = [];\n\tvar x = 1;\n\tvar battingIndex = 0;\n\tvar series = [ [], [], [] ];\n\t\n\tvar likelihoods;\n\tvar lastLikelihoods;\n\tfor ( var i = 0, j = this.data.length; i < j; i++ )\n\t{\n\t\tvar row = this.data[ i ];\n\n\t\tlikelihoods = row.get( CricketField.WIN_LIKELIHOODS );\n\t\tif ( likelihoods === undefined )\n\t\t{\n\t\t\t// No likelihoods for this record, so simply copy the last one\n\t\t\tlikelihoods = lastLikelihoods;\n\t\t}\n\n\t\tif ( likelihoods === undefined )\n\t\t{\n\t\t\t// No likelihoods yet, so break\n\t\t\tcontinue;\n\t\t}\n\n\t\tvar over = row.get( CricketField.OVER ); \n\t\tif ( over !== currentOver )\n\t\t{\n\t\t\tif ( currentOver != 0 )\t// Allow coercion\n\t\t\t{\n\t\t\t\tthis.addData( series, x, likelihoods, battingIndex, dismissals );\n\t\t\t}\n\t\t\t\n\t\t\tdismissals = [];\n\t\t\tcurrentOver = over;\n\t\t\tx++;\n\t\t}\n\t\t\n\t\tvar innings = row.get( CricketField.INNINGS );\n\t\tif ( innings !== currentInnings )\n\t\t{\n\t\t\tcurrentInnings = innings;\n\t\t\tbattingIndex = this.db.getBattingTeamIndex( innings );\n\t\t}\n\t\t\n\t\tif ( row.get( CricketField.IS_WICKET ) )\n\t\t{\n\t\t\tdismissals.push( row.get( CricketField.DISMISSED ) );\n\t\t}\n\t\t\n\t\tlastLikelihoods = likelihoods;\n\t}\n\t\n\tif ( likelihoods !== undefined )\n\t{\n\t\tthis.addData( series, x, likelihoods, battingIndex, dismissals );\n\t}\n\t\n\t// Scale the x-axis if necessary\n\tthis.config.xAxis.max = this.config.xAxis.configuredMax;\n\tif ( x > this.config.xAxis.max )\n\t{\n\t\tthis.config.xAxis.max = x;\n\t}\n\n\t// Also scale back the y-axis if there will be 3 items in the key\n\tthis.config.yAxis.end = this.config.yAxis.configuredEnd;\n\tvar testMatch = ( CricketMatchType.TEST === this.db.getMatchType() );\n\tif ( testMatch )\n\t{\n\t\t// Shift y-axis down to allow for larger key\n\t\tthis.config.yAxis.end += 30;\n\t}\n\t\n\t// Draw the axes\n\tthis.ctx.strokeStyle = 'rgba( 255, 255, 255, 1 )';\n\tthis.config.xAxis.drawTo( this.ctx, true );\n\tthis.config.yAxis.drawTo( this.ctx, false );\n\n\t// Create flexikey\n\tvar flexikey = new Flexikey( this.config.flexikey );\n\n\t// Render the draw series first, if we need to\n\tif ( testMatch )\n\t{\n\t\tthis.renderSeries( this.ctx, series[1], this.config.drawColor, 'Draw' );\n\t}\n\t\n\t// Now draw the team series\n\tvar participants = this.db.getParticipants();\n\tfor ( var team = 0; team < 2; team++ )\n\t{\n\t\tvar color = participants[ team ].primaryColor;\n\t\tthis.renderSeries( this.ctx, series[ 2 * team ], color, participants[ team ].fullName );\n\t\tflexikey.addEntry( participants[ team ].fullName, color );\n\n\t\t// Add the draw item to the key now\n\t\tif ( team === 0 && testMatch )\n\t\t{\n\t\t\tflexikey.addEntry( 'Draw', this.config.drawColor );\n\t\t}\n\t}\n\t\n\t// Render the Flexikey\n\tflexikey.render( this.ctx );\n\t\n\t// Finally render the tooltip data\n\tif ( this.tooltipData !== undefined )\n\t{\n\t\tthis.ctx.save();\n\t\tthis.ctx.strokeStyle = this.config.tooltips.background;\n\t\t\n\t\tthis.ctx.beginPath();\n\t\tthis.ctx.lineWidth = 2;\n\t\tthis.ctx.moveTo( this.tooltipData.x, this.config.yAxis.start - 1 );\n\t\tthis.ctx.lineTo( this.tooltipData.x, this.config.yAxis.end );\n\t\tthis.ctx.stroke();\n\n\t\tthis.ctx.font = this.config.tooltips.font;\n\n\t\tfor ( var labelName in this.tooltipData.labels )\n\t\t{\n\t\t\tvar label = this.tooltipData.labels[ labelName ];\n\t\t\t\n\t\t\t// If this label overlaps with another one that has a higher value, then simply\n\t\t\t// skip the rendering of this label\n\t\t\t// 1. Find all other labels within spitting distance of this one\n\t\t\tvar others = [];\n\t\t\tfor ( var labelCheck in this.tooltipData.labels )\n\t\t\t{\n\t\t\t\tif ( labelCheck === labelName )\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tvar other = this.tooltipData.labels[ labelCheck ];\n\t\t\t\tif ( Math.abs( other.y - label.y ) <= this.config.tooltips.height )\n\t\t\t\t{\n\t\t\t\t\tothers.push( other );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 2. Find out if there is one bigger (i.e. lower y value)\n\t\t\tvar skip = false;\n\t\t\tfor ( var i = 0, j = others.length; i < j && !skip; i++ )\n\t\t\t{\n\t\t\t\tif ( others[i].y < label.y )\n\t\t\t\t{\n\t\t\t\t\tskip = true;\n\t\t\t\t}\n\t\t\t\telse if ( others[i].y === label.y )\n\t\t\t\t{\n\t\t\t\t\t// They are the same, so choose the one alphabetically first\n\t\t\t\t\tskip = others[i].string < label.string;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If there were dismissals associated with this value, or one very close to it,\n\t\t\t// then display this information in the top-left corner\n\t\t\tif ( this.dismissalData !== undefined && this.renderTextFields )\n\t\t\t{\n\t\t\t\tthis.renderTextFields = false;\n\t\t\t\tvar tf = new PULSE.TextField( this.config.dismissalTextField );\n\t\t\t\t\n\t\t\t\tvar d = '';\n\t\t\t\tfor ( dd = 0, ee = this.dismissalData.length; dd < ee; dd++ )\n\t\t\t\t{\n\t\t\t\t\tif ( dd !== 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( dd === ee - 1 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\td += ' and ';\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\td += ', ';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\td += this.dismissalData[dd];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttf.addLine( d + ' dismissed' );\n\t\t\t\ttf.render( this.ctx );\n\t\t\t}\n\t\t\t\n\t\t\tif ( !skip )\n\t\t\t{\n\t\t\t\tvar width = Utils.stringSize( this.ctx, label.string ).width + ( 2 * this.config.tooltips.border );\n\t\t\t\tvar anchor = 'w';\n\t\t\t\tvar border = this.config.tooltips.border;\n\t\t\t\tvar offset = 1;\n\t\n\t\t\t\tthis.ctx.beginPath();\n\t\t\t\tthis.ctx.fillStyle = this.config.tooltips.background;\n\t\t\t\t\n\t\t\t\tif ( this.tooltipData.x + width > this.config.xAxis.end )\n\t\t\t\t{\n\t\t\t\t\twidth *= -1;\n\t\t\t\t\tborder *= -1;\n\t\t\t\t\toffset *= -1;\n\t\t\t\t\tanchor = 'e';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.ctx.rect( this.tooltipData.x + offset, label.y - this.config.tooltips.height / 2, \n\t\t\t\t\t\twidth, this.config.tooltips.height );\n\t\t\t\tthis.ctx.fill();\n\t\t\t\n\t\t\t\tthis.ctx.fillStyle = this.config.tooltips.foreground;\n\t\t\t\tUtils.anchoredFillText( this.ctx, label.string, this.tooltipData.x + border, label.y - 2, anchor );\n\t\t\t}\n\t\t}\n\t\tthis.ctx.restore();\n\t}\n\t\n\tthis.ctx.restore();\n}"},"renderSeries":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"ctx"},{"title":"param","description":null,"type":null,"name":"series"},{"title":"param","description":null,"type":null,"name":"color"},{"title":"param","description":null,"type":null,"name":"label"}]},"Source":"WinLikelihoodRenderer.prototype.renderSeries = function ( ctx, series, color, label )\n{\n\tctx.save();\n\t\n\tctx.lineWidth = 3;\n\tctx.strokeStyle = color;\n\tctx.fillStyle = color;\n\n\t// Render the line\n\tctx.beginPath();\n\tfor ( var i = 0, j = series.length; i < j; i++ )\n\t{\n\t\tvar item = series[i];\n\t\tvar x = this.config.xAxis.project( item.x );\n\t\tvar y = this.config.yAxis.project( item.y );\n\t\t\n\t\tif ( i === 0 )\n\t\t{\n\t\t\tctx.moveTo( x, y );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tctx.lineTo( x, y );\n\t\t}\n\t\t\n\t\t// Retrieve or create the tooltip cache\n\t\tvar index = Math.round( x );\n\t\tvar cacheRecord = this.tooltipDataCache[ index ];\n\t\tif ( !cacheRecord )\n\t\t{\n\t\t\tcacheRecord = { x:x, labels:{} };\n\t\t\tthis.tooltipDataCache[ index ] = cacheRecord;\n\t\t}\n\t\t\n\t\t// Add a label into the record\n\t\tvar rec = { string:label + ': ' + Math.round( item.y ) + '%', y:y };\n\t\tif ( item.dismissals !== undefined )\n\t\t{\n\t\t\trec.z = item.dismissals.length;\n\t\t\tcacheRecord.dismissals = item.dismissals;\n\t\t}\n\t\tcacheRecord.labels[ label ] = rec;\n\t}\n\tctx.stroke();\n\t\n\t// Render the wicket falls\n\tctx.lineWidth = 1;\n\tctx.strokeStyle = this.config.fow.stroke;\n\tfor ( var i = 0, j = series.length; i < j; i++ )\n\t{\n\t\tvar item = series[i];\n\t\tif ( item.z > 0 )\n\t\t{\n\t\t\tvar x = this.config.xAxis.project( item.x );\n\t\t\tvar y = this.config.yAxis.project( item.y );\n\n\t\t\tfor ( var k = 0, l = item.z; k < l; k++ )\n\t\t\t{\n\t\t\t\tctx.beginPath();\n\t\t\t\tUtils.circle( ctx, x, y - ( k * this.config.fow.size ), this.config.fow.size / 2 );\n\t\t\t\tctx.fill();\n\t\t\t\tctx.stroke();\n\t\t\t}\n\t\t}\n\t}\n\t\n\tctx.restore();\n}"},"addData":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"series"},{"title":"param","description":null,"type":null,"name":"x"},{"title":"param","description":null,"type":null,"name":"likelihoods"},{"title":"param","description":null,"type":null,"name":"battingIndex"},{"title":"param","description":null,"type":null,"name":"dismissals"}]},"Source":"WinLikelihoodRenderer.prototype.addData = function ( series, x, likelihoods, battingIndex, dismissals )\n{\n\t// Add the 3 values to the 3 series\n\tfor ( var k = 0; k < 3; k++ )\n\t{\n\t\t// Remember to normalise y value to 0-100 from 0-1000\n\t\tvar item = { x:x, y:likelihoods[k]/10, z:0 };\n\t\tif ( dismissals.length > 0 && k === battingIndex * 2 )\n\t\t{\n\t\t\titem.z = dismissals.length;\n\t\t\titem.dismissals = dismissals;\n\t\t}\n\t\t\n\t\tseries[k].push( item );\n\t}\n}"},"onMouse":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"event"}]},"Source":"WinLikelihoodRenderer.prototype.onMouse = function ( event )\n{\n\tvar xy = Utils.getXY( event );\n\t\n\tif ( xy !== undefined && xy.y >= this.config.yAxis.end && xy.y <= this.config.yAxis.start &&\n\t\t\txy.x >= this.config.xAxis.start && xy.x <= this.config.xAxis.end )\n\t{\n\t\tthis.tooltipData = this.tooltipDataCache[ xy.x ];\n\t\t\n\t\tvar search = xy.x;\n\t\twhile ( this.tooltipData === undefined && search >= this.config.xAxis.start )\n\t\t{\n\t\t\tsearch--;\n\t\t\t// If there was no data for this x value, try using one to the left\n\t\t\tthis.tooltipData = this.tooltipDataCache[ search ];\n\t\t}\n\t\t\n\t\t// Also search for dismissals close by, so the mouse doesn't have to be exactly on it\n\t\tif ( this.tooltipData === undefined || this.tooltipData.dismissals === undefined )\n\t\t{\n\t\t\tthis.dismissalData = undefined;\n\t\t\tfor ( var offset = 1; offset <= 3; offset++ )\n\t\t\t{\n\t\t\t\tvar neighbour = this.tooltipDataCache[ xy.x - offset ];\n\t\t\t\tif ( neighbour !== undefined && neighbour.dismissals !== undefined )\n\t\t\t\t{\n\t\t\t\t\tthis.dismissalData = neighbour.dismissals;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tneighbour = this.tooltipDataCache[ xy.x + offset ];\n\t\t\t\tif ( neighbour !== undefined && neighbour.dismissals !== undefined )\n\t\t\t\t{\n\t\t\t\t\tthis.dismissalData = neighbour.dismissals;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dismissalData = this.tooltipData.dismissals;\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.tooltipData = undefined;\n\t}\n\t\n\tthis.draw();\n}"}}},"udsData":{"Documentation":{"description":"JSONP callback function for UDS data handling.","tags":[]},"Source":"function udsData( json )\n{\n\tvar bowlerSpeeds = {};\n\tvar highestInnings = 0;\n\tvar lastKeys = {};\n\t\n\tvar countingBallDelta = 0;\n\t\n\tvar data = {};\n\t\n\tfor ( var i = 0, j = json[0].data.length; i < j; i++ )\n\t{\n\t\tvar obj = json[0].data[i];\n\t\tfor ( var key in obj )\n\t\t{\n\t\t\tvar rec = new PULSE.UdsHawkeyeRecord( key, obj[ key ] );\n\t\t\tdata[ key ] = rec;\n\t\t\t\n\t\t\tvar ballNum = +rec.get( CricketField.BALL ); \n\t\t\tif ( ballNum === 1 )\n\t\t\t{\n\t\t\t\t// First ball, so reset the countingBallDelta\n\t\t\t\tcountingBallDelta = 0;\n\t\t\t}\n\t\t\t\n\t\t\t// Set the counting ball\n\t\t\trec.countingBall = ballNum - countingBallDelta;\n\t\t\t\n\t\t\t// Update delta\n\t\t\tif ( !rec.get( CricketField.IS_COUNTING ) )\n\t\t\t{\n\t\t\t\tcountingBallDelta++;\n\t\t\t}\n\t\t\t\n\t\t\t// We also need to record the first valid bowl speed for each bowler, so we\n\t\t\t// can tell whether they are a spin or seam bowler; it might be better to store\n\t\t\t// the average rather that the first one?!\n\t\t\tvar bowler = rec.get( CricketField.BOWLER );\n\t\t\tif ( !Utils.isNullish( bowler ) && bowlerSpeeds[bowler] === undefined )\n\t\t\t{\n\t\t\t\tvar speed = rec.get( CricketField.BOWL_SPEED );\n\t\t\t\tif ( !Utils.isNullish( speed ) )\n\t\t\t\t{\n\t\t\t\t\tvar s = +speed;\n\t\t\t\t\tif ( s > 30 )\n\t\t\t\t\t{\n\t\t\t\t\t\tbowlerSpeeds[bowler] = s < 70 ? CricketBowlerSpeed.SPIN : \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCricketBowlerSpeed.SEAM;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar innings = rec.get( CricketField.INNINGS );\n\t\t\tif ( innings > highestInnings )\n\t\t\t{\n\t\t\t\thighestInnings = innings;\n\t\t\t}\n\t\t\t\n\t\t\tlastKeys.all = key;\n\t\t\tif ( rec.hasTrajData() )\n\t\t\t{\n\t\t\t\tlastKeys.traj = key;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Now go back through the data applying the bowlerSpeed property. We should look at a\n\t// better way of doing this - maybe storing the lookup in the metadata\n\tfor ( var key in data )\n\t{\n\t\tvar rec = data[ key ];\n\t\tvar bowler = rec.get( CricketField.BOWLER );\n\t\tif ( !Utils.isNullish( bowler ) )\n\t\t{\n\t\t\trec.bowlerSpeed = bowlerSpeeds[bowler];\n\t\t}\n\t}\n\t\t\n\t// Update prototype to return this data\n\tPULSE.UdsHawkeyeDatabase.prototype.getData = function() { return data; };\n\tPULSE.UdsHawkeyeDatabase.prototype.getMetadata = function() { return json[0].meta; };\n\tPULSE.UdsHawkeyeDatabase.prototype.getHighestInnings = function() { return highestInnings; };\n\tPULSE.UdsHawkeyeDatabase.prototype.getLastKeys = function() { return lastKeys; };\n\t\n\t// Inform listeners of the update\n\tPULSE.UdsHawkeyeDatabase.getInstance().informListener();\n}"},"udsMetadata":{"Documentation":{"description":"JSONP callback function for UDS metadata handling.","tags":[]},"Source":"function udsMetadata( json )\n{\n\tvar lastUpdated = json[0].meta[ 'last_updated' ];\n\t\n\tif ( lastUpdated !== undefined && PULSE.UdsHawkeyeDatabase.lastUpdated !== lastUpdated )\n\t{\n\t\tPULSE.Tracer.info( 'LastUpdated has changed, reloading UDS data' );\n\t\tPULSE.UdsHawkeyeDatabase.lastUpdated = lastUpdated;\n\t\tPULSE.UdsHawkeyeDatabase.updateCallback();\n\t}\n\t\n\t//stop gap solution for getting team names into client\n\tif(typeof _ !== \"undefined\" && _.isEmpty(PULSE.UdsHawkeyeDatabase.prototype.getMetadata())){\n\t\tPULSE.UdsHawkeyeDatabase.prototype.getMetadata = function() { return json[0].meta; };\n\t\tPULSE.UdsHawkeyeDatabase.getInstance().informListener();\n\t}\n}"},"subscribe":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"function subscribe( data )\n    {\n        return $.ajax(\n        {\n            type: 'post',\n            url: resources.subscribe,\n            data: data\n        } );\n    }"},"unsubscribe":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"function unsubscribe( data )\n    {\n        return $.ajax(\n        {\n            type: 'post',\n            url: resources.unsubscribe,\n            data: data\n        } );\n    }"},"updateMobile":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"function updateMobile( data )\n    {\n        return $.ajax(\n        {\n            type: 'post',\n            url: resources.updateMobile,\n            data: data\n        } );\n    }"},"getChannels":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"callback"}]},"Source":"function getChannels( callback )\n    {\n        var that = this;\n        return $.ajax(\n        {\n            type: 'get',\n            url: resources.getUserContactList\n        } );\n    }"},"reader":{"onload":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"e"}]},"Source":"reader.onload = function( e )\n\t\t\t\t\t{\n\t\t\t\t\t\tPULSE.CLIENT.Template.append(\n\t\t\t\t\t\t    that.templates.imageUpload,\n\t\t\t\t    \t\tthat.$imagesContainer,\n\t\t\t\t\t\t    { src : e.target.result,\n\t\t\t\t\t\t    \tnum : containerNum,\n\t\t\t\t\t\t    \tuploadNum : that.uploadCounter,\n\t\t\t\t\t\t    \tname : name,\n\t\t\t\t\t\t    \tsize : sizeOut }\n\t\t\t\t\t    );\n\t\t\t\t\t    form.$imageUploader = form.$imagesContainer.find( '.imageUploader' + that.uploadCounter );\n\t\t\t\t\t    if ( form.newImageCounter.length > 4 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tform.$imageUploader.hide();\n\t\t\t\t\t\t}\n\t\t\t\t\t}"}},"jsonp":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"jsonp"},{"title":"param","description":null,"type":null,"name":"url"},{"title":"param","description":null,"type":null,"name":"callback"}]},"Source":"function jsonp( url, callback )\n{\n\tvar callbackName = 'jsonp_callback_' + Math.round( 100000 * Math.random() );\n\twindow[ callbackName ] = function( data )\n\t{\n\t\tdelete window[ callbackName ];\n\t\tdocument.body.removeChild( script );\n\t\tcallback( data );\n\t};\n\n\tvar script = document.createElement( 'script' );\n\tscript.src = url + ( url.indexOf( '?' ) >= 0 ? '&' : '?' ) + 'callback=' + callbackName;\n\tdocument.body.appendChild( script );\n}"},"$input":{"[ LITERAL ]":{"oninvalid":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"e"}]},"Source":"$input[ 0 ].oninvalid = function( e )\n        {\n            e.target.setCustomValidity(\"Invalid input\");\n        }"}}},"initGallery":{"Documentation":{"description":"Initialiser","tags":[]},"Source":"function initGallery()\n    {\n        var $this = $( this ),\n            $filters = $( '.stacklerHeader' ),\n            $header = $( 'header', $this );\n\n        // Prevent multiple gallery instances\n        if ( this.galleryLoaded )\n        {\n            return;\n        }\n        this.galleryLoaded = true;\n        $this.$currentContent = stacklaController.buildGalleryFromConfig( $this.data() ).prependTo( $this );\n\n        // Ensure header is at top (fix for mobile / desktop links either side)\n        if ( $header.length )\n        {\n            $header.prependTo( $this );\n        }\n\n        if ( $filters.length )\n        {\n            this.filters = new PULSE.CLIENT.RUGBY.StacklaFilters( $this, $filters );\n        }\n\n        // Fetch gallery population\n        stacklaController.populateGallery();\n    }"},"FuzzySet":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"FuzzySet"},{"title":"param","description":null,"type":null,"name":"arr"},{"title":"param","description":null,"type":null,"name":"useLevenshtein"},{"title":"param","description":null,"type":null,"name":"gramSizeLower"},{"title":"param","description":null,"type":null,"name":"gramSizeUpper"}]},"Source":"var FuzzySet = function(arr, useLevenshtein, gramSizeLower, gramSizeUpper) {\n    var fuzzyset = {\n        version: '0.0.1'\n    };\n\n    // default options\n    arr = arr || [];\n    fuzzyset.gramSizeLower = gramSizeLower || 2;\n    fuzzyset.gramSizeUpper = gramSizeUpper || 3;\n    fuzzyset.useLevenshtein = (typeof useLevenshtein !== 'boolean') ? true : useLevenshtein;\n\n    // define all the object functions and attributes\n    fuzzyset.exactSet = {};\n    fuzzyset.matchDict = {};\n    fuzzyset.items = {};\n\n    // helper functions\n    var levenshtein = function(str1, str2) {\n        var current = [], prev, value;\n\n        for (var i = 0; i <= str2.length; i++)\n            for (var j = 0; j <= str1.length; j++) {\n            if (i && j)\n                if (str1.charAt(j - 1) === str2.charAt(i - 1))\n                value = prev;\n                else\n                value = Math.min(current[j], current[j - 1], prev) + 1;\n            else\n                value = i + j;\n\n            prev = current[j];\n            current[j] = value;\n            }\n\n        return current.pop();\n    };\n\n    // return an edit distance from 0 to 1\n    var _distance = function(str1, str2) {\n        if (str1 === null && str2 === null) throw 'Trying to compare two null values';\n        if (str1 === null || str2 === null) return 0;\n        str1 = String(str1); str2 = String(str2);\n\n        var distance = levenshtein(str1, str2);\n        if (str1.length > str2.length) {\n            return 1 - distance / str1.length;\n        } else {\n            return 1 - distance / str2.length;\n        }\n    };\n    var _nonWordRe = /[^\\w, ]+/;\n\n    var _iterateGrams = function(value, gramSize) {\n        gramSize = gramSize || 2;\n        var simplified = '-' + value.toLowerCase().replace(_nonWordRe, '') + '-',\n            lenDiff = gramSize - simplified.length,\n            results = [];\n        if (lenDiff > 0) {\n            for (var i = 0; i < lenDiff; ++i) {\n                value += '-';\n            }\n        }\n        for (var i = 0; i < simplified.length - gramSize + 1; ++i) {\n            results.push(simplified.slice(i, i + gramSize));\n        }\n        return results;\n    };\n\n    var _gramCounter = function(value, gramSize) {\n        // return an object where key=gram, value=number of occurrences\n        gramSize = gramSize || 2;\n        var result = {},\n            grams = _iterateGrams(value, gramSize),\n            i = 0;\n        for (i; i < grams.length; ++i) {\n            if (grams[i] in result) {\n                result[grams[i]] += 1;\n            } else {\n                result[grams[i]] = 1;\n            }\n        }\n        return result;\n    };\n\n    // the main functions\n    fuzzyset.get = function(value, defaultValue) {\n        // check for value in set, returning defaultValue or null if none found\n        var result = this._get(value);\n        if (!result && defaultValue) {\n            return defaultValue;\n        }\n        return result;\n    };\n\n    fuzzyset._get = function(value) {\n        var normalizedValue = this._normalizeStr(value),\n            result = this.exactSet[normalizedValue];\n        if (result) {\n            return [[1, result]];\n        }\n\n        var results = [];\n        // start with high gram size and if there are no results, go to lower gram sizes\n        for (var gramSize = this.gramSizeUpper; gramSize >= this.gramSizeLower; --gramSize) {\n            results = this.__get(value, gramSize);\n            if (results) {\n                return results;\n            }\n        }\n        return null;\n    };\n\n    fuzzyset.__get = function(value, gramSize) {\n        var normalizedValue = this._normalizeStr(value),\n            matches = {},\n            gramCounts = _gramCounter(normalizedValue, gramSize),\n            items = this.items[gramSize],\n            sumOfSquareGramCounts = 0,\n            gram,\n            gramCount,\n            i,\n            index,\n            otherGramCount;\n\n        for (gram in gramCounts) {\n            gramCount = gramCounts[gram];\n            sumOfSquareGramCounts += Math.pow(gramCount, 2);\n            if (gram in this.matchDict) {\n                for (i = 0; i < this.matchDict[gram].length; ++i) {\n                    index = this.matchDict[gram][i][0];\n                    otherGramCount = this.matchDict[gram][i][1];\n                    if (index in matches) {\n                        matches[index] += gramCount * otherGramCount;\n                    } else {\n                        matches[index] = gramCount * otherGramCount;\n                    }\n                }\n            }\n        }\n\n        function isEmptyObject(obj) {\n            for(var prop in obj) {\n                if(obj.hasOwnProperty(prop))\n                    return false;\n            }\n            return true;\n        }\n\n        if (isEmptyObject(matches)) {\n            return null;\n        }\n\n        var vectorNormal = Math.sqrt(sumOfSquareGramCounts),\n            results = [],\n            matchScore;\n        // build a results list of [score, str]\n        for (var matchIndex in matches) {\n            matchScore = matches[matchIndex];\n            results.push([matchScore / (vectorNormal * items[matchIndex][0]), items[matchIndex][1]]);\n        }\n        var sortDescending = function(a, b) {\n            if (a[0] < b[0]) {\n                return 1;\n            } else if (a[0] > b[0]) {\n                return -1;\n            } else {\n                return 0;\n            }\n        };\n        results.sort(sortDescending);\n        if (this.useLevenshtein) {\n            var newResults = [],\n                endIndex = Math.min(50, results.length);\n            // truncate somewhat arbitrarily to 50\n            for (var i = 0; i < endIndex; ++i) {\n                newResults.push([_distance(results[i][1], normalizedValue), results[i][1]]);\n            }\n            results = newResults;\n            results.sort(sortDescending);\n        }\n        var newResults = [];\n        for (var i = 0; i < results.length; ++i) {\n            if (results[i][0] == results[0][0]) {\n                newResults.push([results[i][0], this.exactSet[results[i][1]]]);\n            }\n        }\n        return newResults;\n    };\n\n    fuzzyset.add = function(value) {\n        var normalizedValue = this._normalizeStr(value);\n        if (normalizedValue in this.exactSet) {\n            return false;\n        }\n\n        var i = this.gramSizeLower;\n        for (i; i < this.gramSizeUpper + 1; ++i) {\n            this._add(value, i);\n        }\n    };\n\n    fuzzyset._add = function(value, gramSize) {\n        var normalizedValue = this._normalizeStr(value),\n            items = this.items[gramSize] || [],\n            index = items.length;\n\n        items.push(0);\n        var gramCounts = _gramCounter(normalizedValue, gramSize),\n            sumOfSquareGramCounts = 0,\n            gram, gramCount;\n        for (gram in gramCounts) {\n            gramCount = gramCounts[gram];\n            sumOfSquareGramCounts += Math.pow(gramCount, 2);\n            if (gram in this.matchDict) {\n                this.matchDict[gram].push([index, gramCount]);\n            } else {\n                this.matchDict[gram] = [[index, gramCount]];\n            }\n        }\n        var vectorNormal = Math.sqrt(sumOfSquareGramCounts);\n        items[index] = [vectorNormal, normalizedValue];\n        this.items[gramSize] = items;\n        this.exactSet[normalizedValue] = value;\n    };\n\n    fuzzyset._normalizeStr = function(str) {\n        if (Object.prototype.toString.call(str) !== '[object String]') throw 'Must use a string as argument to FuzzySet functions';\n        return str.toLowerCase();\n    };\n\n    // return length of items in set\n    fuzzyset.length = function() {\n        var count = 0,\n            prop;\n        for (prop in this.exactSet) {\n            if (this.exactSet.hasOwnProperty(prop)) {\n                count += 1;\n            }\n        }\n        return count;\n    };\n\n    // return is set is empty\n    fuzzyset.isEmpty = function() {\n        for (var prop in this.exactSet) {\n            if (this.exactSet.hasOwnProperty(prop)) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    // return list of values loaded into set\n    fuzzyset.values = function() {\n        var values = [],\n            prop;\n        for (prop in this.exactSet) {\n            if (this.exactSet.hasOwnProperty(prop)) {\n                values.push(this.exactSet[prop]);\n            }\n        }\n        return values;\n    };\n\n\n    // initialization\n    var i = fuzzyset.gramSizeLower;\n    for (i; i < fuzzyset.gramSizeUpper + 1; ++i) {\n        fuzzyset.items[i] = [];\n    }\n    // add all the items to the set\n    for (i = 0; i < arr.length; ++i) {\n        fuzzyset.add(arr[i]);\n    }\n\n    return fuzzyset;\n}"},"levenshtein":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"str1"},{"title":"param","description":null,"type":null,"name":"str2"}]},"Source":"var levenshtein = function(str1, str2) {\n        var current = [], prev, value;\n\n        for (var i = 0; i <= str2.length; i++)\n            for (var j = 0; j <= str1.length; j++) {\n            if (i && j)\n                if (str1.charAt(j - 1) === str2.charAt(i - 1))\n                value = prev;\n                else\n                value = Math.min(current[j], current[j - 1], prev) + 1;\n            else\n                value = i + j;\n\n            prev = current[j];\n            current[j] = value;\n            }\n\n        return current.pop();\n    }"},"_distance":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"str1"},{"title":"param","description":null,"type":null,"name":"str2"}]},"Source":"var _distance = function(str1, str2) {\n        if (str1 === null && str2 === null) throw 'Trying to compare two null values';\n        if (str1 === null || str2 === null) return 0;\n        str1 = String(str1); str2 = String(str2);\n\n        var distance = levenshtein(str1, str2);\n        if (str1.length > str2.length) {\n            return 1 - distance / str1.length;\n        } else {\n            return 1 - distance / str2.length;\n        }\n    }"},"_iterateGrams":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"value"},{"title":"param","description":null,"type":null,"name":"gramSize"}]},"Source":"var _iterateGrams = function(value, gramSize) {\n        gramSize = gramSize || 2;\n        var simplified = '-' + value.toLowerCase().replace(_nonWordRe, '') + '-',\n            lenDiff = gramSize - simplified.length,\n            results = [];\n        if (lenDiff > 0) {\n            for (var i = 0; i < lenDiff; ++i) {\n                value += '-';\n            }\n        }\n        for (var i = 0; i < simplified.length - gramSize + 1; ++i) {\n            results.push(simplified.slice(i, i + gramSize));\n        }\n        return results;\n    }"},"_gramCounter":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"value"},{"title":"param","description":null,"type":null,"name":"gramSize"}]},"Source":"var _gramCounter = function(value, gramSize) {\n        // return an object where key=gram, value=number of occurrences\n        gramSize = gramSize || 2;\n        var result = {},\n            grams = _iterateGrams(value, gramSize),\n            i = 0;\n        for (i; i < grams.length; ++i) {\n            if (grams[i] in result) {\n                result[grams[i]] += 1;\n            } else {\n                result[grams[i]] = 1;\n            }\n        }\n        return result;\n    }"},"fuzzyset":{"get":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"value"},{"title":"param","description":null,"type":null,"name":"defaultValue"}]},"Source":"fuzzyset.get = function(value, defaultValue) {\n        // check for value in set, returning defaultValue or null if none found\n        var result = this._get(value);\n        if (!result && defaultValue) {\n            return defaultValue;\n        }\n        return result;\n    }"},"_get":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"value"}]},"Source":"fuzzyset._get = function(value) {\n        var normalizedValue = this._normalizeStr(value),\n            result = this.exactSet[normalizedValue];\n        if (result) {\n            return [[1, result]];\n        }\n\n        var results = [];\n        // start with high gram size and if there are no results, go to lower gram sizes\n        for (var gramSize = this.gramSizeUpper; gramSize >= this.gramSizeLower; --gramSize) {\n            results = this.__get(value, gramSize);\n            if (results) {\n                return results;\n            }\n        }\n        return null;\n    }"},"__get":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"value"},{"title":"param","description":null,"type":null,"name":"gramSize"}]},"Source":"fuzzyset.__get = function(value, gramSize) {\n        var normalizedValue = this._normalizeStr(value),\n            matches = {},\n            gramCounts = _gramCounter(normalizedValue, gramSize),\n            items = this.items[gramSize],\n            sumOfSquareGramCounts = 0,\n            gram,\n            gramCount,\n            i,\n            index,\n            otherGramCount;\n\n        for (gram in gramCounts) {\n            gramCount = gramCounts[gram];\n            sumOfSquareGramCounts += Math.pow(gramCount, 2);\n            if (gram in this.matchDict) {\n                for (i = 0; i < this.matchDict[gram].length; ++i) {\n                    index = this.matchDict[gram][i][0];\n                    otherGramCount = this.matchDict[gram][i][1];\n                    if (index in matches) {\n                        matches[index] += gramCount * otherGramCount;\n                    } else {\n                        matches[index] = gramCount * otherGramCount;\n                    }\n                }\n            }\n        }\n\n        function isEmptyObject(obj) {\n            for(var prop in obj) {\n                if(obj.hasOwnProperty(prop))\n                    return false;\n            }\n            return true;\n        }\n\n        if (isEmptyObject(matches)) {\n            return null;\n        }\n\n        var vectorNormal = Math.sqrt(sumOfSquareGramCounts),\n            results = [],\n            matchScore;\n        // build a results list of [score, str]\n        for (var matchIndex in matches) {\n            matchScore = matches[matchIndex];\n            results.push([matchScore / (vectorNormal * items[matchIndex][0]), items[matchIndex][1]]);\n        }\n        var sortDescending = function(a, b) {\n            if (a[0] < b[0]) {\n                return 1;\n            } else if (a[0] > b[0]) {\n                return -1;\n            } else {\n                return 0;\n            }\n        };\n        results.sort(sortDescending);\n        if (this.useLevenshtein) {\n            var newResults = [],\n                endIndex = Math.min(50, results.length);\n            // truncate somewhat arbitrarily to 50\n            for (var i = 0; i < endIndex; ++i) {\n                newResults.push([_distance(results[i][1], normalizedValue), results[i][1]]);\n            }\n            results = newResults;\n            results.sort(sortDescending);\n        }\n        var newResults = [];\n        for (var i = 0; i < results.length; ++i) {\n            if (results[i][0] == results[0][0]) {\n                newResults.push([results[i][0], this.exactSet[results[i][1]]]);\n            }\n        }\n        return newResults;\n    }","sortDescending":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"a"},{"title":"param","description":null,"type":null,"name":"b"}]},"Source":"var sortDescending = function(a, b) {\n            if (a[0] < b[0]) {\n                return 1;\n            } else if (a[0] > b[0]) {\n                return -1;\n            } else {\n                return 0;\n            }\n        }"}},"add":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"value"}]},"Source":"fuzzyset.add = function(value) {\n        var normalizedValue = this._normalizeStr(value);\n        if (normalizedValue in this.exactSet) {\n            return false;\n        }\n\n        var i = this.gramSizeLower;\n        for (i; i < this.gramSizeUpper + 1; ++i) {\n            this._add(value, i);\n        }\n    }"},"_add":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"value"},{"title":"param","description":null,"type":null,"name":"gramSize"}]},"Source":"fuzzyset._add = function(value, gramSize) {\n        var normalizedValue = this._normalizeStr(value),\n            items = this.items[gramSize] || [],\n            index = items.length;\n\n        items.push(0);\n        var gramCounts = _gramCounter(normalizedValue, gramSize),\n            sumOfSquareGramCounts = 0,\n            gram, gramCount;\n        for (gram in gramCounts) {\n            gramCount = gramCounts[gram];\n            sumOfSquareGramCounts += Math.pow(gramCount, 2);\n            if (gram in this.matchDict) {\n                this.matchDict[gram].push([index, gramCount]);\n            } else {\n                this.matchDict[gram] = [[index, gramCount]];\n            }\n        }\n        var vectorNormal = Math.sqrt(sumOfSquareGramCounts);\n        items[index] = [vectorNormal, normalizedValue];\n        this.items[gramSize] = items;\n        this.exactSet[normalizedValue] = value;\n    }"},"_normalizeStr":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"str"}]},"Source":"fuzzyset._normalizeStr = function(str) {\n        if (Object.prototype.toString.call(str) !== '[object String]') throw 'Must use a string as argument to FuzzySet functions';\n        return str.toLowerCase();\n    }"},"length":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"fuzzyset.length = function() {\n        var count = 0,\n            prop;\n        for (prop in this.exactSet) {\n            if (this.exactSet.hasOwnProperty(prop)) {\n                count += 1;\n            }\n        }\n        return count;\n    }"},"isEmpty":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"fuzzyset.isEmpty = function() {\n        for (var prop in this.exactSet) {\n            if (this.exactSet.hasOwnProperty(prop)) {\n                return false;\n            }\n        }\n        return true;\n    }"},"values":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"fuzzyset.values = function() {\n        var values = [],\n            prop;\n        for (prop in this.exactSet) {\n            if (this.exactSet.hasOwnProperty(prop)) {\n                values.push(this.exactSet[prop]);\n            }\n        }\n        return values;\n    }"}},"isEmptyObject":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"obj"}]},"Source":"function isEmptyObject(obj) {\n            for(var prop in obj) {\n                if(obj.hasOwnProperty(prop))\n                    return false;\n            }\n            return true;\n        }"},"onPollCallback":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"pollData"}]},"Source":"var onPollCallback = function( pollData )\n{\t\n\tvar thisInstance = PULSE.CLIENT.PollController.getInstance();\n\t\n\tif ( pollData && pollData[0] )\n\t{\n\t\tvar payload = pollData[0];\n\t\t\n\t\t// Serialise the payload\n\t\tvar serialised = $.toJSON( payload );\n\t\t\n\t    if ( thisInstance.lastData !== serialised )\n\t    {\n\t    \t// Save the new data\n\t    \tthisInstance.lastData = serialised;\n\t    \tthisInstance.pollModel.modelChanged( pollData[0] );\n\t    }\n\t}\n}"},"div":{"onselectstart":{"Documentation":{"description":"Constructor.","tags":[{"title":"param","description":"the ID of the div that the canvas should go in","type":null,"name":"divId"},{"title":"param","description":"configuration parameters for the canvas","type":null,"name":"config"}]},"Source":"div.onselectstart = function() { return false; }"},"onmousedown":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"div.onmousedown"},{"title":"param","description":null,"type":null,"name":"e"}]},"Source":"div.onmousedown = function( e ) { \n    \tthat.anchor = PULSE.Utils.getXY( e );\n    }"},"onmouseup":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"div.onmouseup = function() { that.anchor = undefined; }"},"onmousemove":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"e"}]},"Source":"div.onmousemove = function ( e ) {\n    \tif ( that.anchor )\n    \t{\n\t    \tvar pos = PULSE.Utils.getXY( e );\n\t    \tvar diff = { x: that.anchor.x - pos.x, y: that.anchor.y - pos.y };\n\t    \t\n        \t$(div).css( 'left', diff.x + 'px' );\n        \t$(div).css( 'top', diff.x + 'px' );\n\t    \t\n\t    \tthat.anchor = pos;\n    \t}\n    }"}},"that":{"filter":{"getAllTeams":{"idIsInTeams":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"var idIsInTeams = function( id )\n\t\t\t{\n\t\t\t\tfor ( var i = 0; i < teams.length; i++ ) \n\t\t\t\t{\n\t\t\t\t\tvar team = teams[i];\n\t\t\t\t\tif( team.id() === id )return true;\n\t\t\t\t}\n\t\t\t}"}},"getAllVenues":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"that.filter.getAllVenues = function ()\n\t\t{\n\t\t\tvar venues \t= [],\n\t\t\t\tschedule= that.schedule();\n\n\t\t\tvar idIsInVenues = function( id )\n\t\t\t{\n\t\t\t\tfor ( var i = 0; i < venues.length; i++ ) \n\t\t\t\t{\n\t\t\t\t\tvar venue = venues[i];\n\t\t\t\t\tif( venue.id() === id )return true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor ( var i = 0; i < schedule.length; i++ ) \n\t\t\t{\n\t\t\t\tvar venue = schedule[i].venue;\n\t\t\t\t\n\t\t\t\tif ( venue )\n\t\t\t\t{\n\t\t\t\t\tif ( !idIsInVenues( venue.id() ) )\n\t\t\t\t\t{\n\t\t\t\t\t\tvenues.push( venue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Sort venues ( by city ) array alphabetically \n\t\t\tvenues.sort( function(a, b) \n\t\t\t{\n\t\t        var cityA = a.city().toLowerCase(), cityB = b.city().toLowerCase();\n\t\t        if ( cityA < cityB ) //sort city ascending\n\t\t        {\n\t\t        \treturn -1;\n\t\t        }\n\t\t        if ( cityA > cityB )\n\t\t        {\n\t\t            return 1;\n\t\t        }        \n\t\t        return 0; //default return value (no sorting)\n\t\t    });\n\t\t\t\n\t\t\treturn venues;\n\t\t}","idIsInVenues":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"var idIsInVenues = function( id )\n\t\t\t{\n\t\t\t\tfor ( var i = 0; i < venues.length; i++ ) \n\t\t\t\t{\n\t\t\t\t\tvar venue = venues[i];\n\t\t\t\t\tif( venue.id() === id )return true;\n\t\t\t\t}\n\t\t\t}"}},"teamById":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"that.filter.teamById = function ( id )\n\t\t{\n\t\t\tvar schedule = that.schedule();\n\t\t\t\n\t\t\tfor ( var i = 0; i < schedule.length; i++ ) \n\t\t\t{\n\t\t\t\tvar team1 = schedule[i].team1;\n\t\t\t\tvar team2 = schedule[i].team2;\n\t\t\t\t\n\t\t\t\tif ( team1.team.id() === id )\n\t\t\t\t{\n\t\t\t\t\treturn team1.team;\n\t\t\t\t}\n\n\t\t\t\tif ( team2.team.id() === id )\n\t\t\t\t{\n\t\t\t\t\treturn team2.team;\n\t\t\t\t}\n\t\t\t}\n\t\t}"},"venueById":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"id"}]},"Source":"that.filter.venueById = function ( id )\n\t\t{\n\t\t\tvar schedule = that.schedule();\n\t\t\t\n\t\t\tfor ( var i = 0; i < schedule.length; i++ ) \n\t\t\t{\n\t\t\t\tvar venue = schedule[i].venue;\n\t\t\t\t\n\t\t\t\tif ( venue.id() === id )\n\t\t\t\t{\n\t\t\t\t\treturn venue;\n\t\t\t\t}\n\t\t\t}\n\t\t}"},"toggleTeams":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"d"},{"title":"param","description":null,"type":null,"name":"e"}]},"Source":"that.filter.toggleTeams = function( d, e )\n\t\t{\n\t\t\tthat.filter.teamsFilterOpen( !that.filter.teamsFilterOpen() );\n\t\t\t\n\t\t\tif( that.filter.venueFilterOpen() )\n\t\t\t{\n\t\t\t\tthat.filter.venueFilterOpen( false );\n\t\t\t}\n\t\t}"},"toggleVenue":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"d"},{"title":"param","description":null,"type":null,"name":"e"}]},"Source":"that.filter.toggleVenue = function( d, e )\n\t\t{\n\t\t\tthat.filter.venueFilterOpen( !that.filter.venueFilterOpen() );\n\n\t\t\tif( that.filter.teamsFilterOpen() )\n\t\t\t{\n\t\t\t\tthat.filter.teamsFilterOpen( false );\n\t\t\t}\n\t\t}"},"filterTeams":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"d"},{"title":"param","description":null,"type":null,"name":"e"}]},"Source":"that.filter.filterTeams = function( d, e )\n\t\t{\n\t\t\tthat.filter.teamId( d.id() );\n\t\t\t\n\t\t\tthat.filter.toggleTeams();\n\t\t}"},"filterVenues":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"d"},{"title":"param","description":null,"type":null,"name":"e"}]},"Source":"that.filter.filterVenues = function( d, e )\n\t\t{\n\t\t\tthat.filter.venueId( d.id() );\n\t\t\t\n\t\t\tthat.filter.toggleVenue();\n\t\t}"}},"openMatchCentre":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"d"},{"title":"param","description":null,"type":null,"name":"e"}]},"Source":"that.openMatchCentre = function( d, e )\n\t{\n\t\tvar name \t\t\t= d.matchId.name(),\n\t\t\tmatchNumber \t= PULSE.CLIENT.IPLT20.Common.getMatchNumber( name ),\n\t\t\tmatchCentreLink = that.matchCentreLink(),\n\t\t\tmatchUrl \t\t= matchCentreLink + matchNumber;\n\t\t\n\t\twindow.open( matchUrl, 'IPLT20', \n\t\t\t'height=672,width=980,menubar=no,resizable=no,scrollbars=no,status=no,toolbar=no,location=no' ); \n\t}"}}}