{"core":{"dataManager":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"core.dataManager"}]},"Source":"core.dataManager = (function(){\n\n\t\tvar polls = {};\n\n\t\t/**\n\t\t * Poll constructor to create a Poll object that can hold subscribers and notify them of new data\n\t \t * @param {Object.<PollObject>} config Config options to build a Poll\n\t\t */\n\t\tvar Poll = function( config ) {\n\t\t\t\n\t\t\tvar _self = this;\n\t\t\t_self.url = config.url;\n\t\t\t_self.method = config.method;\n\t\t\t_self.subscribers = [];\n\n\t\t};\n\n\t\tPoll.prototype.dataChanged = function( data ) {\n\t\t\tvar stringIt = function( val ) {\n\t\t\t\tif ( typeof val === \"object\" ){\n\t\t\t\t\treturn JSON.stringify( val );\n\t\t\t\t}\n\t\t\t\treturn val;\n\t\t\t};\n\t\t\treturn stringIt( _self.data ) != stringIt( data );\n\t\t};\n\n\t\tPoll.prototype.notify = function( data, config ){\n\t\t\t_self.subscribers.map( function( sub ){\n\t\t\t\tif( !_self.data || sub.forceCallback || _self.dataChanged(data) ){\n\t\t\t\t\tsub.callback.call( sub.target, data, config );\n\t\t\t\t}\n\t\t\t});\n\t\t\t_self.data = data;\n\t\t};\n\n\t\tPoll.prototype.checkInterval = function(){\n\t\t\tvar newInterval = false;\n\t\t\t_self.subscribers.forEach( function( sub ){\n\t\t\t\tif( !newInterval || sub.interval < newInterval ) {\n\t\t\t\t\tnewInterval = sub.interval;\n\t\t\t\t}\n\t\t\t});\n\t\t\t_self.interval = newInterval;\n\t\t\treturn newInterval;\n\t\t};\n\n\t\tPoll.prototype.request = function(){\n\t\t\tcore.request( _self.url, _self.method, _self.notify );\n\t\t};\t\n\n\t\tPoll.prototype.stop = function(){\n\t\t\tif( _self.timer ){\n\t\t\t\tclearInterval(_self.timer);\n\t\t\t}\n\t\t};\n\n\t\tPoll.prototype.start = function(){\n\t\t\t\t_self.timer = setInterval( _self.request, _self.checkInterval() );\n\t\t\t};\n\n\t\tPoll.prototype.add = function( sub ) {\n\t\t\t_self.stop();\n\t\t\t_self.subscribers.push( sub );\n\t\t\t_self.start();\n\t\t};\n\n\t\tPoll.prototype.remove = function( sub ) {\n\t\t\t_self.stop();\n\t\t\tvar index = _self.subscribers.indexOf( sub );\n\t\t\t_self.subscribers.splice( index, 1 );\n\t\t\tif( _self.subscribers.length > 0 ){\n\t\t\t\t_self.start();\n\t\t\t}\n\t\t\telse {\n\t\t\t\t_self.data = false;\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Subscriber constructor to create a Subscriber object that can be notifid of data updates from a Poll\n\t \t *  \t \t \n\t \t * @param {Object.<SubscriberObject>} config Config options to build a Subscriber\n\t \t * @param {Object.<PollObject>} config Poll object to subscribe to\n\t\t */\n\t\tvar Subscriber = function( config, poll ) {\n\n\t\t\tvar _self = this;\n\n\t\t\t_self.callback = config.callback;\n\t\t\t_self.target = config.target;\n\t\t\t_self.interval = config.interval;\n\t\t\t_self.forceCallback = config.forceCallback || false;\n\n\t\t};\n\t\t\n\t\tSubscriber.prototype.stop = function(){\n\t\t\tpoll.remove( _self );\n\t\t};\n\n\t\tSubscriber.prototype.start = function(){\n\t\t\tif( poll.subscribers.indexOf( _self ) < 0 ){\n\t\t\t\tpoll.add( _self );\n\t\t\t}\n\t\t};\n\n\t\tSubscriber.prototype.request = function(){\n\t\t\tcore.request( poll.url, \"GET\", _self.callback );\n\t\t};\n\n\t\t/**\n\t\t * @param {Object.<SubscriberObject>} config Subscriber object used to add a new subscriber, creates a new Poll if required\n\t\t */\n\t\tvar Add = function( config ) {\n\n\t\t\tcore.request( config.url, config.method, config.callback, config.target );\n\n\t\t\tif( config.interval ) {\n\n\t\t\t\tif( !polls[config.url] ) {\n\t\t\t\t\tpolls[config.url] = new Poll({\n\t\t\t\t\t\turl: config.url,\n\t\t\t\t\t\tmethod: config.method\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tvar sub = new Subscriber( config, polls[config.url] );\n\n\t\t\t\tpolls[config.url].add( sub );\n\n\t\t\t\treturn sub;\n\t\t\t}\n\t\t};\n\n\t\treturn {\n\t\t\tadd: Add\n\t\t};\n\n\t}","Poll":{"Documentation":{"description":"Poll constructor to create a Poll object that can hold subscribers and notify them of new data","tags":[{"title":"param","description":"Config options to build a Poll","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Object"},"applications":[{"type":"NameExpression","name":"PollObject"}]},"name":"config"}]},"Source":"var Poll = function( config ) {\n\t\t\t\n\t\t\tvar _self = this;\n\t\t\t_self.url = config.url;\n\t\t\t_self.method = config.method;\n\t\t\t_self.subscribers = [];\n\n\t\t}","prototype":{"dataChanged":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"}]},"Source":"Poll.prototype.dataChanged = function( data ) {\n\t\t\tvar stringIt = function( val ) {\n\t\t\t\tif ( typeof val === \"object\" ){\n\t\t\t\t\treturn JSON.stringify( val );\n\t\t\t\t}\n\t\t\t\treturn val;\n\t\t\t};\n\t\t\treturn stringIt( _self.data ) != stringIt( data );\n\t\t}","stringIt":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"val"}]},"Source":"var stringIt = function( val ) {\n\t\t\t\tif ( typeof val === \"object\" ){\n\t\t\t\t\treturn JSON.stringify( val );\n\t\t\t\t}\n\t\t\t\treturn val;\n\t\t\t}"}},"notify":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"data"},{"title":"param","description":null,"type":null,"name":"config"}]},"Source":"Poll.prototype.notify = function( data, config ){\n\t\t\t_self.subscribers.map( function( sub ){\n\t\t\t\tif( !_self.data || sub.forceCallback || _self.dataChanged(data) ){\n\t\t\t\t\tsub.callback.call( sub.target, data, config );\n\t\t\t\t}\n\t\t\t});\n\t\t\t_self.data = data;\n\t\t}"},"checkInterval":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"Poll.prototype.checkInterval = function(){\n\t\t\tvar newInterval = false;\n\t\t\t_self.subscribers.forEach( function( sub ){\n\t\t\t\tif( !newInterval || sub.interval < newInterval ) {\n\t\t\t\t\tnewInterval = sub.interval;\n\t\t\t\t}\n\t\t\t});\n\t\t\t_self.interval = newInterval;\n\t\t\treturn newInterval;\n\t\t}"},"request":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"Poll.prototype.request = function(){\n\t\t\tcore.request( _self.url, _self.method, _self.notify );\n\t\t}"},"stop":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"Poll.prototype.stop = function(){\n\t\t\tif( _self.timer ){\n\t\t\t\tclearInterval(_self.timer);\n\t\t\t}\n\t\t}"},"start":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"Poll.prototype.start = function(){\n\t\t\t\t_self.timer = setInterval( _self.request, _self.checkInterval() );\n\t\t\t}"},"add":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"sub"}]},"Source":"Poll.prototype.add = function( sub ) {\n\t\t\t_self.stop();\n\t\t\t_self.subscribers.push( sub );\n\t\t\t_self.start();\n\t\t}"},"remove":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"param","description":null,"type":null,"name":"sub"}]},"Source":"Poll.prototype.remove = function( sub ) {\n\t\t\t_self.stop();\n\t\t\tvar index = _self.subscribers.indexOf( sub );\n\t\t\t_self.subscribers.splice( index, 1 );\n\t\t\tif( _self.subscribers.length > 0 ){\n\t\t\t\t_self.start();\n\t\t\t}\n\t\t\telse {\n\t\t\t\t_self.data = false;\n\t\t\t}\n\t\t}"}}},"Subscriber":{"Documentation":{"description":"Subscriber constructor to create a Subscriber object that can be notifid of data updates from a Poll","tags":[{"title":"param","description":"Config options to build a Subscriber","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Object"},"applications":[{"type":"NameExpression","name":"SubscriberObject"}]},"name":"config"},{"title":"param","description":"Poll object to subscribe to","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Object"},"applications":[{"type":"NameExpression","name":"PollObject"}]},"name":"config"}]},"Source":"var Subscriber = function( config, poll ) {\n\n\t\t\tvar _self = this;\n\n\t\t\t_self.callback = config.callback;\n\t\t\t_self.target = config.target;\n\t\t\t_self.interval = config.interval;\n\t\t\t_self.forceCallback = config.forceCallback || false;\n\n\t\t}","prototype":{"stop":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"Subscriber.prototype.stop = function(){\n\t\t\tpoll.remove( _self );\n\t\t}"},"start":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"Subscriber.prototype.start = function(){\n\t\t\tif( poll.subscribers.indexOf( _self ) < 0 ){\n\t\t\t\tpoll.add( _self );\n\t\t\t}\n\t\t}"},"request":{"Documentation":{"description":"This Function Needs Documentation","tags":[]},"Source":"Subscriber.prototype.request = function(){\n\t\t\tcore.request( poll.url, \"GET\", _self.callback );\n\t\t}"}}},"Add":{"Documentation":{"description":"","tags":[{"title":"param","description":"Subscriber object used to add a new subscriber, creates a new Poll if required","type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Object"},"applications":[{"type":"NameExpression","name":"SubscriberObject"}]},"name":"config"}]},"Source":"var Add = function( config ) {\n\n\t\t\tcore.request( config.url, config.method, config.callback, config.target );\n\n\t\t\tif( config.interval ) {\n\n\t\t\t\tif( !polls[config.url] ) {\n\t\t\t\t\tpolls[config.url] = new Poll({\n\t\t\t\t\t\turl: config.url,\n\t\t\t\t\t\tmethod: config.method\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tvar sub = new Subscriber( config, polls[config.url] );\n\n\t\t\t\tpolls[config.url].add( sub );\n\n\t\t\t\treturn sub;\n\t\t\t}\n\t\t}"}},"request":{"Documentation":{"description":"Request Header Object:","tags":[{"title":"typedef","description":null,"type":{"type":"NameExpression","name":"Object"},"name":"RequestHeader"},{"title":"property","description":"Label for Request Header","type":{"type":"NameExpression","name":"String"},"name":"label"},{"title":"property","description":"Value of Request Header","type":{"type":"NameExpression","name":"String"},"name":"value"},{"title":"param","description":"The URL for the data request","type":{"type":"NameExpression","name":"String"},"name":"url"}]},"Source":"core.request = function( url, method, callback, target, data, headers, type ) {\n\n\t\tvar config = {\n\t\t\turl: url,\n\t\t\tmethod: method || \"GET\",\n\t\t\ttarget: target,\n\t\t\tcallback: callback,\n\t\t\tdata: data || {},\n\t\t\theaders: headers || [], \n\t\t\ttype: type || \"json\"\n\t\t};\n\n\t\tvar xhttp = new XMLHttpRequest();\n\t\txhttp.open( config.method, config.url, true );\n\t\txhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n\t\tconfig.headers.map( function( header ){\n\t\t\txhttp.setRequestHeader( header.label, header.value );\n\t\t} );\n\t\txhttp.data = config.data;\n\t\txhttp.responseType = config.type;\n\t\txhttp.onreadystatechange = function() {\n\t\t\tif ( this.readyState === 4 ) {\n\t\t\t\tif( this.status >= 200 && this.status < 400 ) {\n\t\t\t\t\tconfig.callback.call( config.target, this.response, config );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconfig.callback.call( config.target, this.status, this.statusText, config );\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\n\t\t};\n\t\txhttp.send();\n\t\txhttp = null;\n\n\t}","xhttp":{"onreadystatechange":{"Documentation":{"description":"This Function Needs Documentation","tags":[{"title":"constructor","description":null,"type":null,"name":"core.request.xhttp.onreadystatechange"}]},"Source":"xhttp.onreadystatechange = function() {\n\t\t\tif ( this.readyState === 4 ) {\n\t\t\t\tif( this.status >= 200 && this.status < 400 ) {\n\t\t\t\t\tconfig.callback.call( config.target, this.response, config );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconfig.callback.call( config.target, this.status, this.statusText, config );\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\n\t\t}"}}}}}